//
// Generated by Bluespec Compiler, version 2021.07-1-gaf77efcd (build af77efcd)
//
// On Fri May  6 14:48:24 IST 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_genKeys                    O     1
// RDY_encrypt                    O     1
// ret                            O   128 reg
// RDY_ret                        O     1
// outp_ready                     O     1 reg
// RDY_outp_ready                 O     1 const
// can_take_inp                   O     1
// RDY_can_take_inp               O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// genKeys_keyyy                  I   256
// genKeys_keyylenn               I     2
// encrypt_plaintexttt            I   128
// encrypt_keyyy                  I   256
// encrypt_decrypttt              I     1
// encrypt_keyylenn               I     2 unused
// EN_genKeys                     I     1
// EN_encrypt                     I     1
// EN_ret                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAES(CLK,
	     RST_N,

	     genKeys_keyyy,
	     genKeys_keyylenn,
	     EN_genKeys,
	     RDY_genKeys,

	     encrypt_plaintexttt,
	     encrypt_keyyy,
	     encrypt_decrypttt,
	     encrypt_keyylenn,
	     EN_encrypt,
	     RDY_encrypt,

	     EN_ret,
	     ret,
	     RDY_ret,

	     outp_ready,
	     RDY_outp_ready,

	     can_take_inp,
	     RDY_can_take_inp);
  input  CLK;
  input  RST_N;

  // action method genKeys
  input  [255 : 0] genKeys_keyyy;
  input  [1 : 0] genKeys_keyylenn;
  input  EN_genKeys;
  output RDY_genKeys;

  // action method encrypt
  input  [127 : 0] encrypt_plaintexttt;
  input  [255 : 0] encrypt_keyyy;
  input  encrypt_decrypttt;
  input  [1 : 0] encrypt_keyylenn;
  input  EN_encrypt;
  output RDY_encrypt;

  // actionvalue method ret
  input  EN_ret;
  output [127 : 0] ret;
  output RDY_ret;

  // value method outp_ready
  output outp_ready;
  output RDY_outp_ready;

  // value method can_take_inp
  output can_take_inp;
  output RDY_can_take_inp;

  // signals for module outputs
  wire [127 : 0] ret;
  wire RDY_can_take_inp,
       RDY_encrypt,
       RDY_genKeys,
       RDY_outp_ready,
       RDY_ret,
       can_take_inp,
       outp_ready;

  // register _unnamed_
  reg _unnamed_;
  wire _unnamed_$D_IN, _unnamed_$EN;

  // register ciphertext
  reg [127 : 0] ciphertext;
  wire [127 : 0] ciphertext$D_IN;
  wire ciphertext$EN;

  // register col0
  reg [31 : 0] col0;
  wire [31 : 0] col0$D_IN;
  wire col0$EN;

  // register col1
  reg [31 : 0] col1;
  wire [31 : 0] col1$D_IN;
  wire col1$EN;

  // register col2
  reg [31 : 0] col2;
  wire [31 : 0] col2$D_IN;
  wire col2$EN;

  // register col3
  reg [31 : 0] col3;
  wire [31 : 0] col3$D_IN;
  wire col3$EN;

  // register colout0
  reg [31 : 0] colout0;
  wire [31 : 0] colout0$D_IN;
  wire colout0$EN;

  // register colout1
  reg [31 : 0] colout1;
  wire [31 : 0] colout1$D_IN;
  wire colout1$EN;

  // register colout2
  reg [31 : 0] colout2;
  wire [31 : 0] colout2$D_IN;
  wire colout2$EN;

  // register colout3
  reg [31 : 0] colout3;
  wire [31 : 0] colout3$D_IN;
  wire colout3$EN;

  // register counter
  reg [3 : 0] counter;
  wire [3 : 0] counter$D_IN;
  wire counter$EN;

  // register decrypt
  reg decrypt;
  wire decrypt$D_IN, decrypt$EN;

  // register dr_c0_col_in
  reg [31 : 0] dr_c0_col_in;
  wire [31 : 0] dr_c0_col_in$D_IN;
  wire dr_c0_col_in$EN;

  // register dr_c1_col_in
  reg [31 : 0] dr_c1_col_in;
  wire [31 : 0] dr_c1_col_in$D_IN;
  wire dr_c1_col_in$EN;

  // register dr_c2_col_in
  reg [31 : 0] dr_c2_col_in;
  wire [31 : 0] dr_c2_col_in$D_IN;
  wire dr_c2_col_in$EN;

  // register dr_c3_col_in
  reg [31 : 0] dr_c3_col_in;
  wire [31 : 0] dr_c3_col_in$D_IN;
  wire dr_c3_col_in$EN;

  // register dr_col__0
  reg [7 : 0] dr_col__0;
  wire [7 : 0] dr_col__0$D_IN;
  wire dr_col__0$EN;

  // register dr_col__1
  reg [7 : 0] dr_col__1;
  wire [7 : 0] dr_col__1$D_IN;
  wire dr_col__1$EN;

  // register dr_col__10
  reg [7 : 0] dr_col__10;
  wire [7 : 0] dr_col__10$D_IN;
  wire dr_col__10$EN;

  // register dr_col__11
  reg [7 : 0] dr_col__11;
  wire [7 : 0] dr_col__11$D_IN;
  wire dr_col__11$EN;

  // register dr_col__12
  reg [7 : 0] dr_col__12;
  wire [7 : 0] dr_col__12$D_IN;
  wire dr_col__12$EN;

  // register dr_col__13
  reg [7 : 0] dr_col__13;
  wire [7 : 0] dr_col__13$D_IN;
  wire dr_col__13$EN;

  // register dr_col__14
  reg [7 : 0] dr_col__14;
  wire [7 : 0] dr_col__14$D_IN;
  wire dr_col__14$EN;

  // register dr_col__15
  reg [7 : 0] dr_col__15;
  wire [7 : 0] dr_col__15$D_IN;
  wire dr_col__15$EN;

  // register dr_col__2
  reg [7 : 0] dr_col__2;
  wire [7 : 0] dr_col__2$D_IN;
  wire dr_col__2$EN;

  // register dr_col__3
  reg [7 : 0] dr_col__3;
  wire [7 : 0] dr_col__3$D_IN;
  wire dr_col__3$EN;

  // register dr_col__4
  reg [7 : 0] dr_col__4;
  wire [7 : 0] dr_col__4$D_IN;
  wire dr_col__4$EN;

  // register dr_col__5
  reg [7 : 0] dr_col__5;
  wire [7 : 0] dr_col__5$D_IN;
  wire dr_col__5$EN;

  // register dr_col__6
  reg [7 : 0] dr_col__6;
  wire [7 : 0] dr_col__6$D_IN;
  wire dr_col__6$EN;

  // register dr_col__7
  reg [7 : 0] dr_col__7;
  wire [7 : 0] dr_col__7$D_IN;
  wire dr_col__7$EN;

  // register dr_col__8
  reg [7 : 0] dr_col__8;
  wire [7 : 0] dr_col__8$D_IN;
  wire dr_col__8$EN;

  // register dr_col__9
  reg [7 : 0] dr_col__9;
  wire [7 : 0] dr_col__9$D_IN;
  wire dr_col__9$EN;

  // register dr_colout0
  reg [31 : 0] dr_colout0;
  reg [31 : 0] dr_colout0$D_IN;
  wire dr_colout0$EN;

  // register dr_colout1
  reg [31 : 0] dr_colout1;
  reg [31 : 0] dr_colout1$D_IN;
  wire dr_colout1$EN;

  // register dr_colout2
  reg [31 : 0] dr_colout2;
  reg [31 : 0] dr_colout2$D_IN;
  wire dr_colout2$EN;

  // register dr_colout3
  reg [31 : 0] dr_colout3;
  reg [31 : 0] dr_colout3$D_IN;
  wire dr_colout3$EN;

  // register dr_counter
  reg [7 : 0] dr_counter;
  wire [7 : 0] dr_counter$D_IN;
  wire dr_counter$EN;

  // register dr_decrypt
  reg dr_decrypt;
  wire dr_decrypt$D_IN, dr_decrypt$EN;

  // register dr_last_round
  reg dr_last_round;
  reg dr_last_round$D_IN;
  wire dr_last_round$EN;

  // register dr_new_round
  reg dr_new_round;
  wire dr_new_round$D_IN, dr_new_round$EN;

  // register dr_rg_state
  reg [3 : 0] dr_rg_state;
  wire [3 : 0] dr_rg_state$D_IN;
  wire dr_rg_state$EN;

  // register dr_round_done
  reg dr_round_done;
  wire dr_round_done$D_IN, dr_round_done$EN;

  // register dr_sboxes_out_0
  reg [7 : 0] dr_sboxes_out_0;
  wire [7 : 0] dr_sboxes_out_0$D_IN;
  wire dr_sboxes_out_0$EN;

  // register dr_sboxes_out_1
  reg [7 : 0] dr_sboxes_out_1;
  wire [7 : 0] dr_sboxes_out_1$D_IN;
  wire dr_sboxes_out_1$EN;

  // register dr_sboxes_out_10
  reg [7 : 0] dr_sboxes_out_10;
  wire [7 : 0] dr_sboxes_out_10$D_IN;
  wire dr_sboxes_out_10$EN;

  // register dr_sboxes_out_11
  reg [7 : 0] dr_sboxes_out_11;
  wire [7 : 0] dr_sboxes_out_11$D_IN;
  wire dr_sboxes_out_11$EN;

  // register dr_sboxes_out_12
  reg [7 : 0] dr_sboxes_out_12;
  wire [7 : 0] dr_sboxes_out_12$D_IN;
  wire dr_sboxes_out_12$EN;

  // register dr_sboxes_out_13
  reg [7 : 0] dr_sboxes_out_13;
  wire [7 : 0] dr_sboxes_out_13$D_IN;
  wire dr_sboxes_out_13$EN;

  // register dr_sboxes_out_14
  reg [7 : 0] dr_sboxes_out_14;
  wire [7 : 0] dr_sboxes_out_14$D_IN;
  wire dr_sboxes_out_14$EN;

  // register dr_sboxes_out_15
  reg [7 : 0] dr_sboxes_out_15;
  wire [7 : 0] dr_sboxes_out_15$D_IN;
  wire dr_sboxes_out_15$EN;

  // register dr_sboxes_out_2
  reg [7 : 0] dr_sboxes_out_2;
  wire [7 : 0] dr_sboxes_out_2$D_IN;
  wire dr_sboxes_out_2$EN;

  // register dr_sboxes_out_3
  reg [7 : 0] dr_sboxes_out_3;
  wire [7 : 0] dr_sboxes_out_3$D_IN;
  wire dr_sboxes_out_3$EN;

  // register dr_sboxes_out_4
  reg [7 : 0] dr_sboxes_out_4;
  wire [7 : 0] dr_sboxes_out_4$D_IN;
  wire dr_sboxes_out_4$EN;

  // register dr_sboxes_out_5
  reg [7 : 0] dr_sboxes_out_5;
  wire [7 : 0] dr_sboxes_out_5$D_IN;
  wire dr_sboxes_out_5$EN;

  // register dr_sboxes_out_6
  reg [7 : 0] dr_sboxes_out_6;
  wire [7 : 0] dr_sboxes_out_6$D_IN;
  wire dr_sboxes_out_6$EN;

  // register dr_sboxes_out_7
  reg [7 : 0] dr_sboxes_out_7;
  wire [7 : 0] dr_sboxes_out_7$D_IN;
  wire dr_sboxes_out_7$EN;

  // register dr_sboxes_out_8
  reg [7 : 0] dr_sboxes_out_8;
  wire [7 : 0] dr_sboxes_out_8$D_IN;
  wire dr_sboxes_out_8$EN;

  // register dr_sboxes_out_9
  reg [7 : 0] dr_sboxes_out_9;
  wire [7 : 0] dr_sboxes_out_9$D_IN;
  wire dr_sboxes_out_9$EN;

  // register dr_sub_col_0
  reg [7 : 0] dr_sub_col_0;
  wire [7 : 0] dr_sub_col_0$D_IN;
  wire dr_sub_col_0$EN;

  // register dr_sub_col_1
  reg [7 : 0] dr_sub_col_1;
  wire [7 : 0] dr_sub_col_1$D_IN;
  wire dr_sub_col_1$EN;

  // register dr_sub_col_10
  reg [7 : 0] dr_sub_col_10;
  wire [7 : 0] dr_sub_col_10$D_IN;
  wire dr_sub_col_10$EN;

  // register dr_sub_col_11
  reg [7 : 0] dr_sub_col_11;
  wire [7 : 0] dr_sub_col_11$D_IN;
  wire dr_sub_col_11$EN;

  // register dr_sub_col_12
  reg [7 : 0] dr_sub_col_12;
  wire [7 : 0] dr_sub_col_12$D_IN;
  wire dr_sub_col_12$EN;

  // register dr_sub_col_13
  reg [7 : 0] dr_sub_col_13;
  wire [7 : 0] dr_sub_col_13$D_IN;
  wire dr_sub_col_13$EN;

  // register dr_sub_col_14
  reg [7 : 0] dr_sub_col_14;
  wire [7 : 0] dr_sub_col_14$D_IN;
  wire dr_sub_col_14$EN;

  // register dr_sub_col_15
  reg [7 : 0] dr_sub_col_15;
  wire [7 : 0] dr_sub_col_15$D_IN;
  wire dr_sub_col_15$EN;

  // register dr_sub_col_2
  reg [7 : 0] dr_sub_col_2;
  wire [7 : 0] dr_sub_col_2$D_IN;
  wire dr_sub_col_2$EN;

  // register dr_sub_col_3
  reg [7 : 0] dr_sub_col_3;
  wire [7 : 0] dr_sub_col_3$D_IN;
  wire dr_sub_col_3$EN;

  // register dr_sub_col_4
  reg [7 : 0] dr_sub_col_4;
  wire [7 : 0] dr_sub_col_4$D_IN;
  wire dr_sub_col_4$EN;

  // register dr_sub_col_5
  reg [7 : 0] dr_sub_col_5;
  wire [7 : 0] dr_sub_col_5$D_IN;
  wire dr_sub_col_5$EN;

  // register dr_sub_col_6
  reg [7 : 0] dr_sub_col_6;
  wire [7 : 0] dr_sub_col_6$D_IN;
  wire dr_sub_col_6$EN;

  // register dr_sub_col_7
  reg [7 : 0] dr_sub_col_7;
  wire [7 : 0] dr_sub_col_7$D_IN;
  wire dr_sub_col_7$EN;

  // register dr_sub_col_8
  reg [7 : 0] dr_sub_col_8;
  wire [7 : 0] dr_sub_col_8$D_IN;
  wire dr_sub_col_8$EN;

  // register dr_sub_col_9
  reg [7 : 0] dr_sub_col_9;
  wire [7 : 0] dr_sub_col_9$D_IN;
  wire dr_sub_col_9$EN;

  // register key
  reg [127 : 0] key;
  wire [127 : 0] key$D_IN;
  wire key$EN;

  // register kg_aes256_subcol4
  reg [31 : 0] kg_aes256_subcol4;
  wire [31 : 0] kg_aes256_subcol4$D_IN;
  wire kg_aes256_subcol4$EN;

  // register kg_counter
  reg [3 : 0] kg_counter;
  wire [3 : 0] kg_counter$D_IN;
  wire kg_counter$EN;

  // register kg_key_length
  reg [1 : 0] kg_key_length;
  wire [1 : 0] kg_key_length$D_IN;
  wire kg_key_length$EN;

  // register kg_key_saved
  reg kg_key_saved;
  wire kg_key_saved$D_IN, kg_key_saved$EN;

  // register kg_last_col_sub_rot
  reg [31 : 0] kg_last_col_sub_rot;
  reg [31 : 0] kg_last_col_sub_rot$D_IN;
  wire kg_last_col_sub_rot$EN;

  // register kg_maxrounds
  reg [3 : 0] kg_maxrounds;
  reg [3 : 0] kg_maxrounds$D_IN;
  wire kg_maxrounds$EN;

  // register kg_prev_key0
  reg [31 : 0] kg_prev_key0;
  wire [31 : 0] kg_prev_key0$D_IN;
  wire kg_prev_key0$EN;

  // register kg_prev_key1
  reg [31 : 0] kg_prev_key1;
  wire [31 : 0] kg_prev_key1$D_IN;
  wire kg_prev_key1$EN;

  // register kg_prev_key2
  reg [31 : 0] kg_prev_key2;
  wire [31 : 0] kg_prev_key2$D_IN;
  wire kg_prev_key2$EN;

  // register kg_prev_key3
  reg [31 : 0] kg_prev_key3;
  wire [31 : 0] kg_prev_key3$D_IN;
  wire kg_prev_key3$EN;

  // register kg_prev_key4
  reg [31 : 0] kg_prev_key4;
  wire [31 : 0] kg_prev_key4$D_IN;
  wire kg_prev_key4$EN;

  // register kg_prev_key5
  reg [31 : 0] kg_prev_key5;
  wire [31 : 0] kg_prev_key5$D_IN;
  wire kg_prev_key5$EN;

  // register kg_prev_key6
  reg [31 : 0] kg_prev_key6;
  wire [31 : 0] kg_prev_key6$D_IN;
  wire kg_prev_key6$EN;

  // register kg_prev_key7
  reg [31 : 0] kg_prev_key7;
  wire [31 : 0] kg_prev_key7$D_IN;
  wire kg_prev_key7$EN;

  // register kg_rci
  reg [3 : 0] kg_rci;
  wire [3 : 0] kg_rci$D_IN;
  wire kg_rci$EN;

  // register kg_rcon
  reg [31 : 0] kg_rcon;
  wire [31 : 0] kg_rcon$D_IN;
  wire kg_rcon$EN;

  // register kg_rg_keyreq
  reg kg_rg_keyreq;
  wire kg_rg_keyreq$D_IN, kg_rg_keyreq$EN;

  // register kg_rg_state
  reg [2 : 0] kg_rg_state;
  reg [2 : 0] kg_rg_state$D_IN;
  wire kg_rg_state$EN;

  // register kg_rg_state_key
  reg [1 : 0] kg_rg_state_key;
  wire [1 : 0] kg_rg_state_key$D_IN;
  wire kg_rg_state_key$EN;

  // register kg_rot_prev_key
  reg [31 : 0] kg_rot_prev_key;
  wire [31 : 0] kg_rot_prev_key$D_IN;
  wire kg_rot_prev_key$EN;

  // register kg_round_key_done_0
  reg kg_round_key_done_0;
  wire kg_round_key_done_0$D_IN, kg_round_key_done_0$EN;

  // register kg_round_key_done_1
  reg kg_round_key_done_1;
  wire kg_round_key_done_1$D_IN, kg_round_key_done_1$EN;

  // register kg_round_key_done_10
  reg kg_round_key_done_10;
  wire kg_round_key_done_10$D_IN, kg_round_key_done_10$EN;

  // register kg_round_key_done_11
  reg kg_round_key_done_11;
  wire kg_round_key_done_11$D_IN, kg_round_key_done_11$EN;

  // register kg_round_key_done_12
  reg kg_round_key_done_12;
  wire kg_round_key_done_12$D_IN, kg_round_key_done_12$EN;

  // register kg_round_key_done_13
  reg kg_round_key_done_13;
  wire kg_round_key_done_13$D_IN, kg_round_key_done_13$EN;

  // register kg_round_key_done_14
  reg kg_round_key_done_14;
  wire kg_round_key_done_14$D_IN, kg_round_key_done_14$EN;

  // register kg_round_key_done_2
  reg kg_round_key_done_2;
  wire kg_round_key_done_2$D_IN, kg_round_key_done_2$EN;

  // register kg_round_key_done_3
  reg kg_round_key_done_3;
  wire kg_round_key_done_3$D_IN, kg_round_key_done_3$EN;

  // register kg_round_key_done_4
  reg kg_round_key_done_4;
  wire kg_round_key_done_4$D_IN, kg_round_key_done_4$EN;

  // register kg_round_key_done_5
  reg kg_round_key_done_5;
  wire kg_round_key_done_5$D_IN, kg_round_key_done_5$EN;

  // register kg_round_key_done_6
  reg kg_round_key_done_6;
  wire kg_round_key_done_6$D_IN, kg_round_key_done_6$EN;

  // register kg_round_key_done_7
  reg kg_round_key_done_7;
  wire kg_round_key_done_7$D_IN, kg_round_key_done_7$EN;

  // register kg_round_key_done_8
  reg kg_round_key_done_8;
  wire kg_round_key_done_8$D_IN, kg_round_key_done_8$EN;

  // register kg_round_key_done_9
  reg kg_round_key_done_9;
  wire kg_round_key_done_9$D_IN, kg_round_key_done_9$EN;

  // register kg_round_number
  reg [3 : 0] kg_round_number;
  reg [3 : 0] kg_round_number$D_IN;
  wire kg_round_number$EN;

  // register kg_round_toggle_192
  reg kg_round_toggle_192;
  wire kg_round_toggle_192$D_IN, kg_round_toggle_192$EN;

  // register kg_sbox_out
  reg [7 : 0] kg_sbox_out;
  wire [7 : 0] kg_sbox_out$D_IN;
  wire kg_sbox_out$EN;

  // register kg_temp_key0
  reg [31 : 0] kg_temp_key0;
  wire [31 : 0] kg_temp_key0$D_IN;
  wire kg_temp_key0$EN;

  // register kg_temp_key1
  reg [31 : 0] kg_temp_key1;
  wire [31 : 0] kg_temp_key1$D_IN;
  wire kg_temp_key1$EN;

  // register kg_temp_key2
  reg [31 : 0] kg_temp_key2;
  wire [31 : 0] kg_temp_key2$D_IN;
  wire kg_temp_key2$EN;

  // register kg_temp_key3
  reg [31 : 0] kg_temp_key3;
  wire [31 : 0] kg_temp_key3$D_IN;
  wire kg_temp_key3$EN;

  // register maxround
  reg [3 : 0] maxround;
  reg [3 : 0] maxround$D_IN;
  wire maxround$EN;

  // register new_round
  reg new_round;
  wire new_round$D_IN, new_round$EN;

  // register plaintext
  reg [127 : 0] plaintext;
  wire [127 : 0] plaintext$D_IN;
  wire plaintext$EN;

  // register rg_state
  reg [2 : 0] rg_state;
  reg [2 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_state2
  reg rg_state2;
  wire rg_state2$D_IN, rg_state2$EN;

  // ports of submodule kg_rcongen
  wire [7 : 0] kg_rcongen$read;
  wire [3 : 0] kg_rcongen$read_addr;

  // ports of submodule kg_save_key0
  reg [31 : 0] kg_save_key0$DI;
  reg [3 : 0] kg_save_key0$ADDR;
  wire [31 : 0] kg_save_key0$DO;
  wire kg_save_key0$EN, kg_save_key0$WE;

  // ports of submodule kg_save_key1
  reg [31 : 0] kg_save_key1$DI;
  reg [3 : 0] kg_save_key1$ADDR;
  wire [31 : 0] kg_save_key1$DO;
  wire kg_save_key1$EN, kg_save_key1$WE;

  // ports of submodule kg_save_key2
  reg [31 : 0] kg_save_key2$DI;
  reg [3 : 0] kg_save_key2$ADDR;
  wire [31 : 0] kg_save_key2$DO;
  wire kg_save_key2$EN, kg_save_key2$WE;

  // ports of submodule kg_save_key3
  reg [31 : 0] kg_save_key3$DI;
  reg [3 : 0] kg_save_key3$ADDR;
  wire [31 : 0] kg_save_key3$DO;
  wire kg_save_key3$EN, kg_save_key3$WE;

  // ports of submodule sboxes_0
  reg [7 : 0] sboxes_0$getbyte_byte_in;
  reg sboxes_0$getbyte_decrypt_;
  wire [7 : 0] sboxes_0$getbyte;
  wire sboxes_0$EN_getbyte;

  // ports of submodule sboxes_1
  wire [7 : 0] sboxes_1$getbyte, sboxes_1$getbyte_byte_in;
  wire sboxes_1$EN_getbyte, sboxes_1$getbyte_decrypt_;

  // ports of submodule sboxes_10
  wire [7 : 0] sboxes_10$getbyte, sboxes_10$getbyte_byte_in;
  wire sboxes_10$EN_getbyte, sboxes_10$getbyte_decrypt_;

  // ports of submodule sboxes_11
  wire [7 : 0] sboxes_11$getbyte, sboxes_11$getbyte_byte_in;
  wire sboxes_11$EN_getbyte, sboxes_11$getbyte_decrypt_;

  // ports of submodule sboxes_12
  wire [7 : 0] sboxes_12$getbyte, sboxes_12$getbyte_byte_in;
  wire sboxes_12$EN_getbyte, sboxes_12$getbyte_decrypt_;

  // ports of submodule sboxes_13
  wire [7 : 0] sboxes_13$getbyte, sboxes_13$getbyte_byte_in;
  wire sboxes_13$EN_getbyte, sboxes_13$getbyte_decrypt_;

  // ports of submodule sboxes_14
  wire [7 : 0] sboxes_14$getbyte, sboxes_14$getbyte_byte_in;
  wire sboxes_14$EN_getbyte, sboxes_14$getbyte_decrypt_;

  // ports of submodule sboxes_15
  wire [7 : 0] sboxes_15$getbyte, sboxes_15$getbyte_byte_in;
  wire sboxes_15$EN_getbyte, sboxes_15$getbyte_decrypt_;

  // ports of submodule sboxes_2
  wire [7 : 0] sboxes_2$getbyte, sboxes_2$getbyte_byte_in;
  wire sboxes_2$EN_getbyte, sboxes_2$getbyte_decrypt_;

  // ports of submodule sboxes_3
  wire [7 : 0] sboxes_3$getbyte, sboxes_3$getbyte_byte_in;
  wire sboxes_3$EN_getbyte, sboxes_3$getbyte_decrypt_;

  // ports of submodule sboxes_4
  wire [7 : 0] sboxes_4$getbyte, sboxes_4$getbyte_byte_in;
  wire sboxes_4$EN_getbyte, sboxes_4$getbyte_decrypt_;

  // ports of submodule sboxes_5
  wire [7 : 0] sboxes_5$getbyte, sboxes_5$getbyte_byte_in;
  wire sboxes_5$EN_getbyte, sboxes_5$getbyte_decrypt_;

  // ports of submodule sboxes_6
  wire [7 : 0] sboxes_6$getbyte, sboxes_6$getbyte_byte_in;
  wire sboxes_6$EN_getbyte, sboxes_6$getbyte_decrypt_;

  // ports of submodule sboxes_7
  wire [7 : 0] sboxes_7$getbyte, sboxes_7$getbyte_byte_in;
  wire sboxes_7$EN_getbyte, sboxes_7$getbyte_decrypt_;

  // ports of submodule sboxes_8
  wire [7 : 0] sboxes_8$getbyte, sboxes_8$getbyte_byte_in;
  wire sboxes_8$EN_getbyte, sboxes_8$getbyte_decrypt_;

  // ports of submodule sboxes_9
  wire [7 : 0] sboxes_9$getbyte, sboxes_9$getbyte_byte_in;
  wire sboxes_9$EN_getbyte, sboxes_9$getbyte_decrypt_;

  // rule scheduling signals
  wire WILL_FIRE_RL_encode,
       WILL_FIRE_RL_initial_xor,
       WILL_FIRE_RL_kg_aes256subcol,
       WILL_FIRE_RL_kg_roundKey,
       WILL_FIRE_RL_kg_roundKey2,
       WILL_FIRE_RL_kg_round_start,
       WILL_FIRE_RL_kg_round_start2,
       WILL_FIRE_RL_kg_subKey,
       WILL_FIRE_RL_rl_temp;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_kg_aes256_subcol4$write_1__VAL_2,
	       MUX_kg_prev_key0$write_1__VAL_2,
	       MUX_kg_prev_key1$write_1__VAL_2,
	       MUX_kg_prev_key2$write_1__VAL_2,
	       MUX_kg_prev_key3$write_1__VAL_2,
	       MUX_kg_rot_prev_key$write_1__VAL_1,
	       MUX_kg_rot_prev_key$write_1__VAL_2,
	       MUX_kg_save_key0$put_3__VAL_3,
	       MUX_kg_save_key2$put_3__VAL_2,
	       MUX_kg_save_key3$put_3__VAL_2;
  reg [7 : 0] MUX_kg_sbox_out$write_1__VAL_3,
	      MUX_sboxes_0$getbyte_1__VAL_1,
	      MUX_sboxes_0$getbyte_1__VAL_3,
	      MUX_sboxes_0$getbyte_1__VAL_5,
	      MUX_sboxes_0$getbyte_1__VAL_6;
  reg [3 : 0] MUX_kg_round_number$write_1__VAL_3;
  reg MUX_sboxes_0$getbyte_2__VAL_5;
  wire [31 : 0] MUX_col0$write_1__VAL_1,
		MUX_col0$write_1__VAL_2,
		MUX_col1$write_1__VAL_1,
		MUX_col1$write_1__VAL_2,
		MUX_col2$write_1__VAL_1,
		MUX_col2$write_1__VAL_2,
		MUX_col3$write_1__VAL_1,
		MUX_col3$write_1__VAL_2,
		MUX_dr_colout0$write_1__VAL_2,
		MUX_dr_colout0$write_1__VAL_3,
		MUX_dr_colout1$write_1__VAL_2,
		MUX_dr_colout1$write_1__VAL_3,
		MUX_dr_colout2$write_1__VAL_2,
		MUX_dr_colout2$write_1__VAL_3,
		MUX_dr_colout3$write_1__VAL_2,
		MUX_dr_colout3$write_1__VAL_3,
		MUX_kg_prev_key4$write_1__VAL_2,
		MUX_kg_prev_key5$write_1__VAL_2,
		MUX_kg_save_key1$put_3__VAL_3,
		MUX_kg_save_key2$put_3__VAL_3,
		MUX_kg_save_key3$put_3__VAL_3;
  wire [7 : 0] MUX_sboxes_0$getbyte_1__VAL_4,
	       MUX_sboxes_1$getbyte_1__VAL_2,
	       MUX_sboxes_10$getbyte_1__VAL_2,
	       MUX_sboxes_11$getbyte_1__VAL_2,
	       MUX_sboxes_12$getbyte_1__VAL_2,
	       MUX_sboxes_13$getbyte_1__VAL_2,
	       MUX_sboxes_14$getbyte_1__VAL_2,
	       MUX_sboxes_15$getbyte_1__VAL_2,
	       MUX_sboxes_2$getbyte_1__VAL_2,
	       MUX_sboxes_3$getbyte_1__VAL_2,
	       MUX_sboxes_4$getbyte_1__VAL_2,
	       MUX_sboxes_5$getbyte_1__VAL_2,
	       MUX_sboxes_6$getbyte_1__VAL_2,
	       MUX_sboxes_7$getbyte_1__VAL_2,
	       MUX_sboxes_8$getbyte_1__VAL_2,
	       MUX_sboxes_9$getbyte_1__VAL_2;
  wire [3 : 0] MUX_counter$write_1__VAL_1,
	       MUX_kg_counter$write_1__VAL_1,
	       MUX_kg_rci$write_1__VAL_1,
	       MUX_kg_round_number$write_1__VAL_2,
	       MUX_kg_save_key0$put_2__VAL_4,
	       MUX_kg_save_key0$put_2__VAL_5,
	       MUX_kg_save_key0$put_2__VAL_6,
	       MUX_kg_save_key0$put_2__VAL_7;
  wire [2 : 0] MUX_kg_rg_state$write_1__VAL_1,
	       MUX_kg_rg_state$write_1__VAL_3,
	       MUX_kg_rg_state$write_1__VAL_4,
	       MUX_rg_state$write_1__VAL_2;
  wire MUX__unnamed_$write_1__SEL_1,
       MUX_dr_colout0$write_1__SEL_1,
       MUX_dr_colout0$write_1__SEL_2,
       MUX_dr_last_round$write_1__VAL_2,
       MUX_kg_aes256_subcol4$write_1__SEL_1,
       MUX_kg_counter$write_1__SEL_1,
       MUX_kg_counter$write_1__SEL_2,
       MUX_kg_key_saved$write_1__SEL_2,
       MUX_kg_prev_key0$write_1__SEL_1,
       MUX_kg_prev_key0$write_1__SEL_2,
       MUX_kg_rci$write_1__SEL_1,
       MUX_kg_rg_state$write_1__SEL_2,
       MUX_kg_rg_state$write_1__SEL_3,
       MUX_kg_rg_state$write_1__SEL_4,
       MUX_kg_rot_prev_key$write_1__SEL_1,
       MUX_kg_rot_prev_key$write_1__SEL_2,
       MUX_kg_round_key_done_1$write_1__SEL_1,
       MUX_kg_round_number$write_1__SEL_1,
       MUX_kg_round_number$write_1__SEL_2,
       MUX_kg_round_toggle_192$write_1__SEL_1,
       MUX_kg_save_key0$put_1__SEL_1,
       MUX_kg_save_key0$put_1__SEL_2,
       MUX_kg_save_key2$put_1__SEL_2,
       MUX_kg_save_key2$put_1__SEL_3,
       MUX_kg_sbox_out$write_1__SEL_4,
       MUX_sboxes_0$getbyte_1__SEL_5,
       MUX_sboxes_0$getbyte_1__SEL_6;

  // remaining internal signals
  reg [2 : 0] CASE_kg_key_length_1_2_2_IF_kg_round_number_1__ETC__q1;
  reg SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992;
  wire [31 : 0] _theResult____h8662,
		key0__h7795,
		key1__h7796,
		key2__h7797,
		key3__h7798,
		key4___1__h8756,
		key4__h8661,
		key5__h8663,
		key6__h8664,
		key7__h8665,
		temp_col__h6675,
		x__h10067,
		x__h10711,
		x__h11381,
		x__h187157,
		x__h192455,
		x__h197744,
		x__h198026,
		x__h198093,
		x__h198151,
		x__h212904,
		x__h212990,
		x__h213067,
		x__h222687,
		x__h222706,
		x__h223302,
		x__h223388,
		x__h223862,
		x__h5200,
		x__h5419,
		x__h5753,
		x__h577620,
		x__h5897,
		x__h594044,
		x__h594063,
		x__h594306,
		x__h594373,
		x__h599698,
		x__h602008,
		x__h602109,
		x__h602181,
		x__h602253,
		x__h6112,
		x__h6327,
		x__h6542,
		x__h6719,
		x__h6720,
		x__h6722,
		x__h7021,
		x__h7211,
		x__h7405,
		x__h7599;
  wire [7 : 0] eight__h229073,
	       eight__h229229,
	       eight__h229350,
	       eight__h229470,
	       eight__h231512,
	       eight__h231668,
	       eight__h231789,
	       eight__h231909,
	       eight__h233951,
	       eight__h234107,
	       eight__h234228,
	       eight__h234348,
	       eight__h569790,
	       eight__h569912,
	       eight__h570033,
	       eight__h570144,
	       four__h229072,
	       four__h229349,
	       four__h229729,
	       four__h229971,
	       four__h231511,
	       four__h231788,
	       four__h232168,
	       four__h232410,
	       four__h233950,
	       four__h234227,
	       four__h234607,
	       four__h234849,
	       four__h569270,
	       four__h569502,
	       four__h569911,
	       four__h570143,
	       spliced_bits__h228682,
	       spliced_bits__h228710,
	       spliced_bits__h228738,
	       spliced_bits__h228766,
	       spliced_bits__h231121,
	       spliced_bits__h231149,
	       spliced_bits__h231177,
	       spliced_bits__h231205,
	       spliced_bits__h233560,
	       spliced_bits__h233588,
	       spliced_bits__h233616,
	       spliced_bits__h233644,
	       spliced_bits__h567809,
	       spliced_bits__h567837,
	       spliced_bits__h567865,
	       spliced_bits__h567893,
	       spliced_bits__h577643,
	       spliced_bits__h577671,
	       spliced_bits__h577699,
	       spliced_bits__h577727,
	       spliced_bits__h583451,
	       spliced_bits__h583479,
	       spliced_bits__h583507,
	       spliced_bits__h583535,
	       spliced_bits__h588749,
	       spliced_bits__h588777,
	       spliced_bits__h588805,
	       spliced_bits__h588833,
	       spliced_bits__h5917,
	       spliced_bits__h594435,
	       spliced_bits__h594463,
	       spliced_bits__h594491,
	       spliced_bits__h594519,
	       spliced_bits__h6132,
	       spliced_bits__h6347,
	       spliced_bits__h6562,
	       two__h229071,
	       two__h229227,
	       two__h229849,
	       two__h230485,
	       two__h231510,
	       two__h231666,
	       two__h232288,
	       two__h232924,
	       two__h233949,
	       two__h234105,
	       two__h234727,
	       two__h235363,
	       two__h568860,
	       two__h569501,
	       two__h569788,
	       two__h570142,
	       x__h228827,
	       x__h228829,
	       x__h228831,
	       x__h229084,
	       x__h229240,
	       x__h229361,
	       x__h229602,
	       x__h229604,
	       x__h229606,
	       x__h229741,
	       x__h229862,
	       x__h229983,
	       x__h230117,
	       x__h230119,
	       x__h230121,
	       x__h230498,
	       x__h230632,
	       x__h230634,
	       x__h230636,
	       x__h230662,
	       x__h231266,
	       x__h231268,
	       x__h231270,
	       x__h231523,
	       x__h231679,
	       x__h231800,
	       x__h232041,
	       x__h232043,
	       x__h232045,
	       x__h232180,
	       x__h232301,
	       x__h232422,
	       x__h232556,
	       x__h232558,
	       x__h232560,
	       x__h232937,
	       x__h233071,
	       x__h233073,
	       x__h233075,
	       x__h233101,
	       x__h233705,
	       x__h233707,
	       x__h233709,
	       x__h233962,
	       x__h234118,
	       x__h234239,
	       x__h234480,
	       x__h234482,
	       x__h234484,
	       x__h234619,
	       x__h234740,
	       x__h234861,
	       x__h234995,
	       x__h234997,
	       x__h234999,
	       x__h235376,
	       x__h235510,
	       x__h235512,
	       x__h235514,
	       x__h235540,
	       x__h567954,
	       x__h567956,
	       x__h567958,
	       x__h568368,
	       x__h568733,
	       x__h568735,
	       x__h568737,
	       x__h568995,
	       x__h569252,
	       x__h569254,
	       x__h569256,
	       x__h569282,
	       x__h569514,
	       x__h569636,
	       x__h569771,
	       x__h569773,
	       x__h569775,
	       x__h569801,
	       x__h569923,
	       x__h570155,
	       y__h228828,
	       y__h228830,
	       y__h228832,
	       y__h229603,
	       y__h229605,
	       y__h229607,
	       y__h230118,
	       y__h230120,
	       y__h230122,
	       y__h230633,
	       y__h230635,
	       y__h230637,
	       y__h231267,
	       y__h231269,
	       y__h231271,
	       y__h232042,
	       y__h232044,
	       y__h232046,
	       y__h232557,
	       y__h232559,
	       y__h232561,
	       y__h233072,
	       y__h233074,
	       y__h233076,
	       y__h233706,
	       y__h233708,
	       y__h233710,
	       y__h234481,
	       y__h234483,
	       y__h234485,
	       y__h234996,
	       y__h234998,
	       y__h235000,
	       y__h235511,
	       y__h235513,
	       y__h235515,
	       y__h567955,
	       y__h567957,
	       y__h567959,
	       y__h568734,
	       y__h568736,
	       y__h568738,
	       y__h569253,
	       y__h569255,
	       y__h569257,
	       y__h569772,
	       y__h569774,
	       y__h569776;
  wire [3 : 0] getKeynum3__h411872,
	       roundnumber__h213885,
	       sboxes_0_getbyte_4_BIT_2_94_XOR_sboxes_0_getby_ETC___d540,
	       sboxes_10_getbyte_41_BIT_2_80_XOR_sboxes_10_ge_ETC___d455,
	       sboxes_11_getbyte_45_BIT_2_85_XOR_sboxes_11_ge_ETC___d620,
	       sboxes_12_getbyte_55_BIT_2_01_XOR_sboxes_12_ge_ETC___d747,
	       sboxes_13_getbyte_59_BIT_2_06_XOR_sboxes_13_ge_ETC___d912,
	       sboxes_14_getbyte_61_BIT_2_001_XOR_sboxes_14_g_ETC___d1076,
	       sboxes_15_getbyte_39_BIT_2_78_XOR_sboxes_15_ge_ETC___d413,
	       sboxes_1_getbyte_52_BIT_2_99_XOR_sboxes_1_getb_ETC___d705,
	       sboxes_2_getbyte_54_BIT_2_94_XOR_sboxes_2_getb_ETC___d869,
	       sboxes_3_getbyte_59_BIT_2_99_XOR_sboxes_3_getb_ETC___d1034,
	       sboxes_4_getbyte_69_BIT_2_015_XOR_sboxes_4_get_ETC___d1161,
	       sboxes_5_getbyte_46_BIT_2_92_XOR_sboxes_5_getb_ETC___d498,
	       sboxes_6_getbyte_47_BIT_2_87_XOR_sboxes_6_getb_ETC___d662,
	       sboxes_7_getbyte_52_BIT_2_92_XOR_sboxes_7_getb_ETC___d827,
	       sboxes_8_getbyte_62_BIT_2_08_XOR_sboxes_8_getb_ETC___d954,
	       sboxes_9_getbyte_66_BIT_2_013_XOR_sboxes_9_get_ETC___d1119,
	       x__h10783,
	       x__h11104,
	       x__h411914,
	       y__h213973;
  wire _dfoo100,
       _dfoo102,
       _dfoo104,
       _dfoo106,
       _dfoo108,
       _dfoo110,
       _dfoo112,
       _dfoo114,
       _dfoo116,
       _dfoo118,
       _dfoo120,
       _dfoo122,
       _dfoo124,
       _dfoo126,
       _dfoo128,
       _dfoo130,
       _dfoo132,
       _dfoo134,
       _dfoo136,
       _dfoo138,
       _dfoo140,
       _dfoo142,
       _dfoo144,
       _dfoo146,
       _dfoo148,
       _dfoo15,
       _dfoo150,
       _dfoo152,
       _dfoo154,
       _dfoo156,
       _dfoo31,
       _dfoo36,
       _dfoo38,
       _dfoo40,
       _dfoo42,
       _dfoo44,
       _dfoo46,
       _dfoo48,
       _dfoo50,
       _dfoo52,
       _dfoo54,
       _dfoo56,
       _dfoo58,
       _dfoo60,
       _dfoo62,
       _dfoo64,
       _dfoo66,
       _dfoo68,
       _dfoo70,
       _dfoo72,
       _dfoo74,
       _dfoo76,
       _dfoo78,
       _dfoo80,
       _dfoo82,
       _dfoo84,
       _dfoo86,
       _dfoo88,
       _dfoo90,
       _dfoo92,
       _dfoo94,
       _dfoo96,
       _dfoo98,
       counter_199_EQ_maxround_19_MINUS_1_20___d1212,
       counter_199_EQ_maxround_19___d1200,
       kg_round_number_1_EQ_kg_maxrounds_2___d73,
       kg_round_number_1_ULE_kg_maxrounds_2_04_AND_kg_ETC___d112,
       kg_round_number_1_ULE_kg_maxrounds_2_04_AND_kg_ETC___d182,
       kg_round_number_1_ULE_kg_maxrounds_2_04_AND_kg_ETC___d189,
       kg_round_number_1_ULE_kg_maxrounds_2___d104,
       x__h577905,
       x__h577907,
       x__h577909,
       x__h578640,
       x__h578642,
       x__h578644,
       x__h578755,
       x__h578757,
       x__h578759,
       x__h578870,
       x__h578872,
       x__h578874,
       x__h578876,
       x__h578878,
       x__h579028,
       x__h579030,
       x__h579032,
       x__h579034,
       x__h579036,
       x__h579186,
       x__h579188,
       x__h579190,
       x__h579301,
       x__h579303,
       x__h579305,
       x__h579307,
       x__h579309,
       x__h579459,
       x__h579461,
       x__h579463,
       x__h579721,
       x__h579723,
       x__h579725,
       x__h579912,
       x__h579914,
       x__h579916,
       x__h580027,
       x__h580029,
       x__h580031,
       x__h580142,
       x__h580144,
       x__h580146,
       x__h580148,
       x__h580150,
       x__h580299,
       x__h580301,
       x__h580303,
       x__h580305,
       x__h580307,
       x__h580456,
       x__h580458,
       x__h580460,
       x__h580571,
       x__h580573,
       x__h580575,
       x__h580577,
       x__h580579,
       x__h580728,
       x__h580730,
       x__h580732,
       x__h580992,
       x__h580994,
       x__h580996,
       x__h581183,
       x__h581185,
       x__h581187,
       x__h581298,
       x__h581300,
       x__h581302,
       x__h581413,
       x__h581415,
       x__h581417,
       x__h581419,
       x__h581421,
       x__h581570,
       x__h581572,
       x__h581574,
       x__h581576,
       x__h581578,
       x__h581727,
       x__h581729,
       x__h581731,
       x__h581842,
       x__h581844,
       x__h581846,
       x__h581848,
       x__h581850,
       x__h581999,
       x__h582001,
       x__h582003,
       x__h582263,
       x__h582265,
       x__h582267,
       x__h582455,
       x__h582457,
       x__h582459,
       x__h582571,
       x__h582573,
       x__h582575,
       x__h582687,
       x__h582689,
       x__h582691,
       x__h582693,
       x__h582695,
       x__h582846,
       x__h582848,
       x__h582850,
       x__h582852,
       x__h582854,
       x__h583005,
       x__h583007,
       x__h583009,
       x__h583121,
       x__h583123,
       x__h583125,
       x__h583127,
       x__h583129,
       x__h583280,
       x__h583282,
       x__h583284,
       x__h583713,
       x__h583715,
       x__h583717,
       x__h583938,
       x__h583940,
       x__h583942,
       x__h584053,
       x__h584055,
       x__h584057,
       x__h584168,
       x__h584170,
       x__h584172,
       x__h584174,
       x__h584176,
       x__h584326,
       x__h584328,
       x__h584330,
       x__h584332,
       x__h584334,
       x__h584484,
       x__h584486,
       x__h584488,
       x__h584599,
       x__h584601,
       x__h584603,
       x__h584605,
       x__h584607,
       x__h584757,
       x__h584759,
       x__h584761,
       x__h585019,
       x__h585021,
       x__h585023,
       x__h585210,
       x__h585212,
       x__h585214,
       x__h585325,
       x__h585327,
       x__h585329,
       x__h585440,
       x__h585442,
       x__h585444,
       x__h585446,
       x__h585448,
       x__h585597,
       x__h585599,
       x__h585601,
       x__h585603,
       x__h585605,
       x__h585754,
       x__h585756,
       x__h585758,
       x__h585869,
       x__h585871,
       x__h585873,
       x__h585875,
       x__h585877,
       x__h586026,
       x__h586028,
       x__h586030,
       x__h586290,
       x__h586292,
       x__h586294,
       x__h586481,
       x__h586483,
       x__h586485,
       x__h586596,
       x__h586598,
       x__h586600,
       x__h586711,
       x__h586713,
       x__h586715,
       x__h586717,
       x__h586719,
       x__h586868,
       x__h586870,
       x__h586872,
       x__h586874,
       x__h586876,
       x__h587025,
       x__h587027,
       x__h587029,
       x__h587140,
       x__h587142,
       x__h587144,
       x__h587146,
       x__h587148,
       x__h587297,
       x__h587299,
       x__h587301,
       x__h587561,
       x__h587563,
       x__h587565,
       x__h587753,
       x__h587755,
       x__h587757,
       x__h587869,
       x__h587871,
       x__h587873,
       x__h587985,
       x__h587987,
       x__h587989,
       x__h587991,
       x__h587993,
       x__h588144,
       x__h588146,
       x__h588148,
       x__h588150,
       x__h588152,
       x__h588303,
       x__h588305,
       x__h588307,
       x__h588419,
       x__h588421,
       x__h588423,
       x__h588425,
       x__h588427,
       x__h588578,
       x__h588580,
       x__h588582,
       x__h589011,
       x__h589013,
       x__h589015,
       x__h589236,
       x__h589238,
       x__h589240,
       x__h589351,
       x__h589353,
       x__h589355,
       x__h589466,
       x__h589468,
       x__h589470,
       x__h589472,
       x__h589474,
       x__h589624,
       x__h589626,
       x__h589628,
       x__h589630,
       x__h589632,
       x__h589782,
       x__h589784,
       x__h589786,
       x__h589897,
       x__h589899,
       x__h589901,
       x__h589903,
       x__h589905,
       x__h590055,
       x__h590057,
       x__h590059,
       x__h590317,
       x__h590319,
       x__h590321,
       x__h590508,
       x__h590510,
       x__h590512,
       x__h590623,
       x__h590625,
       x__h590627,
       x__h590738,
       x__h590740,
       x__h590742,
       x__h590744,
       x__h590746,
       x__h590895,
       x__h590897,
       x__h590899,
       x__h590901,
       x__h590903,
       x__h591052,
       x__h591054,
       x__h591056,
       x__h591167,
       x__h591169,
       x__h591171,
       x__h591173,
       x__h591175,
       x__h591324,
       x__h591326,
       x__h591328,
       x__h591588,
       x__h591590,
       x__h591592,
       x__h591779,
       x__h591781,
       x__h591783,
       x__h591894,
       x__h591896,
       x__h591898,
       x__h592009,
       x__h592011,
       x__h592013,
       x__h592015,
       x__h592017,
       x__h592166,
       x__h592168,
       x__h592170,
       x__h592172,
       x__h592174,
       x__h592323,
       x__h592325,
       x__h592327,
       x__h592438,
       x__h592440,
       x__h592442,
       x__h592444,
       x__h592446,
       x__h592595,
       x__h592597,
       x__h592599,
       x__h592859,
       x__h592861,
       x__h592863,
       x__h593051,
       x__h593053,
       x__h593055,
       x__h593167,
       x__h593169,
       x__h593171,
       x__h593283,
       x__h593285,
       x__h593287,
       x__h593289,
       x__h593291,
       x__h593442,
       x__h593444,
       x__h593446,
       x__h593448,
       x__h593450,
       x__h593601,
       x__h593603,
       x__h593605,
       x__h593717,
       x__h593719,
       x__h593721,
       x__h593723,
       x__h593725,
       x__h593876,
       x__h593878,
       x__h593880,
       x__h594697,
       x__h594699,
       x__h594701,
       x__h594922,
       x__h594924,
       x__h594926,
       x__h595037,
       x__h595039,
       x__h595041,
       x__h595152,
       x__h595154,
       x__h595156,
       x__h595158,
       x__h595160,
       x__h595310,
       x__h595312,
       x__h595314,
       x__h595316,
       x__h595318,
       x__h595468,
       x__h595470,
       x__h595472,
       x__h595583,
       x__h595585,
       x__h595587,
       x__h595589,
       x__h595591,
       x__h595741,
       x__h595743,
       x__h595745,
       x__h596003,
       x__h596005,
       x__h596007,
       x__h596194,
       x__h596196,
       x__h596198,
       x__h596309,
       x__h596311,
       x__h596313,
       x__h596424,
       x__h596426,
       x__h596428,
       x__h596430,
       x__h596432,
       x__h596581,
       x__h596583,
       x__h596585,
       x__h596587,
       x__h596589,
       x__h596738,
       x__h596740,
       x__h596742,
       x__h596853,
       x__h596855,
       x__h596857,
       x__h596859,
       x__h596861,
       x__h597010,
       x__h597012,
       x__h597014,
       x__h597274,
       x__h597276,
       x__h597278,
       x__h597465,
       x__h597467,
       x__h597469,
       x__h597580,
       x__h597582,
       x__h597584,
       x__h597695,
       x__h597697,
       x__h597699,
       x__h597701,
       x__h597703,
       x__h597852,
       x__h597854,
       x__h597856,
       x__h597858,
       x__h597860,
       x__h598009,
       x__h598011,
       x__h598013,
       x__h598124,
       x__h598126,
       x__h598128,
       x__h598130,
       x__h598132,
       x__h598281,
       x__h598283,
       x__h598285,
       x__h598545,
       x__h598547,
       x__h598549,
       x__h598737,
       x__h598739,
       x__h598741,
       x__h598853,
       x__h598855,
       x__h598857,
       x__h598969,
       x__h598971,
       x__h598973,
       x__h598975,
       x__h598977,
       x__h599128,
       x__h599130,
       x__h599132,
       x__h599134,
       x__h599136,
       x__h599287,
       x__h599289,
       x__h599291,
       x__h599403,
       x__h599405,
       x__h599407,
       x__h599409,
       x__h599411,
       x__h599562,
       x__h599564,
       x__h599566;

  // action method genKeys
  assign RDY_genKeys = kg_rg_state == 3'd0 && rg_state == 3'd0 ;

  // action method encrypt
  assign RDY_encrypt = rg_state == 3'd0 && !rg_state2 ;

  // actionvalue method ret
  assign ret = ciphertext ;
  assign RDY_ret = rg_state == 3'd2 ;

  // value method outp_ready
  assign outp_ready = _unnamed_ ;
  assign RDY_outp_ready = 1'd1 ;

  // value method can_take_inp
  assign can_take_inp = rg_state == 3'd0 ;
  assign RDY_can_take_inp = 1'd1 ;

  // submodule kg_rcongen
  mkRconRom kg_rcongen(.CLK(CLK),
		       .RST_N(RST_N),
		       .read_addr(kg_rcongen$read_addr),
		       .read(kg_rcongen$read));

  // submodule kg_save_key0
  BRAM1 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd4),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(5'd16)) kg_save_key0(.CLK(CLK),
					.ADDR(kg_save_key0$ADDR),
					.DI(kg_save_key0$DI),
					.WE(kg_save_key0$WE),
					.EN(kg_save_key0$EN),
					.DO(kg_save_key0$DO));

  // submodule kg_save_key1
  BRAM1 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd4),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(5'd16)) kg_save_key1(.CLK(CLK),
					.ADDR(kg_save_key1$ADDR),
					.DI(kg_save_key1$DI),
					.WE(kg_save_key1$WE),
					.EN(kg_save_key1$EN),
					.DO(kg_save_key1$DO));

  // submodule kg_save_key2
  BRAM1 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd4),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(5'd16)) kg_save_key2(.CLK(CLK),
					.ADDR(kg_save_key2$ADDR),
					.DI(kg_save_key2$DI),
					.WE(kg_save_key2$WE),
					.EN(kg_save_key2$EN),
					.DO(kg_save_key2$DO));

  // submodule kg_save_key3
  BRAM1 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd4),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(5'd16)) kg_save_key3(.CLK(CLK),
					.ADDR(kg_save_key3$ADDR),
					.DI(kg_save_key3$DI),
					.WE(kg_save_key3$WE),
					.EN(kg_save_key3$EN),
					.DO(kg_save_key3$DO));

  // submodule sboxes_0
  mkSbox2 sboxes_0(.CLK(CLK),
		   .getbyte_byte_in(sboxes_0$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_0$getbyte_decrypt_),
		   .EN_getbyte(sboxes_0$EN_getbyte),
		   .getbyte(sboxes_0$getbyte));

  // submodule sboxes_1
  mkSbox2 sboxes_1(.CLK(CLK),
		   .getbyte_byte_in(sboxes_1$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_1$getbyte_decrypt_),
		   .EN_getbyte(sboxes_1$EN_getbyte),
		   .getbyte(sboxes_1$getbyte));

  // submodule sboxes_10
  mkSbox2 sboxes_10(.CLK(CLK),
		    .getbyte_byte_in(sboxes_10$getbyte_byte_in),
		    .getbyte_decrypt_(sboxes_10$getbyte_decrypt_),
		    .EN_getbyte(sboxes_10$EN_getbyte),
		    .getbyte(sboxes_10$getbyte));

  // submodule sboxes_11
  mkSbox2 sboxes_11(.CLK(CLK),
		    .getbyte_byte_in(sboxes_11$getbyte_byte_in),
		    .getbyte_decrypt_(sboxes_11$getbyte_decrypt_),
		    .EN_getbyte(sboxes_11$EN_getbyte),
		    .getbyte(sboxes_11$getbyte));

  // submodule sboxes_12
  mkSbox2 sboxes_12(.CLK(CLK),
		    .getbyte_byte_in(sboxes_12$getbyte_byte_in),
		    .getbyte_decrypt_(sboxes_12$getbyte_decrypt_),
		    .EN_getbyte(sboxes_12$EN_getbyte),
		    .getbyte(sboxes_12$getbyte));

  // submodule sboxes_13
  mkSbox2 sboxes_13(.CLK(CLK),
		    .getbyte_byte_in(sboxes_13$getbyte_byte_in),
		    .getbyte_decrypt_(sboxes_13$getbyte_decrypt_),
		    .EN_getbyte(sboxes_13$EN_getbyte),
		    .getbyte(sboxes_13$getbyte));

  // submodule sboxes_14
  mkSbox2 sboxes_14(.CLK(CLK),
		    .getbyte_byte_in(sboxes_14$getbyte_byte_in),
		    .getbyte_decrypt_(sboxes_14$getbyte_decrypt_),
		    .EN_getbyte(sboxes_14$EN_getbyte),
		    .getbyte(sboxes_14$getbyte));

  // submodule sboxes_15
  mkSbox2 sboxes_15(.CLK(CLK),
		    .getbyte_byte_in(sboxes_15$getbyte_byte_in),
		    .getbyte_decrypt_(sboxes_15$getbyte_decrypt_),
		    .EN_getbyte(sboxes_15$EN_getbyte),
		    .getbyte(sboxes_15$getbyte));

  // submodule sboxes_2
  mkSbox2 sboxes_2(.CLK(CLK),
		   .getbyte_byte_in(sboxes_2$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_2$getbyte_decrypt_),
		   .EN_getbyte(sboxes_2$EN_getbyte),
		   .getbyte(sboxes_2$getbyte));

  // submodule sboxes_3
  mkSbox2 sboxes_3(.CLK(CLK),
		   .getbyte_byte_in(sboxes_3$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_3$getbyte_decrypt_),
		   .EN_getbyte(sboxes_3$EN_getbyte),
		   .getbyte(sboxes_3$getbyte));

  // submodule sboxes_4
  mkSbox2 sboxes_4(.CLK(CLK),
		   .getbyte_byte_in(sboxes_4$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_4$getbyte_decrypt_),
		   .EN_getbyte(sboxes_4$EN_getbyte),
		   .getbyte(sboxes_4$getbyte));

  // submodule sboxes_5
  mkSbox2 sboxes_5(.CLK(CLK),
		   .getbyte_byte_in(sboxes_5$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_5$getbyte_decrypt_),
		   .EN_getbyte(sboxes_5$EN_getbyte),
		   .getbyte(sboxes_5$getbyte));

  // submodule sboxes_6
  mkSbox2 sboxes_6(.CLK(CLK),
		   .getbyte_byte_in(sboxes_6$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_6$getbyte_decrypt_),
		   .EN_getbyte(sboxes_6$EN_getbyte),
		   .getbyte(sboxes_6$getbyte));

  // submodule sboxes_7
  mkSbox2 sboxes_7(.CLK(CLK),
		   .getbyte_byte_in(sboxes_7$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_7$getbyte_decrypt_),
		   .EN_getbyte(sboxes_7$EN_getbyte),
		   .getbyte(sboxes_7$getbyte));

  // submodule sboxes_8
  mkSbox2 sboxes_8(.CLK(CLK),
		   .getbyte_byte_in(sboxes_8$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_8$getbyte_decrypt_),
		   .EN_getbyte(sboxes_8$EN_getbyte),
		   .getbyte(sboxes_8$getbyte));

  // submodule sboxes_9
  mkSbox2 sboxes_9(.CLK(CLK),
		   .getbyte_byte_in(sboxes_9$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_9$getbyte_decrypt_),
		   .EN_getbyte(sboxes_9$EN_getbyte),
		   .getbyte(sboxes_9$getbyte));

  // rule RL_rl_temp
  assign WILL_FIRE_RL_rl_temp = dr_rg_state == 4'd0 && rg_state == 3'd4 ;

  // rule RL_encode
  assign WILL_FIRE_RL_encode = dr_rg_state == 4'd0 && rg_state == 3'd1 ;

  // rule RL_kg_round_start
  assign WILL_FIRE_RL_kg_round_start =
	     kg_rg_state == 3'd1 && !WILL_FIRE_RL_encode &&
	     !WILL_FIRE_RL_rl_temp &&
	     !EN_encrypt ;

  // rule RL_kg_round_start2
  assign WILL_FIRE_RL_kg_round_start2 =
	     kg_rg_state == 3'd6 && !WILL_FIRE_RL_encode &&
	     !WILL_FIRE_RL_rl_temp &&
	     !EN_encrypt ;

  // rule RL_kg_subKey
  assign WILL_FIRE_RL_kg_subKey =
	     kg_rg_state == 3'd2 && !WILL_FIRE_RL_encode &&
	     !WILL_FIRE_RL_rl_temp ;

  // rule RL_initial_xor
  assign WILL_FIRE_RL_initial_xor =
	     dr_rg_state == 4'd0 && rg_state == 3'd3 &&
	     !WILL_FIRE_RL_kg_aes256subcol &&
	     !WILL_FIRE_RL_kg_subKey &&
	     !WILL_FIRE_RL_kg_round_start2 &&
	     !WILL_FIRE_RL_kg_round_start ;

  // rule RL_kg_aes256subcol
  assign WILL_FIRE_RL_kg_aes256subcol =
	     kg_rg_state == 3'd4 && !WILL_FIRE_RL_encode &&
	     !WILL_FIRE_RL_rl_temp ;

  // rule RL_kg_roundKey
  assign WILL_FIRE_RL_kg_roundKey =
	     kg_rg_state == 3'd3 && !WILL_FIRE_RL_initial_xor &&
	     !WILL_FIRE_RL_encode &&
	     !WILL_FIRE_RL_rl_temp &&
	     !EN_encrypt ;

  // rule RL_kg_roundKey2
  assign WILL_FIRE_RL_kg_roundKey2 =
	     kg_rg_state == 3'd5 && !WILL_FIRE_RL_initial_xor &&
	     !WILL_FIRE_RL_encode &&
	     !WILL_FIRE_RL_rl_temp &&
	     !EN_encrypt ;

  // inputs to muxes for submodule ports
  assign MUX__unnamed_$write_1__SEL_1 =
	     WILL_FIRE_RL_encode && counter_199_EQ_maxround_19___d1200 ;
  assign MUX_dr_colout0$write_1__SEL_1 =
	     WILL_FIRE_RL_initial_xor && !decrypt ;
  assign MUX_dr_colout0$write_1__SEL_2 =
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ;
  assign MUX_kg_aes256_subcol4$write_1__SEL_1 =
	     WILL_FIRE_RL_kg_subKey && kg_counter == 4'd3 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ;
  assign MUX_kg_counter$write_1__SEL_1 =
	     WILL_FIRE_RL_kg_aes256subcol || WILL_FIRE_RL_kg_subKey ;
  assign MUX_kg_counter$write_1__SEL_2 =
	     WILL_FIRE_RL_kg_roundKey2 || WILL_FIRE_RL_kg_roundKey ||
	     WILL_FIRE_RL_kg_round_start ;
  assign MUX_kg_key_saved$write_1__SEL_2 =
	     WILL_FIRE_RL_kg_roundKey2 &&
	     (kg_key_length == 2'd2 &&
	      kg_round_number_1_EQ_kg_maxrounds_2___d73 ||
	      !kg_round_number_1_ULE_kg_maxrounds_2___d104) ;
  assign MUX_kg_prev_key0$write_1__SEL_1 =
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 ;
  assign MUX_kg_prev_key0$write_1__SEL_2 =
	     EN_genKeys &&
	     (genKeys_keyylenn == 2'd0 || genKeys_keyylenn == 2'd1 ||
	      genKeys_keyylenn == 2'd2) ;
  assign MUX_kg_rci$write_1__SEL_1 =
	     WILL_FIRE_RL_kg_subKey && kg_counter == 4'd3 ;
  assign MUX_kg_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_kg_aes256subcol && kg_counter == 4'd7 ;
  assign MUX_kg_rg_state$write_1__SEL_3 =
	     WILL_FIRE_RL_kg_roundKey &&
	     (kg_key_length == 2'd0 || kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2 ||
	      !kg_round_number_1_ULE_kg_maxrounds_2___d104) ;
  assign MUX_kg_rg_state$write_1__SEL_4 =
	     WILL_FIRE_RL_kg_roundKey2 &&
	     (kg_key_length == 2'd1 || kg_key_length == 2'd2 ||
	      kg_key_length == 2'd0 ||
	      !kg_round_number_1_ULE_kg_maxrounds_2___d104) ;
  assign MUX_kg_rot_prev_key$write_1__SEL_1 =
	     WILL_FIRE_RL_kg_round_start2 &&
	     (kg_key_length == 2'd0 || kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2) ;
  assign MUX_kg_rot_prev_key$write_1__SEL_2 =
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2_04_AND_kg_ETC___d189 ;
  assign MUX_kg_round_key_done_1$write_1__SEL_1 =
	     WILL_FIRE_RL_kg_round_start2 && kg_key_length == 2'd2 ;
  assign MUX_kg_round_number$write_1__SEL_1 =
	     WILL_FIRE_RL_kg_roundKey &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd0 ;
  assign MUX_kg_round_number$write_1__SEL_2 =
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     (kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2 &&
	      !kg_round_number_1_EQ_kg_maxrounds_2___d73) ;
  assign MUX_kg_round_toggle_192$write_1__SEL_1 =
	     WILL_FIRE_RL_kg_round_start2 && kg_key_length == 2'd1 ;
  assign MUX_kg_save_key0$put_1__SEL_1 =
	     WILL_FIRE_RL_kg_round_start2 &&
	     (kg_key_length == 2'd1 || kg_key_length == 2'd2) ;
  assign MUX_kg_save_key0$put_1__SEL_2 =
	     WILL_FIRE_RL_kg_roundKey &&
	     kg_round_number_1_ULE_kg_maxrounds_2_04_AND_kg_ETC___d112 ;
  assign MUX_kg_save_key2$put_1__SEL_2 =
	     WILL_FIRE_RL_kg_roundKey &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     (kg_key_length == 2'd0 || kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2) ;
  assign MUX_kg_save_key2$put_1__SEL_3 =
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2_04_AND_kg_ETC___d182 ;
  assign MUX_kg_sbox_out$write_1__SEL_4 =
	     WILL_FIRE_RL_kg_aes256subcol && _dfoo31 ;
  assign MUX_sboxes_0$getbyte_1__SEL_5 = WILL_FIRE_RL_kg_subKey && _dfoo15 ;
  assign MUX_sboxes_0$getbyte_1__SEL_6 =
	     WILL_FIRE_RL_kg_aes256subcol && _dfoo31 ;
  assign MUX_col0$write_1__VAL_1 = col0 ^ kg_save_key0$DO ;
  assign MUX_col0$write_1__VAL_2 =
	     encrypt_decrypttt ? encrypt_plaintexttt[127:96] : x__h602008 ;
  assign MUX_col1$write_1__VAL_1 = col1 ^ kg_save_key1$DO ;
  assign MUX_col1$write_1__VAL_2 =
	     encrypt_decrypttt ? encrypt_plaintexttt[95:64] : x__h602181 ;
  assign MUX_col2$write_1__VAL_1 = col2 ^ kg_save_key2$DO ;
  assign MUX_col2$write_1__VAL_2 =
	     encrypt_decrypttt ? encrypt_plaintexttt[63:32] : x__h602109 ;
  assign MUX_col3$write_1__VAL_1 = col3 ^ kg_save_key3$DO ;
  assign MUX_col3$write_1__VAL_2 =
	     encrypt_decrypttt ? encrypt_plaintexttt[31:0] : x__h602253 ;
  assign MUX_counter$write_1__VAL_1 = counter + 4'd1 ;
  assign MUX_dr_colout0$write_1__VAL_2 =
	     decrypt ?
	       x__h594044 :
	       (counter_199_EQ_maxround_19_MINUS_1_20___d1212 ?
		  x__h222687 :
		  x__h577620) ;
  assign MUX_dr_colout0$write_1__VAL_3 = decrypt ? x__h594044 : x__h222687 ;
  assign MUX_dr_colout1$write_1__VAL_2 =
	     decrypt ?
	       x__h198026 :
	       (counter_199_EQ_maxround_19_MINUS_1_20___d1212 ?
		  x__h212904 :
		  x__h187157) ;
  assign MUX_dr_colout1$write_1__VAL_3 = decrypt ? x__h198026 : x__h212904 ;
  assign MUX_dr_colout2$write_1__VAL_2 =
	     decrypt ?
	       x__h198093 :
	       (counter_199_EQ_maxround_19_MINUS_1_20___d1212 ?
		  x__h212990 :
		  x__h192455) ;
  assign MUX_dr_colout2$write_1__VAL_3 = decrypt ? x__h198093 : x__h212990 ;
  assign MUX_dr_colout3$write_1__VAL_2 =
	     decrypt ?
	       x__h198151 :
	       (counter_199_EQ_maxround_19_MINUS_1_20___d1212 ?
		  x__h213067 :
		  x__h197744) ;
  assign MUX_dr_colout3$write_1__VAL_3 = decrypt ? x__h198151 : x__h213067 ;
  assign MUX_dr_last_round$write_1__VAL_2 =
	     !decrypt && counter_199_EQ_maxround_19_MINUS_1_20___d1212 ;
  always@(kg_counter or x__h7599 or x__h7021 or x__h7211 or x__h7405)
  begin
    case (kg_counter)
      4'd4: MUX_kg_aes256_subcol4$write_1__VAL_2 = x__h7021;
      4'd5: MUX_kg_aes256_subcol4$write_1__VAL_2 = x__h7211;
      4'd6: MUX_kg_aes256_subcol4$write_1__VAL_2 = x__h7405;
      default: MUX_kg_aes256_subcol4$write_1__VAL_2 = x__h7599;
    endcase
  end
  assign MUX_kg_counter$write_1__VAL_1 = kg_counter + 4'd1 ;
  always@(genKeys_keyylenn or genKeys_keyyy)
  begin
    case (genKeys_keyylenn)
      2'd0: MUX_kg_prev_key0$write_1__VAL_2 = genKeys_keyyy[127:96];
      2'd1: MUX_kg_prev_key0$write_1__VAL_2 = genKeys_keyyy[191:160];
      default: MUX_kg_prev_key0$write_1__VAL_2 = genKeys_keyyy[255:224];
    endcase
  end
  always@(genKeys_keyylenn or genKeys_keyyy)
  begin
    case (genKeys_keyylenn)
      2'd0: MUX_kg_prev_key1$write_1__VAL_2 = genKeys_keyyy[95:64];
      2'd1: MUX_kg_prev_key1$write_1__VAL_2 = genKeys_keyyy[159:128];
      default: MUX_kg_prev_key1$write_1__VAL_2 = genKeys_keyyy[223:192];
    endcase
  end
  always@(genKeys_keyylenn or genKeys_keyyy)
  begin
    case (genKeys_keyylenn)
      2'd0: MUX_kg_prev_key2$write_1__VAL_2 = genKeys_keyyy[63:32];
      2'd1: MUX_kg_prev_key2$write_1__VAL_2 = genKeys_keyyy[127:96];
      default: MUX_kg_prev_key2$write_1__VAL_2 = genKeys_keyyy[191:160];
    endcase
  end
  always@(genKeys_keyylenn or genKeys_keyyy)
  begin
    case (genKeys_keyylenn)
      2'd0: MUX_kg_prev_key3$write_1__VAL_2 = genKeys_keyyy[31:0];
      2'd1: MUX_kg_prev_key3$write_1__VAL_2 = genKeys_keyyy[95:64];
      default: MUX_kg_prev_key3$write_1__VAL_2 = genKeys_keyyy[159:128];
    endcase
  end
  assign MUX_kg_prev_key4$write_1__VAL_2 =
	     (genKeys_keyylenn == 2'd1) ?
	       genKeys_keyyy[63:32] :
	       genKeys_keyyy[127:96] ;
  assign MUX_kg_prev_key5$write_1__VAL_2 =
	     (genKeys_keyylenn == 2'd1) ?
	       genKeys_keyyy[31:0] :
	       genKeys_keyyy[95:64] ;
  assign MUX_kg_rci$write_1__VAL_1 = kg_rci + 4'd1 ;
  assign MUX_kg_rg_state$write_1__VAL_1 =
	     (kg_key_length == 2'd2 &&
	      !kg_round_number_1_EQ_kg_maxrounds_2___d73) ?
	       3'd4 :
	       3'd3 ;
  assign MUX_kg_rg_state$write_1__VAL_3 =
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 ? 3'd5 : 3'd0 ;
  assign MUX_kg_rg_state$write_1__VAL_4 =
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 ?
	       CASE_kg_key_length_1_2_2_IF_kg_round_number_1__ETC__q1 :
	       3'd0 ;
  always@(kg_key_length or x__h5753 or x__h5200 or x__h5419)
  begin
    case (kg_key_length)
      2'd0: MUX_kg_rot_prev_key$write_1__VAL_1 = x__h5200;
      2'd1: MUX_kg_rot_prev_key$write_1__VAL_1 = x__h5419;
      default: MUX_kg_rot_prev_key$write_1__VAL_1 = x__h5753;
    endcase
  end
  always@(kg_key_length or x__h11381 or x__h10067 or x__h10711)
  begin
    case (kg_key_length)
      2'd1: MUX_kg_rot_prev_key$write_1__VAL_2 = x__h10067;
      2'd2: MUX_kg_rot_prev_key$write_1__VAL_2 = x__h10711;
      default: MUX_kg_rot_prev_key$write_1__VAL_2 = x__h11381;
    endcase
  end
  assign MUX_kg_round_number$write_1__VAL_2 =
	     (kg_key_length == 2'd1) ?
	       (kg_round_toggle_192 ? x__h10783 : x__h11104) :
	       x__h11104 ;
  always@(genKeys_keyylenn)
  begin
    case (genKeys_keyylenn)
      2'd0, 2'd1: MUX_kg_round_number$write_1__VAL_3 = 4'b0001;
      default: MUX_kg_round_number$write_1__VAL_3 = 4'b0010;
    endcase
  end
  assign MUX_kg_save_key0$put_2__VAL_4 =
	     decrypt ? getKeynum3__h411872 : roundnumber__h213885 ;
  assign MUX_kg_save_key0$put_2__VAL_5 = maxround - 4'd2 ;
  assign MUX_kg_save_key0$put_2__VAL_6 = decrypt ? y__h213973 : 4'd2 ;
  assign MUX_kg_save_key0$put_2__VAL_7 = encrypt_decrypttt ? maxround : 4'd1 ;
  always@(kg_key_length or
	  key4__h8661 or
	  kg_round_toggle_192 or
	  _theResult____h8662 or key2__h7797 or key4___1__h8756)
  begin
    case (kg_key_length)
      2'd1:
	  MUX_kg_save_key0$put_3__VAL_3 =
	      kg_round_toggle_192 ? _theResult____h8662 : key2__h7797;
      2'd2: MUX_kg_save_key0$put_3__VAL_3 = key4___1__h8756;
      default: MUX_kg_save_key0$put_3__VAL_3 = key4__h8661;
    endcase
  end
  assign MUX_kg_save_key1$put_3__VAL_3 =
	     (kg_key_length == 2'd1) ?
	       (kg_round_toggle_192 ? key5__h8663 : key3__h7798) :
	       key5__h8663 ;
  always@(kg_key_length or key2__h7797 or kg_round_toggle_192 or key0__h7795)
  begin
    case (kg_key_length)
      2'd0: MUX_kg_save_key2$put_3__VAL_2 = key2__h7797;
      2'd1:
	  MUX_kg_save_key2$put_3__VAL_2 =
	      kg_round_toggle_192 ? key2__h7797 : key0__h7795;
      default: MUX_kg_save_key2$put_3__VAL_2 = key2__h7797;
    endcase
  end
  assign MUX_kg_save_key2$put_3__VAL_3 =
	     (kg_key_length == 2'd1) ? _theResult____h8662 : key6__h8664 ;
  always@(kg_key_length or key3__h7798 or kg_round_toggle_192 or key1__h7796)
  begin
    case (kg_key_length)
      2'd0: MUX_kg_save_key3$put_3__VAL_2 = key3__h7798;
      2'd1:
	  MUX_kg_save_key3$put_3__VAL_2 =
	      kg_round_toggle_192 ? key3__h7798 : key1__h7796;
      default: MUX_kg_save_key3$put_3__VAL_2 = key3__h7798;
    endcase
  end
  assign MUX_kg_save_key3$put_3__VAL_3 =
	     (kg_key_length == 2'd1) ? key5__h8663 : key7__h8665 ;
  always@(kg_counter or sboxes_0$getbyte)
  begin
    case (kg_counter)
      4'd0, 4'd1: MUX_kg_sbox_out$write_1__VAL_3 = sboxes_0$getbyte;
      default: MUX_kg_sbox_out$write_1__VAL_3 = sboxes_0$getbyte;
    endcase
  end
  assign MUX_rg_state$write_1__VAL_2 = decrypt ? 3'd4 : 3'd1 ;
  always@(kg_key_length or kg_prev_key7 or kg_prev_key3 or kg_prev_key5)
  begin
    case (kg_key_length)
      2'd0: MUX_sboxes_0$getbyte_1__VAL_1 = kg_prev_key3[23:16];
      2'd1: MUX_sboxes_0$getbyte_1__VAL_1 = kg_prev_key5[23:16];
      default: MUX_sboxes_0$getbyte_1__VAL_1 = kg_prev_key7[23:16];
    endcase
  end
  always@(kg_key_length or key3__h7798 or key5__h8663 or key7__h8665)
  begin
    case (kg_key_length)
      2'd1: MUX_sboxes_0$getbyte_1__VAL_3 = key5__h8663[31:24];
      2'd2: MUX_sboxes_0$getbyte_1__VAL_3 = key7__h8665[23:16];
      default: MUX_sboxes_0$getbyte_1__VAL_3 = key3__h7798[23:16];
    endcase
  end
  assign MUX_sboxes_0$getbyte_1__VAL_4 =
	     decrypt ? spliced_bits__h233560 : dr_colout3[7:0] ;
  always@(kg_counter or temp_col__h6675 or kg_rot_prev_key)
  begin
    case (kg_counter)
      4'd0: MUX_sboxes_0$getbyte_1__VAL_5 = kg_rot_prev_key[23:16];
      4'd1: MUX_sboxes_0$getbyte_1__VAL_5 = kg_rot_prev_key[15:8];
      4'd2: MUX_sboxes_0$getbyte_1__VAL_5 = kg_rot_prev_key[7:0];
      default: MUX_sboxes_0$getbyte_1__VAL_5 = temp_col__h6675[31:24];
    endcase
  end
  always@(kg_counter or kg_aes256_subcol4)
  begin
    case (kg_counter)
      4'd4: MUX_sboxes_0$getbyte_1__VAL_6 = kg_aes256_subcol4[23:16];
      4'd5: MUX_sboxes_0$getbyte_1__VAL_6 = kg_aes256_subcol4[15:8];
      default: MUX_sboxes_0$getbyte_1__VAL_6 = kg_aes256_subcol4[7:0];
    endcase
  end
  always@(kg_counter)
  begin
    case (kg_counter)
      4'd0, 4'd1: MUX_sboxes_0$getbyte_2__VAL_5 = 1'd0;
      default: MUX_sboxes_0$getbyte_2__VAL_5 = 1'd0;
    endcase
  end
  assign MUX_sboxes_1$getbyte_1__VAL_2 =
	     decrypt ? spliced_bits__h233588 : dr_colout3[15:8] ;
  assign MUX_sboxes_10$getbyte_1__VAL_2 =
	     decrypt ? spliced_bits__h228738 : dr_colout1[23:16] ;
  assign MUX_sboxes_11$getbyte_1__VAL_2 =
	     decrypt ? spliced_bits__h228766 : dr_colout1[31:24] ;
  assign MUX_sboxes_12$getbyte_1__VAL_2 =
	     decrypt ? spliced_bits__h567809 : dr_colout0[7:0] ;
  assign MUX_sboxes_13$getbyte_1__VAL_2 =
	     decrypt ? spliced_bits__h567837 : dr_colout0[15:8] ;
  assign MUX_sboxes_14$getbyte_1__VAL_2 =
	     decrypt ? spliced_bits__h567865 : dr_colout0[23:16] ;
  assign MUX_sboxes_15$getbyte_1__VAL_2 =
	     decrypt ? spliced_bits__h567893 : dr_colout0[31:24] ;
  assign MUX_sboxes_2$getbyte_1__VAL_2 =
	     decrypt ? spliced_bits__h233616 : dr_colout3[23:16] ;
  assign MUX_sboxes_3$getbyte_1__VAL_2 =
	     decrypt ? spliced_bits__h233644 : dr_colout3[31:24] ;
  assign MUX_sboxes_4$getbyte_1__VAL_2 =
	     decrypt ? spliced_bits__h231121 : dr_colout2[7:0] ;
  assign MUX_sboxes_5$getbyte_1__VAL_2 =
	     decrypt ? spliced_bits__h231149 : dr_colout2[15:8] ;
  assign MUX_sboxes_6$getbyte_1__VAL_2 =
	     decrypt ? spliced_bits__h231177 : dr_colout2[23:16] ;
  assign MUX_sboxes_7$getbyte_1__VAL_2 =
	     decrypt ? spliced_bits__h231205 : dr_colout2[31:24] ;
  assign MUX_sboxes_8$getbyte_1__VAL_2 =
	     decrypt ? spliced_bits__h228682 : dr_colout1[7:0] ;
  assign MUX_sboxes_9$getbyte_1__VAL_2 =
	     decrypt ? spliced_bits__h228710 : dr_colout1[15:8] ;

  // register _unnamed_
  assign _unnamed_$D_IN = MUX__unnamed_$write_1__SEL_1 ;
  assign _unnamed_$EN =
	     WILL_FIRE_RL_encode && counter_199_EQ_maxround_19___d1200 ||
	     EN_ret ;

  // register ciphertext
  assign ciphertext$D_IN =
	     { dr_colout0, dr_colout1, dr_colout2, dr_colout3 } ;
  assign ciphertext$EN = MUX__unnamed_$write_1__SEL_1 ;

  // register col0
  assign col0$D_IN =
	     WILL_FIRE_RL_initial_xor ?
	       MUX_col0$write_1__VAL_1 :
	       MUX_col0$write_1__VAL_2 ;
  assign col0$EN = WILL_FIRE_RL_initial_xor || EN_encrypt ;

  // register col1
  assign col1$D_IN =
	     WILL_FIRE_RL_initial_xor ?
	       MUX_col1$write_1__VAL_1 :
	       MUX_col1$write_1__VAL_2 ;
  assign col1$EN = WILL_FIRE_RL_initial_xor || EN_encrypt ;

  // register col2
  assign col2$D_IN =
	     WILL_FIRE_RL_initial_xor ?
	       MUX_col2$write_1__VAL_1 :
	       MUX_col2$write_1__VAL_2 ;
  assign col2$EN = WILL_FIRE_RL_initial_xor || EN_encrypt ;

  // register col3
  assign col3$D_IN =
	     WILL_FIRE_RL_initial_xor ?
	       MUX_col3$write_1__VAL_1 :
	       MUX_col3$write_1__VAL_2 ;
  assign col3$EN = WILL_FIRE_RL_initial_xor || EN_encrypt ;

  // register colout0
  assign colout0$D_IN = 32'h0 ;
  assign colout0$EN = 1'b0 ;

  // register colout1
  assign colout1$D_IN = 32'h0 ;
  assign colout1$EN = 1'b0 ;

  // register colout2
  assign colout2$D_IN = 32'h0 ;
  assign colout2$EN = 1'b0 ;

  // register colout3
  assign colout3$D_IN = 32'h0 ;
  assign colout3$EN = 1'b0 ;

  // register counter
  assign counter$D_IN =
	     WILL_FIRE_RL_encode ? MUX_counter$write_1__VAL_1 : 4'd1 ;
  assign counter$EN = WILL_FIRE_RL_encode || EN_encrypt ;

  // register decrypt
  assign decrypt$D_IN = encrypt_decrypttt ;
  assign decrypt$EN = EN_encrypt ;

  // register dr_c0_col_in
  assign dr_c0_col_in$D_IN = 32'h0 ;
  assign dr_c0_col_in$EN = 1'b0 ;

  // register dr_c1_col_in
  assign dr_c1_col_in$D_IN = 32'h0 ;
  assign dr_c1_col_in$EN = 1'b0 ;

  // register dr_c2_col_in
  assign dr_c2_col_in$D_IN = 32'h0 ;
  assign dr_c2_col_in$EN = 1'b0 ;

  // register dr_c3_col_in
  assign dr_c3_col_in$D_IN = 32'h0 ;
  assign dr_c3_col_in$EN = 1'b0 ;

  // register dr_col__0
  assign dr_col__0$D_IN = 8'h0 ;
  assign dr_col__0$EN = 1'b0 ;

  // register dr_col__1
  assign dr_col__1$D_IN = 8'h0 ;
  assign dr_col__1$EN = 1'b0 ;

  // register dr_col__10
  assign dr_col__10$D_IN = 8'h0 ;
  assign dr_col__10$EN = 1'b0 ;

  // register dr_col__11
  assign dr_col__11$D_IN = 8'h0 ;
  assign dr_col__11$EN = 1'b0 ;

  // register dr_col__12
  assign dr_col__12$D_IN = 8'h0 ;
  assign dr_col__12$EN = 1'b0 ;

  // register dr_col__13
  assign dr_col__13$D_IN = 8'h0 ;
  assign dr_col__13$EN = 1'b0 ;

  // register dr_col__14
  assign dr_col__14$D_IN = 8'h0 ;
  assign dr_col__14$EN = 1'b0 ;

  // register dr_col__15
  assign dr_col__15$D_IN = 8'h0 ;
  assign dr_col__15$EN = 1'b0 ;

  // register dr_col__2
  assign dr_col__2$D_IN = 8'h0 ;
  assign dr_col__2$EN = 1'b0 ;

  // register dr_col__3
  assign dr_col__3$D_IN = 8'h0 ;
  assign dr_col__3$EN = 1'b0 ;

  // register dr_col__4
  assign dr_col__4$D_IN = 8'h0 ;
  assign dr_col__4$EN = 1'b0 ;

  // register dr_col__5
  assign dr_col__5$D_IN = 8'h0 ;
  assign dr_col__5$EN = 1'b0 ;

  // register dr_col__6
  assign dr_col__6$D_IN = 8'h0 ;
  assign dr_col__6$EN = 1'b0 ;

  // register dr_col__7
  assign dr_col__7$D_IN = 8'h0 ;
  assign dr_col__7$EN = 1'b0 ;

  // register dr_col__8
  assign dr_col__8$D_IN = 8'h0 ;
  assign dr_col__8$EN = 1'b0 ;

  // register dr_col__9
  assign dr_col__9$D_IN = 8'h0 ;
  assign dr_col__9$EN = 1'b0 ;

  // register dr_colout0
  always@(MUX_dr_colout0$write_1__SEL_1 or
	  x__h577620 or
	  MUX_dr_colout0$write_1__SEL_2 or
	  MUX_dr_colout0$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_temp or MUX_dr_colout0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_colout0$write_1__SEL_1: dr_colout0$D_IN = x__h577620;
      MUX_dr_colout0$write_1__SEL_2:
	  dr_colout0$D_IN = MUX_dr_colout0$write_1__VAL_2;
      WILL_FIRE_RL_rl_temp: dr_colout0$D_IN = MUX_dr_colout0$write_1__VAL_3;
      default: dr_colout0$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dr_colout0$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // register dr_colout1
  always@(MUX_dr_colout0$write_1__SEL_1 or
	  x__h187157 or
	  MUX_dr_colout0$write_1__SEL_2 or
	  MUX_dr_colout1$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_temp or MUX_dr_colout1$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_colout0$write_1__SEL_1: dr_colout1$D_IN = x__h187157;
      MUX_dr_colout0$write_1__SEL_2:
	  dr_colout1$D_IN = MUX_dr_colout1$write_1__VAL_2;
      WILL_FIRE_RL_rl_temp: dr_colout1$D_IN = MUX_dr_colout1$write_1__VAL_3;
      default: dr_colout1$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dr_colout1$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // register dr_colout2
  always@(MUX_dr_colout0$write_1__SEL_1 or
	  x__h192455 or
	  MUX_dr_colout0$write_1__SEL_2 or
	  MUX_dr_colout2$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_temp or MUX_dr_colout2$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_colout0$write_1__SEL_1: dr_colout2$D_IN = x__h192455;
      MUX_dr_colout0$write_1__SEL_2:
	  dr_colout2$D_IN = MUX_dr_colout2$write_1__VAL_2;
      WILL_FIRE_RL_rl_temp: dr_colout2$D_IN = MUX_dr_colout2$write_1__VAL_3;
      default: dr_colout2$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dr_colout2$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // register dr_colout3
  always@(MUX_dr_colout0$write_1__SEL_1 or
	  x__h197744 or
	  MUX_dr_colout0$write_1__SEL_2 or
	  MUX_dr_colout3$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_temp or MUX_dr_colout3$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_colout0$write_1__SEL_1: dr_colout3$D_IN = x__h197744;
      MUX_dr_colout0$write_1__SEL_2:
	  dr_colout3$D_IN = MUX_dr_colout3$write_1__VAL_2;
      WILL_FIRE_RL_rl_temp: dr_colout3$D_IN = MUX_dr_colout3$write_1__VAL_3;
      default: dr_colout3$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign dr_colout3$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // register dr_counter
  assign dr_counter$D_IN = 8'h0 ;
  assign dr_counter$EN = 1'b0 ;

  // register dr_decrypt
  assign dr_decrypt$D_IN = decrypt ;
  assign dr_decrypt$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // register dr_last_round
  always@(MUX_dr_colout0$write_1__SEL_1 or
	  MUX_dr_colout0$write_1__SEL_2 or
	  MUX_dr_last_round$write_1__VAL_2 or WILL_FIRE_RL_rl_temp)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_colout0$write_1__SEL_1: dr_last_round$D_IN = 1'd0;
      MUX_dr_colout0$write_1__SEL_2:
	  dr_last_round$D_IN = MUX_dr_last_round$write_1__VAL_2;
      WILL_FIRE_RL_rl_temp: dr_last_round$D_IN = 1'd1;
      default: dr_last_round$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dr_last_round$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // register dr_new_round
  assign dr_new_round$D_IN = 1'b0 ;
  assign dr_new_round$EN = 1'b0 ;

  // register dr_rg_state
  assign dr_rg_state$D_IN = 4'h0 ;
  assign dr_rg_state$EN = 1'b0 ;

  // register dr_round_done
  assign dr_round_done$D_IN = 1'b0 ;
  assign dr_round_done$EN = 1'b0 ;

  // register dr_sboxes_out_0
  assign dr_sboxes_out_0$D_IN = 8'h0 ;
  assign dr_sboxes_out_0$EN = 1'b0 ;

  // register dr_sboxes_out_1
  assign dr_sboxes_out_1$D_IN = 8'h0 ;
  assign dr_sboxes_out_1$EN = 1'b0 ;

  // register dr_sboxes_out_10
  assign dr_sboxes_out_10$D_IN = 8'h0 ;
  assign dr_sboxes_out_10$EN = 1'b0 ;

  // register dr_sboxes_out_11
  assign dr_sboxes_out_11$D_IN = 8'h0 ;
  assign dr_sboxes_out_11$EN = 1'b0 ;

  // register dr_sboxes_out_12
  assign dr_sboxes_out_12$D_IN = 8'h0 ;
  assign dr_sboxes_out_12$EN = 1'b0 ;

  // register dr_sboxes_out_13
  assign dr_sboxes_out_13$D_IN = 8'h0 ;
  assign dr_sboxes_out_13$EN = 1'b0 ;

  // register dr_sboxes_out_14
  assign dr_sboxes_out_14$D_IN = 8'h0 ;
  assign dr_sboxes_out_14$EN = 1'b0 ;

  // register dr_sboxes_out_15
  assign dr_sboxes_out_15$D_IN = 8'h0 ;
  assign dr_sboxes_out_15$EN = 1'b0 ;

  // register dr_sboxes_out_2
  assign dr_sboxes_out_2$D_IN = 8'h0 ;
  assign dr_sboxes_out_2$EN = 1'b0 ;

  // register dr_sboxes_out_3
  assign dr_sboxes_out_3$D_IN = 8'h0 ;
  assign dr_sboxes_out_3$EN = 1'b0 ;

  // register dr_sboxes_out_4
  assign dr_sboxes_out_4$D_IN = 8'h0 ;
  assign dr_sboxes_out_4$EN = 1'b0 ;

  // register dr_sboxes_out_5
  assign dr_sboxes_out_5$D_IN = 8'h0 ;
  assign dr_sboxes_out_5$EN = 1'b0 ;

  // register dr_sboxes_out_6
  assign dr_sboxes_out_6$D_IN = 8'h0 ;
  assign dr_sboxes_out_6$EN = 1'b0 ;

  // register dr_sboxes_out_7
  assign dr_sboxes_out_7$D_IN = 8'h0 ;
  assign dr_sboxes_out_7$EN = 1'b0 ;

  // register dr_sboxes_out_8
  assign dr_sboxes_out_8$D_IN = 8'h0 ;
  assign dr_sboxes_out_8$EN = 1'b0 ;

  // register dr_sboxes_out_9
  assign dr_sboxes_out_9$D_IN = 8'h0 ;
  assign dr_sboxes_out_9$EN = 1'b0 ;

  // register dr_sub_col_0
  assign dr_sub_col_0$D_IN = 8'h0 ;
  assign dr_sub_col_0$EN = 1'b0 ;

  // register dr_sub_col_1
  assign dr_sub_col_1$D_IN = 8'h0 ;
  assign dr_sub_col_1$EN = 1'b0 ;

  // register dr_sub_col_10
  assign dr_sub_col_10$D_IN = 8'h0 ;
  assign dr_sub_col_10$EN = 1'b0 ;

  // register dr_sub_col_11
  assign dr_sub_col_11$D_IN = 8'h0 ;
  assign dr_sub_col_11$EN = 1'b0 ;

  // register dr_sub_col_12
  assign dr_sub_col_12$D_IN = 8'h0 ;
  assign dr_sub_col_12$EN = 1'b0 ;

  // register dr_sub_col_13
  assign dr_sub_col_13$D_IN = 8'h0 ;
  assign dr_sub_col_13$EN = 1'b0 ;

  // register dr_sub_col_14
  assign dr_sub_col_14$D_IN = 8'h0 ;
  assign dr_sub_col_14$EN = 1'b0 ;

  // register dr_sub_col_15
  assign dr_sub_col_15$D_IN = 8'h0 ;
  assign dr_sub_col_15$EN = 1'b0 ;

  // register dr_sub_col_2
  assign dr_sub_col_2$D_IN = 8'h0 ;
  assign dr_sub_col_2$EN = 1'b0 ;

  // register dr_sub_col_3
  assign dr_sub_col_3$D_IN = 8'h0 ;
  assign dr_sub_col_3$EN = 1'b0 ;

  // register dr_sub_col_4
  assign dr_sub_col_4$D_IN = 8'h0 ;
  assign dr_sub_col_4$EN = 1'b0 ;

  // register dr_sub_col_5
  assign dr_sub_col_5$D_IN = 8'h0 ;
  assign dr_sub_col_5$EN = 1'b0 ;

  // register dr_sub_col_6
  assign dr_sub_col_6$D_IN = 8'h0 ;
  assign dr_sub_col_6$EN = 1'b0 ;

  // register dr_sub_col_7
  assign dr_sub_col_7$D_IN = 8'h0 ;
  assign dr_sub_col_7$EN = 1'b0 ;

  // register dr_sub_col_8
  assign dr_sub_col_8$D_IN = 8'h0 ;
  assign dr_sub_col_8$EN = 1'b0 ;

  // register dr_sub_col_9
  assign dr_sub_col_9$D_IN = 8'h0 ;
  assign dr_sub_col_9$EN = 1'b0 ;

  // register key
  assign key$D_IN = 128'h0 ;
  assign key$EN = 1'b0 ;

  // register kg_aes256_subcol4
  assign kg_aes256_subcol4$D_IN =
	     MUX_kg_aes256_subcol4$write_1__SEL_1 ?
	       temp_col__h6675 :
	       MUX_kg_aes256_subcol4$write_1__VAL_2 ;
  assign kg_aes256_subcol4$EN =
	     WILL_FIRE_RL_kg_subKey && kg_counter == 4'd3 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ||
	     WILL_FIRE_RL_kg_aes256subcol && _dfoo36 ;

  // register kg_counter
  assign kg_counter$D_IN =
	     MUX_kg_counter$write_1__SEL_1 ?
	       MUX_kg_counter$write_1__VAL_1 :
	       4'd0 ;
  assign kg_counter$EN =
	     WILL_FIRE_RL_kg_aes256subcol || WILL_FIRE_RL_kg_subKey ||
	     WILL_FIRE_RL_kg_roundKey2 ||
	     WILL_FIRE_RL_kg_roundKey ||
	     WILL_FIRE_RL_kg_round_start ;

  // register kg_key_length
  assign kg_key_length$D_IN = genKeys_keyylenn ;
  assign kg_key_length$EN = EN_genKeys ;

  // register kg_key_saved
  assign kg_key_saved$D_IN = 1'd1 ;
  assign kg_key_saved$EN =
	     WILL_FIRE_RL_kg_roundKey &&
	     !kg_round_number_1_ULE_kg_maxrounds_2___d104 ||
	     MUX_kg_key_saved$write_1__SEL_2 ;

  // register kg_last_col_sub_rot
  always@(kg_counter or x__h6542 or x__h5897 or x__h6112 or x__h6327)
  begin
    case (kg_counter)
      4'd0: kg_last_col_sub_rot$D_IN = x__h5897;
      4'd1: kg_last_col_sub_rot$D_IN = x__h6112;
      4'd2: kg_last_col_sub_rot$D_IN = x__h6327;
      default: kg_last_col_sub_rot$D_IN = x__h6542;
    endcase
  end
  assign kg_last_col_sub_rot$EN =
	     WILL_FIRE_RL_kg_subKey &&
	     (kg_counter == 4'd0 || kg_counter == 4'd1 ||
	      kg_counter == 4'd2 ||
	      kg_counter == 4'd3) ;

  // register kg_maxrounds
  always@(genKeys_keyylenn)
  begin
    case (genKeys_keyylenn)
      2'd0: kg_maxrounds$D_IN = 4'd10;
      2'd1: kg_maxrounds$D_IN = 4'd12;
      default: kg_maxrounds$D_IN = 4'd14;
    endcase
  end
  assign kg_maxrounds$EN = MUX_kg_prev_key0$write_1__SEL_2 ;

  // register kg_prev_key0
  assign kg_prev_key0$D_IN =
	     MUX_kg_prev_key0$write_1__SEL_1 ?
	       key0__h7795 :
	       MUX_kg_prev_key0$write_1__VAL_2 ;
  assign kg_prev_key0$EN =
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 ||
	     EN_genKeys &&
	     (genKeys_keyylenn == 2'd0 || genKeys_keyylenn == 2'd1 ||
	      genKeys_keyylenn == 2'd2) ;

  // register kg_prev_key1
  assign kg_prev_key1$D_IN =
	     MUX_kg_prev_key0$write_1__SEL_1 ?
	       key1__h7796 :
	       MUX_kg_prev_key1$write_1__VAL_2 ;
  assign kg_prev_key1$EN =
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 ||
	     EN_genKeys &&
	     (genKeys_keyylenn == 2'd0 || genKeys_keyylenn == 2'd1 ||
	      genKeys_keyylenn == 2'd2) ;

  // register kg_prev_key2
  assign kg_prev_key2$D_IN =
	     MUX_kg_prev_key0$write_1__SEL_1 ?
	       key2__h7797 :
	       MUX_kg_prev_key2$write_1__VAL_2 ;
  assign kg_prev_key2$EN =
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 ||
	     EN_genKeys &&
	     (genKeys_keyylenn == 2'd0 || genKeys_keyylenn == 2'd1 ||
	      genKeys_keyylenn == 2'd2) ;

  // register kg_prev_key3
  assign kg_prev_key3$D_IN =
	     MUX_kg_prev_key0$write_1__SEL_1 ?
	       key3__h7798 :
	       MUX_kg_prev_key3$write_1__VAL_2 ;
  assign kg_prev_key3$EN =
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 ||
	     EN_genKeys &&
	     (genKeys_keyylenn == 2'd0 || genKeys_keyylenn == 2'd1 ||
	      genKeys_keyylenn == 2'd2) ;

  // register kg_prev_key4
  assign kg_prev_key4$D_IN =
	     MUX_kg_prev_key0$write_1__SEL_1 ?
	       _theResult____h8662 :
	       MUX_kg_prev_key4$write_1__VAL_2 ;
  assign kg_prev_key4$EN =
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 ||
	     EN_genKeys &&
	     (genKeys_keyylenn == 2'd1 || genKeys_keyylenn == 2'd2) ;

  // register kg_prev_key5
  assign kg_prev_key5$D_IN =
	     MUX_kg_prev_key0$write_1__SEL_1 ?
	       key5__h8663 :
	       MUX_kg_prev_key5$write_1__VAL_2 ;
  assign kg_prev_key5$EN =
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 ||
	     EN_genKeys &&
	     (genKeys_keyylenn == 2'd1 || genKeys_keyylenn == 2'd2) ;

  // register kg_prev_key6
  assign kg_prev_key6$D_IN =
	     MUX_kg_prev_key0$write_1__SEL_1 ?
	       key6__h8664 :
	       genKeys_keyyy[63:32] ;
  assign kg_prev_key6$EN =
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 ||
	     EN_genKeys && genKeys_keyylenn == 2'd2 ;

  // register kg_prev_key7
  assign kg_prev_key7$D_IN =
	     MUX_kg_prev_key0$write_1__SEL_1 ?
	       key7__h8665 :
	       genKeys_keyyy[31:0] ;
  assign kg_prev_key7$EN =
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 ||
	     EN_genKeys && genKeys_keyylenn == 2'd2 ;

  // register kg_rci
  assign kg_rci$D_IN =
	     MUX_kg_rci$write_1__SEL_1 ? MUX_kg_rci$write_1__VAL_1 : 4'd0 ;
  assign kg_rci$EN =
	     WILL_FIRE_RL_kg_subKey && kg_counter == 4'd3 || EN_genKeys ;

  // register kg_rcon
  assign kg_rcon$D_IN = { kg_rcongen$read, 24'b0 } ;
  assign kg_rcon$EN = MUX_kg_counter$write_1__SEL_2 ;

  // register kg_rg_keyreq
  assign kg_rg_keyreq$D_IN = 1'b0 ;
  assign kg_rg_keyreq$EN = 1'b0 ;

  // register kg_rg_state
  always@(MUX_kg_rci$write_1__SEL_1 or
	  MUX_kg_rg_state$write_1__VAL_1 or
	  MUX_kg_rg_state$write_1__SEL_2 or
	  MUX_kg_rg_state$write_1__SEL_3 or
	  MUX_kg_rg_state$write_1__VAL_3 or
	  MUX_kg_rg_state$write_1__SEL_4 or
	  MUX_kg_rg_state$write_1__VAL_4 or
	  EN_genKeys or
	  WILL_FIRE_RL_kg_round_start2 or WILL_FIRE_RL_kg_round_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_kg_rci$write_1__SEL_1:
	  kg_rg_state$D_IN = MUX_kg_rg_state$write_1__VAL_1;
      MUX_kg_rg_state$write_1__SEL_2: kg_rg_state$D_IN = 3'd3;
      MUX_kg_rg_state$write_1__SEL_3:
	  kg_rg_state$D_IN = MUX_kg_rg_state$write_1__VAL_3;
      MUX_kg_rg_state$write_1__SEL_4:
	  kg_rg_state$D_IN = MUX_kg_rg_state$write_1__VAL_4;
      EN_genKeys: kg_rg_state$D_IN = 3'd1;
      WILL_FIRE_RL_kg_round_start2: kg_rg_state$D_IN = 3'd2;
      WILL_FIRE_RL_kg_round_start: kg_rg_state$D_IN = 3'd6;
      default: kg_rg_state$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign kg_rg_state$EN =
	     WILL_FIRE_RL_kg_subKey && kg_counter == 4'd3 ||
	     WILL_FIRE_RL_kg_aes256subcol && kg_counter == 4'd7 ||
	     WILL_FIRE_RL_kg_roundKey &&
	     (kg_key_length == 2'd0 || kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2 ||
	      !kg_round_number_1_ULE_kg_maxrounds_2___d104) ||
	     WILL_FIRE_RL_kg_roundKey2 &&
	     (kg_key_length == 2'd1 || kg_key_length == 2'd2 ||
	      kg_key_length == 2'd0 ||
	      !kg_round_number_1_ULE_kg_maxrounds_2___d104) ||
	     EN_genKeys ||
	     WILL_FIRE_RL_kg_round_start2 ||
	     WILL_FIRE_RL_kg_round_start ;

  // register kg_rg_state_key
  assign kg_rg_state_key$D_IN = 2'h0 ;
  assign kg_rg_state_key$EN = 1'b0 ;

  // register kg_rot_prev_key
  assign kg_rot_prev_key$D_IN =
	     MUX_kg_rot_prev_key$write_1__SEL_1 ?
	       MUX_kg_rot_prev_key$write_1__VAL_1 :
	       MUX_kg_rot_prev_key$write_1__VAL_2 ;
  assign kg_rot_prev_key$EN =
	     WILL_FIRE_RL_kg_round_start2 &&
	     (kg_key_length == 2'd0 || kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2) ||
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2_04_AND_kg_ETC___d189 ;

  // register kg_round_key_done_0
  assign kg_round_key_done_0$D_IN = !EN_genKeys ;
  assign kg_round_key_done_0$EN =
	     WILL_FIRE_RL_kg_roundKey && kg_round_number == 4'd0 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd0 ||
	     WILL_FIRE_RL_kg_roundKey2 && _dfoo156 ||
	     EN_genKeys ||
	     WILL_FIRE_RL_kg_round_start ;

  // register kg_round_key_done_1
  assign kg_round_key_done_1$D_IN = !EN_genKeys ;
  assign kg_round_key_done_1$EN =
	     WILL_FIRE_RL_kg_round_start2 && kg_key_length == 2'd2 ||
	     WILL_FIRE_RL_kg_roundKey && kg_round_number == 4'd1 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd0 ||
	     WILL_FIRE_RL_kg_roundKey2 && _dfoo154 ||
	     EN_genKeys ;

  // register kg_round_key_done_10
  assign kg_round_key_done_10$D_IN = !EN_genKeys ;
  assign kg_round_key_done_10$EN =
	     WILL_FIRE_RL_kg_roundKey && kg_round_number == 4'd10 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd0 ||
	     WILL_FIRE_RL_kg_roundKey2 && _dfoo136 ||
	     EN_genKeys ;

  // register kg_round_key_done_11
  assign kg_round_key_done_11$D_IN = !EN_genKeys ;
  assign kg_round_key_done_11$EN =
	     WILL_FIRE_RL_kg_roundKey && kg_round_number == 4'd11 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd0 ||
	     WILL_FIRE_RL_kg_roundKey2 && _dfoo134 ||
	     EN_genKeys ;

  // register kg_round_key_done_12
  assign kg_round_key_done_12$D_IN = !EN_genKeys ;
  assign kg_round_key_done_12$EN =
	     WILL_FIRE_RL_kg_roundKey && kg_round_number == 4'd12 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd0 ||
	     WILL_FIRE_RL_kg_roundKey2 && _dfoo132 ||
	     EN_genKeys ;

  // register kg_round_key_done_13
  assign kg_round_key_done_13$D_IN = !EN_genKeys ;
  assign kg_round_key_done_13$EN =
	     WILL_FIRE_RL_kg_roundKey && kg_round_number == 4'd13 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd0 ||
	     WILL_FIRE_RL_kg_roundKey2 && _dfoo130 ||
	     EN_genKeys ;

  // register kg_round_key_done_14
  assign kg_round_key_done_14$D_IN = !EN_genKeys ;
  assign kg_round_key_done_14$EN =
	     WILL_FIRE_RL_kg_roundKey && kg_round_number == 4'd14 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd0 ||
	     WILL_FIRE_RL_kg_roundKey2 && _dfoo128 ||
	     EN_genKeys ;

  // register kg_round_key_done_2
  assign kg_round_key_done_2$D_IN = !EN_genKeys ;
  assign kg_round_key_done_2$EN =
	     WILL_FIRE_RL_kg_roundKey && kg_round_number == 4'd2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd0 ||
	     WILL_FIRE_RL_kg_roundKey2 && _dfoo152 ||
	     EN_genKeys ;

  // register kg_round_key_done_3
  assign kg_round_key_done_3$D_IN = !EN_genKeys ;
  assign kg_round_key_done_3$EN =
	     WILL_FIRE_RL_kg_roundKey && kg_round_number == 4'd3 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd0 ||
	     WILL_FIRE_RL_kg_roundKey2 && _dfoo150 ||
	     EN_genKeys ;

  // register kg_round_key_done_4
  assign kg_round_key_done_4$D_IN = !EN_genKeys ;
  assign kg_round_key_done_4$EN =
	     WILL_FIRE_RL_kg_roundKey && kg_round_number == 4'd4 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd0 ||
	     WILL_FIRE_RL_kg_roundKey2 && _dfoo148 ||
	     EN_genKeys ;

  // register kg_round_key_done_5
  assign kg_round_key_done_5$D_IN = !EN_genKeys ;
  assign kg_round_key_done_5$EN =
	     WILL_FIRE_RL_kg_roundKey && kg_round_number == 4'd5 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd0 ||
	     WILL_FIRE_RL_kg_roundKey2 && _dfoo146 ||
	     EN_genKeys ;

  // register kg_round_key_done_6
  assign kg_round_key_done_6$D_IN = !EN_genKeys ;
  assign kg_round_key_done_6$EN =
	     WILL_FIRE_RL_kg_roundKey && kg_round_number == 4'd6 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd0 ||
	     WILL_FIRE_RL_kg_roundKey2 && _dfoo144 ||
	     EN_genKeys ;

  // register kg_round_key_done_7
  assign kg_round_key_done_7$D_IN = !EN_genKeys ;
  assign kg_round_key_done_7$EN =
	     WILL_FIRE_RL_kg_roundKey && kg_round_number == 4'd7 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd0 ||
	     WILL_FIRE_RL_kg_roundKey2 && _dfoo142 ||
	     EN_genKeys ;

  // register kg_round_key_done_8
  assign kg_round_key_done_8$D_IN = !EN_genKeys ;
  assign kg_round_key_done_8$EN =
	     WILL_FIRE_RL_kg_roundKey && kg_round_number == 4'd8 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd0 ||
	     WILL_FIRE_RL_kg_roundKey2 && _dfoo140 ||
	     EN_genKeys ;

  // register kg_round_key_done_9
  assign kg_round_key_done_9$D_IN = !EN_genKeys ;
  assign kg_round_key_done_9$EN =
	     WILL_FIRE_RL_kg_roundKey && kg_round_number == 4'd9 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd0 ||
	     WILL_FIRE_RL_kg_roundKey2 && _dfoo138 ||
	     EN_genKeys ;

  // register kg_round_number
  always@(MUX_kg_round_number$write_1__SEL_1 or
	  x__h10783 or
	  MUX_kg_round_number$write_1__SEL_2 or
	  MUX_kg_round_number$write_1__VAL_2 or
	  MUX_kg_prev_key0$write_1__SEL_2 or
	  MUX_kg_round_number$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_kg_round_number$write_1__SEL_1: kg_round_number$D_IN = x__h10783;
      MUX_kg_round_number$write_1__SEL_2:
	  kg_round_number$D_IN = MUX_kg_round_number$write_1__VAL_2;
      MUX_kg_prev_key0$write_1__SEL_2:
	  kg_round_number$D_IN = MUX_kg_round_number$write_1__VAL_3;
      default: kg_round_number$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign kg_round_number$EN =
	     WILL_FIRE_RL_kg_roundKey &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd0 ||
	     MUX_kg_round_number$write_1__SEL_2 ||
	     EN_genKeys &&
	     (genKeys_keyylenn == 2'd0 || genKeys_keyylenn == 2'd1 ||
	      genKeys_keyylenn == 2'd2) ;

  // register kg_round_toggle_192
  assign kg_round_toggle_192$D_IN =
	     !MUX_kg_round_toggle_192$write_1__SEL_1 && !kg_round_toggle_192 ;
  assign kg_round_toggle_192$EN =
	     WILL_FIRE_RL_kg_round_start2 && kg_key_length == 2'd1 ||
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 ;

  // register kg_sbox_out
  assign kg_sbox_out$D_IN =
	     (MUX_kg_rot_prev_key$write_1__SEL_1 ||
	      MUX_kg_rot_prev_key$write_1__SEL_2 ||
	      MUX_kg_sbox_out$write_1__SEL_4) ?
	       sboxes_0$getbyte :
	       MUX_kg_sbox_out$write_1__VAL_3 ;
  assign kg_sbox_out$EN =
	     WILL_FIRE_RL_kg_round_start2 &&
	     (kg_key_length == 2'd0 || kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2) ||
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2_04_AND_kg_ETC___d189 ||
	     WILL_FIRE_RL_kg_subKey && _dfoo15 ||
	     WILL_FIRE_RL_kg_aes256subcol && _dfoo31 ;

  // register kg_temp_key0
  assign kg_temp_key0$D_IN = 32'h0 ;
  assign kg_temp_key0$EN = 1'b0 ;

  // register kg_temp_key1
  assign kg_temp_key1$D_IN = 32'h0 ;
  assign kg_temp_key1$EN = 1'b0 ;

  // register kg_temp_key2
  assign kg_temp_key2$D_IN = 32'h0 ;
  assign kg_temp_key2$EN = 1'b0 ;

  // register kg_temp_key3
  assign kg_temp_key3$D_IN = 32'h0 ;
  assign kg_temp_key3$EN = 1'b0 ;

  // register maxround
  always@(genKeys_keyylenn)
  begin
    case (genKeys_keyylenn)
      2'd0: maxround$D_IN = 4'd10;
      2'd1: maxround$D_IN = 4'd12;
      default: maxround$D_IN = 4'd14;
    endcase
  end
  assign maxround$EN = MUX_kg_prev_key0$write_1__SEL_2 ;

  // register new_round
  assign new_round$D_IN = 1'b0 ;
  assign new_round$EN = 1'b0 ;

  // register plaintext
  assign plaintext$D_IN = encrypt_plaintexttt ;
  assign plaintext$EN = EN_encrypt ;

  // register rg_state
  always@(MUX__unnamed_$write_1__SEL_1 or
	  WILL_FIRE_RL_initial_xor or
	  MUX_rg_state$write_1__VAL_2 or
	  EN_ret or WILL_FIRE_RL_rl_temp or EN_encrypt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX__unnamed_$write_1__SEL_1: rg_state$D_IN = 3'd2;
      WILL_FIRE_RL_initial_xor: rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      EN_ret: rg_state$D_IN = 3'd0;
      WILL_FIRE_RL_rl_temp: rg_state$D_IN = 3'd1;
      EN_encrypt: rg_state$D_IN = 3'd3;
      default: rg_state$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_encode && counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_initial_xor ||
	     EN_ret ||
	     WILL_FIRE_RL_rl_temp ||
	     EN_encrypt ;

  // register rg_state2
  assign rg_state2$D_IN = EN_genKeys ;
  assign rg_state2$EN =
	     rg_state2 &&
	     SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992 ||
	     EN_genKeys ;

  // submodule kg_rcongen
  assign kg_rcongen$read_addr = kg_rci ;

  // submodule kg_save_key0
  always@(MUX_kg_save_key0$put_1__SEL_1 or
	  MUX_kg_save_key0$put_1__SEL_2 or
	  kg_round_number or
	  MUX_kg_round_number$write_1__SEL_2 or
	  x__h10783 or
	  MUX_dr_colout0$write_1__SEL_2 or
	  MUX_kg_save_key0$put_2__VAL_4 or
	  WILL_FIRE_RL_rl_temp or
	  MUX_kg_save_key0$put_2__VAL_5 or
	  WILL_FIRE_RL_initial_xor or
	  MUX_kg_save_key0$put_2__VAL_6 or
	  EN_encrypt or
	  MUX_kg_save_key0$put_2__VAL_7 or WILL_FIRE_RL_kg_round_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_kg_save_key0$put_1__SEL_1: kg_save_key0$ADDR = 4'd1;
      MUX_kg_save_key0$put_1__SEL_2: kg_save_key0$ADDR = kg_round_number;
      MUX_kg_round_number$write_1__SEL_2: kg_save_key0$ADDR = x__h10783;
      MUX_dr_colout0$write_1__SEL_2:
	  kg_save_key0$ADDR = MUX_kg_save_key0$put_2__VAL_4;
      WILL_FIRE_RL_rl_temp: kg_save_key0$ADDR = MUX_kg_save_key0$put_2__VAL_5;
      WILL_FIRE_RL_initial_xor:
	  kg_save_key0$ADDR = MUX_kg_save_key0$put_2__VAL_6;
      EN_encrypt: kg_save_key0$ADDR = MUX_kg_save_key0$put_2__VAL_7;
      WILL_FIRE_RL_kg_round_start: kg_save_key0$ADDR = 4'd0;
      default: kg_save_key0$ADDR = 4'b1010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_kg_round_start or
	  kg_prev_key0 or
	  MUX_kg_save_key0$put_1__SEL_1 or
	  kg_prev_key4 or
	  MUX_kg_save_key0$put_1__SEL_2 or
	  key0__h7795 or
	  MUX_kg_round_number$write_1__SEL_2 or
	  MUX_kg_save_key0$put_3__VAL_3 or
	  MUX_dr_colout0$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_temp or WILL_FIRE_RL_initial_xor or EN_encrypt)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_kg_round_start: kg_save_key0$DI = kg_prev_key0;
      MUX_kg_save_key0$put_1__SEL_1: kg_save_key0$DI = kg_prev_key4;
      MUX_kg_save_key0$put_1__SEL_2: kg_save_key0$DI = key0__h7795;
      MUX_kg_round_number$write_1__SEL_2:
	  kg_save_key0$DI = MUX_kg_save_key0$put_3__VAL_3;
      MUX_dr_colout0$write_1__SEL_2 || WILL_FIRE_RL_rl_temp ||
      WILL_FIRE_RL_initial_xor ||
      EN_encrypt:
	  kg_save_key0$DI = 32'd0;
      default: kg_save_key0$DI = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign kg_save_key0$WE =
	     !MUX_dr_colout0$write_1__SEL_2 && !WILL_FIRE_RL_rl_temp &&
	     !WILL_FIRE_RL_initial_xor &&
	     !EN_encrypt ;
  assign kg_save_key0$EN =
	     WILL_FIRE_RL_kg_round_start2 &&
	     (kg_key_length == 2'd1 || kg_key_length == 2'd2) ||
	     WILL_FIRE_RL_kg_roundKey &&
	     kg_round_number_1_ULE_kg_maxrounds_2_04_AND_kg_ETC___d112 ||
	     MUX_kg_round_number$write_1__SEL_2 ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ||
	     WILL_FIRE_RL_initial_xor ||
	     EN_encrypt ||
	     WILL_FIRE_RL_kg_round_start ;

  // submodule kg_save_key1
  always@(MUX_kg_save_key0$put_1__SEL_1 or
	  MUX_kg_save_key0$put_1__SEL_2 or
	  kg_round_number or
	  MUX_kg_round_number$write_1__SEL_2 or
	  x__h10783 or
	  MUX_dr_colout0$write_1__SEL_2 or
	  MUX_kg_save_key0$put_2__VAL_4 or
	  WILL_FIRE_RL_rl_temp or
	  MUX_kg_save_key0$put_2__VAL_5 or
	  WILL_FIRE_RL_initial_xor or
	  MUX_kg_save_key0$put_2__VAL_6 or
	  EN_encrypt or
	  MUX_kg_save_key0$put_2__VAL_7 or WILL_FIRE_RL_kg_round_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_kg_save_key0$put_1__SEL_1: kg_save_key1$ADDR = 4'd1;
      MUX_kg_save_key0$put_1__SEL_2: kg_save_key1$ADDR = kg_round_number;
      MUX_kg_round_number$write_1__SEL_2: kg_save_key1$ADDR = x__h10783;
      MUX_dr_colout0$write_1__SEL_2:
	  kg_save_key1$ADDR = MUX_kg_save_key0$put_2__VAL_4;
      WILL_FIRE_RL_rl_temp: kg_save_key1$ADDR = MUX_kg_save_key0$put_2__VAL_5;
      WILL_FIRE_RL_initial_xor:
	  kg_save_key1$ADDR = MUX_kg_save_key0$put_2__VAL_6;
      EN_encrypt: kg_save_key1$ADDR = MUX_kg_save_key0$put_2__VAL_7;
      WILL_FIRE_RL_kg_round_start: kg_save_key1$ADDR = 4'd0;
      default: kg_save_key1$ADDR = 4'b1010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_kg_round_start or
	  kg_prev_key1 or
	  MUX_kg_save_key0$put_1__SEL_1 or
	  kg_prev_key5 or
	  MUX_kg_save_key0$put_1__SEL_2 or
	  key1__h7796 or
	  MUX_kg_round_number$write_1__SEL_2 or
	  MUX_kg_save_key1$put_3__VAL_3 or
	  MUX_dr_colout0$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_temp or WILL_FIRE_RL_initial_xor or EN_encrypt)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_kg_round_start: kg_save_key1$DI = kg_prev_key1;
      MUX_kg_save_key0$put_1__SEL_1: kg_save_key1$DI = kg_prev_key5;
      MUX_kg_save_key0$put_1__SEL_2: kg_save_key1$DI = key1__h7796;
      MUX_kg_round_number$write_1__SEL_2:
	  kg_save_key1$DI = MUX_kg_save_key1$put_3__VAL_3;
      MUX_dr_colout0$write_1__SEL_2 || WILL_FIRE_RL_rl_temp ||
      WILL_FIRE_RL_initial_xor ||
      EN_encrypt:
	  kg_save_key1$DI = 32'd0;
      default: kg_save_key1$DI = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign kg_save_key1$WE =
	     !MUX_dr_colout0$write_1__SEL_2 && !WILL_FIRE_RL_rl_temp &&
	     !WILL_FIRE_RL_initial_xor &&
	     !EN_encrypt ;
  assign kg_save_key1$EN =
	     WILL_FIRE_RL_kg_round_start2 &&
	     (kg_key_length == 2'd1 || kg_key_length == 2'd2) ||
	     WILL_FIRE_RL_kg_roundKey &&
	     kg_round_number_1_ULE_kg_maxrounds_2_04_AND_kg_ETC___d112 ||
	     MUX_kg_round_number$write_1__SEL_2 ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ||
	     WILL_FIRE_RL_initial_xor ||
	     EN_encrypt ||
	     WILL_FIRE_RL_kg_round_start ;

  // submodule kg_save_key2
  always@(MUX_kg_round_key_done_1$write_1__SEL_1 or
	  MUX_kg_save_key2$put_1__SEL_2 or
	  kg_round_number or
	  MUX_kg_save_key2$put_1__SEL_3 or
	  x__h10783 or
	  MUX_dr_colout0$write_1__SEL_2 or
	  MUX_kg_save_key0$put_2__VAL_4 or
	  WILL_FIRE_RL_rl_temp or
	  MUX_kg_save_key0$put_2__VAL_5 or
	  WILL_FIRE_RL_initial_xor or
	  MUX_kg_save_key0$put_2__VAL_6 or
	  EN_encrypt or
	  MUX_kg_save_key0$put_2__VAL_7 or WILL_FIRE_RL_kg_round_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_kg_round_key_done_1$write_1__SEL_1: kg_save_key2$ADDR = 4'd1;
      MUX_kg_save_key2$put_1__SEL_2: kg_save_key2$ADDR = kg_round_number;
      MUX_kg_save_key2$put_1__SEL_3: kg_save_key2$ADDR = x__h10783;
      MUX_dr_colout0$write_1__SEL_2:
	  kg_save_key2$ADDR = MUX_kg_save_key0$put_2__VAL_4;
      WILL_FIRE_RL_rl_temp: kg_save_key2$ADDR = MUX_kg_save_key0$put_2__VAL_5;
      WILL_FIRE_RL_initial_xor:
	  kg_save_key2$ADDR = MUX_kg_save_key0$put_2__VAL_6;
      EN_encrypt: kg_save_key2$ADDR = MUX_kg_save_key0$put_2__VAL_7;
      WILL_FIRE_RL_kg_round_start: kg_save_key2$ADDR = 4'd0;
      default: kg_save_key2$ADDR = 4'b1010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_kg_round_start or
	  kg_prev_key2 or
	  MUX_kg_round_key_done_1$write_1__SEL_1 or
	  kg_prev_key6 or
	  MUX_kg_save_key2$put_1__SEL_2 or
	  MUX_kg_save_key2$put_3__VAL_2 or
	  MUX_kg_save_key2$put_1__SEL_3 or
	  MUX_kg_save_key2$put_3__VAL_3 or
	  MUX_dr_colout0$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_temp or WILL_FIRE_RL_initial_xor or EN_encrypt)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_kg_round_start: kg_save_key2$DI = kg_prev_key2;
      MUX_kg_round_key_done_1$write_1__SEL_1: kg_save_key2$DI = kg_prev_key6;
      MUX_kg_save_key2$put_1__SEL_2:
	  kg_save_key2$DI = MUX_kg_save_key2$put_3__VAL_2;
      MUX_kg_save_key2$put_1__SEL_3:
	  kg_save_key2$DI = MUX_kg_save_key2$put_3__VAL_3;
      MUX_dr_colout0$write_1__SEL_2 || WILL_FIRE_RL_rl_temp ||
      WILL_FIRE_RL_initial_xor ||
      EN_encrypt:
	  kg_save_key2$DI = 32'd0;
      default: kg_save_key2$DI = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign kg_save_key2$WE =
	     !MUX_dr_colout0$write_1__SEL_2 && !WILL_FIRE_RL_rl_temp &&
	     !WILL_FIRE_RL_initial_xor &&
	     !EN_encrypt ;
  assign kg_save_key2$EN =
	     WILL_FIRE_RL_kg_round_start2 && kg_key_length == 2'd2 ||
	     WILL_FIRE_RL_kg_roundKey &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     (kg_key_length == 2'd0 || kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2) ||
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2_04_AND_kg_ETC___d182 ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ||
	     WILL_FIRE_RL_initial_xor ||
	     EN_encrypt ||
	     WILL_FIRE_RL_kg_round_start ;

  // submodule kg_save_key3
  always@(MUX_kg_round_key_done_1$write_1__SEL_1 or
	  MUX_kg_save_key2$put_1__SEL_2 or
	  kg_round_number or
	  MUX_kg_save_key2$put_1__SEL_3 or
	  x__h10783 or
	  MUX_dr_colout0$write_1__SEL_2 or
	  MUX_kg_save_key0$put_2__VAL_4 or
	  WILL_FIRE_RL_rl_temp or
	  MUX_kg_save_key0$put_2__VAL_5 or
	  WILL_FIRE_RL_initial_xor or
	  MUX_kg_save_key0$put_2__VAL_6 or
	  EN_encrypt or
	  MUX_kg_save_key0$put_2__VAL_7 or WILL_FIRE_RL_kg_round_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_kg_round_key_done_1$write_1__SEL_1: kg_save_key3$ADDR = 4'd1;
      MUX_kg_save_key2$put_1__SEL_2: kg_save_key3$ADDR = kg_round_number;
      MUX_kg_save_key2$put_1__SEL_3: kg_save_key3$ADDR = x__h10783;
      MUX_dr_colout0$write_1__SEL_2:
	  kg_save_key3$ADDR = MUX_kg_save_key0$put_2__VAL_4;
      WILL_FIRE_RL_rl_temp: kg_save_key3$ADDR = MUX_kg_save_key0$put_2__VAL_5;
      WILL_FIRE_RL_initial_xor:
	  kg_save_key3$ADDR = MUX_kg_save_key0$put_2__VAL_6;
      EN_encrypt: kg_save_key3$ADDR = MUX_kg_save_key0$put_2__VAL_7;
      WILL_FIRE_RL_kg_round_start: kg_save_key3$ADDR = 4'd0;
      default: kg_save_key3$ADDR = 4'b1010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_kg_round_start or
	  kg_prev_key3 or
	  MUX_kg_round_key_done_1$write_1__SEL_1 or
	  kg_prev_key7 or
	  MUX_kg_save_key2$put_1__SEL_2 or
	  MUX_kg_save_key3$put_3__VAL_2 or
	  MUX_kg_save_key2$put_1__SEL_3 or
	  MUX_kg_save_key3$put_3__VAL_3 or
	  MUX_dr_colout0$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_temp or WILL_FIRE_RL_initial_xor or EN_encrypt)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_kg_round_start: kg_save_key3$DI = kg_prev_key3;
      MUX_kg_round_key_done_1$write_1__SEL_1: kg_save_key3$DI = kg_prev_key7;
      MUX_kg_save_key2$put_1__SEL_2:
	  kg_save_key3$DI = MUX_kg_save_key3$put_3__VAL_2;
      MUX_kg_save_key2$put_1__SEL_3:
	  kg_save_key3$DI = MUX_kg_save_key3$put_3__VAL_3;
      MUX_dr_colout0$write_1__SEL_2 || WILL_FIRE_RL_rl_temp ||
      WILL_FIRE_RL_initial_xor ||
      EN_encrypt:
	  kg_save_key3$DI = 32'd0;
      default: kg_save_key3$DI = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign kg_save_key3$WE =
	     !MUX_dr_colout0$write_1__SEL_2 && !WILL_FIRE_RL_rl_temp &&
	     !WILL_FIRE_RL_initial_xor &&
	     !EN_encrypt ;
  assign kg_save_key3$EN =
	     WILL_FIRE_RL_kg_round_start2 && kg_key_length == 2'd2 ||
	     WILL_FIRE_RL_kg_roundKey &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     (kg_key_length == 2'd0 || kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2) ||
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2_04_AND_kg_ETC___d182 ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ||
	     WILL_FIRE_RL_initial_xor ||
	     EN_encrypt ||
	     WILL_FIRE_RL_kg_round_start ;

  // submodule sboxes_0
  always@(MUX_dr_colout0$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_temp or
	  col3 or
	  MUX_kg_rot_prev_key$write_1__SEL_1 or
	  MUX_sboxes_0$getbyte_1__VAL_1 or
	  MUX_kg_rot_prev_key$write_1__SEL_2 or
	  MUX_sboxes_0$getbyte_1__VAL_3 or
	  MUX_dr_colout0$write_1__SEL_2 or
	  MUX_sboxes_0$getbyte_1__VAL_4 or
	  MUX_sboxes_0$getbyte_1__SEL_5 or
	  MUX_sboxes_0$getbyte_1__VAL_5 or
	  MUX_sboxes_0$getbyte_1__SEL_6 or MUX_sboxes_0$getbyte_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_colout0$write_1__SEL_1 || WILL_FIRE_RL_rl_temp:
	  sboxes_0$getbyte_byte_in = col3[7:0];
      MUX_kg_rot_prev_key$write_1__SEL_1:
	  sboxes_0$getbyte_byte_in = MUX_sboxes_0$getbyte_1__VAL_1;
      MUX_kg_rot_prev_key$write_1__SEL_2:
	  sboxes_0$getbyte_byte_in = MUX_sboxes_0$getbyte_1__VAL_3;
      MUX_dr_colout0$write_1__SEL_2:
	  sboxes_0$getbyte_byte_in = MUX_sboxes_0$getbyte_1__VAL_4;
      MUX_sboxes_0$getbyte_1__SEL_5:
	  sboxes_0$getbyte_byte_in = MUX_sboxes_0$getbyte_1__VAL_5;
      MUX_sboxes_0$getbyte_1__SEL_6:
	  sboxes_0$getbyte_byte_in = MUX_sboxes_0$getbyte_1__VAL_6;
      default: sboxes_0$getbyte_byte_in =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dr_colout0$write_1__SEL_1 or
	  MUX_dr_colout0$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_temp or
	  decrypt or
	  MUX_sboxes_0$getbyte_1__SEL_5 or
	  MUX_sboxes_0$getbyte_2__VAL_5 or
	  MUX_kg_rot_prev_key$write_1__SEL_1 or
	  MUX_kg_rot_prev_key$write_1__SEL_2 or MUX_sboxes_0$getbyte_1__SEL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_colout0$write_1__SEL_1 || MUX_dr_colout0$write_1__SEL_2 ||
      WILL_FIRE_RL_rl_temp:
	  sboxes_0$getbyte_decrypt_ = decrypt;
      MUX_sboxes_0$getbyte_1__SEL_5:
	  sboxes_0$getbyte_decrypt_ = MUX_sboxes_0$getbyte_2__VAL_5;
      MUX_kg_rot_prev_key$write_1__SEL_1 ||
      MUX_kg_rot_prev_key$write_1__SEL_2 ||
      MUX_sboxes_0$getbyte_1__SEL_6:
	  sboxes_0$getbyte_decrypt_ = 1'd0;
      default: sboxes_0$getbyte_decrypt_ = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign sboxes_0$EN_getbyte =
	     WILL_FIRE_RL_kg_round_start2 &&
	     (kg_key_length == 2'd0 || kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2) ||
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_kg_roundKey2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2_04_AND_kg_ETC___d189 ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_kg_subKey && _dfoo15 ||
	     WILL_FIRE_RL_kg_aes256subcol && _dfoo31 ||
	     WILL_FIRE_RL_rl_temp ;

  // submodule sboxes_1
  assign sboxes_1$getbyte_byte_in =
	     (MUX_dr_colout0$write_1__SEL_1 || WILL_FIRE_RL_rl_temp) ?
	       col3[15:8] :
	       MUX_sboxes_1$getbyte_1__VAL_2 ;
  assign sboxes_1$getbyte_decrypt_ = decrypt ;
  assign sboxes_1$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // submodule sboxes_10
  assign sboxes_10$getbyte_byte_in =
	     (MUX_dr_colout0$write_1__SEL_1 || WILL_FIRE_RL_rl_temp) ?
	       col1[23:16] :
	       MUX_sboxes_10$getbyte_1__VAL_2 ;
  assign sboxes_10$getbyte_decrypt_ = decrypt ;
  assign sboxes_10$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // submodule sboxes_11
  assign sboxes_11$getbyte_byte_in =
	     (MUX_dr_colout0$write_1__SEL_1 || WILL_FIRE_RL_rl_temp) ?
	       col1[31:24] :
	       MUX_sboxes_11$getbyte_1__VAL_2 ;
  assign sboxes_11$getbyte_decrypt_ = decrypt ;
  assign sboxes_11$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // submodule sboxes_12
  assign sboxes_12$getbyte_byte_in =
	     (MUX_dr_colout0$write_1__SEL_1 || WILL_FIRE_RL_rl_temp) ?
	       col0[7:0] :
	       MUX_sboxes_12$getbyte_1__VAL_2 ;
  assign sboxes_12$getbyte_decrypt_ = decrypt ;
  assign sboxes_12$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // submodule sboxes_13
  assign sboxes_13$getbyte_byte_in =
	     (MUX_dr_colout0$write_1__SEL_1 || WILL_FIRE_RL_rl_temp) ?
	       col0[15:8] :
	       MUX_sboxes_13$getbyte_1__VAL_2 ;
  assign sboxes_13$getbyte_decrypt_ = decrypt ;
  assign sboxes_13$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // submodule sboxes_14
  assign sboxes_14$getbyte_byte_in =
	     (MUX_dr_colout0$write_1__SEL_1 || WILL_FIRE_RL_rl_temp) ?
	       col0[23:16] :
	       MUX_sboxes_14$getbyte_1__VAL_2 ;
  assign sboxes_14$getbyte_decrypt_ = decrypt ;
  assign sboxes_14$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // submodule sboxes_15
  assign sboxes_15$getbyte_byte_in =
	     (MUX_dr_colout0$write_1__SEL_1 || WILL_FIRE_RL_rl_temp) ?
	       col0[31:24] :
	       MUX_sboxes_15$getbyte_1__VAL_2 ;
  assign sboxes_15$getbyte_decrypt_ = decrypt ;
  assign sboxes_15$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // submodule sboxes_2
  assign sboxes_2$getbyte_byte_in =
	     (MUX_dr_colout0$write_1__SEL_1 || WILL_FIRE_RL_rl_temp) ?
	       col3[23:16] :
	       MUX_sboxes_2$getbyte_1__VAL_2 ;
  assign sboxes_2$getbyte_decrypt_ = decrypt ;
  assign sboxes_2$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // submodule sboxes_3
  assign sboxes_3$getbyte_byte_in =
	     (MUX_dr_colout0$write_1__SEL_1 || WILL_FIRE_RL_rl_temp) ?
	       col3[31:24] :
	       MUX_sboxes_3$getbyte_1__VAL_2 ;
  assign sboxes_3$getbyte_decrypt_ = decrypt ;
  assign sboxes_3$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // submodule sboxes_4
  assign sboxes_4$getbyte_byte_in =
	     (MUX_dr_colout0$write_1__SEL_1 || WILL_FIRE_RL_rl_temp) ?
	       col2[7:0] :
	       MUX_sboxes_4$getbyte_1__VAL_2 ;
  assign sboxes_4$getbyte_decrypt_ = decrypt ;
  assign sboxes_4$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // submodule sboxes_5
  assign sboxes_5$getbyte_byte_in =
	     (MUX_dr_colout0$write_1__SEL_1 || WILL_FIRE_RL_rl_temp) ?
	       col2[15:8] :
	       MUX_sboxes_5$getbyte_1__VAL_2 ;
  assign sboxes_5$getbyte_decrypt_ = decrypt ;
  assign sboxes_5$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // submodule sboxes_6
  assign sboxes_6$getbyte_byte_in =
	     (MUX_dr_colout0$write_1__SEL_1 || WILL_FIRE_RL_rl_temp) ?
	       col2[23:16] :
	       MUX_sboxes_6$getbyte_1__VAL_2 ;
  assign sboxes_6$getbyte_decrypt_ = decrypt ;
  assign sboxes_6$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // submodule sboxes_7
  assign sboxes_7$getbyte_byte_in =
	     (MUX_dr_colout0$write_1__SEL_1 || WILL_FIRE_RL_rl_temp) ?
	       col2[31:24] :
	       MUX_sboxes_7$getbyte_1__VAL_2 ;
  assign sboxes_7$getbyte_decrypt_ = decrypt ;
  assign sboxes_7$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // submodule sboxes_8
  assign sboxes_8$getbyte_byte_in =
	     (MUX_dr_colout0$write_1__SEL_1 || WILL_FIRE_RL_rl_temp) ?
	       col1[7:0] :
	       MUX_sboxes_8$getbyte_1__VAL_2 ;
  assign sboxes_8$getbyte_decrypt_ = decrypt ;
  assign sboxes_8$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // submodule sboxes_9
  assign sboxes_9$getbyte_byte_in =
	     (MUX_dr_colout0$write_1__SEL_1 || WILL_FIRE_RL_rl_temp) ?
	       col1[15:8] :
	       MUX_sboxes_9$getbyte_1__VAL_2 ;
  assign sboxes_9$getbyte_decrypt_ = decrypt ;
  assign sboxes_9$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_encode && !counter_199_EQ_maxround_19___d1200 ||
	     WILL_FIRE_RL_rl_temp ;

  // remaining internal signals
  assign _dfoo100 =
	     kg_round_number == 4'd13 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo70 ;
  assign _dfoo102 =
	     kg_round_number == 4'd12 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo72 ;
  assign _dfoo104 =
	     kg_round_number == 4'd11 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo74 ;
  assign _dfoo106 =
	     kg_round_number == 4'd10 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo76 ;
  assign _dfoo108 =
	     kg_round_number == 4'd9 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo78 ;
  assign _dfoo110 =
	     kg_round_number == 4'd8 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo80 ;
  assign _dfoo112 =
	     kg_round_number == 4'd7 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo82 ;
  assign _dfoo114 =
	     kg_round_number == 4'd6 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo84 ;
  assign _dfoo116 =
	     kg_round_number == 4'd5 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo86 ;
  assign _dfoo118 =
	     kg_round_number == 4'd4 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo88 ;
  assign _dfoo120 =
	     kg_round_number == 4'd3 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo90 ;
  assign _dfoo122 =
	     kg_round_number == 4'd2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo92 ;
  assign _dfoo124 =
	     kg_round_number == 4'd1 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo94 ;
  assign _dfoo126 =
	     kg_round_number == 4'd0 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo96 ;
  assign _dfoo128 =
	     kg_round_number == 4'd14 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ||
	     _dfoo98 ;
  assign _dfoo130 =
	     kg_round_number == 4'd13 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ||
	     _dfoo100 ;
  assign _dfoo132 =
	     kg_round_number == 4'd12 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ||
	     _dfoo102 ;
  assign _dfoo134 =
	     kg_round_number == 4'd11 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ||
	     _dfoo104 ;
  assign _dfoo136 =
	     kg_round_number == 4'd10 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ||
	     _dfoo106 ;
  assign _dfoo138 =
	     kg_round_number == 4'd9 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ||
	     _dfoo108 ;
  assign _dfoo140 =
	     kg_round_number == 4'd8 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ||
	     _dfoo110 ;
  assign _dfoo142 =
	     kg_round_number == 4'd7 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ||
	     _dfoo112 ;
  assign _dfoo144 =
	     kg_round_number == 4'd6 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ||
	     _dfoo114 ;
  assign _dfoo146 =
	     kg_round_number == 4'd5 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ||
	     _dfoo116 ;
  assign _dfoo148 =
	     kg_round_number == 4'd4 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ||
	     _dfoo118 ;
  assign _dfoo15 =
	     kg_counter == 4'd0 || kg_counter == 4'd1 || kg_counter == 4'd2 ||
	     kg_counter == 4'd3 && kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ;
  assign _dfoo150 =
	     kg_round_number == 4'd3 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ||
	     _dfoo120 ;
  assign _dfoo152 =
	     kg_round_number == 4'd2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ||
	     _dfoo122 ;
  assign _dfoo154 =
	     kg_round_number == 4'd1 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ||
	     _dfoo124 ;
  assign _dfoo156 =
	     kg_round_number == 4'd0 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ||
	     _dfoo126 ;
  assign _dfoo31 =
	     kg_counter == 4'd4 || kg_counter == 4'd5 || kg_counter == 4'd6 ;
  assign _dfoo36 =
	     kg_counter == 4'd4 || kg_counter == 4'd5 || kg_counter == 4'd6 ||
	     kg_counter == 4'd7 ;
  assign _dfoo38 =
	     kg_round_number == 4'd14 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 ||
	     x__h10783 == 4'd14 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ;
  assign _dfoo40 =
	     kg_round_number == 4'd13 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 ||
	     x__h10783 == 4'd13 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ;
  assign _dfoo42 =
	     kg_round_number == 4'd12 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 ||
	     x__h10783 == 4'd12 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ;
  assign _dfoo44 =
	     kg_round_number == 4'd11 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 ||
	     x__h10783 == 4'd11 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ;
  assign _dfoo46 =
	     kg_round_number == 4'd10 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 ||
	     x__h10783 == 4'd10 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ;
  assign _dfoo48 =
	     kg_round_number == 4'd9 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 ||
	     x__h10783 == 4'd9 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ;
  assign _dfoo50 =
	     kg_round_number == 4'd8 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 ||
	     x__h10783 == 4'd8 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ;
  assign _dfoo52 =
	     kg_round_number == 4'd7 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 ||
	     x__h10783 == 4'd7 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ;
  assign _dfoo54 =
	     kg_round_number == 4'd6 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 ||
	     x__h10783 == 4'd6 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ;
  assign _dfoo56 =
	     kg_round_number == 4'd5 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 ||
	     x__h10783 == 4'd5 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ;
  assign _dfoo58 =
	     kg_round_number == 4'd4 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 ||
	     x__h10783 == 4'd4 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ;
  assign _dfoo60 =
	     kg_round_number == 4'd3 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 ||
	     x__h10783 == 4'd3 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ;
  assign _dfoo62 =
	     kg_round_number == 4'd2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 ||
	     x__h10783 == 4'd2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ;
  assign _dfoo64 =
	     kg_round_number == 4'd1 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 ||
	     x__h10783 == 4'd1 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ;
  assign _dfoo66 =
	     kg_round_number == 4'd0 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 ||
	     x__h10783 == 4'd0 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_1_EQ_kg_maxrounds_2___d73 ;
  assign _dfoo68 =
	     x__h10783 == 4'd14 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo38 ;
  assign _dfoo70 =
	     x__h10783 == 4'd13 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo40 ;
  assign _dfoo72 =
	     x__h10783 == 4'd12 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo42 ;
  assign _dfoo74 =
	     x__h10783 == 4'd11 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo44 ;
  assign _dfoo76 =
	     x__h10783 == 4'd10 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo46 ;
  assign _dfoo78 =
	     x__h10783 == 4'd9 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo48 ;
  assign _dfoo80 =
	     x__h10783 == 4'd8 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo50 ;
  assign _dfoo82 =
	     x__h10783 == 4'd7 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo52 ;
  assign _dfoo84 =
	     x__h10783 == 4'd6 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo54 ;
  assign _dfoo86 =
	     x__h10783 == 4'd5 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo56 ;
  assign _dfoo88 =
	     x__h10783 == 4'd4 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo58 ;
  assign _dfoo90 =
	     x__h10783 == 4'd3 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo60 ;
  assign _dfoo92 =
	     x__h10783 == 4'd2 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo62 ;
  assign _dfoo94 =
	     x__h10783 == 4'd1 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo64 ;
  assign _dfoo96 =
	     x__h10783 == 4'd0 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo66 ;
  assign _dfoo98 =
	     kg_round_number == 4'd14 &&
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ||
	     _dfoo68 ;
  assign _theResult____h8662 =
	     (kg_key_length == 2'd2) ? key4___1__h8756 : key4__h8661 ;
  assign counter_199_EQ_maxround_19_MINUS_1_20___d1212 =
	     counter == y__h213973 ;
  assign counter_199_EQ_maxround_19___d1200 = counter == maxround ;
  assign eight__h229073 =
	     four__h229072[7] ?
	       { four__h229072[6:4],
		 ~four__h229072[3:2],
		 four__h229072[1],
		 ~four__h229072[0],
		 1'd1 } :
	       { four__h229072[6:0], 1'd0 } ;
  assign eight__h229229 =
	     four__h229729[7] ?
	       { four__h229729[6:4],
		 ~four__h229729[3:2],
		 four__h229729[1],
		 ~four__h229729[0],
		 1'd1 } :
	       { four__h229729[6:0], 1'd0 } ;
  assign eight__h229350 =
	     four__h229349[7] ?
	       { four__h229349[6:4],
		 ~four__h229349[3:2],
		 four__h229349[1],
		 ~four__h229349[0],
		 1'd1 } :
	       { four__h229349[6:0], 1'd0 } ;
  assign eight__h229470 =
	     four__h229971[7] ?
	       { four__h229971[6:4],
		 ~four__h229971[3:2],
		 four__h229971[1],
		 ~four__h229971[0],
		 1'd1 } :
	       { four__h229971[6:0], 1'd0 } ;
  assign eight__h231512 =
	     four__h231511[7] ?
	       { four__h231511[6:4],
		 ~four__h231511[3:2],
		 four__h231511[1],
		 ~four__h231511[0],
		 1'd1 } :
	       { four__h231511[6:0], 1'd0 } ;
  assign eight__h231668 =
	     four__h232168[7] ?
	       { four__h232168[6:4],
		 ~four__h232168[3:2],
		 four__h232168[1],
		 ~four__h232168[0],
		 1'd1 } :
	       { four__h232168[6:0], 1'd0 } ;
  assign eight__h231789 =
	     four__h231788[7] ?
	       { four__h231788[6:4],
		 ~four__h231788[3:2],
		 four__h231788[1],
		 ~four__h231788[0],
		 1'd1 } :
	       { four__h231788[6:0], 1'd0 } ;
  assign eight__h231909 =
	     four__h232410[7] ?
	       { four__h232410[6:4],
		 ~four__h232410[3:2],
		 four__h232410[1],
		 ~four__h232410[0],
		 1'd1 } :
	       { four__h232410[6:0], 1'd0 } ;
  assign eight__h233951 =
	     four__h233950[7] ?
	       { four__h233950[6:4],
		 ~four__h233950[3:2],
		 four__h233950[1],
		 ~four__h233950[0],
		 1'd1 } :
	       { four__h233950[6:0], 1'd0 } ;
  assign eight__h234107 =
	     four__h234607[7] ?
	       { four__h234607[6:4],
		 ~four__h234607[3:2],
		 four__h234607[1],
		 ~four__h234607[0],
		 1'd1 } :
	       { four__h234607[6:0], 1'd0 } ;
  assign eight__h234228 =
	     four__h234227[7] ?
	       { four__h234227[6:4],
		 ~four__h234227[3:2],
		 four__h234227[1],
		 ~four__h234227[0],
		 1'd1 } :
	       { four__h234227[6:0], 1'd0 } ;
  assign eight__h234348 =
	     four__h234849[7] ?
	       { four__h234849[6:4],
		 ~four__h234849[3:2],
		 four__h234849[1],
		 ~four__h234849[0],
		 1'd1 } :
	       { four__h234849[6:0], 1'd0 } ;
  assign eight__h569790 =
	     four__h569270[7] ?
	       { four__h569270[6:4],
		 ~four__h569270[3:2],
		 four__h569270[1],
		 ~four__h569270[0],
		 1'd1 } :
	       { four__h569270[6:0], 1'd0 } ;
  assign eight__h569912 =
	     four__h569911[7] ?
	       { four__h569911[6:4],
		 ~four__h569911[3:2],
		 four__h569911[1],
		 ~four__h569911[0],
		 1'd1 } :
	       { four__h569911[6:0], 1'd0 } ;
  assign eight__h570033 =
	     four__h569502[7] ?
	       { four__h569502[6:4],
		 ~four__h569502[3:2],
		 four__h569502[1],
		 ~four__h569502[0],
		 1'd1 } :
	       { four__h569502[6:0], 1'd0 } ;
  assign eight__h570144 =
	     four__h570143[7] ?
	       { four__h570143[6:4],
		 ~four__h570143[3:2],
		 four__h570143[1],
		 ~four__h570143[0],
		 1'd1 } :
	       { four__h570143[6:0], 1'd0 } ;
  assign four__h229072 =
	     two__h229071[7] ?
	       { two__h229071[6:4],
		 ~two__h229071[3:2],
		 two__h229071[1],
		 ~two__h229071[0],
		 1'd1 } :
	       { two__h229071[6:0], 1'd0 } ;
  assign four__h229349 =
	     two__h229849[7] ?
	       { two__h229849[6:4],
		 ~two__h229849[3:2],
		 two__h229849[1],
		 ~two__h229849[0],
		 1'd1 } :
	       { two__h229849[6:0], 1'd0 } ;
  assign four__h229729 =
	     two__h229227[7] ?
	       { two__h229227[6:4],
		 ~two__h229227[3:2],
		 two__h229227[1],
		 ~two__h229227[0],
		 1'd1 } :
	       { two__h229227[6:0], 1'd0 } ;
  assign four__h229971 =
	     two__h230485[7] ?
	       { two__h230485[6:4],
		 ~two__h230485[3:2],
		 two__h230485[1],
		 ~two__h230485[0],
		 1'd1 } :
	       { two__h230485[6:0], 1'd0 } ;
  assign four__h231511 =
	     two__h231510[7] ?
	       { two__h231510[6:4],
		 ~two__h231510[3:2],
		 two__h231510[1],
		 ~two__h231510[0],
		 1'd1 } :
	       { two__h231510[6:0], 1'd0 } ;
  assign four__h231788 =
	     two__h232288[7] ?
	       { two__h232288[6:4],
		 ~two__h232288[3:2],
		 two__h232288[1],
		 ~two__h232288[0],
		 1'd1 } :
	       { two__h232288[6:0], 1'd0 } ;
  assign four__h232168 =
	     two__h231666[7] ?
	       { two__h231666[6:4],
		 ~two__h231666[3:2],
		 two__h231666[1],
		 ~two__h231666[0],
		 1'd1 } :
	       { two__h231666[6:0], 1'd0 } ;
  assign four__h232410 =
	     two__h232924[7] ?
	       { two__h232924[6:4],
		 ~two__h232924[3:2],
		 two__h232924[1],
		 ~two__h232924[0],
		 1'd1 } :
	       { two__h232924[6:0], 1'd0 } ;
  assign four__h233950 =
	     two__h233949[7] ?
	       { two__h233949[6:4],
		 ~two__h233949[3:2],
		 two__h233949[1],
		 ~two__h233949[0],
		 1'd1 } :
	       { two__h233949[6:0], 1'd0 } ;
  assign four__h234227 =
	     two__h234727[7] ?
	       { two__h234727[6:4],
		 ~two__h234727[3:2],
		 two__h234727[1],
		 ~two__h234727[0],
		 1'd1 } :
	       { two__h234727[6:0], 1'd0 } ;
  assign four__h234607 =
	     two__h234105[7] ?
	       { two__h234105[6:4],
		 ~two__h234105[3:2],
		 two__h234105[1],
		 ~two__h234105[0],
		 1'd1 } :
	       { two__h234105[6:0], 1'd0 } ;
  assign four__h234849 =
	     two__h235363[7] ?
	       { two__h235363[6:4],
		 ~two__h235363[3:2],
		 two__h235363[1],
		 ~two__h235363[0],
		 1'd1 } :
	       { two__h235363[6:0], 1'd0 } ;
  assign four__h569270 =
	     two__h569788[7] ?
	       { two__h569788[6:4],
		 ~two__h569788[3:2],
		 two__h569788[1],
		 ~two__h569788[0],
		 1'd1 } :
	       { two__h569788[6:0], 1'd0 } ;
  assign four__h569502 =
	     two__h569501[7] ?
	       { two__h569501[6:4],
		 ~two__h569501[3:2],
		 two__h569501[1],
		 ~two__h569501[0],
		 1'd1 } :
	       { two__h569501[6:0], 1'd0 } ;
  assign four__h569911 =
	     two__h568860[7] ?
	       { two__h568860[6:4],
		 ~two__h568860[3:2],
		 two__h568860[1],
		 ~two__h568860[0],
		 1'd1 } :
	       { two__h568860[6:0], 1'd0 } ;
  assign four__h570143 =
	     two__h570142[7] ?
	       { two__h570142[6:4],
		 ~two__h570142[3:2],
		 two__h570142[1],
		 ~two__h570142[0],
		 1'd1 } :
	       { two__h570142[6:0], 1'd0 } ;
  assign getKeynum3__h411872 = x__h411914 - 4'd2 ;
  assign key0__h7795 = kg_prev_key0 ^ kg_last_col_sub_rot ;
  assign key1__h7796 = kg_prev_key1 ^ key0__h7795 ;
  assign key2__h7797 = kg_prev_key2 ^ key1__h7796 ;
  assign key3__h7798 = kg_prev_key3 ^ key2__h7797 ;
  assign key4___1__h8756 = kg_prev_key4 ^ kg_aes256_subcol4 ;
  assign key4__h8661 = kg_prev_key4 ^ key3__h7798 ;
  assign key5__h8663 = kg_prev_key5 ^ _theResult____h8662 ;
  assign key6__h8664 = kg_prev_key6 ^ key5__h8663 ;
  assign key7__h8665 = kg_prev_key7 ^ key6__h8664 ;
  assign kg_round_number_1_EQ_kg_maxrounds_2___d73 =
	     kg_round_number == kg_maxrounds ;
  assign kg_round_number_1_ULE_kg_maxrounds_2_04_AND_kg_ETC___d112 =
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     (kg_key_length == 2'd0 ||
	      kg_key_length == 2'd1 && kg_round_toggle_192 ||
	      kg_key_length == 2'd2) ;
  assign kg_round_number_1_ULE_kg_maxrounds_2_04_AND_kg_ETC___d182 =
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     (kg_key_length == 2'd1 && !kg_round_toggle_192 ||
	      kg_key_length == 2'd2 &&
	      !kg_round_number_1_EQ_kg_maxrounds_2___d73) ;
  assign kg_round_number_1_ULE_kg_maxrounds_2_04_AND_kg_ETC___d189 =
	     kg_round_number_1_ULE_kg_maxrounds_2___d104 &&
	     (kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2 &&
	      !kg_round_number_1_EQ_kg_maxrounds_2___d73 ||
	      kg_key_length == 2'd0) ;
  assign kg_round_number_1_ULE_kg_maxrounds_2___d104 =
	     kg_round_number <= kg_maxrounds ;
  assign roundnumber__h213885 = counter + 4'd2 ;
  assign sboxes_0_getbyte_4_BIT_2_94_XOR_sboxes_0_getby_ETC___d540 =
	     { x__h582846 ^ sboxes_5$getbyte[3],
	       x__h583005 ^ sboxes_5$getbyte[2],
	       x__h583121 ^ sboxes_5$getbyte[1],
	       x__h583280 ^ sboxes_5$getbyte[0] } ;
  assign sboxes_10_getbyte_41_BIT_2_80_XOR_sboxes_10_ge_ETC___d455 =
	     { x__h580299 ^ sboxes_15$getbyte[3],
	       x__h580456 ^ sboxes_15$getbyte[2],
	       x__h580571 ^ sboxes_15$getbyte[1],
	       x__h580728 ^ sboxes_15$getbyte[0] } ;
  assign sboxes_11_getbyte_45_BIT_2_85_XOR_sboxes_11_ge_ETC___d620 =
	     { x__h584326 ^ sboxes_12$getbyte[3],
	       x__h584484 ^ sboxes_12$getbyte[2],
	       x__h584599 ^ sboxes_12$getbyte[1],
	       x__h584757 ^ sboxes_12$getbyte[0] } ;
  assign sboxes_12_getbyte_55_BIT_2_01_XOR_sboxes_12_ge_ETC___d747 =
	     { x__h588144 ^ sboxes_1$getbyte[3],
	       x__h588303 ^ sboxes_1$getbyte[2],
	       x__h588419 ^ sboxes_1$getbyte[1],
	       x__h588578 ^ sboxes_1$getbyte[0] } ;
  assign sboxes_13_getbyte_59_BIT_2_06_XOR_sboxes_13_ge_ETC___d912 =
	     { x__h592166 ^ sboxes_2$getbyte[3],
	       x__h592323 ^ sboxes_2$getbyte[2],
	       x__h592438 ^ sboxes_2$getbyte[1],
	       x__h592595 ^ sboxes_2$getbyte[0] } ;
  assign sboxes_14_getbyte_61_BIT_2_001_XOR_sboxes_14_g_ETC___d1076 =
	     { x__h596581 ^ sboxes_3$getbyte[3],
	       x__h596738 ^ sboxes_3$getbyte[2],
	       x__h596853 ^ sboxes_3$getbyte[1],
	       x__h597010 ^ sboxes_3$getbyte[0] } ;
  assign sboxes_15_getbyte_39_BIT_2_78_XOR_sboxes_15_ge_ETC___d413 =
	     { x__h579028 ^ sboxes_0$getbyte[3],
	       x__h579186 ^ sboxes_0$getbyte[2],
	       x__h579301 ^ sboxes_0$getbyte[1],
	       x__h579459 ^ sboxes_0$getbyte[0] } ;
  assign sboxes_1_getbyte_52_BIT_2_99_XOR_sboxes_1_getb_ETC___d705 =
	     { x__h586868 ^ sboxes_6$getbyte[3],
	       x__h587025 ^ sboxes_6$getbyte[2],
	       x__h587140 ^ sboxes_6$getbyte[1],
	       x__h587297 ^ sboxes_6$getbyte[0] } ;
  assign sboxes_2_getbyte_54_BIT_2_94_XOR_sboxes_2_getb_ETC___d869 =
	     { x__h590895 ^ sboxes_7$getbyte[3],
	       x__h591052 ^ sboxes_7$getbyte[2],
	       x__h591167 ^ sboxes_7$getbyte[1],
	       x__h591324 ^ sboxes_7$getbyte[0] } ;
  assign sboxes_3_getbyte_59_BIT_2_99_XOR_sboxes_3_getb_ETC___d1034 =
	     { x__h595310 ^ sboxes_4$getbyte[3],
	       x__h595468 ^ sboxes_4$getbyte[2],
	       x__h595583 ^ sboxes_4$getbyte[1],
	       x__h595741 ^ sboxes_4$getbyte[0] } ;
  assign sboxes_4_getbyte_69_BIT_2_015_XOR_sboxes_4_get_ETC___d1161 =
	     { x__h599128 ^ sboxes_9$getbyte[3],
	       x__h599287 ^ sboxes_9$getbyte[2],
	       x__h599403 ^ sboxes_9$getbyte[1],
	       x__h599562 ^ sboxes_9$getbyte[0] } ;
  assign sboxes_5_getbyte_46_BIT_2_92_XOR_sboxes_5_getb_ETC___d498 =
	     { x__h581570 ^ sboxes_10$getbyte[3],
	       x__h581727 ^ sboxes_10$getbyte[2],
	       x__h581842 ^ sboxes_10$getbyte[1],
	       x__h581999 ^ sboxes_10$getbyte[0] } ;
  assign sboxes_6_getbyte_47_BIT_2_87_XOR_sboxes_6_getb_ETC___d662 =
	     { x__h585597 ^ sboxes_11$getbyte[3],
	       x__h585754 ^ sboxes_11$getbyte[2],
	       x__h585869 ^ sboxes_11$getbyte[1],
	       x__h586026 ^ sboxes_11$getbyte[0] } ;
  assign sboxes_7_getbyte_52_BIT_2_92_XOR_sboxes_7_getb_ETC___d827 =
	     { x__h589624 ^ sboxes_8$getbyte[3],
	       x__h589782 ^ sboxes_8$getbyte[2],
	       x__h589897 ^ sboxes_8$getbyte[1],
	       x__h590055 ^ sboxes_8$getbyte[0] } ;
  assign sboxes_8_getbyte_62_BIT_2_08_XOR_sboxes_8_getb_ETC___d954 =
	     { x__h593442 ^ sboxes_13$getbyte[3],
	       x__h593601 ^ sboxes_13$getbyte[2],
	       x__h593717 ^ sboxes_13$getbyte[1],
	       x__h593876 ^ sboxes_13$getbyte[0] } ;
  assign sboxes_9_getbyte_66_BIT_2_013_XOR_sboxes_9_get_ETC___d1119 =
	     { x__h597852 ^ sboxes_14$getbyte[3],
	       x__h598009 ^ sboxes_14$getbyte[2],
	       x__h598124 ^ sboxes_14$getbyte[1],
	       x__h598281 ^ sboxes_14$getbyte[0] } ;
  assign spliced_bits__h228682 = x__h230632 ^ y__h230633 ;
  assign spliced_bits__h228710 = x__h230117 ^ y__h230118 ;
  assign spliced_bits__h228738 = x__h229602 ^ y__h229603 ;
  assign spliced_bits__h228766 = x__h228827 ^ y__h228828 ;
  assign spliced_bits__h231121 = x__h233071 ^ y__h233072 ;
  assign spliced_bits__h231149 = x__h232556 ^ y__h232557 ;
  assign spliced_bits__h231177 = x__h232041 ^ y__h232042 ;
  assign spliced_bits__h231205 = x__h231266 ^ y__h231267 ;
  assign spliced_bits__h233560 = x__h235510 ^ y__h235511 ;
  assign spliced_bits__h233588 = x__h234995 ^ y__h234996 ;
  assign spliced_bits__h233616 = x__h234480 ^ y__h234481 ;
  assign spliced_bits__h233644 = x__h233705 ^ y__h233706 ;
  assign spliced_bits__h567809 = x__h569771 ^ y__h569772 ;
  assign spliced_bits__h567837 = x__h569252 ^ y__h569253 ;
  assign spliced_bits__h567865 = x__h568733 ^ y__h568734 ;
  assign spliced_bits__h567893 = x__h567954 ^ y__h567955 ;
  assign spliced_bits__h577643 =
	     { x__h582263 ^ sboxes_5$getbyte[7],
	       x__h582455 ^ sboxes_5$getbyte[6],
	       x__h582571 ^ sboxes_5$getbyte[5],
	       x__h582687 ^ sboxes_5$getbyte[4],
	       sboxes_0_getbyte_4_BIT_2_94_XOR_sboxes_0_getby_ETC___d540 } ;
  assign spliced_bits__h577671 =
	     { x__h580992 ^ sboxes_10$getbyte[7],
	       x__h581183 ^ sboxes_10$getbyte[6],
	       x__h581298 ^ sboxes_10$getbyte[5],
	       x__h581413 ^ sboxes_10$getbyte[4],
	       sboxes_5_getbyte_46_BIT_2_92_XOR_sboxes_5_getb_ETC___d498 } ;
  assign spliced_bits__h577699 =
	     { x__h579721 ^ sboxes_15$getbyte[7],
	       x__h579912 ^ sboxes_15$getbyte[6],
	       x__h580027 ^ sboxes_15$getbyte[5],
	       x__h580142 ^ sboxes_15$getbyte[4],
	       sboxes_10_getbyte_41_BIT_2_80_XOR_sboxes_10_ge_ETC___d455 } ;
  assign spliced_bits__h577727 =
	     { x__h577905 ^ sboxes_0$getbyte[7],
	       x__h578640 ^ sboxes_0$getbyte[6],
	       x__h578755 ^ sboxes_0$getbyte[5],
	       x__h578870 ^ sboxes_0$getbyte[4],
	       sboxes_15_getbyte_39_BIT_2_78_XOR_sboxes_15_ge_ETC___d413 } ;
  assign spliced_bits__h583451 =
	     { x__h587561 ^ sboxes_1$getbyte[7],
	       x__h587753 ^ sboxes_1$getbyte[6],
	       x__h587869 ^ sboxes_1$getbyte[5],
	       x__h587985 ^ sboxes_1$getbyte[4],
	       sboxes_12_getbyte_55_BIT_2_01_XOR_sboxes_12_ge_ETC___d747 } ;
  assign spliced_bits__h583479 =
	     { x__h586290 ^ sboxes_6$getbyte[7],
	       x__h586481 ^ sboxes_6$getbyte[6],
	       x__h586596 ^ sboxes_6$getbyte[5],
	       x__h586711 ^ sboxes_6$getbyte[4],
	       sboxes_1_getbyte_52_BIT_2_99_XOR_sboxes_1_getb_ETC___d705 } ;
  assign spliced_bits__h583507 =
	     { x__h585019 ^ sboxes_11$getbyte[7],
	       x__h585210 ^ sboxes_11$getbyte[6],
	       x__h585325 ^ sboxes_11$getbyte[5],
	       x__h585440 ^ sboxes_11$getbyte[4],
	       sboxes_6_getbyte_47_BIT_2_87_XOR_sboxes_6_getb_ETC___d662 } ;
  assign spliced_bits__h583535 =
	     { x__h583713 ^ sboxes_12$getbyte[7],
	       x__h583938 ^ sboxes_12$getbyte[6],
	       x__h584053 ^ sboxes_12$getbyte[5],
	       x__h584168 ^ sboxes_12$getbyte[4],
	       sboxes_11_getbyte_45_BIT_2_85_XOR_sboxes_11_ge_ETC___d620 } ;
  assign spliced_bits__h588749 =
	     { x__h592859 ^ sboxes_13$getbyte[7],
	       x__h593051 ^ sboxes_13$getbyte[6],
	       x__h593167 ^ sboxes_13$getbyte[5],
	       x__h593283 ^ sboxes_13$getbyte[4],
	       sboxes_8_getbyte_62_BIT_2_08_XOR_sboxes_8_getb_ETC___d954 } ;
  assign spliced_bits__h588777 =
	     { x__h591588 ^ sboxes_2$getbyte[7],
	       x__h591779 ^ sboxes_2$getbyte[6],
	       x__h591894 ^ sboxes_2$getbyte[5],
	       x__h592009 ^ sboxes_2$getbyte[4],
	       sboxes_13_getbyte_59_BIT_2_06_XOR_sboxes_13_ge_ETC___d912 } ;
  assign spliced_bits__h588805 =
	     { x__h590317 ^ sboxes_7$getbyte[7],
	       x__h590508 ^ sboxes_7$getbyte[6],
	       x__h590623 ^ sboxes_7$getbyte[5],
	       x__h590738 ^ sboxes_7$getbyte[4],
	       sboxes_2_getbyte_54_BIT_2_94_XOR_sboxes_2_getb_ETC___d869 } ;
  assign spliced_bits__h588833 =
	     { x__h589011 ^ sboxes_8$getbyte[7],
	       x__h589236 ^ sboxes_8$getbyte[6],
	       x__h589351 ^ sboxes_8$getbyte[5],
	       x__h589466 ^ sboxes_8$getbyte[4],
	       sboxes_7_getbyte_52_BIT_2_92_XOR_sboxes_7_getb_ETC___d827 } ;
  assign spliced_bits__h5917 = kg_sbox_out ^ kg_rcon[31:24] ;
  assign spliced_bits__h594435 =
	     { x__h598545 ^ sboxes_9$getbyte[7],
	       x__h598737 ^ sboxes_9$getbyte[6],
	       x__h598853 ^ sboxes_9$getbyte[5],
	       x__h598969 ^ sboxes_9$getbyte[4],
	       sboxes_4_getbyte_69_BIT_2_015_XOR_sboxes_4_get_ETC___d1161 } ;
  assign spliced_bits__h594463 =
	     { x__h597274 ^ sboxes_14$getbyte[7],
	       x__h597465 ^ sboxes_14$getbyte[6],
	       x__h597580 ^ sboxes_14$getbyte[5],
	       x__h597695 ^ sboxes_14$getbyte[4],
	       sboxes_9_getbyte_66_BIT_2_013_XOR_sboxes_9_get_ETC___d1119 } ;
  assign spliced_bits__h594491 =
	     { x__h596003 ^ sboxes_3$getbyte[7],
	       x__h596194 ^ sboxes_3$getbyte[6],
	       x__h596309 ^ sboxes_3$getbyte[5],
	       x__h596424 ^ sboxes_3$getbyte[4],
	       sboxes_14_getbyte_61_BIT_2_001_XOR_sboxes_14_g_ETC___d1076 } ;
  assign spliced_bits__h594519 =
	     { x__h594697 ^ sboxes_4$getbyte[7],
	       x__h594922 ^ sboxes_4$getbyte[6],
	       x__h595037 ^ sboxes_4$getbyte[5],
	       x__h595152 ^ sboxes_4$getbyte[4],
	       sboxes_3_getbyte_59_BIT_2_99_XOR_sboxes_3_getb_ETC___d1034 } ;
  assign spliced_bits__h6132 = kg_sbox_out ^ kg_rcon[23:16] ;
  assign spliced_bits__h6347 = kg_sbox_out ^ kg_rcon[15:8] ;
  assign spliced_bits__h6562 = kg_sbox_out ^ kg_rcon[7:0] ;
  assign temp_col__h6675 = x__h6719 ^ x__h6542 ;
  assign two__h229071 =
	     dr_colout1[31] ?
	       { dr_colout1[30:28],
		 ~dr_colout1[27:26],
		 dr_colout1[25],
		 ~dr_colout1[24],
		 1'd1 } :
	       { dr_colout1[30:24], 1'd0 } ;
  assign two__h229227 =
	     dr_colout1[23] ?
	       { dr_colout1[22:20],
		 ~dr_colout1[19:18],
		 dr_colout1[17],
		 ~dr_colout1[16],
		 1'd1 } :
	       { dr_colout1[22:16], 1'd0 } ;
  assign two__h229849 =
	     dr_colout1[15] ?
	       { dr_colout1[14:12],
		 ~dr_colout1[11:10],
		 dr_colout1[9],
		 ~dr_colout1[8],
		 1'd1 } :
	       { dr_colout1[14:8], 1'd0 } ;
  assign two__h230485 =
	     dr_colout1[7] ?
	       { dr_colout1[6:4],
		 ~dr_colout1[3:2],
		 dr_colout1[1],
		 ~dr_colout1[0],
		 1'd1 } :
	       { dr_colout1[6:0], 1'd0 } ;
  assign two__h231510 =
	     dr_colout2[31] ?
	       { dr_colout2[30:28],
		 ~dr_colout2[27:26],
		 dr_colout2[25],
		 ~dr_colout2[24],
		 1'd1 } :
	       { dr_colout2[30:24], 1'd0 } ;
  assign two__h231666 =
	     dr_colout2[23] ?
	       { dr_colout2[22:20],
		 ~dr_colout2[19:18],
		 dr_colout2[17],
		 ~dr_colout2[16],
		 1'd1 } :
	       { dr_colout2[22:16], 1'd0 } ;
  assign two__h232288 =
	     dr_colout2[15] ?
	       { dr_colout2[14:12],
		 ~dr_colout2[11:10],
		 dr_colout2[9],
		 ~dr_colout2[8],
		 1'd1 } :
	       { dr_colout2[14:8], 1'd0 } ;
  assign two__h232924 =
	     dr_colout2[7] ?
	       { dr_colout2[6:4],
		 ~dr_colout2[3:2],
		 dr_colout2[1],
		 ~dr_colout2[0],
		 1'd1 } :
	       { dr_colout2[6:0], 1'd0 } ;
  assign two__h233949 =
	     dr_colout3[31] ?
	       { dr_colout3[30:28],
		 ~dr_colout3[27:26],
		 dr_colout3[25],
		 ~dr_colout3[24],
		 1'd1 } :
	       { dr_colout3[30:24], 1'd0 } ;
  assign two__h234105 =
	     dr_colout3[23] ?
	       { dr_colout3[22:20],
		 ~dr_colout3[19:18],
		 dr_colout3[17],
		 ~dr_colout3[16],
		 1'd1 } :
	       { dr_colout3[22:16], 1'd0 } ;
  assign two__h234727 =
	     dr_colout3[15] ?
	       { dr_colout3[14:12],
		 ~dr_colout3[11:10],
		 dr_colout3[9],
		 ~dr_colout3[8],
		 1'd1 } :
	       { dr_colout3[14:8], 1'd0 } ;
  assign two__h235363 =
	     dr_colout3[7] ?
	       { dr_colout3[6:4],
		 ~dr_colout3[3:2],
		 dr_colout3[1],
		 ~dr_colout3[0],
		 1'd1 } :
	       { dr_colout3[6:0], 1'd0 } ;
  assign two__h568860 =
	     dr_colout0[23] ?
	       { dr_colout0[22:20],
		 ~dr_colout0[19:18],
		 dr_colout0[17],
		 ~dr_colout0[16],
		 1'd1 } :
	       { dr_colout0[22:16], 1'd0 } ;
  assign two__h569501 =
	     dr_colout0[15] ?
	       { dr_colout0[14:12],
		 ~dr_colout0[11:10],
		 dr_colout0[9],
		 ~dr_colout0[8],
		 1'd1 } :
	       { dr_colout0[14:8], 1'd0 } ;
  assign two__h569788 =
	     dr_colout0[31] ?
	       { dr_colout0[30:28],
		 ~dr_colout0[27:26],
		 dr_colout0[25],
		 ~dr_colout0[24],
		 1'd1 } :
	       { dr_colout0[30:24], 1'd0 } ;
  assign two__h570142 =
	     dr_colout0[7] ?
	       { dr_colout0[6:4],
		 ~dr_colout0[3:2],
		 dr_colout0[1],
		 ~dr_colout0[0],
		 1'd1 } :
	       { dr_colout0[6:0], 1'd0 } ;
  assign x__h10067 = { key5__h8663[23:0], key5__h8663[31:24] } ;
  assign x__h10711 = { key7__h8665[23:0], key7__h8665[31:24] } ;
  assign x__h10783 = kg_round_number + 4'd1 ;
  assign x__h11104 = kg_round_number + 4'd2 ;
  assign x__h11381 = { key3__h7798[23:0], key3__h7798[31:24] } ;
  assign x__h187157 =
	     { spliced_bits__h583535,
	       spliced_bits__h583507,
	       spliced_bits__h583479,
	       spliced_bits__h583451 } ^
	     kg_save_key1$DO ;
  assign x__h192455 =
	     { spliced_bits__h588833,
	       spliced_bits__h588805,
	       spliced_bits__h588777,
	       spliced_bits__h588749 } ^
	     kg_save_key2$DO ;
  assign x__h197744 =
	     { spliced_bits__h594519,
	       spliced_bits__h594491,
	       spliced_bits__h594463,
	       spliced_bits__h594435 } ^
	     kg_save_key3$DO ;
  assign x__h198026 = x__h594306 ^ kg_save_key1$DO ;
  assign x__h198093 = x__h594373 ^ kg_save_key2$DO ;
  assign x__h198151 = x__h599698 ^ kg_save_key3$DO ;
  assign x__h212904 = x__h223302 ^ kg_save_key1$DO ;
  assign x__h212990 = x__h223388 ^ kg_save_key2$DO ;
  assign x__h213067 = x__h223862 ^ kg_save_key3$DO ;
  assign x__h222687 = x__h222706 ^ kg_save_key0$DO ;
  assign x__h222706 =
	     { sboxes_15$getbyte,
	       sboxes_10$getbyte,
	       sboxes_5$getbyte,
	       sboxes_0$getbyte } ;
  assign x__h223302 =
	     { sboxes_11$getbyte,
	       sboxes_6$getbyte,
	       sboxes_1$getbyte,
	       sboxes_12$getbyte } ;
  assign x__h223388 =
	     { sboxes_7$getbyte,
	       sboxes_2$getbyte,
	       sboxes_13$getbyte,
	       sboxes_8$getbyte } ;
  assign x__h223862 =
	     { sboxes_3$getbyte,
	       sboxes_14$getbyte,
	       sboxes_9$getbyte,
	       sboxes_4$getbyte } ;
  assign x__h228827 = x__h228829 ^ y__h228830 ;
  assign x__h228829 = x__h228831 ^ y__h228832 ;
  assign x__h228831 = x__h229084 ^ two__h229071 ;
  assign x__h229084 = eight__h229073 ^ four__h229072 ;
  assign x__h229240 = eight__h229229 ^ two__h229227 ;
  assign x__h229361 = eight__h229350 ^ four__h229349 ;
  assign x__h229602 = x__h229604 ^ y__h229605 ;
  assign x__h229604 = x__h229606 ^ y__h229607 ;
  assign x__h229606 = eight__h229073 ^ dr_colout1[31:24] ;
  assign x__h229741 = eight__h229229 ^ four__h229729 ;
  assign x__h229862 = eight__h229350 ^ two__h229849 ;
  assign x__h229983 = eight__h229470 ^ four__h229971 ;
  assign x__h230117 = x__h230119 ^ y__h230120 ;
  assign x__h230119 = x__h230121 ^ y__h230122 ;
  assign x__h230121 = x__h229084 ^ dr_colout1[31:24] ;
  assign x__h230498 = eight__h229470 ^ two__h230485 ;
  assign x__h230632 = x__h230634 ^ y__h230635 ;
  assign x__h230634 = x__h230636 ^ y__h230637 ;
  assign x__h230636 = x__h230662 ^ dr_colout1[31:24] ;
  assign x__h230662 = eight__h229073 ^ two__h229071 ;
  assign x__h231266 = x__h231268 ^ y__h231269 ;
  assign x__h231268 = x__h231270 ^ y__h231271 ;
  assign x__h231270 = x__h231523 ^ two__h231510 ;
  assign x__h231523 = eight__h231512 ^ four__h231511 ;
  assign x__h231679 = eight__h231668 ^ two__h231666 ;
  assign x__h231800 = eight__h231789 ^ four__h231788 ;
  assign x__h232041 = x__h232043 ^ y__h232044 ;
  assign x__h232043 = x__h232045 ^ y__h232046 ;
  assign x__h232045 = eight__h231512 ^ dr_colout2[31:24] ;
  assign x__h232180 = eight__h231668 ^ four__h232168 ;
  assign x__h232301 = eight__h231789 ^ two__h232288 ;
  assign x__h232422 = eight__h231909 ^ four__h232410 ;
  assign x__h232556 = x__h232558 ^ y__h232559 ;
  assign x__h232558 = x__h232560 ^ y__h232561 ;
  assign x__h232560 = x__h231523 ^ dr_colout2[31:24] ;
  assign x__h232937 = eight__h231909 ^ two__h232924 ;
  assign x__h233071 = x__h233073 ^ y__h233074 ;
  assign x__h233073 = x__h233075 ^ y__h233076 ;
  assign x__h233075 = x__h233101 ^ dr_colout2[31:24] ;
  assign x__h233101 = eight__h231512 ^ two__h231510 ;
  assign x__h233705 = x__h233707 ^ y__h233708 ;
  assign x__h233707 = x__h233709 ^ y__h233710 ;
  assign x__h233709 = x__h233962 ^ two__h233949 ;
  assign x__h233962 = eight__h233951 ^ four__h233950 ;
  assign x__h234118 = eight__h234107 ^ two__h234105 ;
  assign x__h234239 = eight__h234228 ^ four__h234227 ;
  assign x__h234480 = x__h234482 ^ y__h234483 ;
  assign x__h234482 = x__h234484 ^ y__h234485 ;
  assign x__h234484 = eight__h233951 ^ dr_colout3[31:24] ;
  assign x__h234619 = eight__h234107 ^ four__h234607 ;
  assign x__h234740 = eight__h234228 ^ two__h234727 ;
  assign x__h234861 = eight__h234348 ^ four__h234849 ;
  assign x__h234995 = x__h234997 ^ y__h234998 ;
  assign x__h234997 = x__h234999 ^ y__h235000 ;
  assign x__h234999 = x__h233962 ^ dr_colout3[31:24] ;
  assign x__h235376 = eight__h234348 ^ two__h235363 ;
  assign x__h235510 = x__h235512 ^ y__h235513 ;
  assign x__h235512 = x__h235514 ^ y__h235515 ;
  assign x__h235514 = x__h235540 ^ dr_colout3[31:24] ;
  assign x__h235540 = eight__h233951 ^ two__h233949 ;
  assign x__h411914 = maxround - counter ;
  assign x__h5200 = { kg_prev_key3[23:0], kg_prev_key3[31:24] } ;
  assign x__h5419 = { kg_prev_key5[23:0], kg_prev_key5[31:24] } ;
  assign x__h567954 = x__h567956 ^ y__h567957 ;
  assign x__h567956 = x__h567958 ^ y__h567959 ;
  assign x__h567958 = x__h569282 ^ two__h569788 ;
  assign x__h568368 = eight__h569912 ^ two__h568860 ;
  assign x__h568733 = x__h568735 ^ y__h568736 ;
  assign x__h568735 = x__h568737 ^ y__h568738 ;
  assign x__h568737 = eight__h569790 ^ dr_colout0[31:24] ;
  assign x__h568995 = eight__h570033 ^ two__h569501 ;
  assign x__h569252 = x__h569254 ^ y__h569255 ;
  assign x__h569254 = x__h569256 ^ y__h569257 ;
  assign x__h569256 = x__h569282 ^ dr_colout0[31:24] ;
  assign x__h569282 = eight__h569790 ^ four__h569270 ;
  assign x__h569514 = eight__h570033 ^ four__h569502 ;
  assign x__h569636 = eight__h570144 ^ two__h570142 ;
  assign x__h569771 = x__h569773 ^ y__h569774 ;
  assign x__h569773 = x__h569775 ^ y__h569776 ;
  assign x__h569775 = x__h569801 ^ dr_colout0[31:24] ;
  assign x__h569801 = eight__h569790 ^ two__h569788 ;
  assign x__h569923 = eight__h569912 ^ four__h569911 ;
  assign x__h570155 = eight__h570144 ^ four__h570143 ;
  assign x__h5753 = { kg_prev_key7[23:0], kg_prev_key7[31:24] } ;
  assign x__h577620 =
	     { spliced_bits__h577727,
	       spliced_bits__h577699,
	       spliced_bits__h577671,
	       spliced_bits__h577643 } ^
	     kg_save_key0$DO ;
  assign x__h577905 = x__h577907 ^ sboxes_5$getbyte[7] ;
  assign x__h577907 = x__h577909 ^ sboxes_10$getbyte[7] ;
  assign x__h577909 = sboxes_15$getbyte[6] ^ sboxes_10$getbyte[6] ;
  assign x__h578640 = x__h578642 ^ sboxes_5$getbyte[6] ;
  assign x__h578642 = x__h578644 ^ sboxes_10$getbyte[6] ;
  assign x__h578644 = sboxes_15$getbyte[5] ^ sboxes_10$getbyte[5] ;
  assign x__h578755 = x__h578757 ^ sboxes_5$getbyte[5] ;
  assign x__h578757 = x__h578759 ^ sboxes_10$getbyte[5] ;
  assign x__h578759 = sboxes_15$getbyte[4] ^ sboxes_10$getbyte[4] ;
  assign x__h578870 = x__h578872 ^ sboxes_5$getbyte[4] ;
  assign x__h578872 = x__h578874 ^ sboxes_10$getbyte[7] ;
  assign x__h578874 = x__h578876 ^ sboxes_10$getbyte[4] ;
  assign x__h578876 = x__h578878 ^ sboxes_10$getbyte[3] ;
  assign x__h578878 = sboxes_15$getbyte[3] ^ sboxes_15$getbyte[7] ;
  assign x__h579028 = x__h579030 ^ sboxes_5$getbyte[3] ;
  assign x__h579030 = x__h579032 ^ sboxes_10$getbyte[7] ;
  assign x__h579032 = x__h579034 ^ sboxes_10$getbyte[3] ;
  assign x__h579034 = x__h579036 ^ sboxes_10$getbyte[2] ;
  assign x__h579036 = sboxes_15$getbyte[2] ^ sboxes_15$getbyte[7] ;
  assign x__h579186 = x__h579188 ^ sboxes_5$getbyte[2] ;
  assign x__h579188 = x__h579190 ^ sboxes_10$getbyte[2] ;
  assign x__h579190 = sboxes_15$getbyte[1] ^ sboxes_10$getbyte[1] ;
  assign x__h579301 = x__h579303 ^ sboxes_5$getbyte[1] ;
  assign x__h579303 = x__h579305 ^ sboxes_10$getbyte[7] ;
  assign x__h579305 = x__h579307 ^ sboxes_10$getbyte[1] ;
  assign x__h579307 = x__h579309 ^ sboxes_10$getbyte[0] ;
  assign x__h579309 = sboxes_15$getbyte[0] ^ sboxes_15$getbyte[7] ;
  assign x__h579459 = x__h579461 ^ sboxes_5$getbyte[0] ;
  assign x__h579461 = x__h579463 ^ sboxes_10$getbyte[0] ;
  assign x__h579463 = sboxes_15$getbyte[7] ^ sboxes_10$getbyte[7] ;
  assign x__h579721 = x__h579723 ^ sboxes_0$getbyte[7] ;
  assign x__h579723 = x__h579725 ^ sboxes_5$getbyte[7] ;
  assign x__h579725 = sboxes_10$getbyte[6] ^ sboxes_5$getbyte[6] ;
  assign x__h579912 = x__h579914 ^ sboxes_0$getbyte[6] ;
  assign x__h579914 = x__h579916 ^ sboxes_5$getbyte[6] ;
  assign x__h579916 = sboxes_10$getbyte[5] ^ sboxes_5$getbyte[5] ;
  assign x__h580027 = x__h580029 ^ sboxes_0$getbyte[5] ;
  assign x__h580029 = x__h580031 ^ sboxes_5$getbyte[5] ;
  assign x__h580031 = sboxes_10$getbyte[4] ^ sboxes_5$getbyte[4] ;
  assign x__h580142 = x__h580144 ^ sboxes_0$getbyte[4] ;
  assign x__h580144 = x__h580146 ^ sboxes_5$getbyte[7] ;
  assign x__h580146 = x__h580148 ^ sboxes_5$getbyte[4] ;
  assign x__h580148 = x__h580150 ^ sboxes_5$getbyte[3] ;
  assign x__h580150 = sboxes_10$getbyte[3] ^ sboxes_10$getbyte[7] ;
  assign x__h580299 = x__h580301 ^ sboxes_0$getbyte[3] ;
  assign x__h580301 = x__h580303 ^ sboxes_5$getbyte[7] ;
  assign x__h580303 = x__h580305 ^ sboxes_5$getbyte[3] ;
  assign x__h580305 = x__h580307 ^ sboxes_5$getbyte[2] ;
  assign x__h580307 = sboxes_10$getbyte[2] ^ sboxes_10$getbyte[7] ;
  assign x__h580456 = x__h580458 ^ sboxes_0$getbyte[2] ;
  assign x__h580458 = x__h580460 ^ sboxes_5$getbyte[2] ;
  assign x__h580460 = sboxes_10$getbyte[1] ^ sboxes_5$getbyte[1] ;
  assign x__h580571 = x__h580573 ^ sboxes_0$getbyte[1] ;
  assign x__h580573 = x__h580575 ^ sboxes_5$getbyte[7] ;
  assign x__h580575 = x__h580577 ^ sboxes_5$getbyte[1] ;
  assign x__h580577 = x__h580579 ^ sboxes_5$getbyte[0] ;
  assign x__h580579 = sboxes_10$getbyte[0] ^ sboxes_10$getbyte[7] ;
  assign x__h580728 = x__h580730 ^ sboxes_0$getbyte[0] ;
  assign x__h580730 = x__h580732 ^ sboxes_5$getbyte[0] ;
  assign x__h580732 = sboxes_10$getbyte[7] ^ sboxes_5$getbyte[7] ;
  assign x__h580992 = x__h580994 ^ sboxes_15$getbyte[7] ;
  assign x__h580994 = x__h580996 ^ sboxes_0$getbyte[7] ;
  assign x__h580996 = sboxes_5$getbyte[6] ^ sboxes_0$getbyte[6] ;
  assign x__h581183 = x__h581185 ^ sboxes_15$getbyte[6] ;
  assign x__h581185 = x__h581187 ^ sboxes_0$getbyte[6] ;
  assign x__h581187 = sboxes_5$getbyte[5] ^ sboxes_0$getbyte[5] ;
  assign x__h581298 = x__h581300 ^ sboxes_15$getbyte[5] ;
  assign x__h581300 = x__h581302 ^ sboxes_0$getbyte[5] ;
  assign x__h581302 = sboxes_5$getbyte[4] ^ sboxes_0$getbyte[4] ;
  assign x__h581413 = x__h581415 ^ sboxes_15$getbyte[4] ;
  assign x__h581415 = x__h581417 ^ sboxes_0$getbyte[7] ;
  assign x__h581417 = x__h581419 ^ sboxes_0$getbyte[4] ;
  assign x__h581419 = x__h581421 ^ sboxes_0$getbyte[3] ;
  assign x__h581421 = sboxes_5$getbyte[3] ^ sboxes_5$getbyte[7] ;
  assign x__h581570 = x__h581572 ^ sboxes_15$getbyte[3] ;
  assign x__h581572 = x__h581574 ^ sboxes_0$getbyte[7] ;
  assign x__h581574 = x__h581576 ^ sboxes_0$getbyte[3] ;
  assign x__h581576 = x__h581578 ^ sboxes_0$getbyte[2] ;
  assign x__h581578 = sboxes_5$getbyte[2] ^ sboxes_5$getbyte[7] ;
  assign x__h581727 = x__h581729 ^ sboxes_15$getbyte[2] ;
  assign x__h581729 = x__h581731 ^ sboxes_0$getbyte[2] ;
  assign x__h581731 = sboxes_5$getbyte[1] ^ sboxes_0$getbyte[1] ;
  assign x__h581842 = x__h581844 ^ sboxes_15$getbyte[1] ;
  assign x__h581844 = x__h581846 ^ sboxes_0$getbyte[7] ;
  assign x__h581846 = x__h581848 ^ sboxes_0$getbyte[1] ;
  assign x__h581848 = x__h581850 ^ sboxes_0$getbyte[0] ;
  assign x__h581850 = sboxes_5$getbyte[0] ^ sboxes_5$getbyte[7] ;
  assign x__h581999 = x__h582001 ^ sboxes_15$getbyte[0] ;
  assign x__h582001 = x__h582003 ^ sboxes_0$getbyte[0] ;
  assign x__h582003 = sboxes_5$getbyte[7] ^ sboxes_0$getbyte[7] ;
  assign x__h582263 = x__h582265 ^ sboxes_10$getbyte[7] ;
  assign x__h582265 = x__h582267 ^ sboxes_15$getbyte[7] ;
  assign x__h582267 = sboxes_0$getbyte[6] ^ sboxes_15$getbyte[6] ;
  assign x__h582455 = x__h582457 ^ sboxes_10$getbyte[6] ;
  assign x__h582457 = x__h582459 ^ sboxes_15$getbyte[6] ;
  assign x__h582459 = sboxes_0$getbyte[5] ^ sboxes_15$getbyte[5] ;
  assign x__h582571 = x__h582573 ^ sboxes_10$getbyte[5] ;
  assign x__h582573 = x__h582575 ^ sboxes_15$getbyte[5] ;
  assign x__h582575 = sboxes_0$getbyte[4] ^ sboxes_15$getbyte[4] ;
  assign x__h582687 = x__h582689 ^ sboxes_10$getbyte[4] ;
  assign x__h582689 = x__h582691 ^ sboxes_15$getbyte[7] ;
  assign x__h582691 = x__h582693 ^ sboxes_15$getbyte[4] ;
  assign x__h582693 = x__h582695 ^ sboxes_15$getbyte[3] ;
  assign x__h582695 = sboxes_0$getbyte[3] ^ sboxes_0$getbyte[7] ;
  assign x__h582846 = x__h582848 ^ sboxes_10$getbyte[3] ;
  assign x__h582848 = x__h582850 ^ sboxes_15$getbyte[7] ;
  assign x__h582850 = x__h582852 ^ sboxes_15$getbyte[3] ;
  assign x__h582852 = x__h582854 ^ sboxes_15$getbyte[2] ;
  assign x__h582854 = sboxes_0$getbyte[2] ^ sboxes_0$getbyte[7] ;
  assign x__h583005 = x__h583007 ^ sboxes_10$getbyte[2] ;
  assign x__h583007 = x__h583009 ^ sboxes_15$getbyte[2] ;
  assign x__h583009 = sboxes_0$getbyte[1] ^ sboxes_15$getbyte[1] ;
  assign x__h583121 = x__h583123 ^ sboxes_10$getbyte[1] ;
  assign x__h583123 = x__h583125 ^ sboxes_15$getbyte[7] ;
  assign x__h583125 = x__h583127 ^ sboxes_15$getbyte[1] ;
  assign x__h583127 = x__h583129 ^ sboxes_15$getbyte[0] ;
  assign x__h583129 = sboxes_0$getbyte[0] ^ sboxes_0$getbyte[7] ;
  assign x__h583280 = x__h583282 ^ sboxes_10$getbyte[0] ;
  assign x__h583282 = x__h583284 ^ sboxes_15$getbyte[0] ;
  assign x__h583284 = sboxes_0$getbyte[7] ^ sboxes_15$getbyte[7] ;
  assign x__h583713 = x__h583715 ^ sboxes_1$getbyte[7] ;
  assign x__h583715 = x__h583717 ^ sboxes_6$getbyte[7] ;
  assign x__h583717 = sboxes_11$getbyte[6] ^ sboxes_6$getbyte[6] ;
  assign x__h583938 = x__h583940 ^ sboxes_1$getbyte[6] ;
  assign x__h583940 = x__h583942 ^ sboxes_6$getbyte[6] ;
  assign x__h583942 = sboxes_11$getbyte[5] ^ sboxes_6$getbyte[5] ;
  assign x__h584053 = x__h584055 ^ sboxes_1$getbyte[5] ;
  assign x__h584055 = x__h584057 ^ sboxes_6$getbyte[5] ;
  assign x__h584057 = sboxes_11$getbyte[4] ^ sboxes_6$getbyte[4] ;
  assign x__h584168 = x__h584170 ^ sboxes_1$getbyte[4] ;
  assign x__h584170 = x__h584172 ^ sboxes_6$getbyte[7] ;
  assign x__h584172 = x__h584174 ^ sboxes_6$getbyte[4] ;
  assign x__h584174 = x__h584176 ^ sboxes_6$getbyte[3] ;
  assign x__h584176 = sboxes_11$getbyte[3] ^ sboxes_11$getbyte[7] ;
  assign x__h584326 = x__h584328 ^ sboxes_1$getbyte[3] ;
  assign x__h584328 = x__h584330 ^ sboxes_6$getbyte[7] ;
  assign x__h584330 = x__h584332 ^ sboxes_6$getbyte[3] ;
  assign x__h584332 = x__h584334 ^ sboxes_6$getbyte[2] ;
  assign x__h584334 = sboxes_11$getbyte[2] ^ sboxes_11$getbyte[7] ;
  assign x__h584484 = x__h584486 ^ sboxes_1$getbyte[2] ;
  assign x__h584486 = x__h584488 ^ sboxes_6$getbyte[2] ;
  assign x__h584488 = sboxes_11$getbyte[1] ^ sboxes_6$getbyte[1] ;
  assign x__h584599 = x__h584601 ^ sboxes_1$getbyte[1] ;
  assign x__h584601 = x__h584603 ^ sboxes_6$getbyte[7] ;
  assign x__h584603 = x__h584605 ^ sboxes_6$getbyte[1] ;
  assign x__h584605 = x__h584607 ^ sboxes_6$getbyte[0] ;
  assign x__h584607 = sboxes_11$getbyte[0] ^ sboxes_11$getbyte[7] ;
  assign x__h584757 = x__h584759 ^ sboxes_1$getbyte[0] ;
  assign x__h584759 = x__h584761 ^ sboxes_6$getbyte[0] ;
  assign x__h584761 = sboxes_11$getbyte[7] ^ sboxes_6$getbyte[7] ;
  assign x__h585019 = x__h585021 ^ sboxes_12$getbyte[7] ;
  assign x__h585021 = x__h585023 ^ sboxes_1$getbyte[7] ;
  assign x__h585023 = sboxes_6$getbyte[6] ^ sboxes_1$getbyte[6] ;
  assign x__h585210 = x__h585212 ^ sboxes_12$getbyte[6] ;
  assign x__h585212 = x__h585214 ^ sboxes_1$getbyte[6] ;
  assign x__h585214 = sboxes_6$getbyte[5] ^ sboxes_1$getbyte[5] ;
  assign x__h585325 = x__h585327 ^ sboxes_12$getbyte[5] ;
  assign x__h585327 = x__h585329 ^ sboxes_1$getbyte[5] ;
  assign x__h585329 = sboxes_6$getbyte[4] ^ sboxes_1$getbyte[4] ;
  assign x__h585440 = x__h585442 ^ sboxes_12$getbyte[4] ;
  assign x__h585442 = x__h585444 ^ sboxes_1$getbyte[7] ;
  assign x__h585444 = x__h585446 ^ sboxes_1$getbyte[4] ;
  assign x__h585446 = x__h585448 ^ sboxes_1$getbyte[3] ;
  assign x__h585448 = sboxes_6$getbyte[3] ^ sboxes_6$getbyte[7] ;
  assign x__h585597 = x__h585599 ^ sboxes_12$getbyte[3] ;
  assign x__h585599 = x__h585601 ^ sboxes_1$getbyte[7] ;
  assign x__h585601 = x__h585603 ^ sboxes_1$getbyte[3] ;
  assign x__h585603 = x__h585605 ^ sboxes_1$getbyte[2] ;
  assign x__h585605 = sboxes_6$getbyte[2] ^ sboxes_6$getbyte[7] ;
  assign x__h585754 = x__h585756 ^ sboxes_12$getbyte[2] ;
  assign x__h585756 = x__h585758 ^ sboxes_1$getbyte[2] ;
  assign x__h585758 = sboxes_6$getbyte[1] ^ sboxes_1$getbyte[1] ;
  assign x__h585869 = x__h585871 ^ sboxes_12$getbyte[1] ;
  assign x__h585871 = x__h585873 ^ sboxes_1$getbyte[7] ;
  assign x__h585873 = x__h585875 ^ sboxes_1$getbyte[1] ;
  assign x__h585875 = x__h585877 ^ sboxes_1$getbyte[0] ;
  assign x__h585877 = sboxes_6$getbyte[0] ^ sboxes_6$getbyte[7] ;
  assign x__h586026 = x__h586028 ^ sboxes_12$getbyte[0] ;
  assign x__h586028 = x__h586030 ^ sboxes_1$getbyte[0] ;
  assign x__h586030 = sboxes_6$getbyte[7] ^ sboxes_1$getbyte[7] ;
  assign x__h586290 = x__h586292 ^ sboxes_11$getbyte[7] ;
  assign x__h586292 = x__h586294 ^ sboxes_12$getbyte[7] ;
  assign x__h586294 = sboxes_1$getbyte[6] ^ sboxes_12$getbyte[6] ;
  assign x__h586481 = x__h586483 ^ sboxes_11$getbyte[6] ;
  assign x__h586483 = x__h586485 ^ sboxes_12$getbyte[6] ;
  assign x__h586485 = sboxes_1$getbyte[5] ^ sboxes_12$getbyte[5] ;
  assign x__h586596 = x__h586598 ^ sboxes_11$getbyte[5] ;
  assign x__h586598 = x__h586600 ^ sboxes_12$getbyte[5] ;
  assign x__h586600 = sboxes_1$getbyte[4] ^ sboxes_12$getbyte[4] ;
  assign x__h586711 = x__h586713 ^ sboxes_11$getbyte[4] ;
  assign x__h586713 = x__h586715 ^ sboxes_12$getbyte[7] ;
  assign x__h586715 = x__h586717 ^ sboxes_12$getbyte[4] ;
  assign x__h586717 = x__h586719 ^ sboxes_12$getbyte[3] ;
  assign x__h586719 = sboxes_1$getbyte[3] ^ sboxes_1$getbyte[7] ;
  assign x__h586868 = x__h586870 ^ sboxes_11$getbyte[3] ;
  assign x__h586870 = x__h586872 ^ sboxes_12$getbyte[7] ;
  assign x__h586872 = x__h586874 ^ sboxes_12$getbyte[3] ;
  assign x__h586874 = x__h586876 ^ sboxes_12$getbyte[2] ;
  assign x__h586876 = sboxes_1$getbyte[2] ^ sboxes_1$getbyte[7] ;
  assign x__h587025 = x__h587027 ^ sboxes_11$getbyte[2] ;
  assign x__h587027 = x__h587029 ^ sboxes_12$getbyte[2] ;
  assign x__h587029 = sboxes_1$getbyte[1] ^ sboxes_12$getbyte[1] ;
  assign x__h587140 = x__h587142 ^ sboxes_11$getbyte[1] ;
  assign x__h587142 = x__h587144 ^ sboxes_12$getbyte[7] ;
  assign x__h587144 = x__h587146 ^ sboxes_12$getbyte[1] ;
  assign x__h587146 = x__h587148 ^ sboxes_12$getbyte[0] ;
  assign x__h587148 = sboxes_1$getbyte[0] ^ sboxes_1$getbyte[7] ;
  assign x__h587297 = x__h587299 ^ sboxes_11$getbyte[0] ;
  assign x__h587299 = x__h587301 ^ sboxes_12$getbyte[0] ;
  assign x__h587301 = sboxes_1$getbyte[7] ^ sboxes_12$getbyte[7] ;
  assign x__h587561 = x__h587563 ^ sboxes_6$getbyte[7] ;
  assign x__h587563 = x__h587565 ^ sboxes_11$getbyte[7] ;
  assign x__h587565 = sboxes_12$getbyte[6] ^ sboxes_11$getbyte[6] ;
  assign x__h587753 = x__h587755 ^ sboxes_6$getbyte[6] ;
  assign x__h587755 = x__h587757 ^ sboxes_11$getbyte[6] ;
  assign x__h587757 = sboxes_12$getbyte[5] ^ sboxes_11$getbyte[5] ;
  assign x__h587869 = x__h587871 ^ sboxes_6$getbyte[5] ;
  assign x__h587871 = x__h587873 ^ sboxes_11$getbyte[5] ;
  assign x__h587873 = sboxes_12$getbyte[4] ^ sboxes_11$getbyte[4] ;
  assign x__h587985 = x__h587987 ^ sboxes_6$getbyte[4] ;
  assign x__h587987 = x__h587989 ^ sboxes_11$getbyte[7] ;
  assign x__h587989 = x__h587991 ^ sboxes_11$getbyte[4] ;
  assign x__h587991 = x__h587993 ^ sboxes_11$getbyte[3] ;
  assign x__h587993 = sboxes_12$getbyte[3] ^ sboxes_12$getbyte[7] ;
  assign x__h588144 = x__h588146 ^ sboxes_6$getbyte[3] ;
  assign x__h588146 = x__h588148 ^ sboxes_11$getbyte[7] ;
  assign x__h588148 = x__h588150 ^ sboxes_11$getbyte[3] ;
  assign x__h588150 = x__h588152 ^ sboxes_11$getbyte[2] ;
  assign x__h588152 = sboxes_12$getbyte[2] ^ sboxes_12$getbyte[7] ;
  assign x__h588303 = x__h588305 ^ sboxes_6$getbyte[2] ;
  assign x__h588305 = x__h588307 ^ sboxes_11$getbyte[2] ;
  assign x__h588307 = sboxes_12$getbyte[1] ^ sboxes_11$getbyte[1] ;
  assign x__h588419 = x__h588421 ^ sboxes_6$getbyte[1] ;
  assign x__h588421 = x__h588423 ^ sboxes_11$getbyte[7] ;
  assign x__h588423 = x__h588425 ^ sboxes_11$getbyte[1] ;
  assign x__h588425 = x__h588427 ^ sboxes_11$getbyte[0] ;
  assign x__h588427 = sboxes_12$getbyte[0] ^ sboxes_12$getbyte[7] ;
  assign x__h588578 = x__h588580 ^ sboxes_6$getbyte[0] ;
  assign x__h588580 = x__h588582 ^ sboxes_11$getbyte[0] ;
  assign x__h588582 = sboxes_12$getbyte[7] ^ sboxes_11$getbyte[7] ;
  assign x__h589011 = x__h589013 ^ sboxes_13$getbyte[7] ;
  assign x__h589013 = x__h589015 ^ sboxes_2$getbyte[7] ;
  assign x__h589015 = sboxes_7$getbyte[6] ^ sboxes_2$getbyte[6] ;
  assign x__h589236 = x__h589238 ^ sboxes_13$getbyte[6] ;
  assign x__h589238 = x__h589240 ^ sboxes_2$getbyte[6] ;
  assign x__h589240 = sboxes_7$getbyte[5] ^ sboxes_2$getbyte[5] ;
  assign x__h589351 = x__h589353 ^ sboxes_13$getbyte[5] ;
  assign x__h589353 = x__h589355 ^ sboxes_2$getbyte[5] ;
  assign x__h589355 = sboxes_7$getbyte[4] ^ sboxes_2$getbyte[4] ;
  assign x__h589466 = x__h589468 ^ sboxes_13$getbyte[4] ;
  assign x__h589468 = x__h589470 ^ sboxes_2$getbyte[7] ;
  assign x__h589470 = x__h589472 ^ sboxes_2$getbyte[4] ;
  assign x__h589472 = x__h589474 ^ sboxes_2$getbyte[3] ;
  assign x__h589474 = sboxes_7$getbyte[3] ^ sboxes_7$getbyte[7] ;
  assign x__h589624 = x__h589626 ^ sboxes_13$getbyte[3] ;
  assign x__h589626 = x__h589628 ^ sboxes_2$getbyte[7] ;
  assign x__h589628 = x__h589630 ^ sboxes_2$getbyte[3] ;
  assign x__h589630 = x__h589632 ^ sboxes_2$getbyte[2] ;
  assign x__h589632 = sboxes_7$getbyte[2] ^ sboxes_7$getbyte[7] ;
  assign x__h5897 = { spliced_bits__h5917, kg_last_col_sub_rot[23:0] } ;
  assign x__h589782 = x__h589784 ^ sboxes_13$getbyte[2] ;
  assign x__h589784 = x__h589786 ^ sboxes_2$getbyte[2] ;
  assign x__h589786 = sboxes_7$getbyte[1] ^ sboxes_2$getbyte[1] ;
  assign x__h589897 = x__h589899 ^ sboxes_13$getbyte[1] ;
  assign x__h589899 = x__h589901 ^ sboxes_2$getbyte[7] ;
  assign x__h589901 = x__h589903 ^ sboxes_2$getbyte[1] ;
  assign x__h589903 = x__h589905 ^ sboxes_2$getbyte[0] ;
  assign x__h589905 = sboxes_7$getbyte[0] ^ sboxes_7$getbyte[7] ;
  assign x__h590055 = x__h590057 ^ sboxes_13$getbyte[0] ;
  assign x__h590057 = x__h590059 ^ sboxes_2$getbyte[0] ;
  assign x__h590059 = sboxes_7$getbyte[7] ^ sboxes_2$getbyte[7] ;
  assign x__h590317 = x__h590319 ^ sboxes_8$getbyte[7] ;
  assign x__h590319 = x__h590321 ^ sboxes_13$getbyte[7] ;
  assign x__h590321 = sboxes_2$getbyte[6] ^ sboxes_13$getbyte[6] ;
  assign x__h590508 = x__h590510 ^ sboxes_8$getbyte[6] ;
  assign x__h590510 = x__h590512 ^ sboxes_13$getbyte[6] ;
  assign x__h590512 = sboxes_2$getbyte[5] ^ sboxes_13$getbyte[5] ;
  assign x__h590623 = x__h590625 ^ sboxes_8$getbyte[5] ;
  assign x__h590625 = x__h590627 ^ sboxes_13$getbyte[5] ;
  assign x__h590627 = sboxes_2$getbyte[4] ^ sboxes_13$getbyte[4] ;
  assign x__h590738 = x__h590740 ^ sboxes_8$getbyte[4] ;
  assign x__h590740 = x__h590742 ^ sboxes_13$getbyte[7] ;
  assign x__h590742 = x__h590744 ^ sboxes_13$getbyte[4] ;
  assign x__h590744 = x__h590746 ^ sboxes_13$getbyte[3] ;
  assign x__h590746 = sboxes_2$getbyte[3] ^ sboxes_2$getbyte[7] ;
  assign x__h590895 = x__h590897 ^ sboxes_8$getbyte[3] ;
  assign x__h590897 = x__h590899 ^ sboxes_13$getbyte[7] ;
  assign x__h590899 = x__h590901 ^ sboxes_13$getbyte[3] ;
  assign x__h590901 = x__h590903 ^ sboxes_13$getbyte[2] ;
  assign x__h590903 = sboxes_2$getbyte[2] ^ sboxes_2$getbyte[7] ;
  assign x__h591052 = x__h591054 ^ sboxes_8$getbyte[2] ;
  assign x__h591054 = x__h591056 ^ sboxes_13$getbyte[2] ;
  assign x__h591056 = sboxes_2$getbyte[1] ^ sboxes_13$getbyte[1] ;
  assign x__h591167 = x__h591169 ^ sboxes_8$getbyte[1] ;
  assign x__h591169 = x__h591171 ^ sboxes_13$getbyte[7] ;
  assign x__h591171 = x__h591173 ^ sboxes_13$getbyte[1] ;
  assign x__h591173 = x__h591175 ^ sboxes_13$getbyte[0] ;
  assign x__h591175 = sboxes_2$getbyte[0] ^ sboxes_2$getbyte[7] ;
  assign x__h591324 = x__h591326 ^ sboxes_8$getbyte[0] ;
  assign x__h591326 = x__h591328 ^ sboxes_13$getbyte[0] ;
  assign x__h591328 = sboxes_2$getbyte[7] ^ sboxes_13$getbyte[7] ;
  assign x__h591588 = x__h591590 ^ sboxes_7$getbyte[7] ;
  assign x__h591590 = x__h591592 ^ sboxes_8$getbyte[7] ;
  assign x__h591592 = sboxes_13$getbyte[6] ^ sboxes_8$getbyte[6] ;
  assign x__h591779 = x__h591781 ^ sboxes_7$getbyte[6] ;
  assign x__h591781 = x__h591783 ^ sboxes_8$getbyte[6] ;
  assign x__h591783 = sboxes_13$getbyte[5] ^ sboxes_8$getbyte[5] ;
  assign x__h591894 = x__h591896 ^ sboxes_7$getbyte[5] ;
  assign x__h591896 = x__h591898 ^ sboxes_8$getbyte[5] ;
  assign x__h591898 = sboxes_13$getbyte[4] ^ sboxes_8$getbyte[4] ;
  assign x__h592009 = x__h592011 ^ sboxes_7$getbyte[4] ;
  assign x__h592011 = x__h592013 ^ sboxes_8$getbyte[7] ;
  assign x__h592013 = x__h592015 ^ sboxes_8$getbyte[4] ;
  assign x__h592015 = x__h592017 ^ sboxes_8$getbyte[3] ;
  assign x__h592017 = sboxes_13$getbyte[3] ^ sboxes_13$getbyte[7] ;
  assign x__h592166 = x__h592168 ^ sboxes_7$getbyte[3] ;
  assign x__h592168 = x__h592170 ^ sboxes_8$getbyte[7] ;
  assign x__h592170 = x__h592172 ^ sboxes_8$getbyte[3] ;
  assign x__h592172 = x__h592174 ^ sboxes_8$getbyte[2] ;
  assign x__h592174 = sboxes_13$getbyte[2] ^ sboxes_13$getbyte[7] ;
  assign x__h592323 = x__h592325 ^ sboxes_7$getbyte[2] ;
  assign x__h592325 = x__h592327 ^ sboxes_8$getbyte[2] ;
  assign x__h592327 = sboxes_13$getbyte[1] ^ sboxes_8$getbyte[1] ;
  assign x__h592438 = x__h592440 ^ sboxes_7$getbyte[1] ;
  assign x__h592440 = x__h592442 ^ sboxes_8$getbyte[7] ;
  assign x__h592442 = x__h592444 ^ sboxes_8$getbyte[1] ;
  assign x__h592444 = x__h592446 ^ sboxes_8$getbyte[0] ;
  assign x__h592446 = sboxes_13$getbyte[0] ^ sboxes_13$getbyte[7] ;
  assign x__h592595 = x__h592597 ^ sboxes_7$getbyte[0] ;
  assign x__h592597 = x__h592599 ^ sboxes_8$getbyte[0] ;
  assign x__h592599 = sboxes_13$getbyte[7] ^ sboxes_8$getbyte[7] ;
  assign x__h592859 = x__h592861 ^ sboxes_2$getbyte[7] ;
  assign x__h592861 = x__h592863 ^ sboxes_7$getbyte[7] ;
  assign x__h592863 = sboxes_8$getbyte[6] ^ sboxes_7$getbyte[6] ;
  assign x__h593051 = x__h593053 ^ sboxes_2$getbyte[6] ;
  assign x__h593053 = x__h593055 ^ sboxes_7$getbyte[6] ;
  assign x__h593055 = sboxes_8$getbyte[5] ^ sboxes_7$getbyte[5] ;
  assign x__h593167 = x__h593169 ^ sboxes_2$getbyte[5] ;
  assign x__h593169 = x__h593171 ^ sboxes_7$getbyte[5] ;
  assign x__h593171 = sboxes_8$getbyte[4] ^ sboxes_7$getbyte[4] ;
  assign x__h593283 = x__h593285 ^ sboxes_2$getbyte[4] ;
  assign x__h593285 = x__h593287 ^ sboxes_7$getbyte[7] ;
  assign x__h593287 = x__h593289 ^ sboxes_7$getbyte[4] ;
  assign x__h593289 = x__h593291 ^ sboxes_7$getbyte[3] ;
  assign x__h593291 = sboxes_8$getbyte[3] ^ sboxes_8$getbyte[7] ;
  assign x__h593442 = x__h593444 ^ sboxes_2$getbyte[3] ;
  assign x__h593444 = x__h593446 ^ sboxes_7$getbyte[7] ;
  assign x__h593446 = x__h593448 ^ sboxes_7$getbyte[3] ;
  assign x__h593448 = x__h593450 ^ sboxes_7$getbyte[2] ;
  assign x__h593450 = sboxes_8$getbyte[2] ^ sboxes_8$getbyte[7] ;
  assign x__h593601 = x__h593603 ^ sboxes_2$getbyte[2] ;
  assign x__h593603 = x__h593605 ^ sboxes_7$getbyte[2] ;
  assign x__h593605 = sboxes_8$getbyte[1] ^ sboxes_7$getbyte[1] ;
  assign x__h593717 = x__h593719 ^ sboxes_2$getbyte[1] ;
  assign x__h593719 = x__h593721 ^ sboxes_7$getbyte[7] ;
  assign x__h593721 = x__h593723 ^ sboxes_7$getbyte[1] ;
  assign x__h593723 = x__h593725 ^ sboxes_7$getbyte[0] ;
  assign x__h593725 = sboxes_8$getbyte[0] ^ sboxes_8$getbyte[7] ;
  assign x__h593876 = x__h593878 ^ sboxes_2$getbyte[0] ;
  assign x__h593878 = x__h593880 ^ sboxes_7$getbyte[0] ;
  assign x__h593880 = sboxes_8$getbyte[7] ^ sboxes_7$getbyte[7] ;
  assign x__h594044 = x__h594063 ^ kg_save_key0$DO ;
  assign x__h594063 =
	     { sboxes_15$getbyte,
	       sboxes_2$getbyte,
	       sboxes_5$getbyte,
	       sboxes_8$getbyte } ;
  assign x__h594306 =
	     { sboxes_11$getbyte,
	       sboxes_14$getbyte,
	       sboxes_1$getbyte,
	       sboxes_4$getbyte } ;
  assign x__h594373 =
	     { sboxes_7$getbyte,
	       sboxes_10$getbyte,
	       sboxes_13$getbyte,
	       sboxes_0$getbyte } ;
  assign x__h594697 = x__h594699 ^ sboxes_9$getbyte[7] ;
  assign x__h594699 = x__h594701 ^ sboxes_14$getbyte[7] ;
  assign x__h594701 = sboxes_3$getbyte[6] ^ sboxes_14$getbyte[6] ;
  assign x__h594922 = x__h594924 ^ sboxes_9$getbyte[6] ;
  assign x__h594924 = x__h594926 ^ sboxes_14$getbyte[6] ;
  assign x__h594926 = sboxes_3$getbyte[5] ^ sboxes_14$getbyte[5] ;
  assign x__h595037 = x__h595039 ^ sboxes_9$getbyte[5] ;
  assign x__h595039 = x__h595041 ^ sboxes_14$getbyte[5] ;
  assign x__h595041 = sboxes_3$getbyte[4] ^ sboxes_14$getbyte[4] ;
  assign x__h595152 = x__h595154 ^ sboxes_9$getbyte[4] ;
  assign x__h595154 = x__h595156 ^ sboxes_14$getbyte[7] ;
  assign x__h595156 = x__h595158 ^ sboxes_14$getbyte[4] ;
  assign x__h595158 = x__h595160 ^ sboxes_14$getbyte[3] ;
  assign x__h595160 = sboxes_3$getbyte[3] ^ sboxes_3$getbyte[7] ;
  assign x__h595310 = x__h595312 ^ sboxes_9$getbyte[3] ;
  assign x__h595312 = x__h595314 ^ sboxes_14$getbyte[7] ;
  assign x__h595314 = x__h595316 ^ sboxes_14$getbyte[3] ;
  assign x__h595316 = x__h595318 ^ sboxes_14$getbyte[2] ;
  assign x__h595318 = sboxes_3$getbyte[2] ^ sboxes_3$getbyte[7] ;
  assign x__h595468 = x__h595470 ^ sboxes_9$getbyte[2] ;
  assign x__h595470 = x__h595472 ^ sboxes_14$getbyte[2] ;
  assign x__h595472 = sboxes_3$getbyte[1] ^ sboxes_14$getbyte[1] ;
  assign x__h595583 = x__h595585 ^ sboxes_9$getbyte[1] ;
  assign x__h595585 = x__h595587 ^ sboxes_14$getbyte[7] ;
  assign x__h595587 = x__h595589 ^ sboxes_14$getbyte[1] ;
  assign x__h595589 = x__h595591 ^ sboxes_14$getbyte[0] ;
  assign x__h595591 = sboxes_3$getbyte[0] ^ sboxes_3$getbyte[7] ;
  assign x__h595741 = x__h595743 ^ sboxes_9$getbyte[0] ;
  assign x__h595743 = x__h595745 ^ sboxes_14$getbyte[0] ;
  assign x__h595745 = sboxes_3$getbyte[7] ^ sboxes_14$getbyte[7] ;
  assign x__h596003 = x__h596005 ^ sboxes_4$getbyte[7] ;
  assign x__h596005 = x__h596007 ^ sboxes_9$getbyte[7] ;
  assign x__h596007 = sboxes_14$getbyte[6] ^ sboxes_9$getbyte[6] ;
  assign x__h596194 = x__h596196 ^ sboxes_4$getbyte[6] ;
  assign x__h596196 = x__h596198 ^ sboxes_9$getbyte[6] ;
  assign x__h596198 = sboxes_14$getbyte[5] ^ sboxes_9$getbyte[5] ;
  assign x__h596309 = x__h596311 ^ sboxes_4$getbyte[5] ;
  assign x__h596311 = x__h596313 ^ sboxes_9$getbyte[5] ;
  assign x__h596313 = sboxes_14$getbyte[4] ^ sboxes_9$getbyte[4] ;
  assign x__h596424 = x__h596426 ^ sboxes_4$getbyte[4] ;
  assign x__h596426 = x__h596428 ^ sboxes_9$getbyte[7] ;
  assign x__h596428 = x__h596430 ^ sboxes_9$getbyte[4] ;
  assign x__h596430 = x__h596432 ^ sboxes_9$getbyte[3] ;
  assign x__h596432 = sboxes_14$getbyte[3] ^ sboxes_14$getbyte[7] ;
  assign x__h596581 = x__h596583 ^ sboxes_4$getbyte[3] ;
  assign x__h596583 = x__h596585 ^ sboxes_9$getbyte[7] ;
  assign x__h596585 = x__h596587 ^ sboxes_9$getbyte[3] ;
  assign x__h596587 = x__h596589 ^ sboxes_9$getbyte[2] ;
  assign x__h596589 = sboxes_14$getbyte[2] ^ sboxes_14$getbyte[7] ;
  assign x__h596738 = x__h596740 ^ sboxes_4$getbyte[2] ;
  assign x__h596740 = x__h596742 ^ sboxes_9$getbyte[2] ;
  assign x__h596742 = sboxes_14$getbyte[1] ^ sboxes_9$getbyte[1] ;
  assign x__h596853 = x__h596855 ^ sboxes_4$getbyte[1] ;
  assign x__h596855 = x__h596857 ^ sboxes_9$getbyte[7] ;
  assign x__h596857 = x__h596859 ^ sboxes_9$getbyte[1] ;
  assign x__h596859 = x__h596861 ^ sboxes_9$getbyte[0] ;
  assign x__h596861 = sboxes_14$getbyte[0] ^ sboxes_14$getbyte[7] ;
  assign x__h597010 = x__h597012 ^ sboxes_4$getbyte[0] ;
  assign x__h597012 = x__h597014 ^ sboxes_9$getbyte[0] ;
  assign x__h597014 = sboxes_14$getbyte[7] ^ sboxes_9$getbyte[7] ;
  assign x__h597274 = x__h597276 ^ sboxes_3$getbyte[7] ;
  assign x__h597276 = x__h597278 ^ sboxes_4$getbyte[7] ;
  assign x__h597278 = sboxes_9$getbyte[6] ^ sboxes_4$getbyte[6] ;
  assign x__h597465 = x__h597467 ^ sboxes_3$getbyte[6] ;
  assign x__h597467 = x__h597469 ^ sboxes_4$getbyte[6] ;
  assign x__h597469 = sboxes_9$getbyte[5] ^ sboxes_4$getbyte[5] ;
  assign x__h597580 = x__h597582 ^ sboxes_3$getbyte[5] ;
  assign x__h597582 = x__h597584 ^ sboxes_4$getbyte[5] ;
  assign x__h597584 = sboxes_9$getbyte[4] ^ sboxes_4$getbyte[4] ;
  assign x__h597695 = x__h597697 ^ sboxes_3$getbyte[4] ;
  assign x__h597697 = x__h597699 ^ sboxes_4$getbyte[7] ;
  assign x__h597699 = x__h597701 ^ sboxes_4$getbyte[4] ;
  assign x__h597701 = x__h597703 ^ sboxes_4$getbyte[3] ;
  assign x__h597703 = sboxes_9$getbyte[3] ^ sboxes_9$getbyte[7] ;
  assign x__h597852 = x__h597854 ^ sboxes_3$getbyte[3] ;
  assign x__h597854 = x__h597856 ^ sboxes_4$getbyte[7] ;
  assign x__h597856 = x__h597858 ^ sboxes_4$getbyte[3] ;
  assign x__h597858 = x__h597860 ^ sboxes_4$getbyte[2] ;
  assign x__h597860 = sboxes_9$getbyte[2] ^ sboxes_9$getbyte[7] ;
  assign x__h598009 = x__h598011 ^ sboxes_3$getbyte[2] ;
  assign x__h598011 = x__h598013 ^ sboxes_4$getbyte[2] ;
  assign x__h598013 = sboxes_9$getbyte[1] ^ sboxes_4$getbyte[1] ;
  assign x__h598124 = x__h598126 ^ sboxes_3$getbyte[1] ;
  assign x__h598126 = x__h598128 ^ sboxes_4$getbyte[7] ;
  assign x__h598128 = x__h598130 ^ sboxes_4$getbyte[1] ;
  assign x__h598130 = x__h598132 ^ sboxes_4$getbyte[0] ;
  assign x__h598132 = sboxes_9$getbyte[0] ^ sboxes_9$getbyte[7] ;
  assign x__h598281 = x__h598283 ^ sboxes_3$getbyte[0] ;
  assign x__h598283 = x__h598285 ^ sboxes_4$getbyte[0] ;
  assign x__h598285 = sboxes_9$getbyte[7] ^ sboxes_4$getbyte[7] ;
  assign x__h598545 = x__h598547 ^ sboxes_14$getbyte[7] ;
  assign x__h598547 = x__h598549 ^ sboxes_3$getbyte[7] ;
  assign x__h598549 = sboxes_4$getbyte[6] ^ sboxes_3$getbyte[6] ;
  assign x__h598737 = x__h598739 ^ sboxes_14$getbyte[6] ;
  assign x__h598739 = x__h598741 ^ sboxes_3$getbyte[6] ;
  assign x__h598741 = sboxes_4$getbyte[5] ^ sboxes_3$getbyte[5] ;
  assign x__h598853 = x__h598855 ^ sboxes_14$getbyte[5] ;
  assign x__h598855 = x__h598857 ^ sboxes_3$getbyte[5] ;
  assign x__h598857 = sboxes_4$getbyte[4] ^ sboxes_3$getbyte[4] ;
  assign x__h598969 = x__h598971 ^ sboxes_14$getbyte[4] ;
  assign x__h598971 = x__h598973 ^ sboxes_3$getbyte[7] ;
  assign x__h598973 = x__h598975 ^ sboxes_3$getbyte[4] ;
  assign x__h598975 = x__h598977 ^ sboxes_3$getbyte[3] ;
  assign x__h598977 = sboxes_4$getbyte[3] ^ sboxes_4$getbyte[7] ;
  assign x__h599128 = x__h599130 ^ sboxes_14$getbyte[3] ;
  assign x__h599130 = x__h599132 ^ sboxes_3$getbyte[7] ;
  assign x__h599132 = x__h599134 ^ sboxes_3$getbyte[3] ;
  assign x__h599134 = x__h599136 ^ sboxes_3$getbyte[2] ;
  assign x__h599136 = sboxes_4$getbyte[2] ^ sboxes_4$getbyte[7] ;
  assign x__h599287 = x__h599289 ^ sboxes_14$getbyte[2] ;
  assign x__h599289 = x__h599291 ^ sboxes_3$getbyte[2] ;
  assign x__h599291 = sboxes_4$getbyte[1] ^ sboxes_3$getbyte[1] ;
  assign x__h599403 = x__h599405 ^ sboxes_14$getbyte[1] ;
  assign x__h599405 = x__h599407 ^ sboxes_3$getbyte[7] ;
  assign x__h599407 = x__h599409 ^ sboxes_3$getbyte[1] ;
  assign x__h599409 = x__h599411 ^ sboxes_3$getbyte[0] ;
  assign x__h599411 = sboxes_4$getbyte[0] ^ sboxes_4$getbyte[7] ;
  assign x__h599562 = x__h599564 ^ sboxes_14$getbyte[0] ;
  assign x__h599564 = x__h599566 ^ sboxes_3$getbyte[0] ;
  assign x__h599566 = sboxes_4$getbyte[7] ^ sboxes_3$getbyte[7] ;
  assign x__h599698 =
	     { sboxes_3$getbyte,
	       sboxes_6$getbyte,
	       sboxes_9$getbyte,
	       sboxes_12$getbyte } ;
  assign x__h602008 = encrypt_plaintexttt[127:96] ^ encrypt_keyyy[127:96] ;
  assign x__h602109 = encrypt_plaintexttt[63:32] ^ encrypt_keyyy[63:32] ;
  assign x__h602181 = encrypt_plaintexttt[95:64] ^ encrypt_keyyy[95:64] ;
  assign x__h602253 = encrypt_plaintexttt[31:0] ^ encrypt_keyyy[31:0] ;
  assign x__h6112 =
	     { kg_last_col_sub_rot[31:24],
	       spliced_bits__h6132,
	       kg_last_col_sub_rot[15:0] } ;
  assign x__h6327 =
	     { kg_last_col_sub_rot[31:16],
	       spliced_bits__h6347,
	       kg_last_col_sub_rot[7:0] } ;
  assign x__h6542 = { kg_last_col_sub_rot[31:8], spliced_bits__h6562 } ;
  assign x__h6719 = x__h6720 ^ kg_prev_key3 ;
  assign x__h6720 = x__h6722 ^ kg_prev_key2 ;
  assign x__h6722 = kg_prev_key0 ^ kg_prev_key1 ;
  assign x__h7021 = { kg_sbox_out, kg_aes256_subcol4[23:0] } ;
  assign x__h7211 =
	     { kg_aes256_subcol4[31:24],
	       kg_sbox_out,
	       kg_aes256_subcol4[15:0] } ;
  assign x__h7405 =
	     { kg_aes256_subcol4[31:16],
	       kg_sbox_out,
	       kg_aes256_subcol4[7:0] } ;
  assign x__h7599 = { kg_aes256_subcol4[31:8], kg_sbox_out } ;
  assign y__h213973 = maxround - 4'd1 ;
  assign y__h228828 = eight__h229470 ^ dr_colout1[7:0] ;
  assign y__h228830 = x__h229361 ^ dr_colout1[15:8] ;
  assign y__h228832 = x__h229240 ^ dr_colout1[23:16] ;
  assign y__h229603 = x__h229983 ^ dr_colout1[7:0] ;
  assign y__h229605 = x__h229862 ^ dr_colout1[15:8] ;
  assign y__h229607 = x__h229741 ^ two__h229227 ;
  assign y__h230118 = x__h230498 ^ dr_colout1[7:0] ;
  assign y__h230120 = x__h229361 ^ two__h229849 ;
  assign y__h230122 = eight__h229229 ^ dr_colout1[23:16] ;
  assign y__h230633 = x__h229983 ^ two__h230485 ;
  assign y__h230635 = eight__h229350 ^ dr_colout1[15:8] ;
  assign y__h230637 = x__h229741 ^ dr_colout1[23:16] ;
  assign y__h231267 = eight__h231909 ^ dr_colout2[7:0] ;
  assign y__h231269 = x__h231800 ^ dr_colout2[15:8] ;
  assign y__h231271 = x__h231679 ^ dr_colout2[23:16] ;
  assign y__h232042 = x__h232422 ^ dr_colout2[7:0] ;
  assign y__h232044 = x__h232301 ^ dr_colout2[15:8] ;
  assign y__h232046 = x__h232180 ^ two__h231666 ;
  assign y__h232557 = x__h232937 ^ dr_colout2[7:0] ;
  assign y__h232559 = x__h231800 ^ two__h232288 ;
  assign y__h232561 = eight__h231668 ^ dr_colout2[23:16] ;
  assign y__h233072 = x__h232422 ^ two__h232924 ;
  assign y__h233074 = eight__h231789 ^ dr_colout2[15:8] ;
  assign y__h233076 = x__h232180 ^ dr_colout2[23:16] ;
  assign y__h233706 = eight__h234348 ^ dr_colout3[7:0] ;
  assign y__h233708 = x__h234239 ^ dr_colout3[15:8] ;
  assign y__h233710 = x__h234118 ^ dr_colout3[23:16] ;
  assign y__h234481 = x__h234861 ^ dr_colout3[7:0] ;
  assign y__h234483 = x__h234740 ^ dr_colout3[15:8] ;
  assign y__h234485 = x__h234619 ^ two__h234105 ;
  assign y__h234996 = x__h235376 ^ dr_colout3[7:0] ;
  assign y__h234998 = x__h234239 ^ two__h234727 ;
  assign y__h235000 = eight__h234107 ^ dr_colout3[23:16] ;
  assign y__h235511 = x__h234861 ^ two__h235363 ;
  assign y__h235513 = eight__h234228 ^ dr_colout3[15:8] ;
  assign y__h235515 = x__h234619 ^ dr_colout3[23:16] ;
  assign y__h567955 = eight__h570144 ^ dr_colout0[7:0] ;
  assign y__h567957 = x__h569514 ^ dr_colout0[15:8] ;
  assign y__h567959 = x__h568368 ^ dr_colout0[23:16] ;
  assign y__h568734 = x__h570155 ^ dr_colout0[7:0] ;
  assign y__h568736 = x__h568995 ^ dr_colout0[15:8] ;
  assign y__h568738 = x__h569923 ^ two__h568860 ;
  assign y__h569253 = x__h569636 ^ dr_colout0[7:0] ;
  assign y__h569255 = x__h569514 ^ two__h569501 ;
  assign y__h569257 = eight__h569912 ^ dr_colout0[23:16] ;
  assign y__h569772 = x__h570155 ^ two__h570142 ;
  assign y__h569774 = eight__h570033 ^ dr_colout0[15:8] ;
  assign y__h569776 = x__h569923 ^ dr_colout0[23:16] ;
  always@(maxround or
	  kg_round_key_done_0 or
	  kg_round_key_done_1 or
	  kg_round_key_done_2 or
	  kg_round_key_done_3 or
	  kg_round_key_done_4 or
	  kg_round_key_done_5 or
	  kg_round_key_done_6 or
	  kg_round_key_done_7 or
	  kg_round_key_done_8 or
	  kg_round_key_done_9 or
	  kg_round_key_done_10 or
	  kg_round_key_done_11 or
	  kg_round_key_done_12 or
	  kg_round_key_done_13 or kg_round_key_done_14)
  begin
    case (maxround)
      4'd0:
	  SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992 =
	      kg_round_key_done_0;
      4'd1:
	  SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992 =
	      kg_round_key_done_1;
      4'd2:
	  SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992 =
	      kg_round_key_done_2;
      4'd3:
	  SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992 =
	      kg_round_key_done_3;
      4'd4:
	  SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992 =
	      kg_round_key_done_4;
      4'd5:
	  SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992 =
	      kg_round_key_done_5;
      4'd6:
	  SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992 =
	      kg_round_key_done_6;
      4'd7:
	  SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992 =
	      kg_round_key_done_7;
      4'd8:
	  SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992 =
	      kg_round_key_done_8;
      4'd9:
	  SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992 =
	      kg_round_key_done_9;
      4'd10:
	  SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992 =
	      kg_round_key_done_10;
      4'd11:
	  SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992 =
	      kg_round_key_done_11;
      4'd12:
	  SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992 =
	      kg_round_key_done_12;
      4'd13:
	  SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992 =
	      kg_round_key_done_13;
      4'd14:
	  SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992 =
	      kg_round_key_done_14;
      4'd15:
	  SEL_ARR_kg_round_key_done_0_976_kg_round_key_d_ETC___d1992 =
	      1'b0 /* unspecified value */ ;
    endcase
  end
  always@(kg_key_length or kg_round_number_1_EQ_kg_maxrounds_2___d73)
  begin
    case (kg_key_length)
      2'd1: CASE_kg_key_length_1_2_2_IF_kg_round_number_1__ETC__q1 = 3'd2;
      2'd2:
	  CASE_kg_key_length_1_2_2_IF_kg_round_number_1__ETC__q1 =
	      kg_round_number_1_EQ_kg_maxrounds_2___d73 ? 3'd0 : 3'd2;
      default: CASE_kg_key_length_1_2_2_IF_kg_round_number_1__ETC__q1 = 3'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        _unnamed_ <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ciphertext <= `BSV_ASSIGNMENT_DELAY 128'd128;
	col0 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	col1 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	col2 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	col3 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	colout0 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	colout1 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	colout2 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	colout3 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	counter <= `BSV_ASSIGNMENT_DELAY 4'd4;
	decrypt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dr_c0_col_in <= `BSV_ASSIGNMENT_DELAY 32'd32;
	dr_c1_col_in <= `BSV_ASSIGNMENT_DELAY 32'd32;
	dr_c2_col_in <= `BSV_ASSIGNMENT_DELAY 32'd32;
	dr_c3_col_in <= `BSV_ASSIGNMENT_DELAY 32'd32;
	dr_col__0 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__1 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__10 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__11 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__12 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__13 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__14 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__15 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__2 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__3 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__4 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__5 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__6 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__7 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__8 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__9 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_colout0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dr_colout1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dr_colout2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dr_colout3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dr_counter <= `BSV_ASSIGNMENT_DELAY 8'd8;
	dr_decrypt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dr_last_round <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dr_new_round <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dr_rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dr_round_done <= `BSV_ASSIGNMENT_DELAY 1'd1;
	dr_sboxes_out_0 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_1 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_10 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_11 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_12 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_13 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_14 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_15 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_2 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_3 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_4 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_5 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_6 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_7 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_8 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_9 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_0 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_1 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_10 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_11 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_12 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_13 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_14 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_15 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_2 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_3 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_4 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_5 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_6 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_7 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_8 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_9 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	key <= `BSV_ASSIGNMENT_DELAY 128'd128;
	kg_aes256_subcol4 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_counter <= `BSV_ASSIGNMENT_DELAY 4'd8;
	kg_key_length <= `BSV_ASSIGNMENT_DELAY 2'd0;
	kg_key_saved <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_last_col_sub_rot <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_maxrounds <= `BSV_ASSIGNMENT_DELAY 4'd10;
	kg_prev_key0 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_prev_key1 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_prev_key2 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_prev_key3 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_prev_key4 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_prev_key5 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_prev_key6 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_prev_key7 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_rci <= `BSV_ASSIGNMENT_DELAY 4'd0;
	kg_rcon <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_rg_keyreq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_rg_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	kg_rg_state_key <= `BSV_ASSIGNMENT_DELAY 2'd3;
	kg_rot_prev_key <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_round_key_done_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_10 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_11 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_12 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_13 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_14 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_8 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_9 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_number <= `BSV_ASSIGNMENT_DELAY 4'd4;
	kg_round_toggle_192 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_sbox_out <= `BSV_ASSIGNMENT_DELAY 8'd8;
	kg_temp_key0 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_temp_key1 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_temp_key2 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_temp_key3 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	maxround <= `BSV_ASSIGNMENT_DELAY 4'd10;
	new_round <= `BSV_ASSIGNMENT_DELAY 1'd0;
	plaintext <= `BSV_ASSIGNMENT_DELAY 128'd128;
	rg_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_state2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (_unnamed_$EN) _unnamed_ <= `BSV_ASSIGNMENT_DELAY _unnamed_$D_IN;
	if (ciphertext$EN)
	  ciphertext <= `BSV_ASSIGNMENT_DELAY ciphertext$D_IN;
	if (col0$EN) col0 <= `BSV_ASSIGNMENT_DELAY col0$D_IN;
	if (col1$EN) col1 <= `BSV_ASSIGNMENT_DELAY col1$D_IN;
	if (col2$EN) col2 <= `BSV_ASSIGNMENT_DELAY col2$D_IN;
	if (col3$EN) col3 <= `BSV_ASSIGNMENT_DELAY col3$D_IN;
	if (colout0$EN) colout0 <= `BSV_ASSIGNMENT_DELAY colout0$D_IN;
	if (colout1$EN) colout1 <= `BSV_ASSIGNMENT_DELAY colout1$D_IN;
	if (colout2$EN) colout2 <= `BSV_ASSIGNMENT_DELAY colout2$D_IN;
	if (colout3$EN) colout3 <= `BSV_ASSIGNMENT_DELAY colout3$D_IN;
	if (counter$EN) counter <= `BSV_ASSIGNMENT_DELAY counter$D_IN;
	if (decrypt$EN) decrypt <= `BSV_ASSIGNMENT_DELAY decrypt$D_IN;
	if (dr_c0_col_in$EN)
	  dr_c0_col_in <= `BSV_ASSIGNMENT_DELAY dr_c0_col_in$D_IN;
	if (dr_c1_col_in$EN)
	  dr_c1_col_in <= `BSV_ASSIGNMENT_DELAY dr_c1_col_in$D_IN;
	if (dr_c2_col_in$EN)
	  dr_c2_col_in <= `BSV_ASSIGNMENT_DELAY dr_c2_col_in$D_IN;
	if (dr_c3_col_in$EN)
	  dr_c3_col_in <= `BSV_ASSIGNMENT_DELAY dr_c3_col_in$D_IN;
	if (dr_col__0$EN) dr_col__0 <= `BSV_ASSIGNMENT_DELAY dr_col__0$D_IN;
	if (dr_col__1$EN) dr_col__1 <= `BSV_ASSIGNMENT_DELAY dr_col__1$D_IN;
	if (dr_col__10$EN)
	  dr_col__10 <= `BSV_ASSIGNMENT_DELAY dr_col__10$D_IN;
	if (dr_col__11$EN)
	  dr_col__11 <= `BSV_ASSIGNMENT_DELAY dr_col__11$D_IN;
	if (dr_col__12$EN)
	  dr_col__12 <= `BSV_ASSIGNMENT_DELAY dr_col__12$D_IN;
	if (dr_col__13$EN)
	  dr_col__13 <= `BSV_ASSIGNMENT_DELAY dr_col__13$D_IN;
	if (dr_col__14$EN)
	  dr_col__14 <= `BSV_ASSIGNMENT_DELAY dr_col__14$D_IN;
	if (dr_col__15$EN)
	  dr_col__15 <= `BSV_ASSIGNMENT_DELAY dr_col__15$D_IN;
	if (dr_col__2$EN) dr_col__2 <= `BSV_ASSIGNMENT_DELAY dr_col__2$D_IN;
	if (dr_col__3$EN) dr_col__3 <= `BSV_ASSIGNMENT_DELAY dr_col__3$D_IN;
	if (dr_col__4$EN) dr_col__4 <= `BSV_ASSIGNMENT_DELAY dr_col__4$D_IN;
	if (dr_col__5$EN) dr_col__5 <= `BSV_ASSIGNMENT_DELAY dr_col__5$D_IN;
	if (dr_col__6$EN) dr_col__6 <= `BSV_ASSIGNMENT_DELAY dr_col__6$D_IN;
	if (dr_col__7$EN) dr_col__7 <= `BSV_ASSIGNMENT_DELAY dr_col__7$D_IN;
	if (dr_col__8$EN) dr_col__8 <= `BSV_ASSIGNMENT_DELAY dr_col__8$D_IN;
	if (dr_col__9$EN) dr_col__9 <= `BSV_ASSIGNMENT_DELAY dr_col__9$D_IN;
	if (dr_colout0$EN)
	  dr_colout0 <= `BSV_ASSIGNMENT_DELAY dr_colout0$D_IN;
	if (dr_colout1$EN)
	  dr_colout1 <= `BSV_ASSIGNMENT_DELAY dr_colout1$D_IN;
	if (dr_colout2$EN)
	  dr_colout2 <= `BSV_ASSIGNMENT_DELAY dr_colout2$D_IN;
	if (dr_colout3$EN)
	  dr_colout3 <= `BSV_ASSIGNMENT_DELAY dr_colout3$D_IN;
	if (dr_counter$EN)
	  dr_counter <= `BSV_ASSIGNMENT_DELAY dr_counter$D_IN;
	if (dr_decrypt$EN)
	  dr_decrypt <= `BSV_ASSIGNMENT_DELAY dr_decrypt$D_IN;
	if (dr_last_round$EN)
	  dr_last_round <= `BSV_ASSIGNMENT_DELAY dr_last_round$D_IN;
	if (dr_new_round$EN)
	  dr_new_round <= `BSV_ASSIGNMENT_DELAY dr_new_round$D_IN;
	if (dr_rg_state$EN)
	  dr_rg_state <= `BSV_ASSIGNMENT_DELAY dr_rg_state$D_IN;
	if (dr_round_done$EN)
	  dr_round_done <= `BSV_ASSIGNMENT_DELAY dr_round_done$D_IN;
	if (dr_sboxes_out_0$EN)
	  dr_sboxes_out_0 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_0$D_IN;
	if (dr_sboxes_out_1$EN)
	  dr_sboxes_out_1 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_1$D_IN;
	if (dr_sboxes_out_10$EN)
	  dr_sboxes_out_10 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_10$D_IN;
	if (dr_sboxes_out_11$EN)
	  dr_sboxes_out_11 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_11$D_IN;
	if (dr_sboxes_out_12$EN)
	  dr_sboxes_out_12 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_12$D_IN;
	if (dr_sboxes_out_13$EN)
	  dr_sboxes_out_13 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_13$D_IN;
	if (dr_sboxes_out_14$EN)
	  dr_sboxes_out_14 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_14$D_IN;
	if (dr_sboxes_out_15$EN)
	  dr_sboxes_out_15 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_15$D_IN;
	if (dr_sboxes_out_2$EN)
	  dr_sboxes_out_2 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_2$D_IN;
	if (dr_sboxes_out_3$EN)
	  dr_sboxes_out_3 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_3$D_IN;
	if (dr_sboxes_out_4$EN)
	  dr_sboxes_out_4 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_4$D_IN;
	if (dr_sboxes_out_5$EN)
	  dr_sboxes_out_5 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_5$D_IN;
	if (dr_sboxes_out_6$EN)
	  dr_sboxes_out_6 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_6$D_IN;
	if (dr_sboxes_out_7$EN)
	  dr_sboxes_out_7 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_7$D_IN;
	if (dr_sboxes_out_8$EN)
	  dr_sboxes_out_8 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_8$D_IN;
	if (dr_sboxes_out_9$EN)
	  dr_sboxes_out_9 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_9$D_IN;
	if (dr_sub_col_0$EN)
	  dr_sub_col_0 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_0$D_IN;
	if (dr_sub_col_1$EN)
	  dr_sub_col_1 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_1$D_IN;
	if (dr_sub_col_10$EN)
	  dr_sub_col_10 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_10$D_IN;
	if (dr_sub_col_11$EN)
	  dr_sub_col_11 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_11$D_IN;
	if (dr_sub_col_12$EN)
	  dr_sub_col_12 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_12$D_IN;
	if (dr_sub_col_13$EN)
	  dr_sub_col_13 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_13$D_IN;
	if (dr_sub_col_14$EN)
	  dr_sub_col_14 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_14$D_IN;
	if (dr_sub_col_15$EN)
	  dr_sub_col_15 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_15$D_IN;
	if (dr_sub_col_2$EN)
	  dr_sub_col_2 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_2$D_IN;
	if (dr_sub_col_3$EN)
	  dr_sub_col_3 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_3$D_IN;
	if (dr_sub_col_4$EN)
	  dr_sub_col_4 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_4$D_IN;
	if (dr_sub_col_5$EN)
	  dr_sub_col_5 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_5$D_IN;
	if (dr_sub_col_6$EN)
	  dr_sub_col_6 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_6$D_IN;
	if (dr_sub_col_7$EN)
	  dr_sub_col_7 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_7$D_IN;
	if (dr_sub_col_8$EN)
	  dr_sub_col_8 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_8$D_IN;
	if (dr_sub_col_9$EN)
	  dr_sub_col_9 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_9$D_IN;
	if (key$EN) key <= `BSV_ASSIGNMENT_DELAY key$D_IN;
	if (kg_aes256_subcol4$EN)
	  kg_aes256_subcol4 <= `BSV_ASSIGNMENT_DELAY kg_aes256_subcol4$D_IN;
	if (kg_counter$EN)
	  kg_counter <= `BSV_ASSIGNMENT_DELAY kg_counter$D_IN;
	if (kg_key_length$EN)
	  kg_key_length <= `BSV_ASSIGNMENT_DELAY kg_key_length$D_IN;
	if (kg_key_saved$EN)
	  kg_key_saved <= `BSV_ASSIGNMENT_DELAY kg_key_saved$D_IN;
	if (kg_last_col_sub_rot$EN)
	  kg_last_col_sub_rot <= `BSV_ASSIGNMENT_DELAY
	      kg_last_col_sub_rot$D_IN;
	if (kg_maxrounds$EN)
	  kg_maxrounds <= `BSV_ASSIGNMENT_DELAY kg_maxrounds$D_IN;
	if (kg_prev_key0$EN)
	  kg_prev_key0 <= `BSV_ASSIGNMENT_DELAY kg_prev_key0$D_IN;
	if (kg_prev_key1$EN)
	  kg_prev_key1 <= `BSV_ASSIGNMENT_DELAY kg_prev_key1$D_IN;
	if (kg_prev_key2$EN)
	  kg_prev_key2 <= `BSV_ASSIGNMENT_DELAY kg_prev_key2$D_IN;
	if (kg_prev_key3$EN)
	  kg_prev_key3 <= `BSV_ASSIGNMENT_DELAY kg_prev_key3$D_IN;
	if (kg_prev_key4$EN)
	  kg_prev_key4 <= `BSV_ASSIGNMENT_DELAY kg_prev_key4$D_IN;
	if (kg_prev_key5$EN)
	  kg_prev_key5 <= `BSV_ASSIGNMENT_DELAY kg_prev_key5$D_IN;
	if (kg_prev_key6$EN)
	  kg_prev_key6 <= `BSV_ASSIGNMENT_DELAY kg_prev_key6$D_IN;
	if (kg_prev_key7$EN)
	  kg_prev_key7 <= `BSV_ASSIGNMENT_DELAY kg_prev_key7$D_IN;
	if (kg_rci$EN) kg_rci <= `BSV_ASSIGNMENT_DELAY kg_rci$D_IN;
	if (kg_rcon$EN) kg_rcon <= `BSV_ASSIGNMENT_DELAY kg_rcon$D_IN;
	if (kg_rg_keyreq$EN)
	  kg_rg_keyreq <= `BSV_ASSIGNMENT_DELAY kg_rg_keyreq$D_IN;
	if (kg_rg_state$EN)
	  kg_rg_state <= `BSV_ASSIGNMENT_DELAY kg_rg_state$D_IN;
	if (kg_rg_state_key$EN)
	  kg_rg_state_key <= `BSV_ASSIGNMENT_DELAY kg_rg_state_key$D_IN;
	if (kg_rot_prev_key$EN)
	  kg_rot_prev_key <= `BSV_ASSIGNMENT_DELAY kg_rot_prev_key$D_IN;
	if (kg_round_key_done_0$EN)
	  kg_round_key_done_0 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_0$D_IN;
	if (kg_round_key_done_1$EN)
	  kg_round_key_done_1 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_1$D_IN;
	if (kg_round_key_done_10$EN)
	  kg_round_key_done_10 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_10$D_IN;
	if (kg_round_key_done_11$EN)
	  kg_round_key_done_11 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_11$D_IN;
	if (kg_round_key_done_12$EN)
	  kg_round_key_done_12 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_12$D_IN;
	if (kg_round_key_done_13$EN)
	  kg_round_key_done_13 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_13$D_IN;
	if (kg_round_key_done_14$EN)
	  kg_round_key_done_14 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_14$D_IN;
	if (kg_round_key_done_2$EN)
	  kg_round_key_done_2 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_2$D_IN;
	if (kg_round_key_done_3$EN)
	  kg_round_key_done_3 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_3$D_IN;
	if (kg_round_key_done_4$EN)
	  kg_round_key_done_4 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_4$D_IN;
	if (kg_round_key_done_5$EN)
	  kg_round_key_done_5 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_5$D_IN;
	if (kg_round_key_done_6$EN)
	  kg_round_key_done_6 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_6$D_IN;
	if (kg_round_key_done_7$EN)
	  kg_round_key_done_7 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_7$D_IN;
	if (kg_round_key_done_8$EN)
	  kg_round_key_done_8 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_8$D_IN;
	if (kg_round_key_done_9$EN)
	  kg_round_key_done_9 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_9$D_IN;
	if (kg_round_number$EN)
	  kg_round_number <= `BSV_ASSIGNMENT_DELAY kg_round_number$D_IN;
	if (kg_round_toggle_192$EN)
	  kg_round_toggle_192 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_toggle_192$D_IN;
	if (kg_sbox_out$EN)
	  kg_sbox_out <= `BSV_ASSIGNMENT_DELAY kg_sbox_out$D_IN;
	if (kg_temp_key0$EN)
	  kg_temp_key0 <= `BSV_ASSIGNMENT_DELAY kg_temp_key0$D_IN;
	if (kg_temp_key1$EN)
	  kg_temp_key1 <= `BSV_ASSIGNMENT_DELAY kg_temp_key1$D_IN;
	if (kg_temp_key2$EN)
	  kg_temp_key2 <= `BSV_ASSIGNMENT_DELAY kg_temp_key2$D_IN;
	if (kg_temp_key3$EN)
	  kg_temp_key3 <= `BSV_ASSIGNMENT_DELAY kg_temp_key3$D_IN;
	if (maxround$EN) maxround <= `BSV_ASSIGNMENT_DELAY maxround$D_IN;
	if (new_round$EN) new_round <= `BSV_ASSIGNMENT_DELAY new_round$D_IN;
	if (plaintext$EN) plaintext <= `BSV_ASSIGNMENT_DELAY plaintext$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_state2$EN) rg_state2 <= `BSV_ASSIGNMENT_DELAY rg_state2$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    _unnamed_ = 1'h0;
    ciphertext = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    col0 = 32'hAAAAAAAA;
    col1 = 32'hAAAAAAAA;
    col2 = 32'hAAAAAAAA;
    col3 = 32'hAAAAAAAA;
    colout0 = 32'hAAAAAAAA;
    colout1 = 32'hAAAAAAAA;
    colout2 = 32'hAAAAAAAA;
    colout3 = 32'hAAAAAAAA;
    counter = 4'hA;
    decrypt = 1'h0;
    dr_c0_col_in = 32'hAAAAAAAA;
    dr_c1_col_in = 32'hAAAAAAAA;
    dr_c2_col_in = 32'hAAAAAAAA;
    dr_c3_col_in = 32'hAAAAAAAA;
    dr_col__0 = 8'hAA;
    dr_col__1 = 8'hAA;
    dr_col__10 = 8'hAA;
    dr_col__11 = 8'hAA;
    dr_col__12 = 8'hAA;
    dr_col__13 = 8'hAA;
    dr_col__14 = 8'hAA;
    dr_col__15 = 8'hAA;
    dr_col__2 = 8'hAA;
    dr_col__3 = 8'hAA;
    dr_col__4 = 8'hAA;
    dr_col__5 = 8'hAA;
    dr_col__6 = 8'hAA;
    dr_col__7 = 8'hAA;
    dr_col__8 = 8'hAA;
    dr_col__9 = 8'hAA;
    dr_colout0 = 32'hAAAAAAAA;
    dr_colout1 = 32'hAAAAAAAA;
    dr_colout2 = 32'hAAAAAAAA;
    dr_colout3 = 32'hAAAAAAAA;
    dr_counter = 8'hAA;
    dr_decrypt = 1'h0;
    dr_last_round = 1'h0;
    dr_new_round = 1'h0;
    dr_rg_state = 4'hA;
    dr_round_done = 1'h0;
    dr_sboxes_out_0 = 8'hAA;
    dr_sboxes_out_1 = 8'hAA;
    dr_sboxes_out_10 = 8'hAA;
    dr_sboxes_out_11 = 8'hAA;
    dr_sboxes_out_12 = 8'hAA;
    dr_sboxes_out_13 = 8'hAA;
    dr_sboxes_out_14 = 8'hAA;
    dr_sboxes_out_15 = 8'hAA;
    dr_sboxes_out_2 = 8'hAA;
    dr_sboxes_out_3 = 8'hAA;
    dr_sboxes_out_4 = 8'hAA;
    dr_sboxes_out_5 = 8'hAA;
    dr_sboxes_out_6 = 8'hAA;
    dr_sboxes_out_7 = 8'hAA;
    dr_sboxes_out_8 = 8'hAA;
    dr_sboxes_out_9 = 8'hAA;
    dr_sub_col_0 = 8'hAA;
    dr_sub_col_1 = 8'hAA;
    dr_sub_col_10 = 8'hAA;
    dr_sub_col_11 = 8'hAA;
    dr_sub_col_12 = 8'hAA;
    dr_sub_col_13 = 8'hAA;
    dr_sub_col_14 = 8'hAA;
    dr_sub_col_15 = 8'hAA;
    dr_sub_col_2 = 8'hAA;
    dr_sub_col_3 = 8'hAA;
    dr_sub_col_4 = 8'hAA;
    dr_sub_col_5 = 8'hAA;
    dr_sub_col_6 = 8'hAA;
    dr_sub_col_7 = 8'hAA;
    dr_sub_col_8 = 8'hAA;
    dr_sub_col_9 = 8'hAA;
    key = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    kg_aes256_subcol4 = 32'hAAAAAAAA;
    kg_counter = 4'hA;
    kg_key_length = 2'h2;
    kg_key_saved = 1'h0;
    kg_last_col_sub_rot = 32'hAAAAAAAA;
    kg_maxrounds = 4'hA;
    kg_prev_key0 = 32'hAAAAAAAA;
    kg_prev_key1 = 32'hAAAAAAAA;
    kg_prev_key2 = 32'hAAAAAAAA;
    kg_prev_key3 = 32'hAAAAAAAA;
    kg_prev_key4 = 32'hAAAAAAAA;
    kg_prev_key5 = 32'hAAAAAAAA;
    kg_prev_key6 = 32'hAAAAAAAA;
    kg_prev_key7 = 32'hAAAAAAAA;
    kg_rci = 4'hA;
    kg_rcon = 32'hAAAAAAAA;
    kg_rg_keyreq = 1'h0;
    kg_rg_state = 3'h2;
    kg_rg_state_key = 2'h2;
    kg_rot_prev_key = 32'hAAAAAAAA;
    kg_round_key_done_0 = 1'h0;
    kg_round_key_done_1 = 1'h0;
    kg_round_key_done_10 = 1'h0;
    kg_round_key_done_11 = 1'h0;
    kg_round_key_done_12 = 1'h0;
    kg_round_key_done_13 = 1'h0;
    kg_round_key_done_14 = 1'h0;
    kg_round_key_done_2 = 1'h0;
    kg_round_key_done_3 = 1'h0;
    kg_round_key_done_4 = 1'h0;
    kg_round_key_done_5 = 1'h0;
    kg_round_key_done_6 = 1'h0;
    kg_round_key_done_7 = 1'h0;
    kg_round_key_done_8 = 1'h0;
    kg_round_key_done_9 = 1'h0;
    kg_round_number = 4'hA;
    kg_round_toggle_192 = 1'h0;
    kg_sbox_out = 8'hAA;
    kg_temp_key0 = 32'hAAAAAAAA;
    kg_temp_key1 = 32'hAAAAAAAA;
    kg_temp_key2 = 32'hAAAAAAAA;
    kg_temp_key3 = 32'hAAAAAAAA;
    maxround = 4'hA;
    new_round = 1'h0;
    plaintext = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_state = 3'h2;
    rg_state2 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkAES

