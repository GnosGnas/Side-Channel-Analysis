//
// Generated by Bluespec Compiler, version 2021.07-1-gaf77efcd (build af77efcd)
//
// On Thu Dec  9 08:47:51 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// instr_req_get                  O    68
// RDY_instr_req_get              O     1
// RDY_inst_response_put          O     1 reg
// memory_request_get             O   143
// RDY_memory_request_get         O     1
// RDY_memory_response_put        O     1
// initiate_store_fst             O     1
// RDY_initiate_store_fst         O     1 const
// initiate_store_snd             O     1
// RDY_initiate_store_snd         O     1 const
// RDY_write_resp                 O     1 const
// RDY_store_is_cached            O     1 const
// RDY_ma_clint_msip              O     1 const
// RDY_ma_clint_mtip              O     1 const
// RDY_ma_clint_mtime             O     1 const
// RDY_ma_set_external_interrupt  O     1 const
// dump_get                       O   168 reg
// RDY_dump_get                   O     1 reg
// mv_csr_mstatus                 O    64
// RDY_mv_csr_mstatus             O     1 const
// mv_cacheenable                 O     3 reg
// RDY_mv_cacheenable             O     1 const
// mv_curr_priv                   O     2 reg
// RDY_mv_curr_priv               O     1 const
// mv_csr_satp                    O    64
// RDY_mv_csr_satp                O     1 const
// debug_access_gprs              O    64
// RDY_debug_access_gprs          O     1
// RDY_ma_debug_access_csrs       O     1
// RDY_ma_debug_halt_request      O     1 const
// RDY_ma_debug_resume_request    O     1 const
// mv_core_is_halted              O     1 reg
// RDY_mv_core_is_halted          O     1 const
// mv_core_debugenable            O     1 reg
// RDY_mv_core_debugenable        O     1 const
// RDY_ma_debugger_available      O     1 const
// mv_resp_to_core                O    65
// RDY_mv_resp_to_core            O     1 const
// RDY_ma_icache_counters         O     1 const
// RDY_ma_dcache_counters         O     1 const
// RDY_ma_dtlb_counters           O     1 const
// RDY_ma_itlb_counters           O     1 const
// resetpc                        I    64
// CLK                            I     1 clock
// RST_N                          I     1 reset
// inst_response_put              I    41
// memory_response_put            I    72
// write_resp_r                   I    66
// storebuffer_empty_e            I     1 unused
// store_is_cached_c              I     1
// cache_is_available_avail       I     1
// ma_clint_msip_intrpt           I     1 reg
// ma_clint_mtip_intrpt           I     1 reg
// ma_clint_mtime_c_mtime         I    64 reg
// ma_set_external_interrupt_ex_i  I     1 reg
// debug_access_gprs_cmd          I    80
// ma_debug_access_csrs_cmd       I    80
// ma_debug_halt_request_ip       I     1 reg
// ma_debug_resume_request_ip     I     1 reg
// ma_debugger_available_avail    I     1
// ma_icache_counters_i           I     5
// ma_dcache_counters_i           I    13
// ma_dtlb_counters_i             I     1
// ma_itlb_counters_i             I     1
// EN_inst_response_put           I     1
// EN_memory_response_put         I     1
// EN_write_resp                  I     1
// EN_store_is_cached             I     1 inhigh
// EN_ma_clint_msip               I     1
// EN_ma_clint_mtip               I     1
// EN_ma_clint_mtime              I     1
// EN_ma_set_external_interrupt   I     1
// EN_ma_debug_access_csrs        I     1
// EN_ma_debug_halt_request       I     1
// EN_ma_debug_resume_request     I     1
// EN_ma_debugger_available       I     1 inhigh
// EN_ma_icache_counters          I     1
// EN_ma_dcache_counters          I     1
// EN_ma_dtlb_counters            I     1
// EN_ma_itlb_counters            I     1
// EN_instr_req_get               I     1
// EN_memory_request_get          I     1 unused
// EN_dump_get                    I     1
// EN_debug_access_gprs           I     1
//
// Combinational paths from inputs to outputs:
//   cache_is_available_avail -> RDY_memory_request_get
//   cache_is_available_avail -> memory_request_get
//   (ma_debug_access_csrs_cmd,
//    EN_ma_debug_access_csrs,
//    EN_dump_get) -> mv_resp_to_core
//   (debug_access_gprs_cmd, EN_debug_access_gprs) -> debug_access_gprs
//   EN_dump_get -> initiate_store_fst
//   EN_dump_get -> initiate_store_snd
//   resetpc -> RDY_instr_req_get
//   resetpc -> instr_req_get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkriscv(resetpc,
	       CLK,
	       RST_N,

	       EN_instr_req_get,
	       instr_req_get,
	       RDY_instr_req_get,

	       inst_response_put,
	       EN_inst_response_put,
	       RDY_inst_response_put,

	       EN_memory_request_get,
	       memory_request_get,
	       RDY_memory_request_get,

	       memory_response_put,
	       EN_memory_response_put,
	       RDY_memory_response_put,

	       initiate_store_fst,
	       RDY_initiate_store_fst,

	       initiate_store_snd,
	       RDY_initiate_store_snd,

	       write_resp_r,
	       EN_write_resp,
	       RDY_write_resp,

	       storebuffer_empty_e,

	       store_is_cached_c,
	       EN_store_is_cached,
	       RDY_store_is_cached,

	       cache_is_available_avail,

	       ma_clint_msip_intrpt,
	       EN_ma_clint_msip,
	       RDY_ma_clint_msip,

	       ma_clint_mtip_intrpt,
	       EN_ma_clint_mtip,
	       RDY_ma_clint_mtip,

	       ma_clint_mtime_c_mtime,
	       EN_ma_clint_mtime,
	       RDY_ma_clint_mtime,

	       ma_set_external_interrupt_ex_i,
	       EN_ma_set_external_interrupt,
	       RDY_ma_set_external_interrupt,

	       EN_dump_get,
	       dump_get,
	       RDY_dump_get,

	       mv_csr_mstatus,
	       RDY_mv_csr_mstatus,

	       mv_cacheenable,
	       RDY_mv_cacheenable,

	       mv_curr_priv,
	       RDY_mv_curr_priv,

	       mv_csr_satp,
	       RDY_mv_csr_satp,

	       debug_access_gprs_cmd,
	       EN_debug_access_gprs,
	       debug_access_gprs,
	       RDY_debug_access_gprs,

	       ma_debug_access_csrs_cmd,
	       EN_ma_debug_access_csrs,
	       RDY_ma_debug_access_csrs,

	       ma_debug_halt_request_ip,
	       EN_ma_debug_halt_request,
	       RDY_ma_debug_halt_request,

	       ma_debug_resume_request_ip,
	       EN_ma_debug_resume_request,
	       RDY_ma_debug_resume_request,

	       mv_core_is_halted,
	       RDY_mv_core_is_halted,

	       mv_core_debugenable,
	       RDY_mv_core_debugenable,

	       ma_debugger_available_avail,
	       EN_ma_debugger_available,
	       RDY_ma_debugger_available,

	       mv_resp_to_core,
	       RDY_mv_resp_to_core,

	       ma_icache_counters_i,
	       EN_ma_icache_counters,
	       RDY_ma_icache_counters,

	       ma_dcache_counters_i,
	       EN_ma_dcache_counters,
	       RDY_ma_dcache_counters,

	       ma_dtlb_counters_i,
	       EN_ma_dtlb_counters,
	       RDY_ma_dtlb_counters,

	       ma_itlb_counters_i,
	       EN_ma_itlb_counters,
	       RDY_ma_itlb_counters);
  parameter [63 : 0] hartid = 64'b0;
  input  [63 : 0] resetpc;
  input  CLK;
  input  RST_N;

  // actionvalue method instr_req_get
  input  EN_instr_req_get;
  output [67 : 0] instr_req_get;
  output RDY_instr_req_get;

  // action method inst_response_put
  input  [40 : 0] inst_response_put;
  input  EN_inst_response_put;
  output RDY_inst_response_put;

  // actionvalue method memory_request_get
  input  EN_memory_request_get;
  output [142 : 0] memory_request_get;
  output RDY_memory_request_get;

  // action method memory_response_put
  input  [71 : 0] memory_response_put;
  input  EN_memory_response_put;
  output RDY_memory_response_put;

  // value method initiate_store_fst
  output initiate_store_fst;
  output RDY_initiate_store_fst;

  // value method initiate_store_snd
  output initiate_store_snd;
  output RDY_initiate_store_snd;

  // action method write_resp
  input  [65 : 0] write_resp_r;
  input  EN_write_resp;
  output RDY_write_resp;

  // action method storebuffer_empty
  input  storebuffer_empty_e;

  // action method store_is_cached
  input  store_is_cached_c;
  input  EN_store_is_cached;
  output RDY_store_is_cached;

  // action method cache_is_available
  input  cache_is_available_avail;

  // action method ma_clint_msip
  input  ma_clint_msip_intrpt;
  input  EN_ma_clint_msip;
  output RDY_ma_clint_msip;

  // action method ma_clint_mtip
  input  ma_clint_mtip_intrpt;
  input  EN_ma_clint_mtip;
  output RDY_ma_clint_mtip;

  // action method ma_clint_mtime
  input  [63 : 0] ma_clint_mtime_c_mtime;
  input  EN_ma_clint_mtime;
  output RDY_ma_clint_mtime;

  // action method ma_set_external_interrupt
  input  ma_set_external_interrupt_ex_i;
  input  EN_ma_set_external_interrupt;
  output RDY_ma_set_external_interrupt;

  // actionvalue method dump_get
  input  EN_dump_get;
  output [167 : 0] dump_get;
  output RDY_dump_get;

  // value method mv_csr_mstatus
  output [63 : 0] mv_csr_mstatus;
  output RDY_mv_csr_mstatus;

  // value method mv_cacheenable
  output [2 : 0] mv_cacheenable;
  output RDY_mv_cacheenable;

  // value method mv_curr_priv
  output [1 : 0] mv_curr_priv;
  output RDY_mv_curr_priv;

  // value method mv_csr_satp
  output [63 : 0] mv_csr_satp;
  output RDY_mv_csr_satp;

  // actionvalue method debug_access_gprs
  input  [79 : 0] debug_access_gprs_cmd;
  input  EN_debug_access_gprs;
  output [63 : 0] debug_access_gprs;
  output RDY_debug_access_gprs;

  // action method ma_debug_access_csrs
  input  [79 : 0] ma_debug_access_csrs_cmd;
  input  EN_ma_debug_access_csrs;
  output RDY_ma_debug_access_csrs;

  // action method ma_debug_halt_request
  input  ma_debug_halt_request_ip;
  input  EN_ma_debug_halt_request;
  output RDY_ma_debug_halt_request;

  // action method ma_debug_resume_request
  input  ma_debug_resume_request_ip;
  input  EN_ma_debug_resume_request;
  output RDY_ma_debug_resume_request;

  // value method mv_core_is_halted
  output mv_core_is_halted;
  output RDY_mv_core_is_halted;

  // value method mv_core_debugenable
  output mv_core_debugenable;
  output RDY_mv_core_debugenable;

  // action method ma_debugger_available
  input  ma_debugger_available_avail;
  input  EN_ma_debugger_available;
  output RDY_ma_debugger_available;

  // value method mv_resp_to_core
  output [64 : 0] mv_resp_to_core;
  output RDY_mv_resp_to_core;

  // action method ma_icache_counters
  input  [4 : 0] ma_icache_counters_i;
  input  EN_ma_icache_counters;
  output RDY_ma_icache_counters;

  // action method ma_dcache_counters
  input  [12 : 0] ma_dcache_counters_i;
  input  EN_ma_dcache_counters;
  output RDY_ma_dcache_counters;

  // action method ma_dtlb_counters
  input  ma_dtlb_counters_i;
  input  EN_ma_dtlb_counters;
  output RDY_ma_dtlb_counters;

  // action method ma_itlb_counters
  input  ma_itlb_counters_i;
  input  EN_ma_itlb_counters;
  output RDY_ma_itlb_counters;

  // signals for module outputs
  wire [167 : 0] dump_get;
  wire [142 : 0] memory_request_get;
  wire [67 : 0] instr_req_get;
  wire [64 : 0] mv_resp_to_core;
  wire [63 : 0] debug_access_gprs, mv_csr_mstatus, mv_csr_satp;
  wire [2 : 0] mv_cacheenable;
  wire [1 : 0] mv_curr_priv;
  wire RDY_debug_access_gprs,
       RDY_dump_get,
       RDY_initiate_store_fst,
       RDY_initiate_store_snd,
       RDY_inst_response_put,
       RDY_instr_req_get,
       RDY_ma_clint_msip,
       RDY_ma_clint_mtime,
       RDY_ma_clint_mtip,
       RDY_ma_dcache_counters,
       RDY_ma_debug_access_csrs,
       RDY_ma_debug_halt_request,
       RDY_ma_debug_resume_request,
       RDY_ma_debugger_available,
       RDY_ma_dtlb_counters,
       RDY_ma_icache_counters,
       RDY_ma_itlb_counters,
       RDY_ma_set_external_interrupt,
       RDY_memory_request_get,
       RDY_memory_response_put,
       RDY_mv_cacheenable,
       RDY_mv_core_debugenable,
       RDY_mv_core_is_halted,
       RDY_mv_csr_mstatus,
       RDY_mv_csr_satp,
       RDY_mv_curr_priv,
       RDY_mv_resp_to_core,
       RDY_store_is_cached,
       RDY_write_resp,
       initiate_store_fst,
       initiate_store_snd,
       mv_core_debugenable,
       mv_core_is_halted;

  // register rg_wEpoch
  reg rg_wEpoch;
  wire rg_wEpoch_D_IN, rg_wEpoch_EN;

  // ports of submodule pipe0
  wire [79 : 0] pipe0_D_IN, pipe0_D_OUT;
  wire pipe0_CLR, pipe0_DEQ, pipe0_EMPTY_N, pipe0_ENQ, pipe0_FULL_N;

  // ports of submodule pipe1
  wire [121 : 0] pipe1_D_IN, pipe1_D_OUT;
  wire pipe1_CLR, pipe1_DEQ, pipe1_EMPTY_N, pipe1_ENQ, pipe1_FULL_N;

  // ports of submodule pipe1inst
  wire [31 : 0] pipe1inst_D_IN, pipe1inst_D_OUT;
  wire pipe1inst_CLR,
       pipe1inst_DEQ,
       pipe1inst_EMPTY_N,
       pipe1inst_ENQ,
       pipe1inst_FULL_N;

  // ports of submodule pipe2_meta
  wire [102 : 0] pipe2_meta_D_IN, pipe2_meta_D_OUT;
  wire pipe2_meta_CLR,
       pipe2_meta_DEQ,
       pipe2_meta_EMPTY_N,
       pipe2_meta_ENQ,
       pipe2_meta_FULL_N;

  // ports of submodule pipe2_mtval
  wire [63 : 0] pipe2_mtval_D_IN, pipe2_mtval_D_OUT;
  wire pipe2_mtval_CLR,
       pipe2_mtval_DEQ,
       pipe2_mtval_EMPTY_N,
       pipe2_mtval_ENQ,
       pipe2_mtval_FULL_N;

  // ports of submodule pipe2inst
  wire [31 : 0] pipe2inst_D_IN, pipe2inst_D_OUT;
  wire pipe2inst_CLR,
       pipe2inst_DEQ,
       pipe2inst_EMPTY_N,
       pipe2inst_ENQ,
       pipe2inst_FULL_N;

  // ports of submodule pipe3common
  wire [70 : 0] pipe3common_D_IN, pipe3common_D_OUT;
  wire pipe3common_CLR,
       pipe3common_DEQ,
       pipe3common_EMPTY_N,
       pipe3common_ENQ,
       pipe3common_FULL_N;

  // ports of submodule pipe3inst
  wire [95 : 0] pipe3inst_D_IN, pipe3inst_D_OUT;
  wire pipe3inst_CLR,
       pipe3inst_DEQ,
       pipe3inst_EMPTY_N,
       pipe3inst_ENQ,
       pipe3inst_FULL_N;

  // ports of submodule pipe3type
  wire [82 : 0] pipe3type_D_IN, pipe3type_D_OUT;
  wire pipe3type_CLR,
       pipe3type_DEQ,
       pipe3type_EMPTY_N,
       pipe3type_ENQ,
       pipe3type_FULL_N;

  // ports of submodule pipe4
  wire [136 : 0] pipe4_D_IN, pipe4_D_OUT;
  wire pipe4_CLR, pipe4_DEQ, pipe4_EMPTY_N, pipe4_ENQ, pipe4_FULL_N;

  // ports of submodule pipe4inst
  wire [95 : 0] pipe4inst_D_IN, pipe4inst_D_OUT;
  wire pipe4inst_CLR,
       pipe4inst_DEQ,
       pipe4inst_EMPTY_N,
       pipe4inst_ENQ,
       pipe4inst_FULL_N;

  // ports of submodule stage0
  wire [144 : 0] stage0_ma_train_bpu_td;
  wire [79 : 0] stage0_tx_to_stage1_enq_data;
  wire [67 : 0] stage0_to_icache_get;
  wire [65 : 0] stage0_ma_flush_fl;
  wire [11 : 0] stage0_ma_mispredict_g;
  wire stage0_EN_ma_bpu_enable,
       stage0_EN_ma_flush,
       stage0_EN_ma_mispredict,
       stage0_EN_ma_train_bpu,
       stage0_EN_ma_update_eEpoch,
       stage0_EN_ma_update_wEpoch,
       stage0_EN_to_icache_get,
       stage0_RDY_ma_flush,
       stage0_RDY_ma_mispredict,
       stage0_RDY_ma_train_bpu,
       stage0_RDY_to_icache_get,
       stage0_ma_bpu_enable_e,
       stage0_tx_to_stage1_enq_ena,
       stage0_tx_to_stage1_enq_rdy_b,
       stage0_tx_to_stage1_notFull_b;

  // ports of submodule stage1
  wire [121 : 0] stage1_tx_to_stage2_enq_data;
  wire [79 : 0] stage1_rx_from_stage0_first_x;
  wire [40 : 0] stage1_inst_response_put;
  wire [31 : 0] stage1_tx_to_stage2_inst_enq_data;
  wire stage1_EN_csr_misa_c,
       stage1_EN_inst_response_put,
       stage1_EN_update_eEpoch,
       stage1_EN_update_wEpoch,
       stage1_RDY_inst_response_put,
       stage1_csr_misa_c_c,
       stage1_rx_from_stage0_deq_ena,
       stage1_rx_from_stage0_first_deq_rdy_b,
       stage1_rx_from_stage0_notEmpty_b,
       stage1_tx_to_stage2_enq_ena,
       stage1_tx_to_stage2_enq_rdy_b,
       stage1_tx_to_stage2_inst_enq_ena,
       stage1_tx_to_stage2_inst_enq_rdy_b,
       stage1_tx_to_stage2_inst_notFull_b,
       stage1_tx_to_stage2_notFull_b;

  // ports of submodule stage2
  wire [198 : 0] stage2_csrs_csr;
  wire [121 : 0] stage2_rx_from_stage1_first_x;
  wire [102 : 0] stage2_tx_meta_to_stage3_enq_data;
  wire [79 : 0] stage2_debug_access_gprs_cmd;
  wire [71 : 0] stage2_mv_op2;
  wire [70 : 0] stage2_mv_op1;
  wire [69 : 0] stage2_commit_rd_commit, stage2_mv_op3;
  wire [63 : 0] stage2_debug_access_gprs, stage2_tx_mtval_to_stage3_enq_data;
  wire [31 : 0] stage2_rx_inst_first_x, stage2_tx_inst_enq_data;
  wire [4 : 0] stage2_debug_status_status;
  wire stage2_EN_clear_stall,
       stage2_EN_commit_rd,
       stage2_EN_csrs,
       stage2_EN_debug_access_gprs,
       stage2_EN_ma_resume_wfi,
       stage2_EN_update_eEpoch,
       stage2_EN_update_wEpoch,
       stage2_RDY_clear_stall,
       stage2_RDY_commit_rd,
       stage2_RDY_debug_access_gprs,
       stage2_clear_stall_upd,
       stage2_ma_resume_wfi_w,
       stage2_rx_from_stage1_deq_ena,
       stage2_rx_from_stage1_first_deq_rdy_b,
       stage2_rx_from_stage1_notEmpty_b,
       stage2_rx_inst_deq_ena,
       stage2_rx_inst_first_deq_rdy_b,
       stage2_rx_inst_notEmpty_b,
       stage2_tx_inst_enq_ena,
       stage2_tx_inst_enq_rdy_b,
       stage2_tx_inst_notFull_b,
       stage2_tx_meta_to_stage3_enq_ena,
       stage2_tx_meta_to_stage3_enq_rdy_b,
       stage2_tx_meta_to_stage3_notFull_b,
       stage2_tx_mtval_to_stage3_enq_ena,
       stage2_tx_mtval_to_stage3_enq_rdy_b,
       stage2_tx_mtval_to_stage3_notFull_b;

  // ports of submodule stage3
  wire [144 : 0] stage3_mv_train_bpu;
  wire [142 : 0] stage3_memory_request_get;
  wire [102 : 0] stage3_rx_meta_from_stage2_first_x;
  wire [82 : 0] stage3_tx_type_to_stage4_enq_data;
  wire [71 : 0] stage3_fwd_from_pipe3_fwd,
		stage3_fwd_from_pipe4_first_fwd,
		stage3_ma_op2_i;
  wire [70 : 0] stage3_ma_op1_i, stage3_tx_common_to_stage4_enq_data;
  wire [69 : 0] stage3_ma_op3_i;
  wire [63 : 0] stage3_flush_from_exe_snd,
		stage3_next_pc_npc,
		stage3_rx_mtval_from_stage2_first_x,
		stage3_tx_inst_enq_data_fst;
  wire [31 : 0] stage3_rx_inst_first_x, stage3_tx_inst_enq_data_snd;
  wire [10 : 0] stage3_mv_mispredict_snd;
  wire stage3_EN_ma_op1,
       stage3_EN_ma_op2,
       stage3_EN_ma_op3,
       stage3_EN_memory_request_get,
       stage3_EN_next_pc,
       stage3_EN_update_wEpoch,
       stage3_RDY_memory_request_get,
       stage3_RDY_mv_mispredict_fst,
       stage3_RDY_mv_mispredict_snd,
       stage3_RDY_mv_train_bpu,
       stage3_cache_is_available_avail,
       stage3_csr_misa_c_m,
       stage3_flush_from_exe_fst,
       stage3_mv_count_branches,
       stage3_mv_count_exestalls,
       stage3_mv_count_floats,
       stage3_mv_count_jumps,
       stage3_mv_count_muldiv,
       stage3_mv_count_rawstalls,
       stage3_mv_mispredict_fst,
       stage3_rx_inst_deq_ena,
       stage3_rx_inst_first_deq_rdy_b,
       stage3_rx_inst_notEmpty_b,
       stage3_rx_meta_from_stage2_deq_ena,
       stage3_rx_meta_from_stage2_first_deq_rdy_b,
       stage3_rx_meta_from_stage2_notEmpty_b,
       stage3_rx_mtval_from_stage2_deq_ena,
       stage3_rx_mtval_from_stage2_first_deq_rdy_b,
       stage3_rx_mtval_from_stage2_notEmpty_b,
       stage3_storebuffer_empty_e,
       stage3_tx_common_to_stage4_enq_ena,
       stage3_tx_common_to_stage4_enq_rdy_b,
       stage3_tx_common_to_stage4_notFull_b,
       stage3_tx_inst_enq_ena,
       stage3_tx_inst_enq_rdy_b,
       stage3_tx_inst_notFull_b,
       stage3_tx_type_to_stage4_enq_ena,
       stage3_tx_type_to_stage4_enq_rdy_b,
       stage3_tx_type_to_stage4_notFull_b;

  // ports of submodule stage4
  wire [135 : 0] stage4_tx_min_enq_data_fst;
  wire [95 : 0] stage4_rx_inst_first_x;
  wire [82 : 0] stage4_rx_type_from_stage3_first_x;
  wire [71 : 0] stage4_memory_response_put;
  wire [70 : 0] stage4_rx_common_from_stage3_first_x;
  wire [63 : 0] stage4_tx_inst_enq_data_fst;
  wire [31 : 0] stage4_tx_inst_enq_data_snd;
  wire stage4_EN_memory_response_put,
       stage4_RDY_memory_response_put,
       stage4_rx_common_from_stage3_deq_ena,
       stage4_rx_common_from_stage3_first_deq_rdy_b,
       stage4_rx_common_from_stage3_notEmpty_b,
       stage4_rx_inst_deq_ena,
       stage4_rx_inst_first_deq_rdy_b,
       stage4_rx_inst_notEmpty_b,
       stage4_rx_type_from_stage3_deq_ena,
       stage4_rx_type_from_stage3_first_deq_rdy_b,
       stage4_rx_type_from_stage3_notEmpty_b,
       stage4_tx_inst_enq_ena,
       stage4_tx_inst_enq_rdy_b,
       stage4_tx_inst_notFull_b,
       stage4_tx_min_enq_data_snd,
       stage4_tx_min_enq_ena,
       stage4_tx_min_enq_rdy_b,
       stage4_tx_min_notFull_b;

  // ports of submodule stage5
  wire [198 : 0] stage5_mv_csrs_to_decode;
  wire [167 : 0] stage5_dump_get;
  wire [136 : 0] stage5_rx_in_first_x;
  wire [95 : 0] stage5_rx_inst_first_x;
  wire [79 : 0] stage5_ma_debug_access_csrs_cmd;
  wire [70 : 0] stage5_commit_rd;
  wire [65 : 0] stage5_write_resp_r;
  wire [64 : 0] stage5_mv_resp_to_core;
  wire [63 : 0] stage5_flush_snd_fst,
		stage5_ma_clint_mtime_c_mtime,
		stage5_mv_csr_mstatus,
		stage5_mv_csr_satp;
  wire [29 : 0] stage5_ma_events_grp4_e,
		stage5_ma_events_grp5_e,
		stage5_ma_events_grp6_e,
		stage5_ma_events_grp7_e;
  wire [2 : 0] stage5_mv_cacheenable;
  wire [1 : 0] stage5_mv_curr_priv;
  wire stage5_EN_dump_get,
       stage5_EN_ma_clint_msip,
       stage5_EN_ma_clint_mtime,
       stage5_EN_ma_clint_mtip,
       stage5_EN_ma_debug_access_csrs,
       stage5_EN_ma_debug_halt_request,
       stage5_EN_ma_debug_resume_request,
       stage5_EN_ma_events_grp4,
       stage5_EN_ma_events_grp5,
       stage5_EN_ma_events_grp6,
       stage5_EN_ma_events_grp7,
       stage5_EN_ma_set_external_interrupt,
       stage5_EN_write_resp,
       stage5_RDY_dump_get,
       stage5_RDY_ma_debug_access_csrs,
       stage5_RDY_ma_set_external_interrupt,
       stage5_RDY_mv_csrs_to_decode,
       stage5_RDY_mv_resume_wfi,
       stage5_flush_fst,
       stage5_flush_snd_snd_fst,
       stage5_flush_snd_snd_snd,
       stage5_initiate_store_fst,
       stage5_initiate_store_snd,
       stage5_ma_clint_msip_intrpt,
       stage5_ma_clint_mtip_intrpt,
       stage5_ma_debug_halt_request_ip,
       stage5_ma_debug_resume_request_ip,
       stage5_ma_set_external_interrupt_ex_i,
       stage5_mv_core_debugenable,
       stage5_mv_core_is_halted,
       stage5_mv_count_csrops,
       stage5_mv_count_exceptions,
       stage5_mv_count_interrupts,
       stage5_mv_csr_misa_c,
       stage5_mv_resume_wfi,
       stage5_mv_step_ie,
       stage5_mv_step_is_set,
       stage5_rx_in_deq_ena,
       stage5_rx_in_first_deq_rdy_b,
       stage5_rx_in_notEmpty_b,
       stage5_rx_inst_deq_ena,
       stage5_rx_inst_first_deq_rdy_b,
       stage5_rx_inst_notEmpty_b,
       stage5_store_is_cached_c;

  // rule scheduling signals
  wire CAN_FIRE_RL_clear_stall_in_decode_stage,
       CAN_FIRE_RL_commit_instruction,
       CAN_FIRE_RL_connect_csrs,
       CAN_FIRE_RL_connect_debug_info,
       CAN_FIRE_RL_connect_ena,
       CAN_FIRE_RL_connect_ena_1,
       CAN_FIRE_RL_connect_ena_10,
       CAN_FIRE_RL_connect_ena_2,
       CAN_FIRE_RL_connect_ena_3,
       CAN_FIRE_RL_connect_ena_4,
       CAN_FIRE_RL_connect_ena_5,
       CAN_FIRE_RL_connect_ena_6,
       CAN_FIRE_RL_connect_ena_7,
       CAN_FIRE_RL_connect_ena_8,
       CAN_FIRE_RL_connect_ena_9,
       CAN_FIRE_RL_connect_ena_data,
       CAN_FIRE_RL_connect_ena_data_1,
       CAN_FIRE_RL_connect_ena_data_10,
       CAN_FIRE_RL_connect_ena_data_2,
       CAN_FIRE_RL_connect_ena_data_3,
       CAN_FIRE_RL_connect_ena_data_4,
       CAN_FIRE_RL_connect_ena_data_5,
       CAN_FIRE_RL_connect_ena_data_6,
       CAN_FIRE_RL_connect_ena_data_7,
       CAN_FIRE_RL_connect_ena_data_8,
       CAN_FIRE_RL_connect_ena_data_9,
       CAN_FIRE_RL_connect_first,
       CAN_FIRE_RL_connect_first_1,
       CAN_FIRE_RL_connect_first_10,
       CAN_FIRE_RL_connect_first_2,
       CAN_FIRE_RL_connect_first_3,
       CAN_FIRE_RL_connect_first_4,
       CAN_FIRE_RL_connect_first_5,
       CAN_FIRE_RL_connect_first_6,
       CAN_FIRE_RL_connect_first_7,
       CAN_FIRE_RL_connect_first_8,
       CAN_FIRE_RL_connect_first_9,
       CAN_FIRE_RL_connect_notEmpty,
       CAN_FIRE_RL_connect_notEmpty_1,
       CAN_FIRE_RL_connect_notEmpty_10,
       CAN_FIRE_RL_connect_notEmpty_2,
       CAN_FIRE_RL_connect_notEmpty_3,
       CAN_FIRE_RL_connect_notEmpty_4,
       CAN_FIRE_RL_connect_notEmpty_5,
       CAN_FIRE_RL_connect_notEmpty_6,
       CAN_FIRE_RL_connect_notEmpty_7,
       CAN_FIRE_RL_connect_notEmpty_8,
       CAN_FIRE_RL_connect_notEmpty_9,
       CAN_FIRE_RL_connect_notFull,
       CAN_FIRE_RL_connect_notFull_1,
       CAN_FIRE_RL_connect_notFull_10,
       CAN_FIRE_RL_connect_notFull_2,
       CAN_FIRE_RL_connect_notFull_3,
       CAN_FIRE_RL_connect_notFull_4,
       CAN_FIRE_RL_connect_notFull_5,
       CAN_FIRE_RL_connect_notFull_6,
       CAN_FIRE_RL_connect_notFull_7,
       CAN_FIRE_RL_connect_notFull_8,
       CAN_FIRE_RL_connect_notFull_9,
       CAN_FIRE_RL_connect_rdy,
       CAN_FIRE_RL_connect_rdy_1,
       CAN_FIRE_RL_connect_rdy_10,
       CAN_FIRE_RL_connect_rdy_11,
       CAN_FIRE_RL_connect_rdy_12,
       CAN_FIRE_RL_connect_rdy_13,
       CAN_FIRE_RL_connect_rdy_14,
       CAN_FIRE_RL_connect_rdy_15,
       CAN_FIRE_RL_connect_rdy_16,
       CAN_FIRE_RL_connect_rdy_17,
       CAN_FIRE_RL_connect_rdy_18,
       CAN_FIRE_RL_connect_rdy_19,
       CAN_FIRE_RL_connect_rdy_2,
       CAN_FIRE_RL_connect_rdy_20,
       CAN_FIRE_RL_connect_rdy_21,
       CAN_FIRE_RL_connect_rdy_3,
       CAN_FIRE_RL_connect_rdy_4,
       CAN_FIRE_RL_connect_rdy_5,
       CAN_FIRE_RL_connect_rdy_6,
       CAN_FIRE_RL_connect_rdy_7,
       CAN_FIRE_RL_connect_rdy_8,
       CAN_FIRE_RL_connect_rdy_9,
       CAN_FIRE_RL_flush_stage0,
       CAN_FIRE_RL_fwding_from_exe1,
       CAN_FIRE_RL_fwding_from_mem1,
       CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_mkConnectionVtoAf_1,
       CAN_FIRE_RL_mkConnectionVtoAf_2,
       CAN_FIRE_RL_mkConnectionVtoAf_3,
       CAN_FIRE_RL_mkConnectionVtoAf_4,
       CAN_FIRE_RL_nofwding_from_exe1,
       CAN_FIRE_RL_nofwding_from_mem1,
       CAN_FIRE_RL_rl_connect_events,
       CAN_FIRE_RL_send_next_pc,
       CAN_FIRE_RL_upd_stage2eEpoch,
       CAN_FIRE_RL_upd_stage2wEpoch,
       CAN_FIRE_RL_update_wEpoch,
       CAN_FIRE_cache_is_available,
       CAN_FIRE_debug_access_gprs,
       CAN_FIRE_dump_get,
       CAN_FIRE_inst_response_put,
       CAN_FIRE_instr_req_get,
       CAN_FIRE_ma_clint_msip,
       CAN_FIRE_ma_clint_mtime,
       CAN_FIRE_ma_clint_mtip,
       CAN_FIRE_ma_dcache_counters,
       CAN_FIRE_ma_debug_access_csrs,
       CAN_FIRE_ma_debug_halt_request,
       CAN_FIRE_ma_debug_resume_request,
       CAN_FIRE_ma_debugger_available,
       CAN_FIRE_ma_dtlb_counters,
       CAN_FIRE_ma_icache_counters,
       CAN_FIRE_ma_itlb_counters,
       CAN_FIRE_ma_set_external_interrupt,
       CAN_FIRE_memory_request_get,
       CAN_FIRE_memory_response_put,
       CAN_FIRE_store_is_cached,
       CAN_FIRE_storebuffer_empty,
       CAN_FIRE_write_resp,
       WILL_FIRE_RL_clear_stall_in_decode_stage,
       WILL_FIRE_RL_commit_instruction,
       WILL_FIRE_RL_connect_csrs,
       WILL_FIRE_RL_connect_debug_info,
       WILL_FIRE_RL_connect_ena,
       WILL_FIRE_RL_connect_ena_1,
       WILL_FIRE_RL_connect_ena_10,
       WILL_FIRE_RL_connect_ena_2,
       WILL_FIRE_RL_connect_ena_3,
       WILL_FIRE_RL_connect_ena_4,
       WILL_FIRE_RL_connect_ena_5,
       WILL_FIRE_RL_connect_ena_6,
       WILL_FIRE_RL_connect_ena_7,
       WILL_FIRE_RL_connect_ena_8,
       WILL_FIRE_RL_connect_ena_9,
       WILL_FIRE_RL_connect_ena_data,
       WILL_FIRE_RL_connect_ena_data_1,
       WILL_FIRE_RL_connect_ena_data_10,
       WILL_FIRE_RL_connect_ena_data_2,
       WILL_FIRE_RL_connect_ena_data_3,
       WILL_FIRE_RL_connect_ena_data_4,
       WILL_FIRE_RL_connect_ena_data_5,
       WILL_FIRE_RL_connect_ena_data_6,
       WILL_FIRE_RL_connect_ena_data_7,
       WILL_FIRE_RL_connect_ena_data_8,
       WILL_FIRE_RL_connect_ena_data_9,
       WILL_FIRE_RL_connect_first,
       WILL_FIRE_RL_connect_first_1,
       WILL_FIRE_RL_connect_first_10,
       WILL_FIRE_RL_connect_first_2,
       WILL_FIRE_RL_connect_first_3,
       WILL_FIRE_RL_connect_first_4,
       WILL_FIRE_RL_connect_first_5,
       WILL_FIRE_RL_connect_first_6,
       WILL_FIRE_RL_connect_first_7,
       WILL_FIRE_RL_connect_first_8,
       WILL_FIRE_RL_connect_first_9,
       WILL_FIRE_RL_connect_notEmpty,
       WILL_FIRE_RL_connect_notEmpty_1,
       WILL_FIRE_RL_connect_notEmpty_10,
       WILL_FIRE_RL_connect_notEmpty_2,
       WILL_FIRE_RL_connect_notEmpty_3,
       WILL_FIRE_RL_connect_notEmpty_4,
       WILL_FIRE_RL_connect_notEmpty_5,
       WILL_FIRE_RL_connect_notEmpty_6,
       WILL_FIRE_RL_connect_notEmpty_7,
       WILL_FIRE_RL_connect_notEmpty_8,
       WILL_FIRE_RL_connect_notEmpty_9,
       WILL_FIRE_RL_connect_notFull,
       WILL_FIRE_RL_connect_notFull_1,
       WILL_FIRE_RL_connect_notFull_10,
       WILL_FIRE_RL_connect_notFull_2,
       WILL_FIRE_RL_connect_notFull_3,
       WILL_FIRE_RL_connect_notFull_4,
       WILL_FIRE_RL_connect_notFull_5,
       WILL_FIRE_RL_connect_notFull_6,
       WILL_FIRE_RL_connect_notFull_7,
       WILL_FIRE_RL_connect_notFull_8,
       WILL_FIRE_RL_connect_notFull_9,
       WILL_FIRE_RL_connect_rdy,
       WILL_FIRE_RL_connect_rdy_1,
       WILL_FIRE_RL_connect_rdy_10,
       WILL_FIRE_RL_connect_rdy_11,
       WILL_FIRE_RL_connect_rdy_12,
       WILL_FIRE_RL_connect_rdy_13,
       WILL_FIRE_RL_connect_rdy_14,
       WILL_FIRE_RL_connect_rdy_15,
       WILL_FIRE_RL_connect_rdy_16,
       WILL_FIRE_RL_connect_rdy_17,
       WILL_FIRE_RL_connect_rdy_18,
       WILL_FIRE_RL_connect_rdy_19,
       WILL_FIRE_RL_connect_rdy_2,
       WILL_FIRE_RL_connect_rdy_20,
       WILL_FIRE_RL_connect_rdy_21,
       WILL_FIRE_RL_connect_rdy_3,
       WILL_FIRE_RL_connect_rdy_4,
       WILL_FIRE_RL_connect_rdy_5,
       WILL_FIRE_RL_connect_rdy_6,
       WILL_FIRE_RL_connect_rdy_7,
       WILL_FIRE_RL_connect_rdy_8,
       WILL_FIRE_RL_connect_rdy_9,
       WILL_FIRE_RL_flush_stage0,
       WILL_FIRE_RL_fwding_from_exe1,
       WILL_FIRE_RL_fwding_from_mem1,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_mkConnectionVtoAf_1,
       WILL_FIRE_RL_mkConnectionVtoAf_2,
       WILL_FIRE_RL_mkConnectionVtoAf_3,
       WILL_FIRE_RL_mkConnectionVtoAf_4,
       WILL_FIRE_RL_nofwding_from_exe1,
       WILL_FIRE_RL_nofwding_from_mem1,
       WILL_FIRE_RL_rl_connect_events,
       WILL_FIRE_RL_send_next_pc,
       WILL_FIRE_RL_upd_stage2eEpoch,
       WILL_FIRE_RL_upd_stage2wEpoch,
       WILL_FIRE_RL_update_wEpoch,
       WILL_FIRE_cache_is_available,
       WILL_FIRE_debug_access_gprs,
       WILL_FIRE_dump_get,
       WILL_FIRE_inst_response_put,
       WILL_FIRE_instr_req_get,
       WILL_FIRE_ma_clint_msip,
       WILL_FIRE_ma_clint_mtime,
       WILL_FIRE_ma_clint_mtip,
       WILL_FIRE_ma_dcache_counters,
       WILL_FIRE_ma_debug_access_csrs,
       WILL_FIRE_ma_debug_halt_request,
       WILL_FIRE_ma_debug_resume_request,
       WILL_FIRE_ma_debugger_available,
       WILL_FIRE_ma_dtlb_counters,
       WILL_FIRE_ma_icache_counters,
       WILL_FIRE_ma_itlb_counters,
       WILL_FIRE_ma_set_external_interrupt,
       WILL_FIRE_memory_request_get,
       WILL_FIRE_memory_response_put,
       WILL_FIRE_store_is_cached,
       WILL_FIRE_storebuffer_empty,
       WILL_FIRE_write_resp;

  // inputs to muxes for submodule ports
  wire [71 : 0] MUX_stage3_fwd_from_pipe3_1__VAL_1,
		MUX_stage3_fwd_from_pipe3_1__VAL_2,
		MUX_stage3_fwd_from_pipe4_first_1__VAL_1,
		MUX_stage3_fwd_from_pipe4_first_1__VAL_2;

  // remaining internal signals
  reg [4 : 0] rd__h11816;
  wire [63 : 0] _theResult___snd_snd_snd__h12015, fl_pc__h11261;
  wire [19 : 0] wr_dtlb_counters_whas_AND_wr_dtlb_counters_wge_ETC___d33;
  wire [12 : 0] IF_wr_dcache_counters_whas_THEN_wr_dcache_coun_ETC___d10;
  wire [4 : 0] _theResult___fst__h11915;
  wire NOT_IF_pipe4_first__85_BITS_136_TO_135_44_EQ_2_ETC___d259,
       lv_count_dtlb_misses__h3072,
       lv_count_itlb_misses__h3071;

  // actionvalue method instr_req_get
  assign instr_req_get = stage0_to_icache_get ;
  assign RDY_instr_req_get = stage0_RDY_to_icache_get ;
  assign CAN_FIRE_instr_req_get = stage0_RDY_to_icache_get ;
  assign WILL_FIRE_instr_req_get = EN_instr_req_get ;

  // action method inst_response_put
  assign RDY_inst_response_put = stage1_RDY_inst_response_put ;
  assign CAN_FIRE_inst_response_put = stage1_RDY_inst_response_put ;
  assign WILL_FIRE_inst_response_put = EN_inst_response_put ;

  // actionvalue method memory_request_get
  assign memory_request_get = stage3_memory_request_get ;
  assign RDY_memory_request_get = stage3_RDY_memory_request_get ;
  assign CAN_FIRE_memory_request_get = stage3_RDY_memory_request_get ;
  assign WILL_FIRE_memory_request_get = EN_memory_request_get ;

  // action method memory_response_put
  assign RDY_memory_response_put = stage4_RDY_memory_response_put ;
  assign CAN_FIRE_memory_response_put = stage4_RDY_memory_response_put ;
  assign WILL_FIRE_memory_response_put = EN_memory_response_put ;

  // value method initiate_store_fst
  assign initiate_store_fst = stage5_initiate_store_fst ;
  assign RDY_initiate_store_fst = 1'd1 ;

  // value method initiate_store_snd
  assign initiate_store_snd = stage5_initiate_store_snd ;
  assign RDY_initiate_store_snd = 1'd1 ;

  // action method write_resp
  assign RDY_write_resp = 1'd1 ;
  assign CAN_FIRE_write_resp = 1'd1 ;
  assign WILL_FIRE_write_resp = EN_write_resp ;

  // action method storebuffer_empty
  assign CAN_FIRE_storebuffer_empty = 1'd1 ;
  assign WILL_FIRE_storebuffer_empty = 1'd1 ;

  // action method store_is_cached
  assign RDY_store_is_cached = 1'd1 ;
  assign CAN_FIRE_store_is_cached = 1'd1 ;
  assign WILL_FIRE_store_is_cached = EN_store_is_cached ;

  // action method cache_is_available
  assign CAN_FIRE_cache_is_available = 1'd1 ;
  assign WILL_FIRE_cache_is_available = 1'd1 ;

  // action method ma_clint_msip
  assign RDY_ma_clint_msip = 1'd1 ;
  assign CAN_FIRE_ma_clint_msip = 1'd1 ;
  assign WILL_FIRE_ma_clint_msip = EN_ma_clint_msip ;

  // action method ma_clint_mtip
  assign RDY_ma_clint_mtip = 1'd1 ;
  assign CAN_FIRE_ma_clint_mtip = 1'd1 ;
  assign WILL_FIRE_ma_clint_mtip = EN_ma_clint_mtip ;

  // action method ma_clint_mtime
  assign RDY_ma_clint_mtime = 1'd1 ;
  assign CAN_FIRE_ma_clint_mtime = 1'd1 ;
  assign WILL_FIRE_ma_clint_mtime = EN_ma_clint_mtime ;

  // action method ma_set_external_interrupt
  assign RDY_ma_set_external_interrupt =
	     stage5_RDY_ma_set_external_interrupt ;
  assign CAN_FIRE_ma_set_external_interrupt =
	     stage5_RDY_ma_set_external_interrupt ;
  assign WILL_FIRE_ma_set_external_interrupt = EN_ma_set_external_interrupt ;

  // actionvalue method dump_get
  assign dump_get = stage5_dump_get ;
  assign RDY_dump_get = stage5_RDY_dump_get ;
  assign CAN_FIRE_dump_get = stage5_RDY_dump_get ;
  assign WILL_FIRE_dump_get = EN_dump_get ;

  // value method mv_csr_mstatus
  assign mv_csr_mstatus = stage5_mv_csr_mstatus ;
  assign RDY_mv_csr_mstatus = 1'd1 ;

  // value method mv_cacheenable
  assign mv_cacheenable = stage5_mv_cacheenable ;
  assign RDY_mv_cacheenable = 1'd1 ;

  // value method mv_curr_priv
  assign mv_curr_priv = stage5_mv_curr_priv ;
  assign RDY_mv_curr_priv = 1'd1 ;

  // value method mv_csr_satp
  assign mv_csr_satp = stage5_mv_csr_satp ;
  assign RDY_mv_csr_satp = 1'd1 ;

  // actionvalue method debug_access_gprs
  assign debug_access_gprs = stage2_debug_access_gprs ;
  assign RDY_debug_access_gprs = stage2_RDY_debug_access_gprs ;
  assign CAN_FIRE_debug_access_gprs = stage2_RDY_debug_access_gprs ;
  assign WILL_FIRE_debug_access_gprs = EN_debug_access_gprs ;

  // action method ma_debug_access_csrs
  assign RDY_ma_debug_access_csrs = stage5_RDY_ma_debug_access_csrs ;
  assign CAN_FIRE_ma_debug_access_csrs = stage5_RDY_ma_debug_access_csrs ;
  assign WILL_FIRE_ma_debug_access_csrs = EN_ma_debug_access_csrs ;

  // action method ma_debug_halt_request
  assign RDY_ma_debug_halt_request = 1'd1 ;
  assign CAN_FIRE_ma_debug_halt_request = 1'd1 ;
  assign WILL_FIRE_ma_debug_halt_request = EN_ma_debug_halt_request ;

  // action method ma_debug_resume_request
  assign RDY_ma_debug_resume_request = 1'd1 ;
  assign CAN_FIRE_ma_debug_resume_request = 1'd1 ;
  assign WILL_FIRE_ma_debug_resume_request = EN_ma_debug_resume_request ;

  // value method mv_core_is_halted
  assign mv_core_is_halted = stage5_mv_core_is_halted ;
  assign RDY_mv_core_is_halted = 1'd1 ;

  // value method mv_core_debugenable
  assign mv_core_debugenable = stage5_mv_core_debugenable ;
  assign RDY_mv_core_debugenable = 1'd1 ;

  // action method ma_debugger_available
  assign RDY_ma_debugger_available = 1'd1 ;
  assign CAN_FIRE_ma_debugger_available = 1'd1 ;
  assign WILL_FIRE_ma_debugger_available = EN_ma_debugger_available ;

  // value method mv_resp_to_core
  assign mv_resp_to_core = stage5_mv_resp_to_core ;
  assign RDY_mv_resp_to_core = 1'd1 ;

  // action method ma_icache_counters
  assign RDY_ma_icache_counters = 1'd1 ;
  assign CAN_FIRE_ma_icache_counters = 1'd1 ;
  assign WILL_FIRE_ma_icache_counters = EN_ma_icache_counters ;

  // action method ma_dcache_counters
  assign RDY_ma_dcache_counters = 1'd1 ;
  assign CAN_FIRE_ma_dcache_counters = 1'd1 ;
  assign WILL_FIRE_ma_dcache_counters = EN_ma_dcache_counters ;

  // action method ma_dtlb_counters
  assign RDY_ma_dtlb_counters = 1'd1 ;
  assign CAN_FIRE_ma_dtlb_counters = 1'd1 ;
  assign WILL_FIRE_ma_dtlb_counters = EN_ma_dtlb_counters ;

  // action method ma_itlb_counters
  assign RDY_ma_itlb_counters = 1'd1 ;
  assign CAN_FIRE_ma_itlb_counters = 1'd1 ;
  assign WILL_FIRE_ma_itlb_counters = EN_ma_itlb_counters ;

  // submodule pipe0
  SizedFIFO #(.p1width(32'd80),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) pipe0(.RST(RST_N),
				    .CLK(CLK),
				    .D_IN(pipe0_D_IN),
				    .ENQ(pipe0_ENQ),
				    .DEQ(pipe0_DEQ),
				    .CLR(pipe0_CLR),
				    .D_OUT(pipe0_D_OUT),
				    .FULL_N(pipe0_FULL_N),
				    .EMPTY_N(pipe0_EMPTY_N));

  // submodule pipe1
  FIFO2 #(.width(32'd122), .guarded(1'd1)) pipe1(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(pipe1_D_IN),
						 .ENQ(pipe1_ENQ),
						 .DEQ(pipe1_DEQ),
						 .CLR(pipe1_CLR),
						 .D_OUT(pipe1_D_OUT),
						 .FULL_N(pipe1_FULL_N),
						 .EMPTY_N(pipe1_EMPTY_N));

  // submodule pipe1inst
  FIFO2 #(.width(32'd32), .guarded(1'd1)) pipe1inst(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(pipe1inst_D_IN),
						    .ENQ(pipe1inst_ENQ),
						    .DEQ(pipe1inst_DEQ),
						    .CLR(pipe1inst_CLR),
						    .D_OUT(pipe1inst_D_OUT),
						    .FULL_N(pipe1inst_FULL_N),
						    .EMPTY_N(pipe1inst_EMPTY_N));

  // submodule pipe2_meta
  FIFOL1 #(.width(32'd103)) pipe2_meta(.RST(RST_N),
				       .CLK(CLK),
				       .D_IN(pipe2_meta_D_IN),
				       .ENQ(pipe2_meta_ENQ),
				       .DEQ(pipe2_meta_DEQ),
				       .CLR(pipe2_meta_CLR),
				       .D_OUT(pipe2_meta_D_OUT),
				       .FULL_N(pipe2_meta_FULL_N),
				       .EMPTY_N(pipe2_meta_EMPTY_N));

  // submodule pipe2_mtval
  FIFOL1 #(.width(32'd64)) pipe2_mtval(.RST(RST_N),
				       .CLK(CLK),
				       .D_IN(pipe2_mtval_D_IN),
				       .ENQ(pipe2_mtval_ENQ),
				       .DEQ(pipe2_mtval_DEQ),
				       .CLR(pipe2_mtval_CLR),
				       .D_OUT(pipe2_mtval_D_OUT),
				       .FULL_N(pipe2_mtval_FULL_N),
				       .EMPTY_N(pipe2_mtval_EMPTY_N));

  // submodule pipe2inst
  FIFOL1 #(.width(32'd32)) pipe2inst(.RST(RST_N),
				     .CLK(CLK),
				     .D_IN(pipe2inst_D_IN),
				     .ENQ(pipe2inst_ENQ),
				     .DEQ(pipe2inst_DEQ),
				     .CLR(pipe2inst_CLR),
				     .D_OUT(pipe2inst_D_OUT),
				     .FULL_N(pipe2inst_FULL_N),
				     .EMPTY_N(pipe2inst_EMPTY_N));

  // submodule pipe3common
  FIFO2 #(.width(32'd71), .guarded(1'd1)) pipe3common(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(pipe3common_D_IN),
						      .ENQ(pipe3common_ENQ),
						      .DEQ(pipe3common_DEQ),
						      .CLR(pipe3common_CLR),
						      .D_OUT(pipe3common_D_OUT),
						      .FULL_N(pipe3common_FULL_N),
						      .EMPTY_N(pipe3common_EMPTY_N));

  // submodule pipe3inst
  FIFO2 #(.width(32'd96), .guarded(1'd1)) pipe3inst(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(pipe3inst_D_IN),
						    .ENQ(pipe3inst_ENQ),
						    .DEQ(pipe3inst_DEQ),
						    .CLR(pipe3inst_CLR),
						    .D_OUT(pipe3inst_D_OUT),
						    .FULL_N(pipe3inst_FULL_N),
						    .EMPTY_N(pipe3inst_EMPTY_N));

  // submodule pipe3type
  FIFO2 #(.width(32'd83), .guarded(1'd1)) pipe3type(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(pipe3type_D_IN),
						    .ENQ(pipe3type_ENQ),
						    .DEQ(pipe3type_DEQ),
						    .CLR(pipe3type_CLR),
						    .D_OUT(pipe3type_D_OUT),
						    .FULL_N(pipe3type_FULL_N),
						    .EMPTY_N(pipe3type_EMPTY_N));

  // submodule pipe4
  FIFOL1 #(.width(32'd137)) pipe4(.RST(RST_N),
				  .CLK(CLK),
				  .D_IN(pipe4_D_IN),
				  .ENQ(pipe4_ENQ),
				  .DEQ(pipe4_DEQ),
				  .CLR(pipe4_CLR),
				  .D_OUT(pipe4_D_OUT),
				  .FULL_N(pipe4_FULL_N),
				  .EMPTY_N(pipe4_EMPTY_N));

  // submodule pipe4inst
  FIFOL1 #(.width(32'd96)) pipe4inst(.RST(RST_N),
				     .CLK(CLK),
				     .D_IN(pipe4inst_D_IN),
				     .ENQ(pipe4inst_ENQ),
				     .DEQ(pipe4inst_DEQ),
				     .CLR(pipe4inst_CLR),
				     .D_OUT(pipe4inst_D_OUT),
				     .FULL_N(pipe4inst_FULL_N),
				     .EMPTY_N(pipe4inst_EMPTY_N));

  // submodule stage0
  mkstage0 #(.hartid(hartid)) stage0(.resetpc(resetpc),
				     .CLK(CLK),
				     .RST_N(RST_N),
				     .ma_bpu_enable_e(stage0_ma_bpu_enable_e),
				     .ma_flush_fl(stage0_ma_flush_fl),
				     .ma_mispredict_g(stage0_ma_mispredict_g),
				     .ma_train_bpu_td(stage0_ma_train_bpu_td),
				     .tx_to_stage1_enq_rdy_b(stage0_tx_to_stage1_enq_rdy_b),
				     .tx_to_stage1_notFull_b(stage0_tx_to_stage1_notFull_b),
				     .EN_ma_update_eEpoch(stage0_EN_ma_update_eEpoch),
				     .EN_ma_update_wEpoch(stage0_EN_ma_update_wEpoch),
				     .EN_ma_flush(stage0_EN_ma_flush),
				     .EN_ma_train_bpu(stage0_EN_ma_train_bpu),
				     .EN_ma_mispredict(stage0_EN_ma_mispredict),
				     .EN_ma_bpu_enable(stage0_EN_ma_bpu_enable),
				     .EN_to_icache_get(stage0_EN_to_icache_get),
				     .RDY_ma_update_eEpoch(),
				     .RDY_ma_update_wEpoch(),
				     .RDY_ma_flush(stage0_RDY_ma_flush),
				     .RDY_ma_train_bpu(stage0_RDY_ma_train_bpu),
				     .RDY_ma_mispredict(stage0_RDY_ma_mispredict),
				     .RDY_ma_bpu_enable(),
				     .to_icache_get(stage0_to_icache_get),
				     .RDY_to_icache_get(stage0_RDY_to_icache_get),
				     .tx_to_stage1_enq_ena(stage0_tx_to_stage1_enq_ena),
				     .tx_to_stage1_enq_data(stage0_tx_to_stage1_enq_data));

  // submodule stage1
  mkstage1 #(.hartid(hartid)) stage1(.CLK(CLK),
				     .RST_N(RST_N),
				     .csr_misa_c_c(stage1_csr_misa_c_c),
				     .inst_response_put(stage1_inst_response_put),
				     .rx_from_stage0_first_deq_rdy_b(stage1_rx_from_stage0_first_deq_rdy_b),
				     .rx_from_stage0_first_x(stage1_rx_from_stage0_first_x),
				     .rx_from_stage0_notEmpty_b(stage1_rx_from_stage0_notEmpty_b),
				     .tx_to_stage2_enq_rdy_b(stage1_tx_to_stage2_enq_rdy_b),
				     .tx_to_stage2_inst_enq_rdy_b(stage1_tx_to_stage2_inst_enq_rdy_b),
				     .tx_to_stage2_inst_notFull_b(stage1_tx_to_stage2_inst_notFull_b),
				     .tx_to_stage2_notFull_b(stage1_tx_to_stage2_notFull_b),
				     .EN_inst_response_put(stage1_EN_inst_response_put),
				     .EN_update_eEpoch(stage1_EN_update_eEpoch),
				     .EN_update_wEpoch(stage1_EN_update_wEpoch),
				     .EN_csr_misa_c(stage1_EN_csr_misa_c),
				     .RDY_inst_response_put(stage1_RDY_inst_response_put),
				     .rx_from_stage0_deq_ena(stage1_rx_from_stage0_deq_ena),
				     .tx_to_stage2_enq_ena(stage1_tx_to_stage2_enq_ena),
				     .tx_to_stage2_enq_data(stage1_tx_to_stage2_enq_data),
				     .tx_to_stage2_inst_enq_ena(stage1_tx_to_stage2_inst_enq_ena),
				     .tx_to_stage2_inst_enq_data(stage1_tx_to_stage2_inst_enq_data),
				     .RDY_update_eEpoch(),
				     .RDY_update_wEpoch(),
				     .RDY_csr_misa_c());

  // submodule stage2
  mkstage2 #(.hartid(hartid)) stage2(.CLK(CLK),
				     .RST_N(RST_N),
				     .clear_stall_upd(stage2_clear_stall_upd),
				     .commit_rd_commit(stage2_commit_rd_commit),
				     .csrs_csr(stage2_csrs_csr),
				     .debug_access_gprs_cmd(stage2_debug_access_gprs_cmd),
				     .debug_status_status(stage2_debug_status_status),
				     .ma_resume_wfi_w(stage2_ma_resume_wfi_w),
				     .rx_from_stage1_first_deq_rdy_b(stage2_rx_from_stage1_first_deq_rdy_b),
				     .rx_from_stage1_first_x(stage2_rx_from_stage1_first_x),
				     .rx_from_stage1_notEmpty_b(stage2_rx_from_stage1_notEmpty_b),
				     .rx_inst_first_deq_rdy_b(stage2_rx_inst_first_deq_rdy_b),
				     .rx_inst_first_x(stage2_rx_inst_first_x),
				     .rx_inst_notEmpty_b(stage2_rx_inst_notEmpty_b),
				     .tx_inst_enq_rdy_b(stage2_tx_inst_enq_rdy_b),
				     .tx_inst_notFull_b(stage2_tx_inst_notFull_b),
				     .tx_meta_to_stage3_enq_rdy_b(stage2_tx_meta_to_stage3_enq_rdy_b),
				     .tx_meta_to_stage3_notFull_b(stage2_tx_meta_to_stage3_notFull_b),
				     .tx_mtval_to_stage3_enq_rdy_b(stage2_tx_mtval_to_stage3_enq_rdy_b),
				     .tx_mtval_to_stage3_notFull_b(stage2_tx_mtval_to_stage3_notFull_b),
				     .EN_commit_rd(stage2_EN_commit_rd),
				     .EN_csrs(stage2_EN_csrs),
				     .EN_clear_stall(stage2_EN_clear_stall),
				     .EN_update_eEpoch(stage2_EN_update_eEpoch),
				     .EN_update_wEpoch(stage2_EN_update_wEpoch),
				     .EN_ma_resume_wfi(stage2_EN_ma_resume_wfi),
				     .EN_debug_access_gprs(stage2_EN_debug_access_gprs),
				     .rx_from_stage1_deq_ena(stage2_rx_from_stage1_deq_ena),
				     .tx_meta_to_stage3_enq_ena(stage2_tx_meta_to_stage3_enq_ena),
				     .tx_meta_to_stage3_enq_data(stage2_tx_meta_to_stage3_enq_data),
				     .tx_mtval_to_stage3_enq_ena(stage2_tx_mtval_to_stage3_enq_ena),
				     .tx_mtval_to_stage3_enq_data(stage2_tx_mtval_to_stage3_enq_data),
				     .mv_op1(stage2_mv_op1),
				     .mv_op2(stage2_mv_op2),
				     .mv_op3(stage2_mv_op3),
				     .rx_inst_deq_ena(stage2_rx_inst_deq_ena),
				     .tx_inst_enq_ena(stage2_tx_inst_enq_ena),
				     .tx_inst_enq_data(stage2_tx_inst_enq_data),
				     .RDY_commit_rd(stage2_RDY_commit_rd),
				     .RDY_clear_stall(stage2_RDY_clear_stall),
				     .debug_access_gprs(stage2_debug_access_gprs),
				     .RDY_debug_access_gprs(stage2_RDY_debug_access_gprs));

  // submodule stage3
  mkstage3 #(.hartid(hartid)) stage3(.CLK(CLK),
				     .RST_N(RST_N),
				     .cache_is_available_avail(stage3_cache_is_available_avail),
				     .csr_misa_c_m(stage3_csr_misa_c_m),
				     .fwd_from_pipe3_fwd(stage3_fwd_from_pipe3_fwd),
				     .fwd_from_pipe4_first_fwd(stage3_fwd_from_pipe4_first_fwd),
				     .ma_op1_i(stage3_ma_op1_i),
				     .ma_op2_i(stage3_ma_op2_i),
				     .ma_op3_i(stage3_ma_op3_i),
				     .next_pc_npc(stage3_next_pc_npc),
				     .rx_inst_first_deq_rdy_b(stage3_rx_inst_first_deq_rdy_b),
				     .rx_inst_first_x(stage3_rx_inst_first_x),
				     .rx_inst_notEmpty_b(stage3_rx_inst_notEmpty_b),
				     .rx_meta_from_stage2_first_deq_rdy_b(stage3_rx_meta_from_stage2_first_deq_rdy_b),
				     .rx_meta_from_stage2_first_x(stage3_rx_meta_from_stage2_first_x),
				     .rx_meta_from_stage2_notEmpty_b(stage3_rx_meta_from_stage2_notEmpty_b),
				     .rx_mtval_from_stage2_first_deq_rdy_b(stage3_rx_mtval_from_stage2_first_deq_rdy_b),
				     .rx_mtval_from_stage2_first_x(stage3_rx_mtval_from_stage2_first_x),
				     .rx_mtval_from_stage2_notEmpty_b(stage3_rx_mtval_from_stage2_notEmpty_b),
				     .storebuffer_empty_e(stage3_storebuffer_empty_e),
				     .tx_common_to_stage4_enq_rdy_b(stage3_tx_common_to_stage4_enq_rdy_b),
				     .tx_common_to_stage4_notFull_b(stage3_tx_common_to_stage4_notFull_b),
				     .tx_inst_enq_rdy_b(stage3_tx_inst_enq_rdy_b),
				     .tx_inst_notFull_b(stage3_tx_inst_notFull_b),
				     .tx_type_to_stage4_enq_rdy_b(stage3_tx_type_to_stage4_enq_rdy_b),
				     .tx_type_to_stage4_notFull_b(stage3_tx_type_to_stage4_notFull_b),
				     .EN_ma_op1(stage3_EN_ma_op1),
				     .EN_ma_op2(stage3_EN_ma_op2),
				     .EN_ma_op3(stage3_EN_ma_op3),
				     .EN_update_wEpoch(stage3_EN_update_wEpoch),
				     .EN_memory_request_get(stage3_EN_memory_request_get),
				     .EN_next_pc(stage3_EN_next_pc),
				     .rx_meta_from_stage2_deq_ena(stage3_rx_meta_from_stage2_deq_ena),
				     .rx_mtval_from_stage2_deq_ena(stage3_rx_mtval_from_stage2_deq_ena),
				     .tx_common_to_stage4_enq_ena(stage3_tx_common_to_stage4_enq_ena),
				     .tx_common_to_stage4_enq_data(stage3_tx_common_to_stage4_enq_data),
				     .tx_type_to_stage4_enq_ena(stage3_tx_type_to_stage4_enq_ena),
				     .tx_type_to_stage4_enq_data(stage3_tx_type_to_stage4_enq_data),
				     .tx_inst_enq_ena(stage3_tx_inst_enq_ena),
				     .tx_inst_enq_data_fst(stage3_tx_inst_enq_data_fst),
				     .tx_inst_enq_data_snd(stage3_tx_inst_enq_data_snd),
				     .rx_inst_deq_ena(stage3_rx_inst_deq_ena),
				     .flush_from_exe_fst(stage3_flush_from_exe_fst),
				     .flush_from_exe_snd(stage3_flush_from_exe_snd),
				     .memory_request_get(stage3_memory_request_get),
				     .RDY_memory_request_get(stage3_RDY_memory_request_get),
				     .RDY_next_pc(),
				     .mv_train_bpu(stage3_mv_train_bpu),
				     .RDY_mv_train_bpu(stage3_RDY_mv_train_bpu),
				     .mv_mispredict_fst(stage3_mv_mispredict_fst),
				     .RDY_mv_mispredict_fst(stage3_RDY_mv_mispredict_fst),
				     .mv_mispredict_snd(stage3_mv_mispredict_snd),
				     .RDY_mv_mispredict_snd(stage3_RDY_mv_mispredict_snd),
				     .mv_count_floats(stage3_mv_count_floats),
				     .RDY_mv_count_floats(),
				     .mv_count_muldiv(stage3_mv_count_muldiv),
				     .RDY_mv_count_muldiv(),
				     .mv_count_jumps(stage3_mv_count_jumps),
				     .RDY_mv_count_jumps(),
				     .mv_count_branches(stage3_mv_count_branches),
				     .RDY_mv_count_branches(),
				     .mv_count_rawstalls(stage3_mv_count_rawstalls),
				     .RDY_mv_count_rawstalls(),
				     .mv_count_exestalls(stage3_mv_count_exestalls),
				     .RDY_mv_count_exestalls());

  // submodule stage4
  mkstage4 #(.hartid(hartid)) stage4(.CLK(CLK),
				     .RST_N(RST_N),
				     .memory_response_put(stage4_memory_response_put),
				     .rx_common_from_stage3_first_deq_rdy_b(stage4_rx_common_from_stage3_first_deq_rdy_b),
				     .rx_common_from_stage3_first_x(stage4_rx_common_from_stage3_first_x),
				     .rx_common_from_stage3_notEmpty_b(stage4_rx_common_from_stage3_notEmpty_b),
				     .rx_inst_first_deq_rdy_b(stage4_rx_inst_first_deq_rdy_b),
				     .rx_inst_first_x(stage4_rx_inst_first_x),
				     .rx_inst_notEmpty_b(stage4_rx_inst_notEmpty_b),
				     .rx_type_from_stage3_first_deq_rdy_b(stage4_rx_type_from_stage3_first_deq_rdy_b),
				     .rx_type_from_stage3_first_x(stage4_rx_type_from_stage3_first_x),
				     .rx_type_from_stage3_notEmpty_b(stage4_rx_type_from_stage3_notEmpty_b),
				     .tx_inst_enq_rdy_b(stage4_tx_inst_enq_rdy_b),
				     .tx_inst_notFull_b(stage4_tx_inst_notFull_b),
				     .tx_min_enq_rdy_b(stage4_tx_min_enq_rdy_b),
				     .tx_min_notFull_b(stage4_tx_min_notFull_b),
				     .EN_memory_response_put(stage4_EN_memory_response_put),
				     .rx_common_from_stage3_deq_ena(stage4_rx_common_from_stage3_deq_ena),
				     .rx_type_from_stage3_deq_ena(stage4_rx_type_from_stage3_deq_ena),
				     .tx_min_enq_ena(stage4_tx_min_enq_ena),
				     .tx_min_enq_data_fst(stage4_tx_min_enq_data_fst),
				     .tx_min_enq_data_snd(stage4_tx_min_enq_data_snd),
				     .rx_inst_deq_ena(stage4_rx_inst_deq_ena),
				     .tx_inst_enq_ena(stage4_tx_inst_enq_ena),
				     .tx_inst_enq_data_fst(stage4_tx_inst_enq_data_fst),
				     .tx_inst_enq_data_snd(stage4_tx_inst_enq_data_snd),
				     .RDY_memory_response_put(stage4_RDY_memory_response_put));

  // submodule stage5
  mkstage5 #(.hartid(hartid)) stage5(.CLK(CLK),
				     .RST_N(RST_N),
				     .ma_clint_msip_intrpt(stage5_ma_clint_msip_intrpt),
				     .ma_clint_mtime_c_mtime(stage5_ma_clint_mtime_c_mtime),
				     .ma_clint_mtip_intrpt(stage5_ma_clint_mtip_intrpt),
				     .ma_debug_access_csrs_cmd(stage5_ma_debug_access_csrs_cmd),
				     .ma_debug_halt_request_ip(stage5_ma_debug_halt_request_ip),
				     .ma_debug_resume_request_ip(stage5_ma_debug_resume_request_ip),
				     .ma_events_grp4_e(stage5_ma_events_grp4_e),
				     .ma_events_grp5_e(stage5_ma_events_grp5_e),
				     .ma_events_grp6_e(stage5_ma_events_grp6_e),
				     .ma_events_grp7_e(stage5_ma_events_grp7_e),
				     .ma_set_external_interrupt_ex_i(stage5_ma_set_external_interrupt_ex_i),
				     .rx_in_first_deq_rdy_b(stage5_rx_in_first_deq_rdy_b),
				     .rx_in_first_x(stage5_rx_in_first_x),
				     .rx_in_notEmpty_b(stage5_rx_in_notEmpty_b),
				     .rx_inst_first_deq_rdy_b(stage5_rx_inst_first_deq_rdy_b),
				     .rx_inst_first_x(stage5_rx_inst_first_x),
				     .rx_inst_notEmpty_b(stage5_rx_inst_notEmpty_b),
				     .store_is_cached_c(stage5_store_is_cached_c),
				     .write_resp_r(stage5_write_resp_r),
				     .EN_ma_clint_msip(stage5_EN_ma_clint_msip),
				     .EN_ma_clint_mtip(stage5_EN_ma_clint_mtip),
				     .EN_ma_clint_mtime(stage5_EN_ma_clint_mtime),
				     .EN_dump_get(stage5_EN_dump_get),
				     .EN_ma_set_external_interrupt(stage5_EN_ma_set_external_interrupt),
				     .EN_write_resp(stage5_EN_write_resp),
				     .EN_ma_debug_access_csrs(stage5_EN_ma_debug_access_csrs),
				     .EN_ma_debug_halt_request(stage5_EN_ma_debug_halt_request),
				     .EN_ma_debug_resume_request(stage5_EN_ma_debug_resume_request),
				     .EN_ma_events_grp4(stage5_EN_ma_events_grp4),
				     .EN_ma_events_grp5(stage5_EN_ma_events_grp5),
				     .EN_ma_events_grp6(stage5_EN_ma_events_grp6),
				     .EN_ma_events_grp7(stage5_EN_ma_events_grp7),
				     .rx_in_deq_ena(stage5_rx_in_deq_ena),
				     .rx_inst_deq_ena(stage5_rx_inst_deq_ena),
				     .commit_rd(stage5_commit_rd),
				     .RDY_commit_rd(),
				     .flush_fst(stage5_flush_fst),
				     .RDY_flush_fst(),
				     .flush_snd_fst(stage5_flush_snd_fst),
				     .RDY_flush_snd_fst(),
				     .flush_snd_snd_fst(stage5_flush_snd_snd_fst),
				     .RDY_flush_snd_snd_fst(),
				     .flush_snd_snd_snd(stage5_flush_snd_snd_snd),
				     .RDY_flush_snd_snd_snd(),
				     .mv_csrs_to_decode(stage5_mv_csrs_to_decode),
				     .RDY_mv_csrs_to_decode(stage5_RDY_mv_csrs_to_decode),
				     .RDY_ma_clint_msip(),
				     .RDY_ma_clint_mtip(),
				     .RDY_ma_clint_mtime(),
				     .dump_get(stage5_dump_get),
				     .RDY_dump_get(stage5_RDY_dump_get),
				     .mv_csr_satp(stage5_mv_csr_satp),
				     .RDY_mv_csr_satp(),
				     .RDY_ma_set_external_interrupt(stage5_RDY_ma_set_external_interrupt),
				     .mv_csr_misa_c(stage5_mv_csr_misa_c),
				     .RDY_mv_csr_misa_c(),
				     .initiate_store_fst(stage5_initiate_store_fst),
				     .RDY_initiate_store_fst(),
				     .initiate_store_snd(stage5_initiate_store_snd),
				     .RDY_initiate_store_snd(),
				     .RDY_write_resp(),
				     .mv_cacheenable(stage5_mv_cacheenable),
				     .RDY_mv_cacheenable(),
				     .mv_curr_priv(stage5_mv_curr_priv),
				     .RDY_mv_curr_priv(),
				     .mv_csr_mstatus(stage5_mv_csr_mstatus),
				     .RDY_mv_csr_mstatus(),
				     .mv_resume_wfi(stage5_mv_resume_wfi),
				     .RDY_mv_resume_wfi(stage5_RDY_mv_resume_wfi),
				     .RDY_ma_debug_access_csrs(stage5_RDY_ma_debug_access_csrs),
				     .RDY_ma_debug_halt_request(),
				     .RDY_ma_debug_resume_request(),
				     .mv_core_is_halted(stage5_mv_core_is_halted),
				     .RDY_mv_core_is_halted(),
				     .mv_step_is_set(stage5_mv_step_is_set),
				     .RDY_mv_step_is_set(),
				     .mv_step_ie(stage5_mv_step_ie),
				     .RDY_mv_step_ie(),
				     .mv_core_debugenable(stage5_mv_core_debugenable),
				     .RDY_mv_core_debugenable(),
				     .mv_resp_to_core(stage5_mv_resp_to_core),
				     .RDY_mv_resp_to_core(),
				     .RDY_ma_events_grp4(),
				     .RDY_ma_events_grp5(),
				     .RDY_ma_events_grp6(),
				     .RDY_ma_events_grp7(),
				     .mv_count_exceptions(stage5_mv_count_exceptions),
				     .RDY_mv_count_exceptions(),
				     .mv_count_interrupts(stage5_mv_count_interrupts),
				     .RDY_mv_count_interrupts(),
				     .mv_count_csrops(stage5_mv_count_csrops),
				     .RDY_mv_count_csrops());

  // rule RL_connect_notFull
  assign CAN_FIRE_RL_connect_notFull = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull = 1'd1 ;

  // rule RL_connect_rdy
  assign CAN_FIRE_RL_connect_rdy = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy = 1'd1 ;

  // rule RL_connect_notEmpty
  assign CAN_FIRE_RL_connect_notEmpty = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty = 1'd1 ;

  // rule RL_connect_rdy_1
  assign CAN_FIRE_RL_connect_rdy_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_1 = 1'd1 ;

  // rule RL_connect_first
  assign CAN_FIRE_RL_connect_first = pipe0_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first = pipe0_EMPTY_N ;

  // rule RL_connect_notFull_1
  assign CAN_FIRE_RL_connect_notFull_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_1 = 1'd1 ;

  // rule RL_connect_rdy_2
  assign CAN_FIRE_RL_connect_rdy_2 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_2 = 1'd1 ;

  // rule RL_connect_notEmpty_1
  assign CAN_FIRE_RL_connect_notEmpty_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_1 = 1'd1 ;

  // rule RL_connect_rdy_3
  assign CAN_FIRE_RL_connect_rdy_3 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_3 = 1'd1 ;

  // rule RL_connect_first_1
  assign CAN_FIRE_RL_connect_first_1 = pipe1_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_1 = pipe1_EMPTY_N ;

  // rule RL_connect_notFull_2
  assign CAN_FIRE_RL_connect_notFull_2 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_2 = 1'd1 ;

  // rule RL_connect_rdy_4
  assign CAN_FIRE_RL_connect_rdy_4 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_4 = 1'd1 ;

  // rule RL_connect_notEmpty_2
  assign CAN_FIRE_RL_connect_notEmpty_2 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_2 = 1'd1 ;

  // rule RL_connect_rdy_5
  assign CAN_FIRE_RL_connect_rdy_5 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_5 = 1'd1 ;

  // rule RL_connect_first_2
  assign CAN_FIRE_RL_connect_first_2 = pipe1inst_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_2 = pipe1inst_EMPTY_N ;

  // rule RL_connect_notEmpty_3
  assign CAN_FIRE_RL_connect_notEmpty_3 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_3 = 1'd1 ;

  // rule RL_connect_rdy_7
  assign CAN_FIRE_RL_connect_rdy_7 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_7 = 1'd1 ;

  // rule RL_connect_first_3
  assign CAN_FIRE_RL_connect_first_3 = pipe2_meta_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_3 = pipe2_meta_EMPTY_N ;

  // rule RL_connect_notEmpty_4
  assign CAN_FIRE_RL_connect_notEmpty_4 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_4 = 1'd1 ;

  // rule RL_connect_rdy_9
  assign CAN_FIRE_RL_connect_rdy_9 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_9 = 1'd1 ;

  // rule RL_connect_first_4
  assign CAN_FIRE_RL_connect_first_4 = pipe2_mtval_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_4 = pipe2_mtval_EMPTY_N ;

  // rule RL_mkConnectionVtoAf_2
  assign CAN_FIRE_RL_mkConnectionVtoAf_2 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_2 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_3
  assign CAN_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_4
  assign CAN_FIRE_RL_mkConnectionVtoAf_4 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_4 = 1'd1 ;

  // rule RL_connect_notEmpty_5
  assign CAN_FIRE_RL_connect_notEmpty_5 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_5 = 1'd1 ;

  // rule RL_connect_rdy_11
  assign CAN_FIRE_RL_connect_rdy_11 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_11 = 1'd1 ;

  // rule RL_connect_first_5
  assign CAN_FIRE_RL_connect_first_5 = pipe2inst_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_5 = pipe2inst_EMPTY_N ;

  // rule RL_connect_notFull_6
  assign CAN_FIRE_RL_connect_notFull_6 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_6 = 1'd1 ;

  // rule RL_connect_rdy_12
  assign CAN_FIRE_RL_connect_rdy_12 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_12 = 1'd1 ;

  // rule RL_connect_notEmpty_6
  assign CAN_FIRE_RL_connect_notEmpty_6 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_6 = 1'd1 ;

  // rule RL_connect_rdy_13
  assign CAN_FIRE_RL_connect_rdy_13 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_13 = 1'd1 ;

  // rule RL_connect_first_6
  assign CAN_FIRE_RL_connect_first_6 = pipe3common_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_6 = pipe3common_EMPTY_N ;

  // rule RL_connect_notFull_7
  assign CAN_FIRE_RL_connect_notFull_7 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_7 = 1'd1 ;

  // rule RL_connect_rdy_14
  assign CAN_FIRE_RL_connect_rdy_14 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_14 = 1'd1 ;

  // rule RL_connect_notEmpty_7
  assign CAN_FIRE_RL_connect_notEmpty_7 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_7 = 1'd1 ;

  // rule RL_connect_rdy_15
  assign CAN_FIRE_RL_connect_rdy_15 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_15 = 1'd1 ;

  // rule RL_connect_first_7
  assign CAN_FIRE_RL_connect_first_7 = pipe3type_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_7 = pipe3type_EMPTY_N ;

  // rule RL_connect_notFull_8
  assign CAN_FIRE_RL_connect_notFull_8 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_8 = 1'd1 ;

  // rule RL_connect_rdy_16
  assign CAN_FIRE_RL_connect_rdy_16 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_16 = 1'd1 ;

  // rule RL_connect_notEmpty_8
  assign CAN_FIRE_RL_connect_notEmpty_8 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_8 = 1'd1 ;

  // rule RL_connect_rdy_17
  assign CAN_FIRE_RL_connect_rdy_17 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_17 = 1'd1 ;

  // rule RL_connect_first_8
  assign CAN_FIRE_RL_connect_first_8 = pipe3inst_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_8 = pipe3inst_EMPTY_N ;

  // rule RL_connect_notEmpty_9
  assign CAN_FIRE_RL_connect_notEmpty_9 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_9 = 1'd1 ;

  // rule RL_connect_rdy_19
  assign CAN_FIRE_RL_connect_rdy_19 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_19 = 1'd1 ;

  // rule RL_connect_first_9
  assign CAN_FIRE_RL_connect_first_9 = pipe4_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_9 = pipe4_EMPTY_N ;

  // rule RL_connect_notEmpty_10
  assign CAN_FIRE_RL_connect_notEmpty_10 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notEmpty_10 = 1'd1 ;

  // rule RL_connect_rdy_21
  assign CAN_FIRE_RL_connect_rdy_21 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_21 = 1'd1 ;

  // rule RL_connect_first_10
  assign CAN_FIRE_RL_connect_first_10 = pipe4inst_EMPTY_N ;
  assign WILL_FIRE_RL_connect_first_10 = pipe4inst_EMPTY_N ;

  // rule RL_send_next_pc
  assign CAN_FIRE_RL_send_next_pc = pipe1_EMPTY_N ;
  assign WILL_FIRE_RL_send_next_pc = pipe1_EMPTY_N ;

  // rule RL_connect_csrs
  assign CAN_FIRE_RL_connect_csrs =
	     stage5_RDY_mv_resume_wfi && stage5_RDY_mv_csrs_to_decode ;
  assign WILL_FIRE_RL_connect_csrs = CAN_FIRE_RL_connect_csrs ;

  // rule RL_connect_ena_data
  assign CAN_FIRE_RL_connect_ena_data =
	     pipe0_FULL_N && stage0_tx_to_stage1_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data = CAN_FIRE_RL_connect_ena_data ;

  // rule RL_connect_ena
  assign CAN_FIRE_RL_connect_ena =
	     pipe0_EMPTY_N && stage1_rx_from_stage0_deq_ena ;
  assign WILL_FIRE_RL_connect_ena = CAN_FIRE_RL_connect_ena ;

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf =
	     stage3_RDY_mv_train_bpu && stage0_RDY_ma_train_bpu ;
  assign WILL_FIRE_RL_mkConnectionVtoAf = CAN_FIRE_RL_mkConnectionVtoAf ;

  // rule RL_mkConnectionVtoAf_1
  assign CAN_FIRE_RL_mkConnectionVtoAf_1 =
	     stage3_RDY_mv_mispredict_snd && stage3_RDY_mv_mispredict_fst &&
	     stage0_RDY_ma_mispredict ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_1 = CAN_FIRE_RL_mkConnectionVtoAf_1 ;

  // rule RL_connect_ena_data_1
  assign CAN_FIRE_RL_connect_ena_data_1 =
	     pipe1_FULL_N && stage1_tx_to_stage2_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_1 = CAN_FIRE_RL_connect_ena_data_1 ;

  // rule RL_connect_ena_data_2
  assign CAN_FIRE_RL_connect_ena_data_2 =
	     pipe1inst_FULL_N && stage1_tx_to_stage2_inst_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_2 = CAN_FIRE_RL_connect_ena_data_2 ;

  // rule RL_fwding_from_exe1
  assign CAN_FIRE_RL_fwding_from_exe1 =
	     pipe3common_EMPTY_N && pipe3type_EMPTY_N ;
  assign WILL_FIRE_RL_fwding_from_exe1 = CAN_FIRE_RL_fwding_from_exe1 ;

  // rule RL_nofwding_from_exe1
  assign CAN_FIRE_RL_nofwding_from_exe1 = 1'd1 ;
  assign WILL_FIRE_RL_nofwding_from_exe1 = !WILL_FIRE_RL_fwding_from_exe1 ;

  // rule RL_fwding_from_mem1
  assign CAN_FIRE_RL_fwding_from_mem1 = pipe4_EMPTY_N ;
  assign WILL_FIRE_RL_fwding_from_mem1 = pipe4_EMPTY_N ;

  // rule RL_nofwding_from_mem1
  assign CAN_FIRE_RL_nofwding_from_mem1 = 1'd1 ;
  assign WILL_FIRE_RL_nofwding_from_mem1 = !pipe4_EMPTY_N ;

  // rule RL_connect_ena_3
  assign CAN_FIRE_RL_connect_ena_3 =
	     pipe2_meta_EMPTY_N && stage3_rx_meta_from_stage2_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_3 = CAN_FIRE_RL_connect_ena_3 ;

  // rule RL_connect_notFull_3
  assign CAN_FIRE_RL_connect_notFull_3 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_3 = 1'd1 ;

  // rule RL_connect_rdy_6
  assign CAN_FIRE_RL_connect_rdy_6 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_6 = 1'd1 ;

  // rule RL_connect_ena_4
  assign CAN_FIRE_RL_connect_ena_4 =
	     pipe2_mtval_EMPTY_N && stage3_rx_mtval_from_stage2_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_4 = CAN_FIRE_RL_connect_ena_4 ;

  // rule RL_connect_notFull_4
  assign CAN_FIRE_RL_connect_notFull_4 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_4 = 1'd1 ;

  // rule RL_connect_rdy_8
  assign CAN_FIRE_RL_connect_rdy_8 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_8 = 1'd1 ;

  // rule RL_connect_ena_5
  assign CAN_FIRE_RL_connect_ena_5 =
	     pipe2inst_EMPTY_N && stage3_rx_inst_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_5 = CAN_FIRE_RL_connect_ena_5 ;

  // rule RL_connect_notFull_5
  assign CAN_FIRE_RL_connect_notFull_5 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_5 = 1'd1 ;

  // rule RL_connect_rdy_10
  assign CAN_FIRE_RL_connect_rdy_10 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_10 = 1'd1 ;

  // rule RL_connect_ena_data_6
  assign CAN_FIRE_RL_connect_ena_data_6 =
	     pipe3common_FULL_N && stage3_tx_common_to_stage4_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_6 = CAN_FIRE_RL_connect_ena_data_6 ;

  // rule RL_connect_ena_data_7
  assign CAN_FIRE_RL_connect_ena_data_7 =
	     pipe3type_FULL_N && stage3_tx_type_to_stage4_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_7 = CAN_FIRE_RL_connect_ena_data_7 ;

  // rule RL_connect_ena_data_8
  assign CAN_FIRE_RL_connect_ena_data_8 =
	     pipe3inst_FULL_N && stage3_tx_inst_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_8 = CAN_FIRE_RL_connect_ena_data_8 ;

  // rule RL_upd_stage2eEpoch
  assign CAN_FIRE_RL_upd_stage2eEpoch = stage3_flush_from_exe_fst ;
  assign WILL_FIRE_RL_upd_stage2eEpoch = stage3_flush_from_exe_fst ;

  // rule RL_connect_debug_info
  assign CAN_FIRE_RL_connect_debug_info = EN_ma_debugger_available ;
  assign WILL_FIRE_RL_connect_debug_info = EN_ma_debugger_available ;

  // rule RL_rl_connect_events
  assign CAN_FIRE_RL_rl_connect_events = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_events = 1'd1 ;

  // rule RL_connect_ena_9
  assign CAN_FIRE_RL_connect_ena_9 = pipe4_EMPTY_N && stage5_rx_in_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_9 = CAN_FIRE_RL_connect_ena_9 ;

  // rule RL_connect_notFull_9
  assign CAN_FIRE_RL_connect_notFull_9 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_9 = 1'd1 ;

  // rule RL_connect_rdy_18
  assign CAN_FIRE_RL_connect_rdy_18 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_18 = 1'd1 ;

  // rule RL_connect_ena_10
  assign CAN_FIRE_RL_connect_ena_10 =
	     pipe4inst_EMPTY_N && stage5_rx_inst_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_10 = CAN_FIRE_RL_connect_ena_10 ;

  // rule RL_connect_notFull_10
  assign CAN_FIRE_RL_connect_notFull_10 = 1'd1 ;
  assign WILL_FIRE_RL_connect_notFull_10 = 1'd1 ;

  // rule RL_connect_rdy_20
  assign CAN_FIRE_RL_connect_rdy_20 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rdy_20 = 1'd1 ;

  // rule RL_connect_ena_6
  assign CAN_FIRE_RL_connect_ena_6 =
	     pipe3common_EMPTY_N && stage4_rx_common_from_stage3_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_6 = CAN_FIRE_RL_connect_ena_6 ;

  // rule RL_connect_ena_7
  assign CAN_FIRE_RL_connect_ena_7 =
	     pipe3type_EMPTY_N && stage4_rx_type_from_stage3_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_7 = CAN_FIRE_RL_connect_ena_7 ;

  // rule RL_connect_ena_8
  assign CAN_FIRE_RL_connect_ena_8 =
	     pipe3inst_EMPTY_N && stage4_rx_inst_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_8 = CAN_FIRE_RL_connect_ena_8 ;

  // rule RL_connect_ena_data_9
  assign CAN_FIRE_RL_connect_ena_data_9 =
	     pipe4_FULL_N && stage4_tx_min_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_9 = CAN_FIRE_RL_connect_ena_data_9 ;

  // rule RL_connect_ena_data_10
  assign CAN_FIRE_RL_connect_ena_data_10 =
	     pipe4inst_FULL_N && stage4_tx_inst_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_10 = CAN_FIRE_RL_connect_ena_data_10 ;

  // rule RL_update_wEpoch
  assign CAN_FIRE_RL_update_wEpoch = stage5_flush_fst ;
  assign WILL_FIRE_RL_update_wEpoch = stage5_flush_fst ;

  // rule RL_flush_stage0
  assign CAN_FIRE_RL_flush_stage0 =
	     stage0_RDY_ma_flush &&
	     (stage3_flush_from_exe_fst || stage5_flush_fst) ;
  assign WILL_FIRE_RL_flush_stage0 = CAN_FIRE_RL_flush_stage0 ;

  // rule RL_clear_stall_in_decode_stage
  assign CAN_FIRE_RL_clear_stall_in_decode_stage =
	     stage2_RDY_clear_stall &&
	     (stage3_flush_from_exe_fst || stage5_flush_fst) ;
  assign WILL_FIRE_RL_clear_stall_in_decode_stage =
	     CAN_FIRE_RL_clear_stall_in_decode_stage ;

  // rule RL_upd_stage2wEpoch
  assign CAN_FIRE_RL_upd_stage2wEpoch = stage5_flush_fst ;
  assign WILL_FIRE_RL_upd_stage2wEpoch = stage5_flush_fst ;

  // rule RL_connect_ena_1
  assign CAN_FIRE_RL_connect_ena_1 =
	     pipe1_EMPTY_N && stage2_rx_from_stage1_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_1 = CAN_FIRE_RL_connect_ena_1 ;

  // rule RL_connect_ena_2
  assign CAN_FIRE_RL_connect_ena_2 =
	     pipe1inst_EMPTY_N && stage2_rx_inst_deq_ena ;
  assign WILL_FIRE_RL_connect_ena_2 = CAN_FIRE_RL_connect_ena_2 ;

  // rule RL_connect_ena_data_3
  assign CAN_FIRE_RL_connect_ena_data_3 =
	     pipe2_meta_FULL_N && stage2_tx_meta_to_stage3_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_3 = CAN_FIRE_RL_connect_ena_data_3 ;

  // rule RL_connect_ena_data_5
  assign CAN_FIRE_RL_connect_ena_data_5 =
	     pipe2inst_FULL_N && stage2_tx_inst_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_5 = CAN_FIRE_RL_connect_ena_data_5 ;

  // rule RL_connect_ena_data_4
  assign CAN_FIRE_RL_connect_ena_data_4 =
	     pipe2_mtval_FULL_N && stage2_tx_mtval_to_stage3_enq_ena ;
  assign WILL_FIRE_RL_connect_ena_data_4 = CAN_FIRE_RL_connect_ena_data_4 ;

  // rule RL_commit_instruction
  assign CAN_FIRE_RL_commit_instruction = stage2_RDY_commit_rd ;
  assign WILL_FIRE_RL_commit_instruction = stage2_RDY_commit_rd ;

  // inputs to muxes for submodule ports
  assign MUX_stage3_fwd_from_pipe3_1__VAL_1 =
	     { (pipe3common_D_OUT[6:2] != 5'd0 || pipe3common_D_OUT[0]) &&
	       pipe3common_D_OUT[1] == rg_wEpoch,
	       pipe3type_D_OUT[82:81] == 2'd2,
	       pipe3common_D_OUT[6:2],
	       pipe3type_D_OUT[68:5],
	       pipe3common_D_OUT[0] } ;
  assign MUX_stage3_fwd_from_pipe3_1__VAL_2 =
	     { 1'd0,
	       71'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_stage3_fwd_from_pipe4_first_1__VAL_1 =
	     { NOT_IF_pipe4_first__85_BITS_136_TO_135_44_EQ_2_ETC___d259,
	       pipe4_D_OUT[136:135] == 2'd2 || pipe4_D_OUT[136:135] == 2'd1,
	       (pipe4_D_OUT[136:135] == 2'd2) ?
		 { pipe4_D_OUT[11:7], pipe4_D_OUT[75:12], pipe4_D_OUT[1] } :
		 { _theResult___fst__h11915,
		   _theResult___snd_snd_snd__h12015,
		   pipe4_D_OUT[136:135] != 2'd1 } } ;
  assign MUX_stage3_fwd_from_pipe4_first_1__VAL_2 =
	     { 7'd0,
	       64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       1'd0 } ;

  // register rg_wEpoch
  assign rg_wEpoch_D_IN = ~rg_wEpoch ;
  assign rg_wEpoch_EN = stage5_flush_fst ;

  // submodule pipe0
  assign pipe0_D_IN = stage0_tx_to_stage1_enq_data ;
  assign pipe0_ENQ = CAN_FIRE_RL_connect_ena_data ;
  assign pipe0_DEQ = CAN_FIRE_RL_connect_ena ;
  assign pipe0_CLR = 1'b0 ;

  // submodule pipe1
  assign pipe1_D_IN = stage1_tx_to_stage2_enq_data ;
  assign pipe1_ENQ = CAN_FIRE_RL_connect_ena_data_1 ;
  assign pipe1_DEQ = CAN_FIRE_RL_connect_ena_1 ;
  assign pipe1_CLR = 1'b0 ;

  // submodule pipe1inst
  assign pipe1inst_D_IN = stage1_tx_to_stage2_inst_enq_data ;
  assign pipe1inst_ENQ = CAN_FIRE_RL_connect_ena_data_2 ;
  assign pipe1inst_DEQ = CAN_FIRE_RL_connect_ena_2 ;
  assign pipe1inst_CLR = 1'b0 ;

  // submodule pipe2_meta
  assign pipe2_meta_D_IN = stage2_tx_meta_to_stage3_enq_data ;
  assign pipe2_meta_ENQ = CAN_FIRE_RL_connect_ena_data_3 ;
  assign pipe2_meta_DEQ = CAN_FIRE_RL_connect_ena_3 ;
  assign pipe2_meta_CLR = 1'b0 ;

  // submodule pipe2_mtval
  assign pipe2_mtval_D_IN = stage2_tx_mtval_to_stage3_enq_data ;
  assign pipe2_mtval_ENQ = CAN_FIRE_RL_connect_ena_data_4 ;
  assign pipe2_mtval_DEQ = CAN_FIRE_RL_connect_ena_4 ;
  assign pipe2_mtval_CLR = 1'b0 ;

  // submodule pipe2inst
  assign pipe2inst_D_IN = stage2_tx_inst_enq_data ;
  assign pipe2inst_ENQ = CAN_FIRE_RL_connect_ena_data_5 ;
  assign pipe2inst_DEQ = CAN_FIRE_RL_connect_ena_5 ;
  assign pipe2inst_CLR = 1'b0 ;

  // submodule pipe3common
  assign pipe3common_D_IN = stage3_tx_common_to_stage4_enq_data ;
  assign pipe3common_ENQ = CAN_FIRE_RL_connect_ena_data_6 ;
  assign pipe3common_DEQ = CAN_FIRE_RL_connect_ena_6 ;
  assign pipe3common_CLR = 1'b0 ;

  // submodule pipe3inst
  assign pipe3inst_D_IN =
	     { stage3_tx_inst_enq_data_fst, stage3_tx_inst_enq_data_snd } ;
  assign pipe3inst_ENQ = CAN_FIRE_RL_connect_ena_data_8 ;
  assign pipe3inst_DEQ = CAN_FIRE_RL_connect_ena_8 ;
  assign pipe3inst_CLR = 1'b0 ;

  // submodule pipe3type
  assign pipe3type_D_IN = stage3_tx_type_to_stage4_enq_data ;
  assign pipe3type_ENQ = CAN_FIRE_RL_connect_ena_data_7 ;
  assign pipe3type_DEQ = CAN_FIRE_RL_connect_ena_7 ;
  assign pipe3type_CLR = 1'b0 ;

  // submodule pipe4
  assign pipe4_D_IN =
	     { stage4_tx_min_enq_data_fst, stage4_tx_min_enq_data_snd } ;
  assign pipe4_ENQ = CAN_FIRE_RL_connect_ena_data_9 ;
  assign pipe4_DEQ = CAN_FIRE_RL_connect_ena_9 ;
  assign pipe4_CLR = 1'b0 ;

  // submodule pipe4inst
  assign pipe4inst_D_IN =
	     { stage4_tx_inst_enq_data_fst, stage4_tx_inst_enq_data_snd } ;
  assign pipe4inst_ENQ = CAN_FIRE_RL_connect_ena_data_10 ;
  assign pipe4inst_DEQ = CAN_FIRE_RL_connect_ena_10 ;
  assign pipe4inst_CLR = 1'b0 ;

  // submodule stage0
  assign stage0_ma_bpu_enable_e = stage5_mv_cacheenable[2] ;
  assign stage0_ma_flush_fl =
	     { fl_pc__h11261,
	       stage5_flush_fst && stage5_flush_snd_snd_fst,
	       stage5_flush_fst && stage5_flush_snd_snd_snd } ;
  assign stage0_ma_mispredict_g =
	     { stage3_mv_mispredict_fst, stage3_mv_mispredict_snd } ;
  assign stage0_ma_train_bpu_td = stage3_mv_train_bpu ;
  assign stage0_tx_to_stage1_enq_rdy_b = pipe0_FULL_N ;
  assign stage0_tx_to_stage1_notFull_b = pipe0_FULL_N ;
  assign stage0_EN_ma_update_eEpoch = stage3_flush_from_exe_fst ;
  assign stage0_EN_ma_update_wEpoch = stage5_flush_fst ;
  assign stage0_EN_ma_flush = CAN_FIRE_RL_flush_stage0 ;
  assign stage0_EN_ma_train_bpu = CAN_FIRE_RL_mkConnectionVtoAf ;
  assign stage0_EN_ma_mispredict = CAN_FIRE_RL_mkConnectionVtoAf_1 ;
  assign stage0_EN_ma_bpu_enable = CAN_FIRE_RL_connect_csrs ;
  assign stage0_EN_to_icache_get = EN_instr_req_get ;

  // submodule stage1
  assign stage1_csr_misa_c_c = stage5_mv_csr_misa_c ;
  assign stage1_inst_response_put = inst_response_put ;
  assign stage1_rx_from_stage0_first_deq_rdy_b = pipe0_EMPTY_N ;
  assign stage1_rx_from_stage0_first_x = pipe0_D_OUT ;
  assign stage1_rx_from_stage0_notEmpty_b = pipe0_EMPTY_N ;
  assign stage1_tx_to_stage2_enq_rdy_b = pipe1_FULL_N ;
  assign stage1_tx_to_stage2_inst_enq_rdy_b = pipe1inst_FULL_N ;
  assign stage1_tx_to_stage2_inst_notFull_b = pipe1inst_FULL_N ;
  assign stage1_tx_to_stage2_notFull_b = pipe1_FULL_N ;
  assign stage1_EN_inst_response_put = EN_inst_response_put ;
  assign stage1_EN_update_eEpoch = stage3_flush_from_exe_fst ;
  assign stage1_EN_update_wEpoch = stage5_flush_fst ;
  assign stage1_EN_csr_misa_c = CAN_FIRE_RL_connect_csrs ;

  // submodule stage2
  assign stage2_clear_stall_upd = 1'd1 ;
  assign stage2_commit_rd_commit = stage5_commit_rd[69:0] ;
  assign stage2_csrs_csr = stage5_mv_csrs_to_decode ;
  assign stage2_debug_access_gprs_cmd = debug_access_gprs_cmd ;
  assign stage2_debug_status_status =
	     { ma_debugger_available_avail,
	       stage5_mv_core_is_halted,
	       stage5_mv_step_is_set,
	       stage5_mv_step_ie,
	       stage5_mv_core_debugenable } ;
  assign stage2_ma_resume_wfi_w = stage5_mv_resume_wfi ;
  assign stage2_rx_from_stage1_first_deq_rdy_b = pipe1_EMPTY_N ;
  assign stage2_rx_from_stage1_first_x = pipe1_D_OUT ;
  assign stage2_rx_from_stage1_notEmpty_b = pipe1_EMPTY_N ;
  assign stage2_rx_inst_first_deq_rdy_b = pipe1inst_EMPTY_N ;
  assign stage2_rx_inst_first_x = pipe1inst_D_OUT ;
  assign stage2_rx_inst_notEmpty_b = pipe1inst_EMPTY_N ;
  assign stage2_tx_inst_enq_rdy_b = pipe2inst_FULL_N ;
  assign stage2_tx_inst_notFull_b = pipe2inst_FULL_N ;
  assign stage2_tx_meta_to_stage3_enq_rdy_b = pipe2_meta_FULL_N ;
  assign stage2_tx_meta_to_stage3_notFull_b = pipe2_meta_FULL_N ;
  assign stage2_tx_mtval_to_stage3_enq_rdy_b = pipe2_mtval_FULL_N ;
  assign stage2_tx_mtval_to_stage3_notFull_b = pipe2_mtval_FULL_N ;
  assign stage2_EN_commit_rd = stage2_RDY_commit_rd && stage5_commit_rd[70] ;
  assign stage2_EN_csrs = CAN_FIRE_RL_connect_csrs ;
  assign stage2_EN_clear_stall = CAN_FIRE_RL_clear_stall_in_decode_stage ;
  assign stage2_EN_update_eEpoch = stage3_flush_from_exe_fst ;
  assign stage2_EN_update_wEpoch = stage5_flush_fst ;
  assign stage2_EN_ma_resume_wfi = CAN_FIRE_RL_connect_csrs ;
  assign stage2_EN_debug_access_gprs = EN_debug_access_gprs ;

  // submodule stage3
  assign stage3_cache_is_available_avail = cache_is_available_avail ;
  assign stage3_csr_misa_c_m = stage5_mv_csr_misa_c ;
  assign stage3_fwd_from_pipe3_fwd =
	     WILL_FIRE_RL_fwding_from_exe1 ?
	       MUX_stage3_fwd_from_pipe3_1__VAL_1 :
	       MUX_stage3_fwd_from_pipe3_1__VAL_2 ;
  assign stage3_fwd_from_pipe4_first_fwd =
	     pipe4_EMPTY_N ?
	       MUX_stage3_fwd_from_pipe4_first_1__VAL_1 :
	       MUX_stage3_fwd_from_pipe4_first_1__VAL_2 ;
  assign stage3_ma_op1_i = stage2_mv_op1 ;
  assign stage3_ma_op2_i = stage2_mv_op2 ;
  assign stage3_ma_op3_i = stage2_mv_op3 ;
  assign stage3_next_pc_npc = pipe1_D_OUT[121:58] ;
  assign stage3_rx_inst_first_deq_rdy_b = pipe2inst_EMPTY_N ;
  assign stage3_rx_inst_first_x = pipe2inst_D_OUT ;
  assign stage3_rx_inst_notEmpty_b = pipe2inst_EMPTY_N ;
  assign stage3_rx_meta_from_stage2_first_deq_rdy_b = pipe2_meta_EMPTY_N ;
  assign stage3_rx_meta_from_stage2_first_x = pipe2_meta_D_OUT ;
  assign stage3_rx_meta_from_stage2_notEmpty_b = pipe2_meta_EMPTY_N ;
  assign stage3_rx_mtval_from_stage2_first_deq_rdy_b = pipe2_mtval_EMPTY_N ;
  assign stage3_rx_mtval_from_stage2_first_x = pipe2_mtval_D_OUT ;
  assign stage3_rx_mtval_from_stage2_notEmpty_b = pipe2_mtval_EMPTY_N ;
  assign stage3_storebuffer_empty_e = storebuffer_empty_e ;
  assign stage3_tx_common_to_stage4_enq_rdy_b = pipe3common_FULL_N ;
  assign stage3_tx_common_to_stage4_notFull_b = pipe3common_FULL_N ;
  assign stage3_tx_inst_enq_rdy_b = pipe3inst_FULL_N ;
  assign stage3_tx_inst_notFull_b = pipe3inst_FULL_N ;
  assign stage3_tx_type_to_stage4_enq_rdy_b = pipe3type_FULL_N ;
  assign stage3_tx_type_to_stage4_notFull_b = pipe3type_FULL_N ;
  assign stage3_EN_ma_op1 = 1'd1 ;
  assign stage3_EN_ma_op2 = 1'd1 ;
  assign stage3_EN_ma_op3 = 1'd1 ;
  assign stage3_EN_update_wEpoch = stage5_flush_fst ;
  assign stage3_EN_memory_request_get = EN_memory_request_get ;
  assign stage3_EN_next_pc = pipe1_EMPTY_N ;

  // submodule stage4
  assign stage4_memory_response_put = memory_response_put ;
  assign stage4_rx_common_from_stage3_first_deq_rdy_b = pipe3common_EMPTY_N ;
  assign stage4_rx_common_from_stage3_first_x = pipe3common_D_OUT ;
  assign stage4_rx_common_from_stage3_notEmpty_b = pipe3common_EMPTY_N ;
  assign stage4_rx_inst_first_deq_rdy_b = pipe3inst_EMPTY_N ;
  assign stage4_rx_inst_first_x = pipe3inst_D_OUT ;
  assign stage4_rx_inst_notEmpty_b = pipe3inst_EMPTY_N ;
  assign stage4_rx_type_from_stage3_first_deq_rdy_b = pipe3type_EMPTY_N ;
  assign stage4_rx_type_from_stage3_first_x = pipe3type_D_OUT ;
  assign stage4_rx_type_from_stage3_notEmpty_b = pipe3type_EMPTY_N ;
  assign stage4_tx_inst_enq_rdy_b = pipe4inst_FULL_N ;
  assign stage4_tx_inst_notFull_b = pipe4inst_FULL_N ;
  assign stage4_tx_min_enq_rdy_b = pipe4_FULL_N ;
  assign stage4_tx_min_notFull_b = pipe4_FULL_N ;
  assign stage4_EN_memory_response_put = EN_memory_response_put ;

  // submodule stage5
  assign stage5_ma_clint_msip_intrpt = ma_clint_msip_intrpt ;
  assign stage5_ma_clint_mtime_c_mtime = ma_clint_mtime_c_mtime ;
  assign stage5_ma_clint_mtip_intrpt = ma_clint_mtip_intrpt ;
  assign stage5_ma_debug_access_csrs_cmd = ma_debug_access_csrs_cmd ;
  assign stage5_ma_debug_halt_request_ip = ma_debug_halt_request_ip ;
  assign stage5_ma_debug_resume_request_ip = ma_debug_resume_request_ip ;
  assign stage5_ma_events_grp4_e =
	     { wr_dtlb_counters_whas_AND_wr_dtlb_counters_wge_ETC___d33,
	       stage3_mv_count_exestalls,
	       stage3_mv_count_rawstalls,
	       stage3_mv_count_muldiv,
	       stage3_mv_count_floats,
	       stage3_mv_count_branches,
	       stage3_mv_count_jumps,
	       stage5_mv_count_csrops,
	       stage5_mv_count_interrupts,
	       stage5_mv_count_exceptions,
	       stage3_flush_from_exe_fst && !stage5_flush_fst } ;
  assign stage5_ma_events_grp5_e = stage5_ma_events_grp4_e ;
  assign stage5_ma_events_grp6_e = stage5_ma_events_grp4_e ;
  assign stage5_ma_events_grp7_e = stage5_ma_events_grp4_e ;
  assign stage5_ma_set_external_interrupt_ex_i =
	     ma_set_external_interrupt_ex_i ;
  assign stage5_rx_in_first_deq_rdy_b = pipe4_EMPTY_N ;
  assign stage5_rx_in_first_x = pipe4_D_OUT ;
  assign stage5_rx_in_notEmpty_b = pipe4_EMPTY_N ;
  assign stage5_rx_inst_first_deq_rdy_b = pipe4inst_EMPTY_N ;
  assign stage5_rx_inst_first_x = pipe4inst_D_OUT ;
  assign stage5_rx_inst_notEmpty_b = pipe4inst_EMPTY_N ;
  assign stage5_store_is_cached_c = store_is_cached_c ;
  assign stage5_write_resp_r = write_resp_r ;
  assign stage5_EN_ma_clint_msip = EN_ma_clint_msip ;
  assign stage5_EN_ma_clint_mtip = EN_ma_clint_mtip ;
  assign stage5_EN_ma_clint_mtime = EN_ma_clint_mtime ;
  assign stage5_EN_dump_get = EN_dump_get ;
  assign stage5_EN_ma_set_external_interrupt = EN_ma_set_external_interrupt ;
  assign stage5_EN_write_resp = EN_write_resp ;
  assign stage5_EN_ma_debug_access_csrs = EN_ma_debug_access_csrs ;
  assign stage5_EN_ma_debug_halt_request = EN_ma_debug_halt_request ;
  assign stage5_EN_ma_debug_resume_request = EN_ma_debug_resume_request ;
  assign stage5_EN_ma_events_grp4 = 1'd1 ;
  assign stage5_EN_ma_events_grp5 = 1'd1 ;
  assign stage5_EN_ma_events_grp6 = 1'd1 ;
  assign stage5_EN_ma_events_grp7 = 1'd1 ;

  // remaining internal signals
  assign IF_wr_dcache_counters_whas_THEN_wr_dcache_coun_ETC___d10 =
	     EN_ma_dcache_counters ? ma_dcache_counters_i : 13'd0 ;
  assign NOT_IF_pipe4_first__85_BITS_136_TO_135_44_EQ_2_ETC___d259 =
	     (rd__h11816 != 5'd0 ||
	      ((pipe4_D_OUT[136:135] == 2'd2) ?
		 pipe4_D_OUT[1] :
		 pipe4_D_OUT[136:135] != 2'd1)) &&
	     pipe4_D_OUT[0] == rg_wEpoch ;
  assign _theResult___fst__h11915 =
	     (pipe4_D_OUT[136:135] == 2'd1) ? pipe4_D_OUT[5:1] : 5'd0 ;
  assign _theResult___snd_snd_snd__h12015 =
	     (pipe4_D_OUT[136:135] == 2'd1) ? pipe4_D_OUT[69:6] : 64'd0 ;
  assign fl_pc__h11261 =
	     stage5_flush_fst ?
	       stage5_flush_snd_fst :
	       stage3_flush_from_exe_snd ;
  assign lv_count_dtlb_misses__h3072 =
	     EN_ma_dtlb_counters && ma_dtlb_counters_i ;
  assign lv_count_itlb_misses__h3071 =
	     EN_ma_itlb_counters && ma_itlb_counters_i ;
  assign wr_dtlb_counters_whas_AND_wr_dtlb_counters_wge_ETC___d33 =
	     { lv_count_dtlb_misses__h3072,
	       lv_count_itlb_misses__h3071,
	       IF_wr_dcache_counters_whas_THEN_wr_dcache_coun_ETC___d10[0],
	       IF_wr_dcache_counters_whas_THEN_wr_dcache_coun_ETC___d10[1],
	       IF_wr_dcache_counters_whas_THEN_wr_dcache_coun_ETC___d10[2],
	       IF_wr_dcache_counters_whas_THEN_wr_dcache_coun_ETC___d10[3],
	       IF_wr_dcache_counters_whas_THEN_wr_dcache_coun_ETC___d10[4],
	       IF_wr_dcache_counters_whas_THEN_wr_dcache_coun_ETC___d10[5],
	       IF_wr_dcache_counters_whas_THEN_wr_dcache_coun_ETC___d10[6],
	       IF_wr_dcache_counters_whas_THEN_wr_dcache_coun_ETC___d10[7],
	       IF_wr_dcache_counters_whas_THEN_wr_dcache_coun_ETC___d10[8],
	       IF_wr_dcache_counters_whas_THEN_wr_dcache_coun_ETC___d10[9],
	       IF_wr_dcache_counters_whas_THEN_wr_dcache_coun_ETC___d10[10],
	       IF_wr_dcache_counters_whas_THEN_wr_dcache_coun_ETC___d10[11],
	       IF_wr_dcache_counters_whas_THEN_wr_dcache_coun_ETC___d10[12],
	       EN_ma_icache_counters ? ma_icache_counters_i : 5'd0 } ;
  always@(pipe4_D_OUT)
  begin
    case (pipe4_D_OUT[136:135])
      2'd1: rd__h11816 = pipe4_D_OUT[5:1];
      2'd2: rd__h11816 = pipe4_D_OUT[11:7];
      default: rd__h11816 = 5'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_wEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_wEpoch_EN) rg_wEpoch <= `BSV_ASSIGNMENT_DELAY rg_wEpoch_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_wEpoch = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkriscv

