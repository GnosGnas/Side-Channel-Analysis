//
// Generated by Bluespec Compiler, version 2021.07-1-gaf77efcd (build af77efcd)
//
// On Tue Dec  7 06:53:55 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_core_req_put               O     1
// core_resp_get                  O    72
// RDY_core_resp_get              O     1
// storebuffer_empty              O     1
// RDY_storebuffer_empty          O     1 const
// RDY_perform_store              O     1 reg
// write_mem_req_rd               O   555 reg
// RDY_write_mem_req_rd           O     1 reg
// RDY_write_mem_req_deq          O     1 reg
// RDY_cache_enable               O     1 const
// read_mem_req_get               O    43 reg
// RDY_read_mem_req_get           O     1 reg
// RDY_read_mem_resp_put          O     1
// cacheable_store                O     1
// RDY_cacheable_store            O     1 const
// cache_available                O     1
// RDY_cache_available            O     1 const
// nc_read_req_get                O    43 reg
// RDY_nc_read_req_get            O     1 reg
// RDY_nc_read_resp_put           O     1
// nc_write_req_get               O   107 reg
// RDY_nc_write_req_get           O     1 reg
// RDY_write_mem_resp_put         O     1
// ptw_resp_get                   O    72
// RDY_ptw_resp_get               O     1
// req_to_ptw_get                 O    66 reg
// RDY_req_to_ptw_get             O     1 reg
// RDY_resp_from_ptw_put          O     1
// RDY_ma_satp_from_csr           O     1 const
// RDY_ma_curr_priv               O     1 const
// RDY_ma_mstatus_from_csr        O     1 const
// hold_req_get                   O   141
// RDY_hold_req_get               O     1
// mv_dcache_perf_counters        O    13
// RDY_mv_dcache_perf_counters    O     1 const
// mv_dtlb_perf_counters          O     1
// RDY_mv_dtlb_perf_counters      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// core_req_put                   I   143
// perform_store_currepoch        I     1
// cache_enable_c                 I     1
// read_mem_resp_put              I    66
// nc_read_resp_put               I    66
// write_mem_resp_put             I     1
// resp_from_ptw_put              I    63
// ma_satp_from_csr_s             I    64
// ma_curr_priv_c                 I     2
// ma_mstatus_from_csr_m          I    64
// EN_core_req_put                I     1
// EN_perform_store               I     1
// EN_write_mem_req_deq           I     1
// EN_cache_enable                I     1
// EN_read_mem_resp_put           I     1
// EN_nc_read_resp_put            I     1
// EN_write_mem_resp_put          I     1
// EN_resp_from_ptw_put           I     1
// EN_ma_satp_from_csr            I     1
// EN_ma_curr_priv                I     1
// EN_ma_mstatus_from_csr         I     1
// EN_core_resp_get               I     1
// EN_read_mem_req_get            I     1
// EN_nc_read_req_get             I     1
// EN_nc_write_req_get            I     1
// EN_ptw_resp_get                I     1
// EN_req_to_ptw_get              I     1
// EN_hold_req_get                I     1
//
// Combinational paths from inputs to outputs:
//   (core_req_put,
//    perform_store_currepoch,
//    cache_enable_c,
//    nc_read_resp_put,
//    ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_core_req_put,
//    EN_perform_store,
//    EN_cache_enable,
//    EN_nc_read_resp_put,
//    EN_ma_satp_from_csr,
//    EN_ma_curr_priv,
//    EN_ma_mstatus_from_csr) -> mv_dcache_perf_counters
//   (core_req_put,
//    ma_satp_from_csr_s,
//    ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_core_req_put,
//    EN_ma_satp_from_csr,
//    EN_ma_curr_priv,
//    EN_ma_mstatus_from_csr) -> mv_dtlb_perf_counters
//   (cache_enable_c,
//    nc_read_resp_put,
//    ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_cache_enable,
//    EN_nc_read_resp_put,
//    EN_ma_curr_priv,
//    EN_ma_mstatus_from_csr) -> RDY_core_resp_get
//   (cache_enable_c,
//    nc_read_resp_put,
//    ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_cache_enable,
//    EN_nc_read_resp_put,
//    EN_ma_curr_priv,
//    EN_ma_mstatus_from_csr) -> RDY_ptw_resp_get
//   (cache_enable_c,
//    nc_read_resp_put,
//    ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_cache_enable,
//    EN_nc_read_resp_put,
//    EN_ma_curr_priv,
//    EN_ma_mstatus_from_csr) -> RDY_hold_req_get
//   (cache_enable_c,
//    nc_read_resp_put,
//    ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_cache_enable,
//    EN_nc_read_resp_put,
//    EN_ma_curr_priv,
//    EN_ma_mstatus_from_csr) -> core_resp_get
//   (cache_enable_c,
//    nc_read_resp_put,
//    ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_cache_enable,
//    EN_nc_read_resp_put,
//    EN_ma_curr_priv,
//    EN_ma_mstatus_from_csr) -> ptw_resp_get
//   (cache_enable_c,
//    nc_read_resp_put,
//    ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_cache_enable,
//    EN_nc_read_resp_put,
//    EN_ma_curr_priv,
//    EN_ma_mstatus_from_csr) -> hold_req_get
//   (EN_ma_satp_from_csr,
//    EN_ma_curr_priv,
//    EN_ma_mstatus_from_csr) -> RDY_core_req_put
//   EN_ma_satp_from_csr -> RDY_resp_from_ptw_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkdmem(CLK,
	      RST_N,

	      core_req_put,
	      EN_core_req_put,
	      RDY_core_req_put,

	      EN_core_resp_get,
	      core_resp_get,
	      RDY_core_resp_get,

	      storebuffer_empty,
	      RDY_storebuffer_empty,

	      perform_store_currepoch,
	      EN_perform_store,
	      RDY_perform_store,

	      write_mem_req_rd,
	      RDY_write_mem_req_rd,

	      EN_write_mem_req_deq,
	      RDY_write_mem_req_deq,

	      cache_enable_c,
	      EN_cache_enable,
	      RDY_cache_enable,

	      EN_read_mem_req_get,
	      read_mem_req_get,
	      RDY_read_mem_req_get,

	      read_mem_resp_put,
	      EN_read_mem_resp_put,
	      RDY_read_mem_resp_put,

	      cacheable_store,
	      RDY_cacheable_store,

	      cache_available,
	      RDY_cache_available,

	      EN_nc_read_req_get,
	      nc_read_req_get,
	      RDY_nc_read_req_get,

	      nc_read_resp_put,
	      EN_nc_read_resp_put,
	      RDY_nc_read_resp_put,

	      EN_nc_write_req_get,
	      nc_write_req_get,
	      RDY_nc_write_req_get,

	      write_mem_resp_put,
	      EN_write_mem_resp_put,
	      RDY_write_mem_resp_put,

	      EN_ptw_resp_get,
	      ptw_resp_get,
	      RDY_ptw_resp_get,

	      EN_req_to_ptw_get,
	      req_to_ptw_get,
	      RDY_req_to_ptw_get,

	      resp_from_ptw_put,
	      EN_resp_from_ptw_put,
	      RDY_resp_from_ptw_put,

	      ma_satp_from_csr_s,
	      EN_ma_satp_from_csr,
	      RDY_ma_satp_from_csr,

	      ma_curr_priv_c,
	      EN_ma_curr_priv,
	      RDY_ma_curr_priv,

	      ma_mstatus_from_csr_m,
	      EN_ma_mstatus_from_csr,
	      RDY_ma_mstatus_from_csr,

	      EN_hold_req_get,
	      hold_req_get,
	      RDY_hold_req_get,

	      mv_dcache_perf_counters,
	      RDY_mv_dcache_perf_counters,

	      mv_dtlb_perf_counters,
	      RDY_mv_dtlb_perf_counters);
  input  CLK;
  input  RST_N;

  // action method core_req_put
  input  [142 : 0] core_req_put;
  input  EN_core_req_put;
  output RDY_core_req_put;

  // actionvalue method core_resp_get
  input  EN_core_resp_get;
  output [71 : 0] core_resp_get;
  output RDY_core_resp_get;

  // value method storebuffer_empty
  output storebuffer_empty;
  output RDY_storebuffer_empty;

  // action method perform_store
  input  perform_store_currepoch;
  input  EN_perform_store;
  output RDY_perform_store;

  // value method write_mem_req_rd
  output [554 : 0] write_mem_req_rd;
  output RDY_write_mem_req_rd;

  // action method write_mem_req_deq
  input  EN_write_mem_req_deq;
  output RDY_write_mem_req_deq;

  // action method cache_enable
  input  cache_enable_c;
  input  EN_cache_enable;
  output RDY_cache_enable;

  // actionvalue method read_mem_req_get
  input  EN_read_mem_req_get;
  output [42 : 0] read_mem_req_get;
  output RDY_read_mem_req_get;

  // action method read_mem_resp_put
  input  [65 : 0] read_mem_resp_put;
  input  EN_read_mem_resp_put;
  output RDY_read_mem_resp_put;

  // value method cacheable_store
  output cacheable_store;
  output RDY_cacheable_store;

  // value method cache_available
  output cache_available;
  output RDY_cache_available;

  // actionvalue method nc_read_req_get
  input  EN_nc_read_req_get;
  output [42 : 0] nc_read_req_get;
  output RDY_nc_read_req_get;

  // action method nc_read_resp_put
  input  [65 : 0] nc_read_resp_put;
  input  EN_nc_read_resp_put;
  output RDY_nc_read_resp_put;

  // actionvalue method nc_write_req_get
  input  EN_nc_write_req_get;
  output [106 : 0] nc_write_req_get;
  output RDY_nc_write_req_get;

  // action method write_mem_resp_put
  input  write_mem_resp_put;
  input  EN_write_mem_resp_put;
  output RDY_write_mem_resp_put;

  // actionvalue method ptw_resp_get
  input  EN_ptw_resp_get;
  output [71 : 0] ptw_resp_get;
  output RDY_ptw_resp_get;

  // actionvalue method req_to_ptw_get
  input  EN_req_to_ptw_get;
  output [65 : 0] req_to_ptw_get;
  output RDY_req_to_ptw_get;

  // action method resp_from_ptw_put
  input  [62 : 0] resp_from_ptw_put;
  input  EN_resp_from_ptw_put;
  output RDY_resp_from_ptw_put;

  // action method ma_satp_from_csr
  input  [63 : 0] ma_satp_from_csr_s;
  input  EN_ma_satp_from_csr;
  output RDY_ma_satp_from_csr;

  // action method ma_curr_priv
  input  [1 : 0] ma_curr_priv_c;
  input  EN_ma_curr_priv;
  output RDY_ma_curr_priv;

  // action method ma_mstatus_from_csr
  input  [63 : 0] ma_mstatus_from_csr_m;
  input  EN_ma_mstatus_from_csr;
  output RDY_ma_mstatus_from_csr;

  // actionvalue method hold_req_get
  input  EN_hold_req_get;
  output [140 : 0] hold_req_get;
  output RDY_hold_req_get;

  // value method mv_dcache_perf_counters
  output [12 : 0] mv_dcache_perf_counters;
  output RDY_mv_dcache_perf_counters;

  // value method mv_dtlb_perf_counters
  output mv_dtlb_perf_counters;
  output RDY_mv_dtlb_perf_counters;

  // signals for module outputs
  wire [554 : 0] write_mem_req_rd;
  wire [140 : 0] hold_req_get;
  wire [106 : 0] nc_write_req_get;
  wire [71 : 0] core_resp_get, ptw_resp_get;
  wire [65 : 0] req_to_ptw_get;
  wire [42 : 0] nc_read_req_get, read_mem_req_get;
  wire [12 : 0] mv_dcache_perf_counters;
  wire RDY_cache_available,
       RDY_cache_enable,
       RDY_cacheable_store,
       RDY_core_req_put,
       RDY_core_resp_get,
       RDY_hold_req_get,
       RDY_ma_curr_priv,
       RDY_ma_mstatus_from_csr,
       RDY_ma_satp_from_csr,
       RDY_mv_dcache_perf_counters,
       RDY_mv_dtlb_perf_counters,
       RDY_nc_read_req_get,
       RDY_nc_read_resp_put,
       RDY_nc_write_req_get,
       RDY_perform_store,
       RDY_ptw_resp_get,
       RDY_read_mem_req_get,
       RDY_read_mem_resp_put,
       RDY_req_to_ptw_get,
       RDY_resp_from_ptw_put,
       RDY_storebuffer_empty,
       RDY_write_mem_req_deq,
       RDY_write_mem_req_rd,
       RDY_write_mem_resp_put,
       cache_available,
       cacheable_store,
       mv_dtlb_perf_counters,
       storebuffer_empty;

  // ports of submodule dcache
  wire [554 : 0] dcache_write_mem_req_rd;
  wire [140 : 0] dcache_core_req_put, dcache_hold_req_get;
  wire [106 : 0] dcache_nc_write_req_get;
  wire [71 : 0] dcache_core_resp_get, dcache_ptw_resp_get;
  wire [65 : 0] dcache_nc_read_resp_put, dcache_read_mem_resp_put;
  wire [42 : 0] dcache_nc_read_req_get, dcache_read_mem_req_get;
  wire [39 : 0] dcache_pa_from_tlb_put;
  wire [12 : 0] dcache_perf_counters;
  wire dcache_EN_cache_enable,
       dcache_EN_core_req_put,
       dcache_EN_core_resp_get,
       dcache_EN_hold_req_get,
       dcache_EN_nc_read_req_get,
       dcache_EN_nc_read_resp_put,
       dcache_EN_nc_write_req_get,
       dcache_EN_pa_from_tlb_put,
       dcache_EN_perform_store,
       dcache_EN_ptw_resp_get,
       dcache_EN_read_mem_req_get,
       dcache_EN_read_mem_resp_put,
       dcache_EN_write_mem_req_deq,
       dcache_EN_write_mem_resp_put,
       dcache_RDY_core_req_put,
       dcache_RDY_core_resp_get,
       dcache_RDY_hold_req_get,
       dcache_RDY_nc_read_req_get,
       dcache_RDY_nc_read_resp_put,
       dcache_RDY_nc_write_req_get,
       dcache_RDY_pa_from_tlb_put,
       dcache_RDY_perform_store,
       dcache_RDY_ptw_resp_get,
       dcache_RDY_read_mem_req_get,
       dcache_RDY_read_mem_resp_put,
       dcache_RDY_write_mem_req_deq,
       dcache_RDY_write_mem_req_rd,
       dcache_RDY_write_mem_resp_put,
       dcache_cache_available,
       dcache_cache_enable_c,
       dcache_cacheable_store,
       dcache_perform_store_currepoch,
       dcache_storebuffer_empty,
       dcache_write_mem_resp_put;

  // ports of submodule dtlb
  wire [74 : 0] dtlb_core_request_put;
  wire [65 : 0] dtlb_request_to_ptw_get;
  wire [63 : 0] dtlb_ma_mstatus_from_csr_m, dtlb_ma_satp_from_csr_s;
  wire [62 : 0] dtlb_response_frm_ptw_put;
  wire [39 : 0] dtlb_core_response_get;
  wire [1 : 0] dtlb_ma_curr_priv_c;
  wire dtlb_EN_core_request_put,
       dtlb_EN_core_response_get,
       dtlb_EN_ma_curr_priv,
       dtlb_EN_ma_mstatus_from_csr,
       dtlb_EN_ma_satp_from_csr,
       dtlb_EN_request_to_ptw_get,
       dtlb_EN_response_frm_ptw_put,
       dtlb_RDY_core_request_put,
       dtlb_RDY_core_response_get,
       dtlb_RDY_request_to_ptw_get,
       dtlb_RDY_response_frm_ptw_put,
       dtlb_mv_perf_counters,
       dtlb_mv_tlb_available;

  // rule scheduling signals
  wire CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_cache_enable,
       CAN_FIRE_core_req_put,
       CAN_FIRE_core_resp_get,
       CAN_FIRE_hold_req_get,
       CAN_FIRE_ma_curr_priv,
       CAN_FIRE_ma_mstatus_from_csr,
       CAN_FIRE_ma_satp_from_csr,
       CAN_FIRE_nc_read_req_get,
       CAN_FIRE_nc_read_resp_put,
       CAN_FIRE_nc_write_req_get,
       CAN_FIRE_perform_store,
       CAN_FIRE_ptw_resp_get,
       CAN_FIRE_read_mem_req_get,
       CAN_FIRE_read_mem_resp_put,
       CAN_FIRE_req_to_ptw_get,
       CAN_FIRE_resp_from_ptw_put,
       CAN_FIRE_write_mem_req_deq,
       CAN_FIRE_write_mem_resp_put,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_cache_enable,
       WILL_FIRE_core_req_put,
       WILL_FIRE_core_resp_get,
       WILL_FIRE_hold_req_get,
       WILL_FIRE_ma_curr_priv,
       WILL_FIRE_ma_mstatus_from_csr,
       WILL_FIRE_ma_satp_from_csr,
       WILL_FIRE_nc_read_req_get,
       WILL_FIRE_nc_read_resp_put,
       WILL_FIRE_nc_write_req_get,
       WILL_FIRE_perform_store,
       WILL_FIRE_ptw_resp_get,
       WILL_FIRE_read_mem_req_get,
       WILL_FIRE_read_mem_resp_put,
       WILL_FIRE_req_to_ptw_get,
       WILL_FIRE_resp_from_ptw_put,
       WILL_FIRE_write_mem_req_deq,
       WILL_FIRE_write_mem_resp_put;

  // action method core_req_put
  assign RDY_core_req_put =
	     dcache_RDY_core_req_put && dtlb_RDY_core_request_put ;
  assign CAN_FIRE_core_req_put =
	     dcache_RDY_core_req_put && dtlb_RDY_core_request_put ;
  assign WILL_FIRE_core_req_put = EN_core_req_put ;

  // actionvalue method core_resp_get
  assign core_resp_get = dcache_core_resp_get ;
  assign RDY_core_resp_get = dcache_RDY_core_resp_get ;
  assign CAN_FIRE_core_resp_get = dcache_RDY_core_resp_get ;
  assign WILL_FIRE_core_resp_get = EN_core_resp_get ;

  // value method storebuffer_empty
  assign storebuffer_empty = dcache_storebuffer_empty ;
  assign RDY_storebuffer_empty = 1'd1 ;

  // action method perform_store
  assign RDY_perform_store = dcache_RDY_perform_store ;
  assign CAN_FIRE_perform_store = dcache_RDY_perform_store ;
  assign WILL_FIRE_perform_store = EN_perform_store ;

  // value method write_mem_req_rd
  assign write_mem_req_rd = dcache_write_mem_req_rd ;
  assign RDY_write_mem_req_rd = dcache_RDY_write_mem_req_rd ;

  // action method write_mem_req_deq
  assign RDY_write_mem_req_deq = dcache_RDY_write_mem_req_deq ;
  assign CAN_FIRE_write_mem_req_deq = dcache_RDY_write_mem_req_deq ;
  assign WILL_FIRE_write_mem_req_deq = EN_write_mem_req_deq ;

  // action method cache_enable
  assign RDY_cache_enable = 1'd1 ;
  assign CAN_FIRE_cache_enable = 1'd1 ;
  assign WILL_FIRE_cache_enable = EN_cache_enable ;

  // actionvalue method read_mem_req_get
  assign read_mem_req_get = dcache_read_mem_req_get ;
  assign RDY_read_mem_req_get = dcache_RDY_read_mem_req_get ;
  assign CAN_FIRE_read_mem_req_get = dcache_RDY_read_mem_req_get ;
  assign WILL_FIRE_read_mem_req_get = EN_read_mem_req_get ;

  // action method read_mem_resp_put
  assign RDY_read_mem_resp_put = dcache_RDY_read_mem_resp_put ;
  assign CAN_FIRE_read_mem_resp_put = dcache_RDY_read_mem_resp_put ;
  assign WILL_FIRE_read_mem_resp_put = EN_read_mem_resp_put ;

  // value method cacheable_store
  assign cacheable_store = dcache_cacheable_store ;
  assign RDY_cacheable_store = 1'd1 ;

  // value method cache_available
  assign cache_available = dcache_cache_available && dtlb_mv_tlb_available ;
  assign RDY_cache_available = 1'd1 ;

  // actionvalue method nc_read_req_get
  assign nc_read_req_get = dcache_nc_read_req_get ;
  assign RDY_nc_read_req_get = dcache_RDY_nc_read_req_get ;
  assign CAN_FIRE_nc_read_req_get = dcache_RDY_nc_read_req_get ;
  assign WILL_FIRE_nc_read_req_get = EN_nc_read_req_get ;

  // action method nc_read_resp_put
  assign RDY_nc_read_resp_put = dcache_RDY_nc_read_resp_put ;
  assign CAN_FIRE_nc_read_resp_put = dcache_RDY_nc_read_resp_put ;
  assign WILL_FIRE_nc_read_resp_put = EN_nc_read_resp_put ;

  // actionvalue method nc_write_req_get
  assign nc_write_req_get = dcache_nc_write_req_get ;
  assign RDY_nc_write_req_get = dcache_RDY_nc_write_req_get ;
  assign CAN_FIRE_nc_write_req_get = dcache_RDY_nc_write_req_get ;
  assign WILL_FIRE_nc_write_req_get = EN_nc_write_req_get ;

  // action method write_mem_resp_put
  assign RDY_write_mem_resp_put = dcache_RDY_write_mem_resp_put ;
  assign CAN_FIRE_write_mem_resp_put = dcache_RDY_write_mem_resp_put ;
  assign WILL_FIRE_write_mem_resp_put = EN_write_mem_resp_put ;

  // actionvalue method ptw_resp_get
  assign ptw_resp_get = dcache_ptw_resp_get ;
  assign RDY_ptw_resp_get = dcache_RDY_ptw_resp_get ;
  assign CAN_FIRE_ptw_resp_get = dcache_RDY_ptw_resp_get ;
  assign WILL_FIRE_ptw_resp_get = EN_ptw_resp_get ;

  // actionvalue method req_to_ptw_get
  assign req_to_ptw_get = dtlb_request_to_ptw_get ;
  assign RDY_req_to_ptw_get = dtlb_RDY_request_to_ptw_get ;
  assign CAN_FIRE_req_to_ptw_get = dtlb_RDY_request_to_ptw_get ;
  assign WILL_FIRE_req_to_ptw_get = EN_req_to_ptw_get ;

  // action method resp_from_ptw_put
  assign RDY_resp_from_ptw_put = dtlb_RDY_response_frm_ptw_put ;
  assign CAN_FIRE_resp_from_ptw_put = dtlb_RDY_response_frm_ptw_put ;
  assign WILL_FIRE_resp_from_ptw_put = EN_resp_from_ptw_put ;

  // action method ma_satp_from_csr
  assign RDY_ma_satp_from_csr = 1'd1 ;
  assign CAN_FIRE_ma_satp_from_csr = 1'd1 ;
  assign WILL_FIRE_ma_satp_from_csr = EN_ma_satp_from_csr ;

  // action method ma_curr_priv
  assign RDY_ma_curr_priv = 1'd1 ;
  assign CAN_FIRE_ma_curr_priv = 1'd1 ;
  assign WILL_FIRE_ma_curr_priv = EN_ma_curr_priv ;

  // action method ma_mstatus_from_csr
  assign RDY_ma_mstatus_from_csr = 1'd1 ;
  assign CAN_FIRE_ma_mstatus_from_csr = 1'd1 ;
  assign WILL_FIRE_ma_mstatus_from_csr = EN_ma_mstatus_from_csr ;

  // actionvalue method hold_req_get
  assign hold_req_get = dcache_hold_req_get ;
  assign RDY_hold_req_get = dcache_RDY_hold_req_get ;
  assign CAN_FIRE_hold_req_get = dcache_RDY_hold_req_get ;
  assign WILL_FIRE_hold_req_get = EN_hold_req_get ;

  // value method mv_dcache_perf_counters
  assign mv_dcache_perf_counters = dcache_perf_counters ;
  assign RDY_mv_dcache_perf_counters = 1'd1 ;

  // value method mv_dtlb_perf_counters
  assign mv_dtlb_perf_counters = dtlb_mv_perf_counters ;
  assign RDY_mv_dtlb_perf_counters = 1'd1 ;

  // submodule dcache
  mkdcache dcache(.CLK(CLK),
		  .RST_N(RST_N),
		  .cache_enable_c(dcache_cache_enable_c),
		  .core_req_put(dcache_core_req_put),
		  .nc_read_resp_put(dcache_nc_read_resp_put),
		  .pa_from_tlb_put(dcache_pa_from_tlb_put),
		  .perform_store_currepoch(dcache_perform_store_currepoch),
		  .read_mem_resp_put(dcache_read_mem_resp_put),
		  .write_mem_resp_put(dcache_write_mem_resp_put),
		  .EN_core_req_put(dcache_EN_core_req_put),
		  .EN_core_resp_get(dcache_EN_core_resp_get),
		  .EN_ptw_resp_get(dcache_EN_ptw_resp_get),
		  .EN_read_mem_req_get(dcache_EN_read_mem_req_get),
		  .EN_read_mem_resp_put(dcache_EN_read_mem_resp_put),
		  .EN_nc_read_req_get(dcache_EN_nc_read_req_get),
		  .EN_nc_read_resp_put(dcache_EN_nc_read_resp_put),
		  .EN_pa_from_tlb_put(dcache_EN_pa_from_tlb_put),
		  .EN_write_mem_req_deq(dcache_EN_write_mem_req_deq),
		  .EN_write_mem_resp_put(dcache_EN_write_mem_resp_put),
		  .EN_nc_write_req_get(dcache_EN_nc_write_req_get),
		  .EN_cache_enable(dcache_EN_cache_enable),
		  .EN_perform_store(dcache_EN_perform_store),
		  .EN_hold_req_get(dcache_EN_hold_req_get),
		  .RDY_core_req_put(dcache_RDY_core_req_put),
		  .core_resp_get(dcache_core_resp_get),
		  .RDY_core_resp_get(dcache_RDY_core_resp_get),
		  .ptw_resp_get(dcache_ptw_resp_get),
		  .RDY_ptw_resp_get(dcache_RDY_ptw_resp_get),
		  .read_mem_req_get(dcache_read_mem_req_get),
		  .RDY_read_mem_req_get(dcache_RDY_read_mem_req_get),
		  .RDY_read_mem_resp_put(dcache_RDY_read_mem_resp_put),
		  .nc_read_req_get(dcache_nc_read_req_get),
		  .RDY_nc_read_req_get(dcache_RDY_nc_read_req_get),
		  .RDY_nc_read_resp_put(dcache_RDY_nc_read_resp_put),
		  .RDY_pa_from_tlb_put(dcache_RDY_pa_from_tlb_put),
		  .write_mem_req_rd(dcache_write_mem_req_rd),
		  .RDY_write_mem_req_rd(dcache_RDY_write_mem_req_rd),
		  .RDY_write_mem_req_deq(dcache_RDY_write_mem_req_deq),
		  .RDY_write_mem_resp_put(dcache_RDY_write_mem_resp_put),
		  .nc_write_req_get(dcache_nc_write_req_get),
		  .RDY_nc_write_req_get(dcache_RDY_nc_write_req_get),
		  .perf_counters(dcache_perf_counters),
		  .RDY_perf_counters(),
		  .RDY_cache_enable(),
		  .RDY_perform_store(dcache_RDY_perform_store),
		  .cacheable_store(dcache_cacheable_store),
		  .RDY_cacheable_store(),
		  .cache_available(dcache_cache_available),
		  .RDY_cache_available(),
		  .storebuffer_empty(dcache_storebuffer_empty),
		  .RDY_storebuffer_empty(),
		  .hold_req_get(dcache_hold_req_get),
		  .RDY_hold_req_get(dcache_RDY_hold_req_get));

  // submodule dtlb
  mkfa_dtlb #(.hartid(64'd0)) dtlb(.CLK(CLK),
				   .RST_N(RST_N),
				   .core_request_put(dtlb_core_request_put),
				   .ma_curr_priv_c(dtlb_ma_curr_priv_c),
				   .ma_mstatus_from_csr_m(dtlb_ma_mstatus_from_csr_m),
				   .ma_satp_from_csr_s(dtlb_ma_satp_from_csr_s),
				   .response_frm_ptw_put(dtlb_response_frm_ptw_put),
				   .EN_core_request_put(dtlb_EN_core_request_put),
				   .EN_core_response_get(dtlb_EN_core_response_get),
				   .EN_request_to_ptw_get(dtlb_EN_request_to_ptw_get),
				   .EN_response_frm_ptw_put(dtlb_EN_response_frm_ptw_put),
				   .EN_ma_satp_from_csr(dtlb_EN_ma_satp_from_csr),
				   .EN_ma_curr_priv(dtlb_EN_ma_curr_priv),
				   .EN_ma_mstatus_from_csr(dtlb_EN_ma_mstatus_from_csr),
				   .RDY_core_request_put(dtlb_RDY_core_request_put),
				   .core_response_get(dtlb_core_response_get),
				   .RDY_core_response_get(dtlb_RDY_core_response_get),
				   .request_to_ptw_get(dtlb_request_to_ptw_get),
				   .RDY_request_to_ptw_get(dtlb_RDY_request_to_ptw_get),
				   .RDY_response_frm_ptw_put(dtlb_RDY_response_frm_ptw_put),
				   .RDY_ma_satp_from_csr(),
				   .RDY_ma_curr_priv(),
				   .RDY_ma_mstatus_from_csr(),
				   .mv_tlb_available(dtlb_mv_tlb_available),
				   .RDY_mv_tlb_available(),
				   .mv_perf_counters(dtlb_mv_perf_counters),
				   .RDY_mv_perf_counters());

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut = WILL_FIRE_RL_mkConnectionGetPut ;
  assign WILL_FIRE_RL_mkConnectionGetPut =
	     dtlb_RDY_core_response_get && dcache_RDY_pa_from_tlb_put ;

  // submodule dcache
  assign dcache_cache_enable_c = cache_enable_c ;
  assign dcache_core_req_put =
	     { core_req_put[142:79],
	       core_req_put[74],
	       core_req_put[78],
	       core_req_put[73:72],
	       core_req_put[77:75],
	       core_req_put[71:3],
	       core_req_put[1] } ;
  assign dcache_nc_read_resp_put = nc_read_resp_put ;
  assign dcache_pa_from_tlb_put = dtlb_core_response_get ;
  assign dcache_perform_store_currepoch = perform_store_currepoch ;
  assign dcache_read_mem_resp_put = read_mem_resp_put ;
  assign dcache_write_mem_resp_put = write_mem_resp_put ;
  assign dcache_EN_core_req_put =
	     EN_core_req_put && (core_req_put[1] || !core_req_put[2]) ;
  assign dcache_EN_core_resp_get = EN_core_resp_get ;
  assign dcache_EN_ptw_resp_get = EN_ptw_resp_get ;
  assign dcache_EN_read_mem_req_get = EN_read_mem_req_get ;
  assign dcache_EN_read_mem_resp_put = EN_read_mem_resp_put ;
  assign dcache_EN_nc_read_req_get = EN_nc_read_req_get ;
  assign dcache_EN_nc_read_resp_put = EN_nc_read_resp_put ;
  assign dcache_EN_pa_from_tlb_put = WILL_FIRE_RL_mkConnectionGetPut ;
  assign dcache_EN_write_mem_req_deq = EN_write_mem_req_deq ;
  assign dcache_EN_write_mem_resp_put = EN_write_mem_resp_put ;
  assign dcache_EN_nc_write_req_get = EN_nc_write_req_get ;
  assign dcache_EN_cache_enable = EN_cache_enable ;
  assign dcache_EN_perform_store = EN_perform_store ;
  assign dcache_EN_hold_req_get = EN_hold_req_get ;

  // submodule dtlb
  assign dtlb_core_request_put =
	     { core_req_put[142:79],
	       core_req_put[73:72],
	       core_req_put[13:8],
	       core_req_put[0],
	       core_req_put[1],
	       core_req_put[2] } ;
  assign dtlb_ma_curr_priv_c = ma_curr_priv_c ;
  assign dtlb_ma_mstatus_from_csr_m = ma_mstatus_from_csr_m ;
  assign dtlb_ma_satp_from_csr_s = ma_satp_from_csr_s ;
  assign dtlb_response_frm_ptw_put = resp_from_ptw_put ;
  assign dtlb_EN_core_request_put = EN_core_req_put && !core_req_put[74] ;
  assign dtlb_EN_core_response_get = WILL_FIRE_RL_mkConnectionGetPut ;
  assign dtlb_EN_request_to_ptw_get = EN_req_to_ptw_get ;
  assign dtlb_EN_response_frm_ptw_put = EN_resp_from_ptw_put ;
  assign dtlb_EN_ma_satp_from_csr = EN_ma_satp_from_csr ;
  assign dtlb_EN_ma_curr_priv = EN_ma_curr_priv ;
  assign dtlb_EN_ma_mstatus_from_csr = EN_ma_mstatus_from_csr ;
endmodule  // mkdmem

