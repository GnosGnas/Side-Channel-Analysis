//
// Generated by Bluespec Compiler, version 2021.07-1-gaf77efcd (build af77efcd)
//
// On Thu Dec  9 08:47:35 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY__start                     O     1
// get_result                     O    70 reg
// RDY_get_result                 O     1 const
// RDY_flush                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start_operand1                I    64 reg
// _start_operand2                I    64 reg
// _start_operand3                I    64 reg
// _start_opcode                  I     4 reg
// _start_funct7                  I     7 reg
// _start_funct3                  I     3 reg
// _start_imm                     I     2 reg
// _start_issp                    I     1 reg
// EN__start                      I     1
// EN_flush                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfpu(CLK,
	     RST_N,

	     _start_operand1,
	     _start_operand2,
	     _start_operand3,
	     _start_opcode,
	     _start_funct7,
	     _start_funct3,
	     _start_imm,
	     _start_issp,
	     EN__start,
	     RDY__start,

	     get_result,
	     RDY_get_result,

	     EN_flush,
	     RDY_flush);
  input  CLK;
  input  RST_N;

  // action method _start
  input  [63 : 0] _start_operand1;
  input  [63 : 0] _start_operand2;
  input  [63 : 0] _start_operand3;
  input  [3 : 0] _start_opcode;
  input  [6 : 0] _start_funct7;
  input  [2 : 0] _start_funct3;
  input  [1 : 0] _start_imm;
  input  _start_issp;
  input  EN__start;
  output RDY__start;

  // value method get_result
  output [69 : 0] get_result;
  output RDY_get_result;

  // action method flush
  input  EN_flush;
  output RDY_flush;

  // signals for module outputs
  wire [69 : 0] get_result;
  wire RDY__start, RDY_flush, RDY_get_result;

  // inlined wires
  reg [171 : 0] inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget;
  reg [84 : 0] inst_spfpu_divider_int_div_wfn_divide_step_arg_wget;
  reg [69 : 0] rg_result_1_wget;
  wire [191 : 0] getMant64_arg_wget, setCanonicalNaN_arg_wget;
  wire [188 : 0] condFlags64_arg_wget;
  wire [155 : 0] getMant64_res_wget;
  wire [95 : 0] getMant32_arg_wget, setCanonicalNaN_res_wget;
  wire [92 : 0] condFlags32_arg_wget;
  wire [69 : 0] inst_dpfpu_sqrt_ff_final_out_1_wget;
  wire [68 : 0] getMant32_res_wget,
		inst_dpfm_add_sub_ff_final_out_wget,
		inst_dpfpu_divider_wr_final_out_wget;
  wire [67 : 0] inst_fpu_int_to_fp_fcvt_s_llu_arg_wget;
  wire [37 : 0] inst_spfpu_sqrt_ff_final_out_1_wget;
  wire [36 : 0] inst_spfm_add_sub_ff_final_out_wget,
		inst_spfpu_divider_wr_final_out_wget;
  wire [35 : 0] inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget;
  wire [32 : 0] getExp64_res_wget;
  wire [23 : 0] getExp32_res_wget;
  wire [14 : 0] condFlags32_res_wget, condFlags64_res_wget;
  wire inst_dpfpu_sqrt_ff_final_out_1_whas,
       inst_spfpu_sqrt_ff_final_out_1_whas,
       rg_result_1_whas;

  // register inst_dpfm_add_sub_ff_input_register
  reg [200 : 0] inst_dpfm_add_sub_ff_input_register;
  wire [200 : 0] inst_dpfm_add_sub_ff_input_register_D_IN;
  wire inst_dpfm_add_sub_ff_input_register_EN;

  // register inst_dpfm_add_sub_ff_stage2
  reg [203 : 0] inst_dpfm_add_sub_ff_stage2;
  wire [203 : 0] inst_dpfm_add_sub_ff_stage2_D_IN;
  wire inst_dpfm_add_sub_ff_stage2_EN;

  // register inst_dpfm_add_sub_ff_stage4
  reg [348 : 0] inst_dpfm_add_sub_ff_stage4;
  wire [348 : 0] inst_dpfm_add_sub_ff_stage4_D_IN;
  wire inst_dpfm_add_sub_ff_stage4_EN;

  // register inst_dpfm_add_sub_ff_stage5
  reg [196 : 0] inst_dpfm_add_sub_ff_stage5;
  wire [196 : 0] inst_dpfm_add_sub_ff_stage5_D_IN;
  wire inst_dpfm_add_sub_ff_stage5_EN;

  // register inst_dpfm_add_sub_rg_state_handler
  reg [2 : 0] inst_dpfm_add_sub_rg_state_handler;
  reg [2 : 0] inst_dpfm_add_sub_rg_state_handler_D_IN;
  wire inst_dpfm_add_sub_rg_state_handler_EN;

  // register inst_dpfpu_divider_int_div_rg_inter_stage
  reg [169 : 0] inst_dpfpu_divider_int_div_rg_inter_stage;
  wire [169 : 0] inst_dpfpu_divider_int_div_rg_inter_stage_D_IN;
  wire inst_dpfpu_divider_int_div_rg_inter_stage_EN;

  // register inst_dpfpu_divider_int_div_rg_state
  reg [5 : 0] inst_dpfpu_divider_int_div_rg_state;
  reg [5 : 0] inst_dpfpu_divider_int_div_rg_state_D_IN;
  wire inst_dpfpu_divider_int_div_rg_state_EN;

  // register inst_dpfpu_divider_rg_stage1
  reg [127 : 0] inst_dpfpu_divider_rg_stage1;
  wire [127 : 0] inst_dpfpu_divider_rg_stage1_D_IN;
  wire inst_dpfpu_divider_rg_stage1_EN;

  // register inst_dpfpu_divider_rg_stage2
  reg [21 : 0] inst_dpfpu_divider_rg_stage2;
  wire [21 : 0] inst_dpfpu_divider_rg_stage2_D_IN;
  wire inst_dpfpu_divider_rg_stage2_EN;

  // register inst_dpfpu_divider_rg_stage3
  reg [138 : 0] inst_dpfpu_divider_rg_stage3;
  wire [138 : 0] inst_dpfpu_divider_rg_stage3_D_IN;
  wire inst_dpfpu_divider_rg_stage3_EN;

  // register inst_dpfpu_divider_rg_state_handler
  reg [1 : 0] inst_dpfpu_divider_rg_state_handler;
  reg [1 : 0] inst_dpfpu_divider_rg_state_handler_D_IN;
  wire inst_dpfpu_divider_rg_state_handler_EN;

  // register inst_dpfpu_sqrt_ff_final_out
  reg [69 : 0] inst_dpfpu_sqrt_ff_final_out;
  wire [69 : 0] inst_dpfpu_sqrt_ff_final_out_D_IN;
  wire inst_dpfpu_sqrt_ff_final_out_EN;

  // register inst_dpfpu_sqrt_rg_inter_stage
  reg [293 : 0] inst_dpfpu_sqrt_rg_inter_stage;
  wire [293 : 0] inst_dpfpu_sqrt_rg_inter_stage_D_IN;
  wire inst_dpfpu_sqrt_rg_inter_stage_EN;

  // register inst_dpfpu_sqrt_rg_state
  reg [5 : 0] inst_dpfpu_sqrt_rg_state;
  reg [5 : 0] inst_dpfpu_sqrt_rg_state_D_IN;
  wire inst_dpfpu_sqrt_rg_state_EN;

  // register inst_spfm_add_sub_ff_input_register
  reg [107 : 0] inst_spfm_add_sub_ff_input_register;
  wire [107 : 0] inst_spfm_add_sub_ff_input_register_D_IN;
  wire inst_spfm_add_sub_ff_input_register_EN;

  // register inst_spfm_add_sub_ff_stage2
  reg [110 : 0] inst_spfm_add_sub_ff_stage2;
  wire [110 : 0] inst_spfm_add_sub_ff_stage2_D_IN;
  wire inst_spfm_add_sub_ff_stage2_EN;

  // register inst_spfm_add_sub_ff_stage4
  reg [171 : 0] inst_spfm_add_sub_ff_stage4;
  wire [171 : 0] inst_spfm_add_sub_ff_stage4_D_IN;
  wire inst_spfm_add_sub_ff_stage4_EN;

  // register inst_spfm_add_sub_ff_stage5
  reg [105 : 0] inst_spfm_add_sub_ff_stage5;
  wire [105 : 0] inst_spfm_add_sub_ff_stage5_D_IN;
  wire inst_spfm_add_sub_ff_stage5_EN;

  // register inst_spfm_add_sub_rg_state_handler
  reg [2 : 0] inst_spfm_add_sub_rg_state_handler;
  reg [2 : 0] inst_spfm_add_sub_rg_state_handler_D_IN;
  wire inst_spfm_add_sub_rg_state_handler_EN;

  // register inst_spfpu_divider_int_div_rg_inter_stage
  reg [82 : 0] inst_spfpu_divider_int_div_rg_inter_stage;
  wire [82 : 0] inst_spfpu_divider_int_div_rg_inter_stage_D_IN;
  wire inst_spfpu_divider_int_div_rg_inter_stage_EN;

  // register inst_spfpu_divider_int_div_rg_state
  reg [5 : 0] inst_spfpu_divider_int_div_rg_state;
  reg [5 : 0] inst_spfpu_divider_int_div_rg_state_D_IN;
  wire inst_spfpu_divider_int_div_rg_state_EN;

  // register inst_spfpu_divider_rg_stage1
  reg [66 : 0] inst_spfpu_divider_rg_stage1;
  wire [66 : 0] inst_spfpu_divider_rg_stage1_D_IN;
  wire inst_spfpu_divider_rg_stage1_EN;

  // register inst_spfpu_divider_rg_stage2
  reg [18 : 0] inst_spfpu_divider_rg_stage2;
  wire [18 : 0] inst_spfpu_divider_rg_stage2_D_IN;
  wire inst_spfpu_divider_rg_stage2_EN;

  // register inst_spfpu_divider_rg_stage3
  reg [77 : 0] inst_spfpu_divider_rg_stage3;
  wire [77 : 0] inst_spfpu_divider_rg_stage3_D_IN;
  wire inst_spfpu_divider_rg_stage3_EN;

  // register inst_spfpu_divider_rg_state_handler
  reg [1 : 0] inst_spfpu_divider_rg_state_handler;
  reg [1 : 0] inst_spfpu_divider_rg_state_handler_D_IN;
  wire inst_spfpu_divider_rg_state_handler_EN;

  // register inst_spfpu_sqrt_ff_final_out
  reg [37 : 0] inst_spfpu_sqrt_ff_final_out;
  wire [37 : 0] inst_spfpu_sqrt_ff_final_out_D_IN;
  wire inst_spfpu_sqrt_ff_final_out_EN;

  // register inst_spfpu_sqrt_rg_inter_stage
  reg [145 : 0] inst_spfpu_sqrt_rg_inter_stage;
  wire [145 : 0] inst_spfpu_sqrt_rg_inter_stage_D_IN;
  wire inst_spfpu_sqrt_rg_inter_stage_EN;

  // register inst_spfpu_sqrt_rg_state
  reg [5 : 0] inst_spfpu_sqrt_rg_state;
  reg [5 : 0] inst_spfpu_sqrt_rg_state_D_IN;
  wire inst_spfpu_sqrt_rg_state_EN;

  // register rg_multicycle_op
  reg rg_multicycle_op;
  wire rg_multicycle_op_D_IN, rg_multicycle_op_EN;

  // register rg_result
  reg [69 : 0] rg_result;
  wire [69 : 0] rg_result_D_IN;
  wire rg_result_EN;

  // ports of submodule ff_input
  wire [208 : 0] ff_input_D_IN, ff_input_D_OUT;
  wire ff_input_CLR,
       ff_input_DEQ,
       ff_input_EMPTY_N,
       ff_input_ENQ,
       ff_input_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_flush_fifo,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_flush,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4,
       CAN_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_flush,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_rl_flush,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1,
       CAN_FIRE_RL_inst_spfpu_divider_rl_flush,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage2,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage3,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage4,
       CAN_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_flush,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2,
       CAN_FIRE_RL_rg_result__dreg_update,
       CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub,
       CAN_FIRE_RL_rl_get_output_from_dpfpu_divider,
       CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt,
       CAN_FIRE_RL_rl_get_output_from_fm_add_sub,
       CAN_FIRE_RL_rl_get_output_from_spfpu_divider,
       CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       CAN_FIRE_RL_start_stage,
       CAN_FIRE___me_check_1,
       CAN_FIRE___me_check_10,
       CAN_FIRE___me_check_11,
       CAN_FIRE___me_check_12,
       CAN_FIRE___me_check_19,
       CAN_FIRE___me_check_2,
       CAN_FIRE___me_check_20,
       CAN_FIRE___me_check_21,
       CAN_FIRE___me_check_23,
       CAN_FIRE___me_check_24,
       CAN_FIRE___me_check_28,
       CAN_FIRE___me_check_29,
       CAN_FIRE___me_check_3,
       CAN_FIRE___me_check_30,
       CAN_FIRE___me_check_38,
       CAN_FIRE___me_check_39,
       CAN_FIRE___me_check_40,
       CAN_FIRE___me_check_41,
       CAN_FIRE___me_check_42,
       CAN_FIRE___me_check_5,
       CAN_FIRE___me_check_6,
       CAN_FIRE__start,
       CAN_FIRE_flush,
       WILL_FIRE_RL_flush_fifo,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_flush,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4,
       WILL_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_flush,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_rl_flush,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1,
       WILL_FIRE_RL_inst_spfpu_divider_rl_flush,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage2,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage3,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage4,
       WILL_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_flush,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2,
       WILL_FIRE_RL_rg_result__dreg_update,
       WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub,
       WILL_FIRE_RL_rl_get_output_from_dpfpu_divider,
       WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt,
       WILL_FIRE_RL_rl_get_output_from_fm_add_sub,
       WILL_FIRE_RL_rl_get_output_from_spfpu_divider,
       WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       WILL_FIRE_RL_start_stage,
       WILL_FIRE___me_check_1,
       WILL_FIRE___me_check_10,
       WILL_FIRE___me_check_11,
       WILL_FIRE___me_check_12,
       WILL_FIRE___me_check_19,
       WILL_FIRE___me_check_2,
       WILL_FIRE___me_check_20,
       WILL_FIRE___me_check_21,
       WILL_FIRE___me_check_23,
       WILL_FIRE___me_check_24,
       WILL_FIRE___me_check_28,
       WILL_FIRE___me_check_29,
       WILL_FIRE___me_check_3,
       WILL_FIRE___me_check_30,
       WILL_FIRE___me_check_38,
       WILL_FIRE___me_check_39,
       WILL_FIRE___me_check_40,
       WILL_FIRE___me_check_41,
       WILL_FIRE___me_check_42,
       WILL_FIRE___me_check_5,
       WILL_FIRE___me_check_6,
       WILL_FIRE__start,
       WILL_FIRE_flush;

  // inputs to muxes for submodule ports
  reg [69 : 0] MUX_rg_result_1_wset_1__VAL_1;
  wire [293 : 0] MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1,
		 MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2;
  wire [171 : 0] MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1,
		 MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2,
		 MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
  wire [145 : 0] MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1,
		 MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2;
  wire [84 : 0] MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1,
		MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2,
		MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
  wire [69 : 0] MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1,
		MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2,
		MUX_rg_result_1_wset_1__VAL_2,
		MUX_rg_result_1_wset_1__VAL_3,
		MUX_rg_result_1_wset_1__VAL_4,
		MUX_rg_result_1_wset_1__VAL_5,
		MUX_rg_result_1_wset_1__VAL_6,
		MUX_rg_result_1_wset_1__VAL_7;
  wire [37 : 0] MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1,
		MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2;
  wire [5 : 0] MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2,
	       MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1,
	       MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3,
	       MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
  wire MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1,
       MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1,
       MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1,
       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1,
       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1,
       MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1,
       MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1,
       MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1,
       MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1,
       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1,
       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1,
       MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1,
       MUX_rg_multicycle_op_write_1__SEL_1,
       MUX_rg_result_1_wset_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d6060;
  reg TASK_testplusargs___d6061;
  reg TASK_testplusargs___d6062;
  reg [63 : 0] v__h345343;
  reg TASK_testplusargs___d6066;
  reg TASK_testplusargs___d6067;
  reg TASK_testplusargs___d6068;
  reg [63 : 0] v__h345478;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q32;
  reg [31 : 0] CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q54,
	       CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q36;
  reg CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q7,
      CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q43,
      IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5011,
      IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5135,
      IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3702,
      IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3934,
      IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d4100,
      IF_inst_dpfm_add_sub_ff_stage5_read__156_BITS__ETC___d3221,
      IF_inst_dpfpu_divider_rg_stage3_675_BITS_4_TO__ETC___d1720,
      IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_BI_ETC___d1833,
      IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238,
      IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317,
      IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430,
      _theResult_____4___1__h264715;
  wire [211 : 0] _0_CONCAT_INV_IF_condFlags64_res_whas__428_THEN_ETC___d5277;
  wire [169 : 0] inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14,
		 x__h71496,
		 x_wget__h66759;
  wire [159 : 0] IF_IF_inst_dpfm_add_sub_ff_stage2_read__373_BI_ETC___d2414,
		 IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200,
		 _theResult____h118024,
		 _theResult____h167775,
		 _theResult___snd_fst__h194444,
		 _theResult___snd_fst__h194446,
		 add_mantissa__h167771,
		 mantissa2__h118011,
		 mantissa2__h118033,
		 mantissa2__h118054,
		 mantissa3___1__h137744,
		 mantissa3__h118055,
		 mantissa_to_shift___1__h118052,
		 mantissa_to_shift__h118047,
		 resultant_mantissa___1__h194199,
		 resultant_mantissa_norm_expo__h193897,
		 resultant_mantissa_norm_zerosMSB__h193898,
		 sub_mantissa1__h167772,
		 sub_mantissa2__h167773,
		 sub_mantissa__h167774;
  wire [125 : 0] IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d4774,
		 IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4773,
		 IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4776;
  wire [115 : 0] _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025,
		 final_man__h251178;
  wire [113 : 0] IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1400,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1376,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1401,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q18,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19,
		 inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q15,
		 inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16;
  wire [112 : 0] IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1383,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1351;
  wire [109 : 0] IF_IF_IF_condFlags64_res_whas__428_THEN_condFl_ETC___d5989,
		 mantissa___1__h333173,
		 mantissa__h314839,
		 mantissa__h314841,
		 mantissa__h314851,
		 mantissa__h89253;
  wire [106 : 0] IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2109,
		 _theResult_____1_snd__h108002,
		 _theResult_____1_snd__h108005,
		 _theResult___snd_snd_snd_snd_fst__h108042,
		 lv_product_mantissa___1__h107975,
		 lv_product_mantissa___1__h107993,
		 lv_product_mantissa__h107941,
		 lv_product_mantissa__h90486,
		 lv_product_mantissa_shiftL_expo__h107947,
		 lv_product_mantissa_shiftL_zerosMSB__h107949,
		 x_lv_product_mantissa__h90563;
  wire [95 : 0] _0_CONCAT_INV_IF_condFlags32_res_whas__343_THEN_ETC___d5198;
  wire [86 : 0] _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858,
		final_man__h248106;
  wire [82 : 0] inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8,
		x__h5459,
		x_wget__h695;
  wire [72 : 0] IF_IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_ETC___d779,
		IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217,
		_theResult____h30271,
		_theResult____h53487,
		_theResult___snd_fst__h66062,
		_theResult___snd_fst__h66064,
		add_mantissa__h53483,
		mantissa2__h30258,
		mantissa2__h30280,
		mantissa2__h30301,
		mantissa3___1__h39493,
		mantissa3__h30302,
		mantissa_to_shift___1__h30299,
		mantissa_to_shift__h30294,
		resultant_mantissa___1__h65817,
		resultant_mantissa_norm_expo__h65515,
		resultant_mantissa_norm_zerosMSB__h65516,
		sub_mantissa1__h53484,
		sub_mantissa2__h53485,
		sub_mantissa__h53486;
  wire [69 : 0] IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4457,
		IF_ff_input_first__309_BIT_0_341_THEN_0xFFFFFF_ETC___d4449,
		IF_ff_input_first__309_BIT_0_341_THEN_42949672_ETC___d3802,
		IF_ff_input_first__309_BIT_0_341_THEN_IF_NOT_I_ETC___d4252,
		IF_ff_input_first__309_BIT_0_341_THEN_IF_ff_in_ETC___d3521;
  wire [68 : 0] IF_inst_dpfpu_divider_rg_stage3_675_BIT_10_682_ETC___d1763;
  wire [63 : 0] IF_0b0_CONCAT_getExp64_res_wget__986_BITS_32_T_ETC___d4051,
		IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d4426,
		IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d3483,
		IF_IF_getExp32_res_whas__818_THEN_getExp32_res_ETC___d3885,
		IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986,
		IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682,
		IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3481,
		IF_ff_input_first__309_BIT_1_534_THEN_0_ELSE_1_ETC___d3883,
		IF_ff_input_first__309_BIT_3_362_AND_IF_condFl_ETC___d3480,
		NOT_ff_input_first__309_BIT_1_534_548_AND_ff_i_ETC___d3713,
		_theResult_____1_fst__h249788,
		_theResult_____1_fst__h252859,
		_theResult_____1_fst__h87540,
		_theResult_____2_fst__h249463,
		_theResult_____2_fst__h249570,
		_theResult_____2_fst__h249622,
		_theResult_____2_fst__h249673,
		_theResult_____2_fst__h249677,
		_theResult_____2_fst__h252536,
		_theResult_____2_fst__h252641,
		_theResult_____2_fst__h252693,
		_theResult_____2_fst__h252744,
		_theResult_____2_fst__h252748,
		_theResult_____3_fst__h228587,
		_theResult_____3_fst__h229203,
		_theResult_____3_fst__h248731,
		_theResult_____3_fst__h251806,
		_theResult_____3_snd_fst__h194038,
		_theResult____h209803,
		_theResult____h220907,
		_theResult___fst__h248319,
		_theResult___fst__h248359,
		_theResult___fst__h248371,
		_theResult___fst__h248422,
		_theResult___fst__h248467,
		_theResult___fst__h248488,
		_theResult___fst__h248534,
		_theResult___fst__h248555,
		_theResult___fst__h248587,
		_theResult___fst__h248633,
		_theResult___fst__h248653,
		_theResult___fst__h248699,
		_theResult___fst__h249089,
		_theResult___fst__h249192,
		_theResult___fst__h249196,
		_theResult___fst__h249260,
		_theResult___fst__h249320,
		_theResult___fst__h249324,
		_theResult___fst__h249389,
		_theResult___fst__h251394,
		_theResult___fst__h251434,
		_theResult___fst__h251446,
		_theResult___fst__h251497,
		_theResult___fst__h251542,
		_theResult___fst__h251563,
		_theResult___fst__h251609,
		_theResult___fst__h251630,
		_theResult___fst__h251662,
		_theResult___fst__h251708,
		_theResult___fst__h251728,
		_theResult___fst__h251774,
		_theResult___fst__h252164,
		_theResult___fst__h252265,
		_theResult___fst__h252269,
		_theResult___fst__h252333,
		_theResult___fst__h252393,
		_theResult___fst__h252397,
		_theResult___fst__h252462,
		_theResult___snd_final_result__h220915,
		final_result___1__h248477,
		final_result___1__h248511,
		final_result___1__h248610,
		final_result___1__h249140,
		final_result___1__h249715,
		final_result___1__h249745,
		final_result___1__h251552,
		final_result___1__h251586,
		final_result___1__h251685,
		final_result___1__h252213,
		final_result___1__h252786,
		final_result___1__h252816,
		final_result___2__h248775,
		final_result___2__h249676,
		final_result___2__h251849,
		final_result___2__h252747,
		final_result___3__h248728,
		final_result___3__h251803,
		final_result__h248108,
		final_result__h251180,
		final_result__h265404,
		final_result__h265427,
		final_result__h315274,
		final_result__h89600,
		getMant64_argwget_BITS_127_TO_64__q23,
		getMant64_argwget_BITS_191_TO_128__q22,
		getMant64_argwget_BITS_63_TO_0__q24,
		inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21,
		lv_final_output__h87518,
		lv_result__h229248,
		lv_result__h229289,
		new_value_final_result__h193949,
		setCanonicalNaN_argwget_BITS_127_TO_64__q39,
		setCanonicalNaN_argwget_BITS_191_TO_128__q38,
		setCanonicalNaN_argwget_BITS_63_TO_0__q40,
		x_data__h225979,
		x_data__h228557,
		x_data__h229540,
		x_data__h229696,
		x_data__h245869,
		x_data__h246173,
		x_data__h248137,
		x_data__h251209,
		x_data__h258135,
		x_data__h265328,
		x_data__h265400,
		x_data__h344868,
		x_data__h344992,
		x_data__h345107;
  wire [62 : 0] IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d4423,
		IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__15_ETC___d3248,
		IF_NOT_inst_dpfpu_divider_rg_stage3_675_BITS_8_ETC___d1753,
		IF_inst_dpfpu_divider_rg_stage3_675_BIT_7_731__ETC___d1752;
  wire [61 : 0] IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d4639,
		IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4641;
  wire [57 : 0] IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q17,
		_remainder___1__h69639,
		_remainder__h69467,
		_theResult_____3__h314849,
		_theResult____h89251,
		lv_remainder__h89367,
		lv_remainder__h89457,
		lv_remainder__h90021,
		lv_remainder_temp__h89248,
		lv_root_rem__h89588,
		lv_root_temp_1__h89249,
		lv_root_temp_2__h89250,
		x__h89999;
  wire [55 : 0] IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d84,
		IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_ETC__q6,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d60,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d85,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13,
		IF_inst_dpfpu_divider_int_div_wr_final_out_wha_ETC___d1574,
		_denominator__h71431,
		_dividend___1__h69640,
		_dividend__h68827,
		_dividend__h68965,
		_dividend__h69469,
		_dividend__h69470,
		_numerator__h71432,
		_theResult___fst__h73047,
		_theResult___fst__h73066,
		_theResult___fst__h87199,
		_theResult___fst__h87203,
		inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10,
		inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9,
		lv_extended_mantissa___1__h90086,
		lv_extended_mantissa__h89596,
		lv_quotient___1__h73083,
		lv_quotient_shiftL_expo__h73059,
		lv_quotient_shiftL_zerosMSB__h73061,
		x_lv_quotient__h72949;
  wire [54 : 0] IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__428_ETC___d5996,
		IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q37,
		IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35,
		result_mantissa__h89587,
		x__h333202,
		x__h89297,
		x__h89560;
  wire [53 : 0] IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3245,
		IF_IF_IF_inst_dpfpu_divider_rg_stage3_675_BITS_ETC___d1728,
		IF_IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0_ETC___d3706,
		_theResult_____4__h87416,
		_theResult_____5__h193919,
		lv_man___1__h245766,
		lv_man__h235107,
		lv_rounded_mantissa___1__h194599,
		lv_rounded_mantissa__h194629,
		lv_rounded_quotient___1__h87783,
		lv_rounded_quotient__h87415,
		lv_rounded_quotient__h87813;
  wire [52 : 0] man1__h284226,
		man2__h284227,
		x__h270409,
		x__h270495,
		x__h301478,
		x__h301506;
  wire [51 : 0] IF_IF_IF_condFlags32_res_whas__343_THEN_condFl_ETC___d5813,
		IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038,
		_theResult___snd_snd_fst__h251438,
		_theResult___snd_snd_fst__h251450,
		_theResult___snd_snd_fst__h251501,
		_theResult___snd_snd_fst__h251546,
		_theResult___snd_snd_fst__h251567,
		_theResult___snd_snd_fst__h251613,
		_theResult___snd_snd_fst__h251634,
		_theResult___snd_snd_fst__h251666,
		_theResult___snd_snd_fst__h251712,
		_theResult___snd_snd_fst__h251732,
		_theResult___snd_snd_fst__h251778,
		condFlags64_argwget_BITS_125_TO_74__q28,
		condFlags64_argwget_BITS_188_TO_137__q27,
		condFlags64_argwget_BITS_62_TO_11__q29,
		getMant64_reswget_BITS_103_TO_52__q33,
		getMant64_reswget_BITS_155_TO_104__q25,
		man__h258440,
		mant__h258380,
		mantissa___1__h313245,
		mantissa__h15996,
		mantissa__h220898,
		mantissa__h304248,
		mantissa__h304250,
		mantissa__h304260;
  wire [48 : 0] IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313,
		IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d590,
		_theResult_____1_snd__h25411,
		_theResult_____1_snd__h25414,
		_theResult___snd_snd_snd_snd_fst__h25451,
		lv_product_mantissa___1__h25384,
		lv_product_mantissa___1__h25402,
		lv_product_mantissa__h17233,
		lv_product_mantissa__h25350,
		lv_product_mantissa_shiftL_expo__h25356,
		lv_product_mantissa_shiftL_zerosMSB__h25358,
		man__h264318,
		man__h264435,
		x_lv_product_mantissa__h17310,
		y_avValue_snd_snd_fst__h264782;
  wire [36 : 0] IF_inst_spfpu_divider_rg_stage3_72_BIT_10_79_T_ETC___d360,
		x_wget__h195118,
		x_wget__h195256;
  wire [31 : 0] IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3404,
		IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4363,
		IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4361,
		IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110,
		IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3400,
		IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3402,
		IF_ff_input_first__309_BIT_3_362_AND_IF_condFl_ETC___d3401,
		_1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC__q48,
		_1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC__q26,
		_theResult_____1_fst__h14282,
		_theResult_____3_fst__h226034,
		_theResult_____3_fst__h226656,
		_theResult_____3_snd_fst__h65656,
		_theResult____h203931,
		_theResult____h220894,
		_theResult___fst__h265052,
		ff_inputD_OUT_BITS_176_TO_145__q1,
		final_result___248775_BITS_31_TO_0__q57,
		final_result___249676_BITS_31_TO_0__q56,
		final_result___251849_BITS_31_TO_0__q35,
		final_result___252747_BITS_31_TO_0__q34,
		final_result__h16343,
		final_result__h304684,
		getMant32_argwget_BITS_31_TO_0__q46,
		getMant32_argwget_BITS_63_TO_32__q45,
		getMant32_argwget_BITS_95_TO_64__q44,
		inp32___1__h230148,
		inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20,
		lv_final_output__h14260,
		lv_result__h226701,
		lv_result__h226742,
		new_value_final_result__h65567,
		res___1__h265239,
		res__h203848,
		res__h264578,
		setCanonicalNaN_reswget_BITS_31_TO_0__q59,
		setCanonicalNaN_reswget_BITS_63_TO_32__q42,
		setCanonicalNaN_reswget_BITS_95_TO_64__q41,
		theResult__20894_SL_x29768_BITS_4_TO_0__q2,
		x1_avValue_final_result__h203853,
		x1_avValue_final_result__h209712,
		x1_avValue_final_result__h220792,
		x1_avValue_final_result__h220800,
		x1_avValue_final_result__h245858,
		x1_avValue_fst__h264988,
		x__h220976,
		x__h221117,
		x__h221199,
		y_avValue_fst__h264985;
  wire [30 : 0] IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1265,
		IF_NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_ETC___d350,
		IF_inst_spfpu_divider_rg_stage3_72_BIT_7_28_OR_ETC___d349;
  wire [28 : 0] IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q11,
		_remainder___1__h3596,
		_remainder__h3424,
		_theResult_____3__h304258,
		_theResult____h15994,
		lv_remainder__h16110,
		lv_remainder__h16200,
		lv_remainder__h16764,
		lv_remainder_temp__h15991,
		lv_root_rem__h16331,
		lv_root_temp_1__h15992,
		lv_root_temp_2__h15993,
		x__h16742;
  wire [26 : 0] IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q4,
		IF_inst_spfpu_divider_int_div_wr_final_out_wha_ETC___d200,
		_denominator__h5394,
		_dividend___1__h3597,
		_dividend__h2784,
		_dividend__h2922,
		_dividend__h3426,
		_dividend__h3427,
		_numerator__h5395,
		_theResult___fst__h13941,
		_theResult___fst__h13945,
		_theResult___fst__h7010,
		_theResult___fst__h7029,
		lv_extended_mantissa___1__h16829,
		lv_extended_mantissa__h16339,
		lv_quotient___1__h7046,
		lv_quotient_shiftL_expo__h7022,
		lv_quotient_shiftL_zerosMSB__h7024,
		x_lv_quotient__h6912;
  wire [25 : 0] IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__343_ETC___d5820,
		IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58,
		result_mantissa__h16330,
		x__h16040,
		x__h16303,
		x__h313274;
  wire [24 : 0] IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5015,
		IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5139,
		IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1262,
		IF_IF_IF_inst_spfpu_divider_rg_stage3_72_BITS__ETC___d325,
		_theResult_____4__h14158,
		_theResult_____5__h65537,
		lv_man___1__h209617,
		lv_man___1__h220692,
		lv_man__h203946,
		lv_man__h209818,
		lv_rounded_mantissa___1__h66217,
		lv_rounded_mantissa__h66247,
		lv_rounded_quotient___1__h14525,
		lv_rounded_quotient__h14157,
		lv_rounded_quotient__h14555;
  wire [23 : 0] IF_IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0_ETC___d4340,
		fman___1__h265260,
		fman__h264915,
		man1__h274224,
		man2__h274225,
		x__h268222,
		x__h268308,
		x__h282138,
		x__h282166;
  wire [22 : 0] IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871,
		_theResult___snd_snd_fst__h248363,
		_theResult___snd_snd_fst__h248375,
		_theResult___snd_snd_fst__h248426,
		_theResult___snd_snd_fst__h248471,
		_theResult___snd_snd_fst__h248492,
		_theResult___snd_snd_fst__h248538,
		_theResult___snd_snd_fst__h248559,
		_theResult___snd_snd_fst__h248591,
		_theResult___snd_snd_fst__h248637,
		_theResult___snd_snd_fst__h248657,
		_theResult___snd_snd_fst__h248703,
		condFlags32_argwget_BITS_30_TO_8__q51,
		condFlags32_argwget_BITS_61_TO_39__q50,
		condFlags32_argwget_BITS_92_TO_70__q49,
		getMant32_reswget_BITS_45_TO_23__q55,
		getMant32_reswget_BITS_68_TO_46__q47,
		value__h262199;
  wire [12 : 0] IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3232,
		IF_NOT_inst_dpfpu_divider_rg_stage3_675_BIT_13_ETC___d1740,
		_0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3175,
		_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1871,
		_1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1449,
		_theResult_____1_fst__h108001,
		_theResult_____1_fst__h108004,
		_theResult_____4_snd_fst__h118253,
		_theResult___fst__h194227,
		_theResult___fst__h194231,
		_theResult___snd_fst__h87283,
		_theResult___snd_fst__h87293,
		_theResult___snd_fst__h87301,
		_theResult___snd_fst__h87311,
		_theResult___snd_fst__h87313,
		_theResult___snd_snd_snd_fst__h107957,
		exp1__h284234,
		exp1_temp__h270356,
		exp2__h284235,
		exp2_temp__h270357,
		exponent2__h118034,
		exponent3__h118013,
		exponent3__h118025,
		exponent_difference__h118048,
		inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1862,
		inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1446,
		lv_exponent___1__h87812,
		lv_exponent___1__h87899,
		lv_exponent__h284236,
		lv_exponent__h87418,
		lv_exponent_inc_shift__h73057,
		lv_exponent_sub_shift__h73060,
		lv_exponent_sub_zerosMSB__h73062,
		lv_minuend__h118044,
		lv_product_exponent___1__h107976,
		lv_product_exponent__h107939,
		lv_product_exponent_inc_shift__h107945,
		lv_product_exponent_sub_shift__h107948,
		lv_product_exponent_sub_zerosMSB__h107950,
		lv_summed_exponent__h270358,
		resultant_exponent___1__h194628,
		resultant_exponent__h193901,
		resultant_exponent_inc__h193896,
		resultant_exponent_sub__h193894,
		resultant_exponent_sub_zerosMSB__h193899,
		shift_neg__h107946,
		shift_neg__h73058,
		x__h108037,
		x__h270610,
		x__h270612,
		x__h270614,
		x__h284298,
		x_lv_exponent__h72950,
		x_lv_product_exponent__h90562,
		y__h108036,
		y__h270611,
		y__h270613,
		y__h284297,
		y__h284299,
		y__h284300,
		y__h292892;
  wire [11 : 0] IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5982,
		IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_ETC__q5,
		_theResult_____1_fst__h90087,
		exponent___1__h315420,
		lv_exp__h251175,
		result_exponent___1__h90109,
		result_exponent__h314848,
		x__h251313,
		x__h315391,
		x__h315422,
		x__h333446,
		x__h333448,
		y__h315392,
		y__h333447;
  wire [10 : 0] expo__h220897,
		expo__h220910,
		expo__h258379,
		expo__h258438,
		local_expo___1__h245789,
		shiftDist__h264317,
		x__h264465;
  wire [9 : 0] IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249,
	       IF_NOT_inst_spfpu_divider_rg_stage3_72_BIT_77__ETC___d337,
	       _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1192,
	       _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468,
	       _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133,
	       _theResult_____1_fst__h25410,
	       _theResult_____1_fst__h25413,
	       _theResult_____4_snd_fst__h30500,
	       _theResult___fst__h65845,
	       _theResult___fst__h65849,
	       _theResult___snd_fst__h14025,
	       _theResult___snd_fst__h14035,
	       _theResult___snd_fst__h14043,
	       _theResult___snd_fst__h14053,
	       _theResult___snd_fst__h14055,
	       _theResult___snd_snd_snd_fst__h25366,
	       exp1__h274232,
	       exp1_temp__h268169,
	       exp2__h274233,
	       exp2_temp__h268170,
	       exponent2__h30281,
	       exponent3__h30260,
	       exponent3__h30272,
	       exponent_difference__h30295,
	       inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d459,
	       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130,
	       lv_exponent___1__h14554,
	       lv_exponent___1__h14641,
	       lv_exponent__h14160,
	       lv_exponent__h274234,
	       lv_exponent_inc_shift__h7020,
	       lv_exponent_sub_shift__h7023,
	       lv_exponent_sub_zerosMSB__h7025,
	       lv_minuend__h30291,
	       lv_product_exponent___1__h25385,
	       lv_product_exponent__h25348,
	       lv_product_exponent_inc_shift__h25354,
	       lv_product_exponent_sub_shift__h25357,
	       lv_product_exponent_sub_zerosMSB__h25359,
	       lv_summed_exponent__h268171,
	       resultant_exponent___1__h66246,
	       resultant_exponent__h65519,
	       resultant_exponent_inc__h65514,
	       resultant_exponent_sub__h65512,
	       resultant_exponent_sub_zerosMSB__h65517,
	       shift_neg__h25355,
	       shift_neg__h7021,
	       x__h25446,
	       x__h254679,
	       x__h256156,
	       x__h268423,
	       x__h268425,
	       x__h268427,
	       x__h274296,
	       x_lv_exponent__h6913,
	       x_lv_product_exponent__h17309,
	       y__h25445,
	       y__h268424,
	       y__h268426,
	       y__h274295,
	       y__h274297,
	       y__h274298,
	       y__h278221;
  wire [8 : 0] IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5806,
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q3,
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5252,
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5325,
	       _theResult_____1_fst__h16830,
	       exponent___1__h304830,
	       exponent__h304244,
	       result_exponent___1__h16852,
	       result_exponent__h304257,
	       x__h304801,
	       x__h304832,
	       x__h313518,
	       x__h313520,
	       y__h304802,
	       y__h313519;
  wire [7 : 0] IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822,
	       _theResult_____2__h264971,
	       expo___1__h265263,
	       expo__h203933,
	       expo__h209805,
	       expo__h264580,
	       local_expo___1__h209642,
	       local_expo___1__h220717,
	       lv_zeros_on_left__h167777,
	       x__h153120,
	       x__h194476;
  wire [6 : 0] lsb_zeros__h107943,
	       lv_leading_zeros__h314840,
	       lv_zeros_on_left__h53489,
	       msb_zeros___1__h107978,
	       msb_zeros__h107937,
	       msb_zeros__h90505,
	       x__h108011,
	       x__h210113,
	       x__h235203,
	       x__h333176,
	       x__h46575,
	       x__h66094;
  wire [5 : 0] IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d5250,
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d5323,
	       lsb_zeros__h25352,
	       lsb_zeros__h73055,
	       lv_leading_zeros__h304249,
	       msb_zeros___1__h25387,
	       msb_zeros__h17252,
	       msb_zeros__h25346,
	       msb_zeros__h72898,
	       x__h204223,
	       x__h229768,
	       x__h25420,
	       x__h284305,
	       x__h292893,
	       x__h313248;
  wire [4 : 0] IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4442,
	       IF_NOT_IF_getExp64_res_whas__293_THEN_getExp64_ETC___d4436,
	       IF_ff_input_first__309_BIT_0_341_THEN_IF_NOT_I_ETC___d4251,
	       _theResult_____1_snd__h14261,
	       _theResult_____1_snd__h14272,
	       _theResult_____1_snd__h14283,
	       _theResult_____1_snd__h14300,
	       _theResult_____1_snd__h14410,
	       _theResult_____1_snd__h14650,
	       _theResult_____1_snd__h14668,
	       _theResult_____1_snd__h87519,
	       _theResult_____1_snd__h87530,
	       _theResult_____1_snd__h87541,
	       _theResult_____1_snd__h87558,
	       _theResult_____1_snd__h87668,
	       _theResult_____1_snd__h87908,
	       _theResult_____1_snd__h87926,
	       _theResult_____3_snd__h226035,
	       _theResult_____3_snd__h226240,
	       _theResult_____3_snd__h226657,
	       _theResult_____3_snd__h228588,
	       _theResult_____3_snd__h228793,
	       _theResult_____3_snd__h229204,
	       condFlags32_reswget_BITS_14_TO_10__q52,
	       condFlags32_reswget_BITS_9_TO_5__q53,
	       condFlags64_reswget_BITS_14_TO_10__q30,
	       condFlags64_reswget_BITS_9_TO_5__q31,
	       exception__h264586,
	       fflags__h16387,
	       fflags__h193940,
	       fflags__h203948,
	       fflags__h209820,
	       fflags__h304509,
	       fflags__h315099,
	       fflags__h65558,
	       fflags__h89644,
	       lsb_zeros__h7018,
	       msb_zeros__h6861,
	       result__h258251,
	       result__h263934,
	       result__h264999,
	       result__h265038,
	       wr_final_out_fflags__h220914,
	       x1_avValue_fflags__h203854,
	       x1_avValue_fflags__h209713,
	       x1_avValue_fflags__h220793,
	       x__h247332,
	       x__h247666,
	       x__h247847,
	       x__h250403,
	       x__h250737,
	       x__h250918,
	       x__h258443,
	       x__h274303,
	       x__h278222,
	       x_fflags__h225981,
	       x_fflags__h228559,
	       x_fflags__h229542,
	       x_fflags__h229698,
	       x_fflags__h258137,
	       x_fflags__h265330;
  wire [1 : 0] IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5753,
	       IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5871,
	       IF_inst_dpfm_add_sub_ff_stage2_read__373_BITS__ETC___d2789,
	       IF_inst_spfm_add_sub_ff_stage2_read__38_BITS_9_ETC___d980,
	       _theResult_____6_snd_snd__h167509,
	       _theResult_____6_snd_snd__h53221,
	       _theResult_____6_snd_snd_snd__h167556,
	       _theResult_____6_snd_snd_snd__h53268,
	       _theResult____h226256,
	       _theResult____h228809,
	       lv_compare_result__h225963,
	       lv_compare_result__h228542,
	       lv_result_is_infinity___1__h167510,
	       lv_result_is_infinity___1__h167572,
	       lv_result_is_infinity___1__h53222,
	       lv_result_is_infinity___1__h53284,
	       lv_result_is_zero___1__h167605,
	       lv_result_is_zero___1__h167609,
	       lv_result_is_zero___1__h53317,
	       lv_result_is_zero___1__h53321,
	       x__h167552,
	       x__h167593,
	       x__h167852,
	       x__h53264,
	       x__h53305,
	       x__h53564;
  wire IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_BI_ETC___d3276,
       IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_BI_ETC___d3292,
       IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1293,
       IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1309,
       IF_NOT_IF_condFlags32_res_whas__343_THEN_condF_ETC___d4182,
       IF_NOT_IF_condFlags32_res_whas__343_THEN_condF_ETC___d4234,
       IF_NOT_IF_condFlags64_res_whas__428_THEN_condF_ETC___d4218,
       IF_NOT_IF_condFlags64_res_whas__428_THEN_condF_ETC___d4248,
       IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349,
       IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3827,
       IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d4231,
       IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d5215,
       IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434,
       IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3994,
       IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d4245,
       IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d5292,
       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5208,
       IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d3837,
       IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d3842,
       IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d4005,
       IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d4010,
       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3833,
       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3835,
       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3838,
       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3840,
       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d4152,
       IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4295,
       IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301,
       IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4306,
       IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2330,
       IF_inst_dpfm_add_sub_ff_stage2_read__373_BIT_5_ETC___d2390,
       IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3183,
       IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d695,
       IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755,
       IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1200,
       INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2091,
       INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d572,
       INV_1_MINUS_inst_dpfpu_divider_rg_stage2_444_B_ETC___d1569,
       INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d195,
       NOT_0b0_CONCAT_getExp64_res_wget__986_BITS_32__ETC___d4243,
       NOT_IF_condFlags32_res_whas__343_THEN_condFlag_ETC___d3844,
       NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d4012,
       NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d5153,
       NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d5159,
       NOT_IF_getExp32_res_whas__818_THEN_getExp32_re_ETC___d4229,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5338,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5340,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5460,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5462,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5721,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5746,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5748,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5840,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5865,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5867,
       NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5176,
       NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5187,
       NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5266,
       NOT_ff_input_first__309_BIT_2_523_527_AND_NOT__ETC___d3941,
       NOT_ff_input_first__309_BIT_2_523_527_AND_NOT__ETC___d4106,
       NOT_ff_input_first__309_BIT_2_523_527_AND_ff_i_ETC___d3948,
       NOT_ff_input_first__309_BIT_2_523_527_AND_ff_i_ETC___d4112,
       NOT_inst_dpfpu_divider_rg_stage2_444_BITS_21_T_ETC___d1649,
       NOT_inst_dpfpu_divider_rg_stage3_675_BITS_82_T_ETC___d1698,
       NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d246,
       NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_TO_ETC___d295,
       _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2742,
       _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d933,
       _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3177,
       _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194,
       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4001,
       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4003,
       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4006,
       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4008,
       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4188,
       _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1872,
       _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d469,
       _1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1450,
       _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134,
       _theResult_____1__h118058,
       _theResult_____1__h30305,
       _theResult_____1_fst__h194769,
       _theResult_____1_fst__h66387,
       _theResult_____1_snd__h249789,
       _theResult_____1_snd__h249862,
       _theResult_____1_snd__h252860,
       _theResult_____1_snd__h252933,
       _theResult_____1_snd_fst__h194771,
       _theResult_____1_snd_fst__h66389,
       _theResult_____1_snd_snd_snd__h194774,
       _theResult_____1_snd_snd_snd__h66392,
       _theResult_____2_snd__h249464,
       _theResult_____2_snd__h252537,
       _theResult_____3_fst__h194036,
       _theResult_____3_fst__h194684,
       _theResult_____3_fst__h65654,
       _theResult_____3_fst__h66302,
       _theResult_____3_snd_fst__h249795,
       _theResult_____3_snd_fst__h252866,
       _theResult_____3_snd_snd__h194687,
       _theResult_____3_snd_snd__h66305,
       _theResult_____3_snd_snd_fst__h194806,
       _theResult_____3_snd_snd_fst__h66424,
       _theResult_____3_snd_snd_snd__h194807,
       _theResult_____3_snd_snd_snd__h66425,
       _theResult_____6__h193918,
       _theResult_____6__h65536,
       _theResult_____6_fst__h167506,
       _theResult_____6_fst__h53218,
       _theResult____h14155,
       _theResult____h203943,
       _theResult____h209815,
       _theResult____h235104,
       _theResult____h87413,
       _theResult___snd__h249197,
       _theResult___snd__h249261,
       _theResult___snd__h249325,
       _theResult___snd__h249390,
       _theResult___snd__h252270,
       _theResult___snd__h252334,
       _theResult___snd__h252398,
       _theResult___snd__h252463,
       _theResult___snd_fst__h248321,
       _theResult___snd_fst__h248361,
       _theResult___snd_fst__h248373,
       _theResult___snd_fst__h248424,
       _theResult___snd_fst__h248490,
       _theResult___snd_fst__h248557,
       _theResult___snd_fst__h248589,
       _theResult___snd_fst__h248655,
       _theResult___snd_fst__h249800,
       _theResult___snd_fst__h251396,
       _theResult___snd_fst__h251436,
       _theResult___snd_fst__h251448,
       _theResult___snd_fst__h251499,
       _theResult___snd_fst__h251565,
       _theResult___snd_fst__h251632,
       _theResult___snd_fst__h251664,
       _theResult___snd_fst__h251730,
       _theResult___snd_fst__h252871,
       _theResult___snd_snd__h268675,
       _theResult___snd_snd__h270858,
       _theResult___snd_snd_snd__h268669,
       _theResult___snd_snd_snd__h270852,
       and_sign__h225961,
       and_sign__h228540,
       ex_overflow__h193909,
       ex_overflow__h65527,
       expo3_zero__h118022,
       expo3_zero__h30269,
       ff_input_first__309_BITS_12_TO_8_310_EQ_0b100__ETC___d3335,
       ff_input_first__309_BITS_12_TO_8_310_EQ_0b10_5_ETC___d4533,
       ff_input_first__309_BITS_12_TO_8_310_EQ_0b10_5_ETC___d4714,
       ff_input_first__309_BITS_12_TO_8_310_EQ_0b1100_ETC___d4597,
       ff_input_first__309_BIT_0_341_AND_NOT_IF_condF_ETC___d5150,
       ff_input_first__309_BIT_208_447_XOR_ff_input_f_ETC___d3810,
       ff_input_first__309_BIT_2_523_AND_NOT_ff_input_ETC___d3955,
       ff_input_first__309_BIT_2_523_AND_NOT_ff_input_ETC___d4118,
       ff_input_first__309_BIT_2_523_AND_ff_input_fir_ETC___d3961,
       ff_input_first__309_BIT_2_523_AND_ff_input_fir_ETC___d4123,
       inexact__h203944,
       inexact__h209816,
       inexact__h235105,
       inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1863,
       inst_dpfm_add_sub_ff_stage2_read__373_BIT_15_3_ETC___d2398,
       inst_dpfm_add_sub_ff_stage5_read__156_BIT_15_1_ETC___d3282,
       inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447,
       inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1448,
       inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460,
       inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763,
       inst_spfm_add_sub_ff_stage5_read__173_BIT_14_1_ETC___d1299,
       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131,
       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132,
       lv_inexact1__h248119,
       lv_inexact1__h251191,
       lv_inexact___1__h248726,
       lv_inexact___1__h251801,
       lv_inexact__h16338,
       lv_inexact__h193917,
       lv_inexact__h248112,
       lv_inexact__h251184,
       lv_inexact__h65535,
       lv_inexact__h89595,
       lv_invalid___2__h248729,
       lv_invalid___2__h251804,
       lv_invalid__h248094,
       lv_invalid__h248110,
       lv_invalid__h248122,
       lv_invalid__h251165,
       lv_invalid__h251182,
       lv_invalid__h251194,
       lv_op1_subnormal__h268160,
       lv_op1_subnormal__h270347,
       lv_op2_Nan__h225959,
       lv_op2_Nan__h228538,
       lv_op2_subnormal__h268161,
       lv_op2_subnormal__h270348,
       lv_round_up___1__h14454,
       lv_round_up___1__h14490,
       lv_round_up___1__h194345,
       lv_round_up___1__h194567,
       lv_round_up___1__h248809,
       lv_round_up___1__h249426,
       lv_round_up___1__h251884,
       lv_round_up___1__h252499,
       lv_round_up___1__h264744,
       lv_round_up___1__h264875,
       lv_round_up___1__h65963,
       lv_round_up___1__h66185,
       lv_round_up___1__h87712,
       lv_round_up___1__h87748,
       lv_roundup___1__h16410,
       lv_roundup___1__h16792,
       lv_roundup___1__h209545,
       lv_roundup___1__h209582,
       lv_roundup___1__h220620,
       lv_roundup___1__h220657,
       lv_roundup___1__h245695,
       lv_roundup___1__h245731,
       lv_roundup___1__h89667,
       lv_roundup___1__h90049,
       lv_sign__h220890,
       lv_sticky___1__h7047,
       lv_sticky___1__h73084,
       lv_sticky__h16336,
       lv_sticky__h193915,
       lv_sticky__h248117,
       lv_sticky__h251189,
       lv_sticky__h264196,
       lv_sticky__h264584,
       lv_sticky__h65533,
       lv_sticky__h89593,
       op_xor_sign3__h118023,
       op_xor_sign3__h30270,
       or_sign__h225960,
       or_sign__h228539,
       quiet_nan_two__h268165,
       quiet_nan_two__h270352,
       sign2__h118010,
       sign2__h30257,
       sign3__h118012,
       sign3__h30259,
       sign__h235102,
       x__h117755,
       x__h117786,
       x__h117816,
       x__h118164,
       x__h118176,
       x__h14083,
       x__h14088,
       x__h14317,
       x__h14467,
       x__h14502,
       x__h14504,
       x__h16701,
       x__h167429,
       x__h167436,
       x__h167544,
       x__h167584,
       x__h167586,
       x__h167588,
       x__h167589,
       x__h167617,
       x__h167629,
       x__h167659,
       x__h16816,
       x__h194497,
       x__h194579,
       x__h203962,
       x__h209558,
       x__h209834,
       x__h220633,
       x__h235123,
       x__h245708,
       x__h249067,
       x__h249438,
       x__h252142,
       x__h252511,
       x__h264794,
       x__h264887,
       x__h264889,
       x__h268478,
       x__h268741,
       x__h268747,
       x__h268804,
       x__h268817,
       x__h268907,
       x__h270661,
       x__h270924,
       x__h270930,
       x__h270986,
       x__h270999,
       x__h271089,
       x__h282196,
       x__h282260,
       x__h282275,
       x__h282280,
       x__h30002,
       x__h30033,
       x__h30063,
       x__h301588,
       x__h301603,
       x__h301608,
       x__h30411,
       x__h30423,
       x__h342407,
       x__h53141,
       x__h53148,
       x__h53256,
       x__h53296,
       x__h53298,
       x__h53300,
       x__h53301,
       x__h53329,
       x__h53341,
       x__h53371,
       x__h66115,
       x__h66197,
       x__h87341,
       x__h87346,
       x__h87575,
       x__h87725,
       x__h87760,
       x__h87762,
       x__h89958,
       x__h90073,
       y__h118177,
       y__h14466,
       y__h14503,
       y__h16422,
       y__h167585,
       y__h167587,
       y__h167630,
       y__h16804,
       y__h194357,
       y__h194593,
       y__h209557,
       y__h209595,
       y__h220632,
       y__h220670,
       y__h245707,
       y__h245744,
       y__h248821,
       y__h249451,
       y__h251896,
       y__h252524,
       y__h264756,
       y__h268818,
       y__h268820,
       y__h268864,
       y__h271000,
       y__h271002,
       y__h271046,
       y__h30424,
       y__h304523,
       y__h304544,
       y__h315113,
       y__h315134,
       y__h53297,
       y__h53299,
       y__h53342,
       y__h65975,
       y__h66211,
       y__h87724,
       y__h87761,
       y__h89679,
       y__h90061,
       y_avValue_snd_snd_fst__h264821,
       y_avValue_snd_snd_snd_fst__h264817;

  // action method _start
  assign RDY__start = !rg_multicycle_op && ff_input_FULL_N ;
  assign CAN_FIRE__start = !rg_multicycle_op && ff_input_FULL_N ;
  assign WILL_FIRE__start = EN__start ;

  // value method get_result
  assign get_result = rg_result ;
  assign RDY_get_result = 1'd1 ;

  // action method flush
  assign RDY_flush = 1'd1 ;
  assign CAN_FIRE_flush = 1'd1 ;
  assign WILL_FIRE_flush = EN_flush ;

  // submodule ff_input
  FIFO1 #(.width(32'd209), .guarded(1'd1)) ff_input(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ff_input_D_IN),
						    .ENQ(ff_input_ENQ),
						    .DEQ(ff_input_DEQ),
						    .CLR(ff_input_CLR),
						    .D_OUT(ff_input_D_OUT),
						    .FULL_N(ff_input_FULL_N),
						    .EMPTY_N(ff_input_EMPTY_N));

  // rule RL_rl_get_output_from_spfpu_sqrt
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     inst_spfpu_sqrt_ff_final_out[37] && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt ;

  // rule RL_rl_get_output_from_dpfpu_sqrt
  assign CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt =
	     inst_dpfpu_sqrt_ff_final_out[69] && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt =
	     CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt ;

  // rule RL_flush_fifo
  assign CAN_FIRE_RL_flush_fifo = EN_flush ;
  assign WILL_FIRE_RL_flush_fifo = EN_flush ;

  // rule RL_inst_spfpu_divider_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_divider_rl_stage2
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 =
	     inst_spfpu_divider_int_div_rg_state == 6'd0 &&
	     inst_spfpu_divider_rg_state_handler == 2'd1 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 ;

  // rule RL_inst_spfpu_divider_rl_stage4
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 =
	     inst_spfpu_divider_rg_state_handler == 2'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 ;

  // rule RL_rl_get_output_from_spfpu_divider
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_divider =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_divider =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_divider ;

  // rule RL_inst_spfpu_divider_int_div_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_divider_int_div_stage_1
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1 =
	     inst_spfpu_divider_int_div_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;

  // rule RL_inst_spfpu_divider_int_div_recursive_stage
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage =
	     inst_spfpu_divider_int_div_rg_state > 6'd1 &&
	     inst_spfpu_divider_int_div_rg_state <= 6'd12 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ;

  // rule RL_inst_spfpu_divider_int_div_end_stage
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage =
	     inst_spfpu_divider_int_div_rg_state == 6'd13 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage ;

  // rule __me_check_1
  assign CAN_FIRE___me_check_1 = 1'b1 ;
  assign WILL_FIRE___me_check_1 = 1'b1 ;

  // rule __me_check_2
  assign CAN_FIRE___me_check_2 = 1'b1 ;
  assign WILL_FIRE___me_check_2 = 1'b1 ;

  // rule __me_check_3
  assign CAN_FIRE___me_check_3 = 1'b1 ;
  assign WILL_FIRE___me_check_3 = 1'b1 ;

  // rule RL_inst_spfpu_divider_rl_stage3
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage &&
	     inst_spfpu_divider_rg_state_handler == 2'd2 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // rule __me_check_5
  assign CAN_FIRE___me_check_5 = 1'b1 ;
  assign WILL_FIRE___me_check_5 = 1'b1 ;

  // rule __me_check_6
  assign CAN_FIRE___me_check_6 = 1'b1 ;
  assign WILL_FIRE___me_check_6 = 1'b1 ;

  // rule RL_inst_spfpu_sqrt_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_sqrt_rl_stage2
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2 =
	     inst_spfpu_sqrt_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ;

  // rule RL_inst_spfpu_sqrt_rl_inter_stage
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage =
	     inst_spfpu_sqrt_rg_state > 6'd1 &&
	     inst_spfpu_sqrt_rg_state < 6'd25 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ;

  // rule RL_inst_spfpu_sqrt_rl_final_stage
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage =
	     inst_spfpu_sqrt_rg_state == 6'd25 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ;

  // rule __me_check_10
  assign CAN_FIRE___me_check_10 = 1'b1 ;
  assign WILL_FIRE___me_check_10 = 1'b1 ;

  // rule __me_check_11
  assign CAN_FIRE___me_check_11 = 1'b1 ;
  assign WILL_FIRE___me_check_11 = 1'b1 ;

  // rule __me_check_12
  assign CAN_FIRE___me_check_12 = 1'b1 ;
  assign WILL_FIRE___me_check_12 = 1'b1 ;

  // rule RL_inst_spfm_add_sub_rl_flush
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_flush = EN_flush ;

  // rule RL_inst_spfm_add_sub_rl_stage1_after_input_stage
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage =
	     inst_spfm_add_sub_rg_state_handler == 3'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ;

  // rule RL_inst_spfm_add_sub_rl_stage_3
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 =
	     inst_spfm_add_sub_rg_state_handler == 3'd2 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ;

  // rule RL_inst_spfm_add_sub_rl_stage4
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 =
	     inst_spfm_add_sub_rg_state_handler == 3'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // rule RL_inst_spfm_add_sub_rl_stage_5_final_stage
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage =
	     inst_spfm_add_sub_rg_state_handler == 3'd4 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage ;

  // rule RL_rl_get_output_from_fm_add_sub
  assign CAN_FIRE_RL_rl_get_output_from_fm_add_sub =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_fm_add_sub =
	     CAN_FIRE_RL_rl_get_output_from_fm_add_sub ;

  // rule RL_inst_dpfpu_divider_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_divider_rl_stage2
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 =
	     inst_dpfpu_divider_int_div_rg_state == 6'd0 &&
	     inst_dpfpu_divider_rg_state_handler == 2'd1 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 ;

  // rule RL_inst_dpfpu_divider_rl_stage4
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 =
	     inst_dpfpu_divider_rg_state_handler == 2'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 ;

  // rule RL_rl_get_output_from_dpfpu_divider
  assign CAN_FIRE_RL_rl_get_output_from_dpfpu_divider =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfpu_divider =
	     CAN_FIRE_RL_rl_get_output_from_dpfpu_divider ;

  // rule RL_inst_dpfpu_divider_int_div_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_divider_int_div_stage_1
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 =
	     inst_dpfpu_divider_int_div_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;

  // rule RL_inst_dpfpu_divider_int_div_recursive_stage
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage =
	     inst_dpfpu_divider_int_div_rg_state > 6'd1 &&
	     inst_dpfpu_divider_int_div_rg_state <= 6'd26 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ;

  // rule RL_inst_dpfpu_divider_int_div_end_stage
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage =
	     inst_dpfpu_divider_int_div_rg_state == 6'd27 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage ;

  // rule __me_check_19
  assign CAN_FIRE___me_check_19 = 1'b1 ;
  assign WILL_FIRE___me_check_19 = 1'b1 ;

  // rule __me_check_20
  assign CAN_FIRE___me_check_20 = 1'b1 ;
  assign WILL_FIRE___me_check_20 = 1'b1 ;

  // rule __me_check_21
  assign CAN_FIRE___me_check_21 = 1'b1 ;
  assign WILL_FIRE___me_check_21 = 1'b1 ;

  // rule RL_inst_dpfpu_divider_rl_stage3
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage &&
	     inst_dpfpu_divider_rg_state_handler == 2'd2 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // rule __me_check_23
  assign CAN_FIRE___me_check_23 = 1'b1 ;
  assign WILL_FIRE___me_check_23 = 1'b1 ;

  // rule __me_check_24
  assign CAN_FIRE___me_check_24 = 1'b1 ;
  assign WILL_FIRE___me_check_24 = 1'b1 ;

  // rule RL_inst_dpfpu_sqrt_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_sqrt_rl_stage2
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 =
	     inst_dpfpu_sqrt_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ;

  // rule RL_inst_dpfpu_sqrt_rl_inter_stage
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage =
	     inst_dpfpu_sqrt_rg_state > 6'd1 &&
	     inst_dpfpu_sqrt_rg_state < 6'd54 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ;

  // rule RL_inst_dpfpu_sqrt_rl_final_stage
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage =
	     inst_dpfpu_sqrt_rg_state == 6'd54 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ;

  // rule __me_check_28
  assign CAN_FIRE___me_check_28 = 1'b1 ;
  assign WILL_FIRE___me_check_28 = 1'b1 ;

  // rule __me_check_29
  assign CAN_FIRE___me_check_29 = 1'b1 ;
  assign WILL_FIRE___me_check_29 = 1'b1 ;

  // rule __me_check_30
  assign CAN_FIRE___me_check_30 = 1'b1 ;
  assign WILL_FIRE___me_check_30 = 1'b1 ;

  // rule RL_inst_dpfm_add_sub_rl_flush
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_flush = EN_flush ;

  // rule RL_inst_dpfm_add_sub_rl_stage1_after_input_stage
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage =
	     inst_dpfm_add_sub_rg_state_handler == 3'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ;

  // rule RL_inst_dpfm_add_sub_rl_stage_3
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 =
	     inst_dpfm_add_sub_rg_state_handler == 3'd2 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ;

  // rule RL_inst_dpfm_add_sub_rl_stage4
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 =
	     inst_dpfm_add_sub_rg_state_handler == 3'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // rule RL_inst_dpfm_add_sub_rl_stage_5_final_stage
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage =
	     inst_dpfm_add_sub_rg_state_handler == 3'd4 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage ;

  // rule RL_rl_get_output_from_dpfm_add_sub
  assign CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub =
	     CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub ;

  // rule __me_check_38
  assign CAN_FIRE___me_check_38 = 1'b1 ;
  assign WILL_FIRE___me_check_38 = 1'b1 ;

  // rule __me_check_39
  assign CAN_FIRE___me_check_39 = 1'b1 ;
  assign WILL_FIRE___me_check_39 = 1'b1 ;

  // rule __me_check_40
  assign CAN_FIRE___me_check_40 = 1'b1 ;
  assign WILL_FIRE___me_check_40 = 1'b1 ;

  // rule __me_check_41
  assign CAN_FIRE___me_check_41 = 1'b1 ;
  assign WILL_FIRE___me_check_41 = 1'b1 ;

  // rule __me_check_42
  assign CAN_FIRE___me_check_42 = 1'b1 ;
  assign WILL_FIRE___me_check_42 = 1'b1 ;

  // rule RL_start_stage
  assign CAN_FIRE_RL_start_stage =
	     ff_input_EMPTY_N && inst_spfpu_sqrt_rg_state == 6'd0 &&
	     inst_dpfpu_sqrt_rg_state == 6'd0 ;
  assign WILL_FIRE_RL_start_stage = CAN_FIRE_RL_start_stage ;

  // rule RL_rg_result__dreg_update
  assign CAN_FIRE_RL_rg_result__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_result__dreg_update = 1'd1 ;

  // rule RL_inst_spfpu_sqrt_ff_final_out__dreg_update
  assign CAN_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;

  // rule RL_inst_dpfpu_sqrt_ff_final_out__dreg_update
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5266 ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 =
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;
  assign MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5462 ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5840 ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5867 ;
  assign MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5865 ;
  assign MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5187 ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 =
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;
  assign MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5340 ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5721 ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5748 ;
  assign MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5746 ;
  assign MUX_rg_multicycle_op_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5176 ;
  assign MUX_rg_result_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] == 5'b10100 ||
	      ff_input_D_OUT[12:8] == 5'b00101 ||
	      ff_input_D_OUT[12:8] == 5'b11010 ||
	      ff_input_first__309_BITS_12_TO_8_310_EQ_0b100__ETC___d3335) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ;
  assign MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2 =
	     inst_dpfpu_divider_int_div_rg_state + 6'd1 ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 =
	     { inst_dpfpu_divider_int_div_rg_inter_stage, 2'd0 } ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 =
	     { inst_dpfpu_divider_int_div_rg_inter_stage, 2'd2 } ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3 =
	     { x__h71496, 2'd0 } ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1 =
	     (IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 ||
	      ff_input_D_OUT[208] &&
	      (IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 ||
	       condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	       !condFlags64_reswget_BITS_14_TO_10__q30[3])) ?
	       { 65'h17FF8000000000000, fflags__h315099 } :
	       ((condFlags64_reswget_BITS_14_TO_10__q30[1] &&
		 !ff_input_D_OUT[208]) ?
		  70'h2FFE00000000000000 :
		  { 1'd1, final_result__h315274, 5'd0 }) ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2 =
	     { 1'd1, final_result__h89600, fflags__h89644 } ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1 =
	     { mantissa__h314851,
	       x__h333202,
	       result_exponent__h314848,
	       ff_input_D_OUT[208],
	       _theResult_____3__h314849,
	       IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__428_ETC___d5996,
	       ff_input_D_OUT[5:3] } ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2 =
	     { mantissa__h89253,
	       x__h89297,
	       inst_dpfpu_sqrt_rg_inter_stage[128:116],
	       _theResult____h89251,
	       x__h89560,
	       inst_dpfpu_sqrt_rg_inter_stage[2:0] } ;
  assign MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1 =
	     inst_dpfpu_sqrt_rg_state + 6'd1 ;
  assign MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3 =
	     inst_spfpu_divider_int_div_rg_state + 6'd1 ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 =
	     { inst_spfpu_divider_int_div_rg_inter_stage, 2'd0 } ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 =
	     { inst_spfpu_divider_int_div_rg_inter_stage, 2'd3 } ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3 =
	     { x__h5459, 2'd0 } ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1 =
	     (IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 ||
	      ff_input_D_OUT[176] &&
	      (IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 ||
	       condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	       !condFlags32_reswget_BITS_14_TO_10__q52[3])) ?
	       { 33'h17FC00000, fflags__h304509 } :
	       ((condFlags32_reswget_BITS_14_TO_10__q52[1] &&
		 !ff_input_D_OUT[176]) ?
		  38'h2FF0000000 :
		  { 1'd1, final_result__h304684, 5'd0 }) ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2 =
	     { 1'd1, final_result__h16343, fflags__h16387 } ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1 =
	     { mantissa__h304260,
	       x__h313274,
	       result_exponent__h304257,
	       ff_input_D_OUT[176],
	       _theResult_____3__h304258,
	       IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__343_ETC___d5820,
	       ff_input_D_OUT[5:3] } ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2 =
	     { mantissa__h15996,
	       x__h16040,
	       inst_spfpu_sqrt_rg_inter_stage[67:58],
	       _theResult____h15994,
	       x__h16303,
	       inst_spfpu_sqrt_rg_inter_stage[2:0] } ;
  assign MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1 =
	     inst_spfpu_sqrt_rg_state + 6'd1 ;
  always@(ff_input_D_OUT or
	  IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4457 or
	  x_data__h245869 or
	  x_data__h246173 or
	  IF_ff_input_first__309_BIT_0_341_THEN_IF_ff_in_ETC___d3521 or
	  IF_ff_input_first__309_BIT_0_341_THEN_IF_NOT_I_ETC___d4252 or
	  IF_ff_input_first__309_BIT_0_341_THEN_42949672_ETC___d3802)
  begin
    case (ff_input_D_OUT[12:8])
      5'b00100:
	  MUX_rg_result_1_wset_1__VAL_1 =
	      { ff_input_D_OUT[0] ? x_data__h245869 : x_data__h246173,
		6'd32 };
      5'b00101, 5'b10100:
	  MUX_rg_result_1_wset_1__VAL_1 =
	      IF_ff_input_first__309_BIT_0_341_THEN_IF_ff_in_ETC___d3521;
      5'b11000:
	  MUX_rg_result_1_wset_1__VAL_1 =
	      IF_ff_input_first__309_BIT_0_341_THEN_IF_NOT_I_ETC___d4252;
      5'b11010:
	  MUX_rg_result_1_wset_1__VAL_1 =
	      IF_ff_input_first__309_BIT_0_341_THEN_42949672_ETC___d3802;
      default: MUX_rg_result_1_wset_1__VAL_1 =
		   IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4457;
    endcase
  end
  assign MUX_rg_result_1_wset_1__VAL_2 =
	     { inst_dpfm_add_sub_ff_final_out_wget[68:5],
	       1'd1,
	       inst_dpfm_add_sub_ff_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_3 =
	     { inst_dpfpu_divider_wr_final_out_wget[68:5],
	       1'd1,
	       inst_dpfpu_divider_wr_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_4 =
	     { x_data__h345107,
	       1'd1,
	       inst_spfm_add_sub_ff_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_5 =
	     { x_data__h344868,
	       1'd1,
	       inst_spfpu_divider_wr_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_6 =
	     { inst_dpfpu_sqrt_ff_final_out[68:5],
	       1'd1,
	       inst_dpfpu_sqrt_ff_final_out[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_7 =
	     { x_data__h344992, 1'd1, inst_spfpu_sqrt_ff_final_out[4:0] } ;

  // inlined wires
  always@(MUX_rg_result_1_wset_1__SEL_1 or
	  MUX_rg_result_1_wset_1__VAL_1 or
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub or
	  MUX_rg_result_1_wset_1__VAL_2 or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_divider or
	  MUX_rg_result_1_wset_1__VAL_3 or
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub or
	  MUX_rg_result_1_wset_1__VAL_4 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_divider or
	  MUX_rg_result_1_wset_1__VAL_5 or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt or
	  MUX_rg_result_1_wset_1__VAL_6 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt or
	  MUX_rg_result_1_wset_1__VAL_7)
  case (1'b1)
    MUX_rg_result_1_wset_1__SEL_1:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_1;
    WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_2;
    WILL_FIRE_RL_rl_get_output_from_dpfpu_divider:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_3;
    WILL_FIRE_RL_rl_get_output_from_fm_add_sub:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_4;
    WILL_FIRE_RL_rl_get_output_from_spfpu_divider:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_5;
    WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_6;
    WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_7;
    default: rg_result_1_wget =
		 70'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_result_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] == 5'b10100 ||
	      ff_input_D_OUT[12:8] == 5'b00101 ||
	      ff_input_D_OUT[12:8] == 5'b11010 ||
	      ff_input_first__309_BITS_12_TO_8_310_EQ_0b100__ETC___d3335) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_fm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub ;
  always@(MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1;
      WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2;
      WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
      default: inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
		   85'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign inst_spfpu_divider_wr_final_out_wget =
	     inst_spfpu_divider_rg_stage3[11] ?
	       { lv_final_output__h14260, _theResult_____1_snd__h14261 } :
	       IF_inst_spfpu_divider_rg_stage3_72_BIT_10_79_T_ETC___d360 ;
  assign inst_spfpu_sqrt_ff_final_out_1_wget =
	     MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1 ?
	       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1 :
	       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2 ;
  assign inst_spfpu_sqrt_ff_final_out_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5721 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ;
  assign inst_spfm_add_sub_ff_final_out_wget =
	     { new_value_final_result__h65567, fflags__h65558 } ;
  always@(MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1;
      WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2;
      WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
      default: inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
		   172'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign inst_dpfpu_divider_wr_final_out_wget =
	     inst_dpfpu_divider_rg_stage3[11] ?
	       { lv_final_output__h87518, _theResult_____1_snd__h87519 } :
	       IF_inst_dpfpu_divider_rg_stage3_675_BIT_10_682_ETC___d1763 ;
  assign inst_dpfpu_sqrt_ff_final_out_1_wget =
	     MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1 ?
	       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1 :
	       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2 ;
  assign inst_dpfpu_sqrt_ff_final_out_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5840 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ;
  assign inst_dpfm_add_sub_ff_final_out_wget =
	     { new_value_final_result__h193949, fflags__h193940 } ;
  assign inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget =
	     { ff_input_D_OUT[176:145],
	       ff_input_D_OUT[1],
	       ff_input_D_OUT[5:3] } ;
  assign inst_fpu_int_to_fp_fcvt_s_llu_arg_wget =
	     { ff_input_D_OUT[208:145],
	       ff_input_D_OUT[1],
	       ff_input_D_OUT[5:3] } ;
  assign condFlags32_arg_wget =
	     { getMant32_res_wget[68:46],
	       getExp32_res_wget[23:16],
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4641 } ;
  assign condFlags32_res_wget = { x__h247332, x__h247666, x__h247847 } ;
  assign getMant32_arg_wget =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { setCanonicalNaN_res_wget[95:32], 32'd0 } :
	       (ff_input_first__309_BITS_12_TO_8_310_EQ_0b1100_ETC___d4597 ?
		  { setCanonicalNaN_res_wget[95:64], 64'd0 } :
		  (((ff_input_D_OUT[12:8] == 5'b0 ||
		     ff_input_D_OUT[12:8] == 5'b00001) &&
		    ff_input_D_OUT[16:13] == 4'b0100) ?
		     { 32'h3F800000, setCanonicalNaN_res_wget[95:32] } :
		     ((ff_input_D_OUT[12:8] == 5'b00011 &&
		       ff_input_D_OUT[16:13] == 4'b0100) ?
			setCanonicalNaN_res_wget :
			((ff_input_D_OUT[12:8] == 5'b01011 &&
			  ff_input_D_OUT[16:13] == 4'b0100) ?
			   { setCanonicalNaN_res_wget[95:64], 64'd0 } :
			   ((ff_input_D_OUT[12:8] == 5'b00010 &&
			     ff_input_D_OUT[16:13] == 4'b0100) ?
			      { setCanonicalNaN_res_wget[95:32], 32'd0 } :
			      setCanonicalNaN_res_wget))))) ;
  assign getMant32_res_wget =
	     { getMant32_argwget_BITS_95_TO_64__q44[22:0],
	       getMant32_argwget_BITS_63_TO_32__q45[22:0],
	       getMant32_argwget_BITS_31_TO_0__q46[22:0] } ;
  assign getExp32_res_wget =
	     { getMant32_argwget_BITS_95_TO_64__q44[30:23],
	       getMant32_argwget_BITS_63_TO_32__q45[30:23],
	       getMant32_argwget_BITS_31_TO_0__q46[30:23] } ;
  assign condFlags64_arg_wget =
	     { getMant64_res_wget[155:104],
	       getExp64_res_wget[32:22],
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4776 } ;
  assign condFlags64_res_wget = { x__h250403, x__h250737, x__h250918 } ;
  assign getMant64_arg_wget =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[208:81], 64'd0 } :
	       (ff_input_first__309_BITS_12_TO_8_310_EQ_0b1100_ETC___d4597 ?
		  { ff_input_D_OUT[208:145], 128'd0 } :
		  (((ff_input_D_OUT[12:8] == 5'b0 ||
		     ff_input_D_OUT[12:8] == 5'b00001) &&
		    ff_input_D_OUT[16:13] == 4'b0100) ?
		     { 64'h3FF0000000000000, ff_input_D_OUT[208:81] } :
		     ((ff_input_D_OUT[12:8] == 5'b00011 &&
		       ff_input_D_OUT[16:13] == 4'b0100) ?
			{ ff_input_D_OUT[208:81], 64'd0 } :
			((ff_input_D_OUT[12:8] == 5'b01011 &&
			  ff_input_D_OUT[16:13] == 4'b0100) ?
			   { ff_input_D_OUT[208:145], 128'd0 } :
			   ((ff_input_D_OUT[12:8] == 5'b00010 &&
			     ff_input_D_OUT[16:13] == 4'b0100) ?
			      { ff_input_D_OUT[208:81], 64'd0 } :
			      ff_input_D_OUT[208:17]))))) ;
  assign getMant64_res_wget =
	     { getMant64_argwget_BITS_191_TO_128__q22[51:0],
	       getMant64_argwget_BITS_127_TO_64__q23[51:0],
	       getMant64_argwget_BITS_63_TO_0__q24[51:0] } ;
  assign getExp64_res_wget =
	     { getMant64_argwget_BITS_191_TO_128__q22[62:52],
	       getMant64_argwget_BITS_127_TO_64__q23[62:52],
	       getMant64_argwget_BITS_63_TO_0__q24[62:52] } ;
  assign setCanonicalNaN_arg_wget =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101 ||
	       ff_input_D_OUT[12:8] == 5'b00100) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[208:81], 64'hFFFFFFFFFFFFFFFF } :
	       ((ff_input_D_OUT[12:8] == 5'b11000 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  { ff_input_D_OUT[208:145], 128'd0 } :
		  (((ff_input_D_OUT[12:8] == 5'b11100 &&
		     ff_input_D_OUT[5:3] == 3'b001 ||
		     ff_input_D_OUT[12:8] == 5'b01000) &&
		    ff_input_D_OUT[16:13] == 4'b0100) ?
		     { ff_input_D_OUT[208:145],
		       128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF } :
		     (((ff_input_D_OUT[12:8] == 5'b0 ||
			ff_input_D_OUT[12:8] == 5'b00001 ||
			ff_input_D_OUT[12:8] == 5'b00011) &&
		       ff_input_D_OUT[16:13] == 4'b0100) ?
			{ ff_input_D_OUT[208:81], 64'hFFFFFFFFFFFFFFFF } :
			((ff_input_D_OUT[12:8] == 5'b01011 &&
			  ff_input_D_OUT[16:13] == 4'b0100) ?
			   { ff_input_D_OUT[208:145],
			     128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF } :
			   ((ff_input_D_OUT[12:8] == 5'b00010 &&
			     ff_input_D_OUT[16:13] == 4'b0100) ?
			      { ff_input_D_OUT[208:81],
				64'hFFFFFFFFFFFFFFFF } :
			      ff_input_D_OUT[208:17]))))) ;
  assign setCanonicalNaN_res_wget = { x__h220976, x__h221117, x__h221199 } ;

  // register inst_dpfm_add_sub_ff_input_register
  assign inst_dpfm_add_sub_ff_input_register_D_IN =
	     { _0_CONCAT_INV_IF_condFlags64_res_whas__428_THEN_ETC___d5277[105:0],
	       lv_summed_exponent__h270358,
	       ((ff_input_D_OUT[12:8] == 5'b0 ||
		 ff_input_D_OUT[12:8] == 5'b00001) &&
		ff_input_D_OUT[16:13] == 4'b0100) ?
		 ff_input_D_OUT[208] :
		 ff_input_first__309_BIT_208_447_XOR_ff_input_f_ETC___d3810,
	       ((ff_input_D_OUT[12:8] == 5'b0 ||
		 ff_input_D_OUT[12:8] == 5'b00001) &&
		ff_input_D_OUT[16:13] == 4'b0100) ?
		 ff_input_D_OUT[144] :
		 (ff_input_D_OUT[12:8] != 5'b00010 ||
		  ff_input_D_OUT[16:13] != 4'b0100) &&
		 ff_input_D_OUT[80],
	       getExp64_res_wget[10:0],
	       getMant64_res_wget[51:0],
	       x__h270661,
	       x__h270924,
	       x__h270930,
	       condFlags64_res_wget[4:0],
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5325 } ;
  assign inst_dpfm_add_sub_ff_input_register_EN =
	     MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 ;

  // register inst_dpfm_add_sub_ff_stage2
  assign inst_dpfm_add_sub_ff_stage2_D_IN =
	     { inst_dpfm_add_sub_ff_input_register[81],
	       inst_dpfm_add_sub_ff_input_register[4],
	       x_lv_product_exponent__h90562,
	       x_lv_product_mantissa__h90563,
	       inst_dpfm_add_sub_ff_input_register[80:17],
	       inst_dpfm_add_sub_ff_input_register[13:9],
	       inst_dpfm_add_sub_ff_input_register[5],
	       inst_dpfm_add_sub_ff_input_register[3:2],
	       inst_dpfm_add_sub_ff_input_register[8:6],
	       inst_dpfm_add_sub_ff_input_register[16],
	       inst_dpfm_add_sub_ff_input_register[14],
	       inst_dpfm_add_sub_ff_input_register[15],
	       x__h117755,
	       x__h117816,
	       inst_dpfm_add_sub_ff_input_register[1:0] } ;
  assign inst_dpfm_add_sub_ff_stage2_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ;

  // register inst_dpfm_add_sub_ff_stage4
  assign inst_dpfm_add_sub_ff_stage4_D_IN =
	     { x__h167544,
	       x__h118164,
	       _theResult_____1__h118058,
	       lv_minuend__h118044,
	       mantissa2__h118054,
	       mantissa3__h118055,
	       inst_dpfm_add_sub_ff_stage2[9:7],
	       x__h167436,
	       x__h167552,
	       x__h167593,
	       inst_dpfm_add_sub_ff_stage2[3:2],
	       x__h167617,
	       x__h167659,
	       inst_dpfm_add_sub_ff_stage2[5] } ;
  assign inst_dpfm_add_sub_ff_stage4_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ;

  // register inst_dpfm_add_sub_ff_stage5
  assign inst_dpfm_add_sub_ff_stage5_D_IN =
	     { inst_dpfm_add_sub_ff_stage4[345:333],
	       _theResult____h167775,
	       inst_dpfm_add_sub_ff_stage4[347],
	       inst_dpfm_add_sub_ff_stage4[12:10],
	       x__h167852,
	       inst_dpfm_add_sub_ff_stage4[9:0],
	       lv_zeros_on_left__h167777 } ;
  assign inst_dpfm_add_sub_ff_stage5_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // register inst_dpfm_add_sub_rg_state_handler
  always@(MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage or
	  EN_flush)
  case (1'b1)
    MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd1;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd0;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd4;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd3;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd2;
    EN_flush: inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd0;
    default: inst_dpfm_add_sub_rg_state_handler_D_IN =
		 3'bxxx /* unspecified value */ ;
  endcase
  assign inst_dpfm_add_sub_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5266 ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // register inst_dpfpu_divider_int_div_rg_inter_stage
  assign inst_dpfpu_divider_int_div_rg_inter_stage_D_IN = x_wget__h66759 ;
  assign inst_dpfpu_divider_int_div_rg_inter_stage_EN =
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;

  // register inst_dpfpu_divider_int_div_rg_state
  always@(WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage or
	  MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2 or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 or
	  EN_flush or WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2)
  case (1'b1)
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage:
	inst_dpfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2;
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2;
    EN_flush: inst_dpfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2;
    default: inst_dpfpu_divider_int_div_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_divider_int_div_rg_state_EN =
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage ||
	     EN_flush ;

  // register inst_dpfpu_divider_rg_stage1
  assign inst_dpfpu_divider_rg_stage1_D_IN =
	     { lv_exponent__h284236,
	       x__h301478,
	       x__h301506,
	       ff_input_first__309_BIT_208_447_XOR_ff_input_f_ETC___d3810,
	       IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 ||
	       lv_op2_Nan__h228538 ||
	       condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	       condFlags64_reswget_BITS_9_TO_5__q31[1] ||
	       condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	       condFlags64_reswget_BITS_9_TO_5__q31[3],
	       x__h301588,
	       x__h301603,
	       x__h301608,
	       ff_input_D_OUT[5:3],
	       quiet_nan_two__h270352 } ;
  assign inst_dpfpu_divider_rg_stage1_EN =
	     MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 ;

  // register inst_dpfpu_divider_rg_stage2
  assign inst_dpfpu_divider_rg_stage2_D_IN =
	     { inst_dpfpu_divider_rg_stage1[127:115],
	       inst_dpfpu_divider_rg_stage1[8],
	       inst_dpfpu_divider_rg_stage1[6],
	       inst_dpfpu_divider_rg_stage1[7],
	       inst_dpfpu_divider_rg_stage1[5:0] } ;
  assign inst_dpfpu_divider_rg_stage2_EN =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 ;

  // register inst_dpfpu_divider_rg_stage3
  assign inst_dpfpu_divider_rg_stage3_D_IN =
	     { x_lv_quotient__h72949,
	       x_wget__h66759[113:57],
	       x_lv_exponent__h72950,
	       inst_dpfpu_divider_rg_stage2[8:5],
	       x__h87341,
	       !inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447,
	       x__h87346,
	       inst_dpfpu_divider_rg_stage2[4:1],
	       inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447 &&
	       NOT_inst_dpfpu_divider_rg_stage2_444_BITS_21_T_ETC___d1649,
	       inst_dpfpu_divider_rg_stage2[0] } ;
  assign inst_dpfpu_divider_rg_stage3_EN =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // register inst_dpfpu_divider_rg_state_handler
  always@(MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd1;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd3;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd2;
    EN_flush: inst_dpfpu_divider_rg_state_handler_D_IN = 2'd0;
    default: inst_dpfpu_divider_rg_state_handler_D_IN =
		 2'bxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_divider_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5462 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // register inst_dpfpu_sqrt_ff_final_out
  assign inst_dpfpu_sqrt_ff_final_out_D_IN =
	     inst_dpfpu_sqrt_ff_final_out_1_whas ?
	       inst_dpfpu_sqrt_ff_final_out_1_wget :
	       { 1'd0,
		 69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign inst_dpfpu_sqrt_ff_final_out_EN = 1'd1 ;

  // register inst_dpfpu_sqrt_rg_inter_stage
  assign inst_dpfpu_sqrt_rg_inter_stage_D_IN =
	     MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1 ?
	       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1 :
	       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2 ;
  assign inst_dpfpu_sqrt_rg_inter_stage_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5867 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ;

  // register inst_dpfpu_sqrt_rg_state
  always@(MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1 or
	  MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1 or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage:
	inst_dpfpu_sqrt_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    EN_flush: inst_dpfpu_sqrt_rg_state_D_IN = 6'd0;
    default: inst_dpfpu_sqrt_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_sqrt_rg_state_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5865 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ||
	     EN_flush ;

  // register inst_spfm_add_sub_ff_input_register
  assign inst_spfm_add_sub_ff_input_register_D_IN =
	     { _0_CONCAT_INV_IF_condFlags32_res_whas__343_THEN_ETC___d5198[47:0],
	       lv_summed_exponent__h268171,
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5208,
	       ((ff_input_D_OUT[12:8] == 5'b0 ||
		 ff_input_D_OUT[12:8] == 5'b00001) &&
		ff_input_D_OUT[16:13] == 4'b0100) ?
		 setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] :
		 (ff_input_D_OUT[12:8] != 5'b00010 ||
		  ff_input_D_OUT[16:13] != 4'b0100) &&
		 setCanonicalNaN_reswget_BITS_31_TO_0__q59[31],
	       getExp32_res_wget[7:0],
	       getMant32_res_wget[22:0],
	       x__h268478,
	       x__h268741,
	       x__h268747,
	       condFlags32_res_wget[4:0],
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5252 } ;
  assign inst_spfm_add_sub_ff_input_register_EN =
	     MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 ;

  // register inst_spfm_add_sub_ff_stage2
  assign inst_spfm_add_sub_ff_stage2_D_IN =
	     { inst_spfm_add_sub_ff_input_register[49],
	       inst_spfm_add_sub_ff_input_register[4],
	       x_lv_product_exponent__h17309,
	       x_lv_product_mantissa__h17310,
	       inst_spfm_add_sub_ff_input_register[48:17],
	       inst_spfm_add_sub_ff_input_register[13:9],
	       inst_spfm_add_sub_ff_input_register[5],
	       inst_spfm_add_sub_ff_input_register[3:2],
	       inst_spfm_add_sub_ff_input_register[8:6],
	       inst_spfm_add_sub_ff_input_register[16],
	       inst_spfm_add_sub_ff_input_register[14],
	       inst_spfm_add_sub_ff_input_register[15],
	       x__h30002,
	       x__h30063,
	       inst_spfm_add_sub_ff_input_register[1:0] } ;
  assign inst_spfm_add_sub_ff_stage2_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ;

  // register inst_spfm_add_sub_ff_stage4
  assign inst_spfm_add_sub_ff_stage4_D_IN =
	     { x__h53256,
	       x__h30411,
	       _theResult_____1__h30305,
	       lv_minuend__h30291,
	       mantissa2__h30301,
	       mantissa3__h30302,
	       inst_spfm_add_sub_ff_stage2[9:7],
	       x__h53148,
	       x__h53264,
	       x__h53305,
	       inst_spfm_add_sub_ff_stage2[3:2],
	       x__h53329,
	       x__h53371,
	       inst_spfm_add_sub_ff_stage2[5] } ;
  assign inst_spfm_add_sub_ff_stage4_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ;

  // register inst_spfm_add_sub_ff_stage5
  assign inst_spfm_add_sub_ff_stage5_D_IN =
	     { inst_spfm_add_sub_ff_stage4[168:159],
	       _theResult____h53487,
	       inst_spfm_add_sub_ff_stage4[170],
	       inst_spfm_add_sub_ff_stage4[12:10],
	       x__h53564,
	       inst_spfm_add_sub_ff_stage4[9:0],
	       lv_zeros_on_left__h53489 } ;
  assign inst_spfm_add_sub_ff_stage5_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // register inst_spfm_add_sub_rg_state_handler
  always@(MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage or
	  EN_flush)
  case (1'b1)
    MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd1;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd0;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd4;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd3;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd2;
    EN_flush: inst_spfm_add_sub_rg_state_handler_D_IN = 3'd0;
    default: inst_spfm_add_sub_rg_state_handler_D_IN =
		 3'bxxx /* unspecified value */ ;
  endcase
  assign inst_spfm_add_sub_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5187 ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // register inst_spfpu_divider_int_div_rg_inter_stage
  assign inst_spfpu_divider_int_div_rg_inter_stage_D_IN = x_wget__h695 ;
  assign inst_spfpu_divider_int_div_rg_inter_stage_EN =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;

  // register inst_spfpu_divider_int_div_rg_state
  always@(WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage or
	  MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3 or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 or
	  EN_flush or WILL_FIRE_RL_inst_spfpu_divider_rl_stage2)
  case (1'b1)
    WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage:
	inst_spfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3;
    WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3;
    EN_flush: inst_spfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3;
    default: inst_spfpu_divider_int_div_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_divider_int_div_rg_state_EN =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage ||
	     EN_flush ;

  // register inst_spfpu_divider_rg_stage1
  assign inst_spfpu_divider_rg_stage1_D_IN =
	     { lv_exponent__h274234,
	       x__h282138,
	       x__h282166,
	       x__h282196,
	       IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 ||
	       lv_op2_Nan__h225959 ||
	       condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	       condFlags32_reswget_BITS_9_TO_5__q53[1] ||
	       condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q53[3],
	       x__h282260,
	       x__h282275,
	       x__h282280,
	       ff_input_D_OUT[5:3],
	       quiet_nan_two__h268165 } ;
  assign inst_spfpu_divider_rg_stage1_EN =
	     MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 ;

  // register inst_spfpu_divider_rg_stage2
  assign inst_spfpu_divider_rg_stage2_D_IN =
	     { inst_spfpu_divider_rg_stage1[66:57],
	       inst_spfpu_divider_rg_stage1[8],
	       inst_spfpu_divider_rg_stage1[6],
	       inst_spfpu_divider_rg_stage1[7],
	       inst_spfpu_divider_rg_stage1[5:0] } ;
  assign inst_spfpu_divider_rg_stage2_EN =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 ;

  // register inst_spfpu_divider_rg_stage3
  assign inst_spfpu_divider_rg_stage3_D_IN =
	     { x_lv_quotient__h6912,
	       x_wget__h695[55:28],
	       x_lv_exponent__h6913,
	       inst_spfpu_divider_rg_stage2[8:5],
	       x__h14083,
	       !inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131,
	       x__h14088,
	       inst_spfpu_divider_rg_stage2[4:1],
	       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 &&
	       NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d246,
	       inst_spfpu_divider_rg_stage2[0] } ;
  assign inst_spfpu_divider_rg_stage3_EN =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // register inst_spfpu_divider_rg_state_handler
  always@(MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd1;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage3:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd3;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage4:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd0;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd2;
    EN_flush: inst_spfpu_divider_rg_state_handler_D_IN = 2'd0;
    default: inst_spfpu_divider_rg_state_handler_D_IN =
		 2'bxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_divider_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5340 ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // register inst_spfpu_sqrt_ff_final_out
  assign inst_spfpu_sqrt_ff_final_out_D_IN =
	     inst_spfpu_sqrt_ff_final_out_1_whas ?
	       inst_spfpu_sqrt_ff_final_out_1_wget :
	       { 1'd0,
		 37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign inst_spfpu_sqrt_ff_final_out_EN = 1'd1 ;

  // register inst_spfpu_sqrt_rg_inter_stage
  assign inst_spfpu_sqrt_rg_inter_stage_D_IN =
	     MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1 ?
	       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1 :
	       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2 ;
  assign inst_spfpu_sqrt_rg_inter_stage_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5748 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ;

  // register inst_spfpu_sqrt_rg_state
  always@(MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1 or
	  MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1 or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage:
	inst_spfpu_sqrt_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    EN_flush: inst_spfpu_sqrt_rg_state_D_IN = 6'd0;
    default: inst_spfpu_sqrt_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_sqrt_rg_state_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5746 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ||
	     EN_flush ;

  // register rg_multicycle_op
  assign rg_multicycle_op_D_IN = MUX_rg_multicycle_op_write_1__SEL_1 ;
  assign rg_multicycle_op_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5176 ||
	     EN_flush ||
	     WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_fm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ;

  // register rg_result
  assign rg_result_D_IN =
	     rg_result_1_whas ?
	       rg_result_1_wget :
	       { 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		 6'd0 } ;
  assign rg_result_EN = 1'd1 ;

  // submodule ff_input
  assign ff_input_D_IN =
	     { _start_operand1,
	       _start_operand2,
	       _start_operand3,
	       _start_opcode,
	       _start_funct7,
	       _start_funct3,
	       _start_imm,
	       _start_issp } ;
  assign ff_input_ENQ = EN__start ;
  assign ff_input_DEQ = CAN_FIRE_RL_start_stage ;
  assign ff_input_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__343_ETC___d5820 =
	     _theResult_____3__h304258[28] ? 26'd0 : 26'd1 ;
  assign IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__428_ETC___d5996 =
	     _theResult_____3__h314849[57] ? 55'd0 : 55'd1 ;
  assign IF_0b0_CONCAT_getExp64_res_wget__986_BITS_32_T_ETC___d4051 =
	     (x__h251313[10:0] == 11'd2047 &&
	      (ff_input_D_OUT[5:3] == 3'b100 ||
	       ff_input_D_OUT[5:3] == 3'b0 &&
	       getMant64_res_wget[155:104] != 52'd0)) ?
	       (ff_input_D_OUT[208] ?
		  IF_ff_input_first__309_BIT_1_534_THEN_0_ELSE_1_ETC___d3883 :
		  64'd1) :
	       64'd0 ;
  assign IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58 =
	     IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__343_ETC___d5820[0] ?
	       26'd1 :
	       26'd0 ;
  assign IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q37 =
	     IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__428_ETC___d5996[0] ?
	       55'd1 :
	       55'd0 ;
  assign IF_IF_IF_condFlags32_res_whas__343_THEN_condFl_ETC___d5813 =
	     IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5806[0] ?
	       mantissa__h304250 :
	       mantissa___1__h313245 ;
  assign IF_IF_IF_condFlags64_res_whas__428_THEN_condFl_ETC___d5989 =
	     IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5982[0] ?
	       mantissa__h314841 :
	       mantissa___1__h333173 ;
  assign IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3232 =
	     (_theResult_____5__h193919[53] ||
	      IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[159:158] ==
	      2'b0 &&
	      _theResult_____5__h193919[52]) ?
	       resultant_exponent___1__h194628 :
	       resultant_exponent__h193901 ;
  assign IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3245 =
	     _theResult_____5__h193919[53] ?
	       lv_rounded_mantissa__h194629 :
	       _theResult_____5__h193919 ;
  assign IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1383 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q17[57] ?
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q18[113:1] :
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19[113:1] ;
  assign IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1400 =
	     _remainder__h69467[57] ?
	       { _remainder___1__h69639, _dividend___1__h69640 } :
	       { _remainder__h69467, _dividend__h69470 } ;
  assign IF_IF_IF_inst_dpfpu_divider_rg_stage3_675_BITS_ETC___d1728 =
	     _theResult_____4__h87416[53] ?
	       lv_rounded_quotient__h87813 :
	       _theResult_____4__h87416 ;
  assign IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5015 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5011 ?
	       lv_man___1__h220692 :
	       lv_man__h209818 ;
  assign IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5139 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5135 ?
	       lv_man___1__h209617 :
	       lv_man__h203946 ;
  assign IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249 =
	     (_theResult_____5__h65537[24] ||
	      IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[72:71] ==
	      2'b0 &&
	      _theResult_____5__h65537[23]) ?
	       resultant_exponent___1__h66246 :
	       resultant_exponent__h65519 ;
  assign IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1262 =
	     _theResult_____5__h65537[24] ?
	       lv_rounded_mantissa__h66247 :
	       _theResult_____5__h65537 ;
  assign IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q11[28] ?
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12[55:1] :
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13[55:1] ;
  assign IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d84 =
	     _remainder__h3424[28] ?
	       { _remainder___1__h3596, _dividend___1__h3597 } :
	       { _remainder__h3424, _dividend__h3427 } ;
  assign IF_IF_IF_inst_spfpu_divider_rg_stage3_72_BITS__ETC___d325 =
	     _theResult_____4__h14158[24] ?
	       lv_rounded_quotient__h14555 :
	       _theResult_____4__h14158 ;
  assign IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3404 =
	     IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 ?
	       setCanonicalNaN_res_wget[63:32] :
	       (lv_op2_Nan__h225959 ?
		  setCanonicalNaN_res_wget[95:64] :
		  IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3402) ;
  assign IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[3] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[4] ||
	      IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822[7] &&
	      !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3827) ?
	       getMant32_res_wget[68:46] :
	       _theResult___snd_snd_fst__h248363 ;
  assign IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d4423 =
	     condFlags32_reswget_BITS_14_TO_10__q52[4] ?
	       { expo__h258438, man__h258440 } :
	       { expo__h258379, mant__h258380 } ;
  assign IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d4426 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[0]) ?
	       64'h7FF8000000000000 :
	       { setCanonicalNaN_reswget_BITS_95_TO_64__q41[31],
		 condFlags32_reswget_BITS_14_TO_10__q52[1] ?
		   63'h7FF0000000000000 :
		   IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d4423 } ;
  assign IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5753 =
	     condFlags32_reswget_BITS_14_TO_10__q52[4] ? 2'd0 : 2'd1 ;
  assign IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5806 =
	     x__h304801 - y__h304802 ;
  assign IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d3483 =
	     IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 ?
	       ff_input_D_OUT[144:81] :
	       (lv_op2_Nan__h228538 ?
		  ff_input_D_OUT[208:145] :
		  IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3481) ;
  assign IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[3] ||
	      condFlags64_reswget_BITS_14_TO_10__q30[4] ||
	      x__h251313[10] &&
	      !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3994) ?
	       getMant64_res_wget[155:104] :
	       _theResult___snd_snd_fst__h251438 ;
  assign IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4363 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[2] ||
	      condFlags64_reswget_BITS_14_TO_10__q30[0]) ?
	       32'h7FC00000 :
	       (condFlags64_reswget_BITS_14_TO_10__q30[1] ?
		  { ff_input_D_OUT[208], 31'h7F800000 } :
		  IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4361) ;
  assign IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4442 =
	     condFlags64_reswget_BITS_14_TO_10__q30[1] ?
	       5'd0 :
	       (IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4295 ?
		  result__h264999 :
		  5'd5) ;
  assign IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5871 =
	     condFlags64_reswget_BITS_14_TO_10__q30[4] ? 2'd0 : 2'd1 ;
  assign IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5982 =
	     x__h315391 - y__h315392 ;
  assign IF_IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0_ETC___d3706 =
	     IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3702 ?
	       lv_man___1__h245766 :
	       lv_man__h235107 ;
  assign IF_IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0_ETC___d4340 =
	     _theResult_____4___1__h264715 ?
	       fman___1__h265260 :
	       fman__h264915 ;
  assign IF_IF_getExp32_res_whas__818_THEN_getExp32_res_ETC___d3885 =
	     (getExp32_res_wget[23:16] == 8'd126 &&
	      (ff_input_D_OUT[5:3] == 3'b100 ||
	       ff_input_D_OUT[5:3] == 3'b0 &&
	       getMant32_res_wget[68:46] != 23'd0)) ?
	       (setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
		  IF_ff_input_first__309_BIT_1_534_THEN_0_ELSE_1_ETC___d3883 :
		  64'd1) :
	       64'd0 ;
  assign IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313 =
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 ?
	       49'd0 :
	       y_avValue_snd_snd_fst__h264782 ;
  assign IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4361 =
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4295 ?
	       x1_avValue_fst__h264988 :
	       CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q36 ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage2_read__373_BI_ETC___d2414 =
	     mantissa_to_shift__h118047 >> exponent_difference__h118048 ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_BI_ETC___d3276 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3183 ?
	       (!resultant_exponent__h193901[12] ||
		inst_dpfm_add_sub_ff_stage5[8]) &&
	       !inst_dpfm_add_sub_ff_stage5[11] :
	       !inst_dpfm_add_sub_ff_stage5[11] ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_BI_ETC___d3292 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3183 ?
	       resultant_exponent__h193901[12] &&
	       !inst_dpfm_add_sub_ff_stage5[8] ||
	       inst_dpfm_add_sub_ff_stage5[11] :
	       inst_dpfm_add_sub_ff_stage5[11] ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1351 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[113] ?
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q15[113:1] :
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[113:1] ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1376 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1351,
	       !inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[113] } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1401 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[1] ?
	       IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1400 :
	       { IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1383,
		 !IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q17[57] } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q17 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1351[112:55] ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q18 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1376[112:0],
	       1'd0 } +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       57'd0 } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1376[112:0],
	       1'd0 } -
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       57'd0 } ;
  assign IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_ETC__q5 =
	     IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_BI_ETC___d1833 ?
	       _theResult_____1_fst__h90087 :
	       inst_dpfpu_sqrt_rg_inter_stage[128:117] ;
  assign IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_ETC__q6 =
	     IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_BI_ETC___d1833 ?
	       lv_extended_mantissa___1__h90086 :
	       lv_extended_mantissa__h89596 ;
  assign IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986 =
	     _theResult____h209803 << x__h210113[5:0] ;
  assign IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110 =
	     _theResult____h203931 << x__h204223[4:0] ;
  assign IF_IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_ETC___d779 =
	     mantissa_to_shift__h30294 >> exponent_difference__h30295 ;
  assign IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1293 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1200 ?
	       (!resultant_exponent__h65519[9] ||
		inst_spfm_add_sub_ff_stage5[7]) &&
	       !inst_spfm_add_sub_ff_stage5[10] :
	       !inst_spfm_add_sub_ff_stage5[10] ;
  assign IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1309 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1200 ?
	       resultant_exponent__h65519[9] &&
	       !inst_spfm_add_sub_ff_stage5[7] ||
	       inst_spfm_add_sub_ff_stage5[10] :
	       inst_spfm_add_sub_ff_stage5[10] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[55] ?
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[55:1] :
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10[55:1] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d60 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35,
	       !inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[55] } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d85 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[1] ?
	       IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d84 :
	       { IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67,
		 !IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q11[28] } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q11 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35[54:26] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d60[54:0],
	       1'd0 } +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       28'd0 } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d60[54:0],
	       1'd0 } -
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       28'd0 } ;
  assign IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q3 =
	     IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 ?
	       _theResult_____1_fst__h16830 :
	       inst_spfpu_sqrt_rg_inter_stage[67:59] ;
  assign IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q4 =
	     IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 ?
	       lv_extended_mantissa___1__h16829 :
	       lv_extended_mantissa__h16339 ;
  assign IF_NOT_IF_condFlags32_res_whas__343_THEN_condF_ETC___d4182 =
	     lv_invalid__h248122 | condFlags32_reswget_BITS_14_TO_10__q52[1] ;
  assign IF_NOT_IF_condFlags32_res_whas__343_THEN_condF_ETC___d4234 =
	     (!condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	      NOT_IF_condFlags32_res_whas__343_THEN_condFlag_ETC___d3844) ?
	       lv_inexact___1__h248726 :
	       lv_inexact__h248112 ;
  assign IF_NOT_IF_condFlags64_res_whas__428_THEN_condF_ETC___d4218 =
	     lv_invalid__h251194 | condFlags64_reswget_BITS_14_TO_10__q30[1] ;
  assign IF_NOT_IF_condFlags64_res_whas__428_THEN_condF_ETC___d4248 =
	     (!condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	      NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d4012) ?
	       lv_inexact___1__h251801 :
	       lv_inexact__h251184 ;
  assign IF_NOT_IF_getExp64_res_whas__293_THEN_getExp64_ETC___d4436 =
	     (!IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 &&
	      IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4306 &&
	      x__h264887) ?
	       result__h265038 :
	       exception__h264586 ;
  assign IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__15_ETC___d3248 =
	     (ex_overflow__h193909 || inst_dpfm_add_sub_ff_stage5[12] ||
	      IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3232[10:0] ==
	      11'd2047) ?
	       ((inst_dpfm_add_sub_ff_stage5[22:20] == 3'b001 ||
		 inst_dpfm_add_sub_ff_stage5[22:20] == 3'b010 &&
		 !inst_dpfm_add_sub_ff_stage5[23] ||
		 inst_dpfm_add_sub_ff_stage5[22:20] == 3'b011 &&
		 inst_dpfm_add_sub_ff_stage5[23]) ?
		  63'h7FEFFFFFFFFFFFFF :
		  63'h7FF0000000000000) :
	       { IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3232[10:0],
		 IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3245[51:0] } ;
  assign IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1265 =
	     (ex_overflow__h65527 || inst_spfm_add_sub_ff_stage5[11] ||
	      IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249[7:0] ==
	      8'd255) ?
	       ((inst_spfm_add_sub_ff_stage5[21:19] == 3'b001 ||
		 inst_spfm_add_sub_ff_stage5[21:19] == 3'b010 &&
		 !inst_spfm_add_sub_ff_stage5[22] ||
		 inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 &&
		 inst_spfm_add_sub_ff_stage5[22]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249[7:0],
		 IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1262[22:0] } ;
  assign IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682 =
	     _theResult____h220907 << x__h235203[5:0] ;
  assign IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3400 =
	     (!ff_input_D_OUT[3] && lv_compare_result__h225963 == 2'b01 ||
	      ff_input_D_OUT[3] && lv_compare_result__h225963 == 2'b10) ?
	       setCanonicalNaN_res_wget[95:64] :
	       setCanonicalNaN_res_wget[63:32] ;
  assign IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3402 =
	     (!ff_input_D_OUT[3] &&
	      condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) ?
	       lv_result__h226701 :
	       IF_ff_input_first__309_BIT_3_362_AND_IF_condFl_ETC___d3401 ;
  assign IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3481 =
	     (!ff_input_D_OUT[3] &&
	      condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	      condFlags64_reswget_BITS_9_TO_5__q31[3]) ?
	       lv_result__h229248 :
	       IF_ff_input_first__309_BIT_3_362_AND_IF_condFl_ETC___d3480 ;
  assign IF_NOT_inst_dpfpu_divider_rg_stage3_675_BITS_8_ETC___d1753 =
	     (NOT_inst_dpfpu_divider_rg_stage3_675_BITS_82_T_ETC___d1698 &&
	      inst_dpfpu_divider_rg_stage3[1] ||
	      inst_dpfpu_divider_rg_stage3[8]) ?
	       { 11'd0,
		 IF_IF_IF_inst_dpfpu_divider_rg_stage3_675_BITS_ETC___d1728[51:0] } :
	       IF_inst_dpfpu_divider_rg_stage3_675_BIT_7_731__ETC___d1752 ;
  assign IF_NOT_inst_dpfpu_divider_rg_stage3_675_BIT_13_ETC___d1740 =
	     (!inst_dpfpu_divider_rg_stage3[138] &&
	      IF_IF_IF_inst_dpfpu_divider_rg_stage3_675_BITS_ETC___d1728[52]) ?
	       lv_exponent___1__h87899 :
	       lv_exponent__h87418 ;
  assign IF_NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_ETC___d350 =
	     (NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_TO_ETC___d295 &&
	      inst_spfpu_divider_rg_stage3[1] ||
	      inst_spfpu_divider_rg_stage3[8]) ?
	       { 8'd0,
		 IF_IF_IF_inst_spfpu_divider_rg_stage3_72_BITS__ETC___d325[22:0] } :
	       IF_inst_spfpu_divider_rg_stage3_72_BIT_7_28_OR_ETC___d349 ;
  assign IF_NOT_inst_spfpu_divider_rg_stage3_72_BIT_77__ETC___d337 =
	     (!inst_spfpu_divider_rg_stage3[77] &&
	      IF_IF_IF_inst_spfpu_divider_rg_stage3_72_BITS__ETC___d325[23]) ?
	       lv_exponent___1__h14641 :
	       lv_exponent__h14160 ;
  assign IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 =
	     condFlags32_reswget_BITS_14_TO_10__q52[2] |
	     condFlags32_reswget_BITS_14_TO_10__q52[0] ;
  assign IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3827 =
	     condFlags32_reswget_BITS_14_TO_10__q52[1] | lv_invalid__h248094 ;
  assign IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d4231 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[4] ||
	      IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822[7] &&
	      !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3827) &&
	     (!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ||
	      !ff_input_D_OUT[1] ||
	      NOT_IF_getExp32_res_whas__818_THEN_getExp32_re_ETC___d4229) ;
  assign IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d5215 =
	     condFlags32_reswget_BITS_9_TO_5__q53[0] |
	     condFlags32_reswget_BITS_9_TO_5__q53[2] ;
  assign IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 =
	     condFlags64_reswget_BITS_14_TO_10__q30[2] |
	     condFlags64_reswget_BITS_14_TO_10__q30[0] ;
  assign IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3994 =
	     condFlags64_reswget_BITS_14_TO_10__q30[1] | lv_invalid__h251165 ;
  assign IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d4245 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[4] ||
	      x__h251313[10] &&
	      !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3994) &&
	     (!ff_input_D_OUT[208] || !ff_input_D_OUT[1] ||
	      NOT_0b0_CONCAT_getExp64_res_wget__986_BITS_32__ETC___d4243) ;
  assign IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d5292 =
	     condFlags64_reswget_BITS_9_TO_5__q31[0] |
	     condFlags64_reswget_BITS_9_TO_5__q31[2] ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d4639 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001 ||
	       ff_input_D_OUT[12:8] == 5'b00011) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant32_res_wget[45:23],
		 getExp32_res_wget[15:8],
		 getMant32_res_wget[22:0],
		 getExp32_res_wget[7:0] } :
	       ((ff_input_D_OUT[12:8] == 5'b01011 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  62'd0 :
		  { getMant32_res_wget[45:23],
		    getExp32_res_wget[15:8],
		    getMant32_res_wget[22:0],
		    getExp32_res_wget[7:0] }) ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d4774 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 getMant64_res_wget[51:0],
		 getExp64_res_wget[10:0] } :
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4773 ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5208 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] :
	       x__h282196 ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5252 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[5:3],
		 ff_input_D_OUT[8],
		 3'd0,
		 x__h268804,
		 x__h268907 } :
	       { ff_input_D_OUT[5:3],
		 IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d5250 } ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5325 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[5:3],
		 ff_input_D_OUT[8],
		 3'd0,
		 x__h270986,
		 x__h271089 } :
	       { ff_input_D_OUT[5:3],
		 IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d5323 } ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4457 =
	     (ff_input_D_OUT[12:8] == 5'b11100 &&
	      ff_input_D_OUT[5:3] == 3'b001) ?
	       { 54'd0, ff_input_D_OUT[0] ? x__h254679 : x__h256156, 6'd32 } :
	       ((ff_input_D_OUT[12:8] == 5'b01000) ?
		  IF_ff_input_first__309_BIT_0_341_THEN_0xFFFFFF_ETC___d4449 :
		  { ((ff_input_D_OUT[12:6] == 7'b1110000 ||
		      ff_input_D_OUT[12:6] == 7'b1111000) &&
		     ff_input_D_OUT[5:3] == 3'b0) ?
		      x_data__h265400 :
		      ff_input_D_OUT[208:145],
		    6'd32 }) ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4641 =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant32_res_wget[45:23], getExp32_res_wget[15:8], 31'd0 } :
	       (ff_input_first__309_BITS_12_TO_8_310_EQ_0b1100_ETC___d4597 ?
		  62'd0 :
		  IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d4639) ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4773 =
	     (ff_input_D_OUT[12:8] == 5'b00011 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 63'd0 } :
	       ((ff_input_D_OUT[12:8] == 5'b01011 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  126'd0 :
		  { getMant64_res_wget[103:52],
		    getExp64_res_wget[21:11],
		    getMant64_res_wget[51:0],
		    getExp64_res_wget[10:0] }) ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4776 =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 63'd0 } :
	       (ff_input_first__309_BITS_12_TO_8_310_EQ_0b1100_ETC___d4597 ?
		  126'd0 :
		  IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d4774) ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d5250 =
	     (ff_input_D_OUT[12:8] == 5'b00010 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { 4'd10, x__h268804, x__h268907 } :
	       { x__h342407,
		 ff_input_D_OUT[14],
		 2'd1,
		 x__h268804,
		 x__h268907 } ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d5323 =
	     (ff_input_D_OUT[12:8] == 5'b00010 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { 4'd10, x__h270986, x__h271089 } :
	       { x__h342407,
		 ff_input_D_OUT[14],
		 2'd1,
		 x__h270986,
		 x__h271089 } ;
  assign IF_ff_input_first__309_BIT_0_341_THEN_0xFFFFFF_ETC___d4449 =
	     { ff_input_D_OUT[0] ? x_data__h265328 : x_data__h258135,
	       1'd1,
	       ff_input_D_OUT[0] ? x_fflags__h265330 : x_fflags__h258137 } ;
  assign IF_ff_input_first__309_BIT_0_341_THEN_42949672_ETC___d3802 =
	     { ff_input_D_OUT[0] ? x_data__h229540 : x_data__h229696,
	       1'd1,
	       ff_input_D_OUT[0] ? x_fflags__h229542 : x_fflags__h229698 } ;
  assign IF_ff_input_first__309_BIT_0_341_THEN_IF_NOT_I_ETC___d4251 =
	     { ff_input_D_OUT[0] ?
		 IF_NOT_IF_condFlags32_res_whas__343_THEN_condF_ETC___d4182 :
		 IF_NOT_IF_condFlags64_res_whas__428_THEN_condF_ETC___d4218,
	       3'd0,
	       ff_input_D_OUT[0] ?
		 _theResult_____1_snd__h249862 :
		 _theResult_____1_snd__h252933 } ;
  assign IF_ff_input_first__309_BIT_0_341_THEN_IF_NOT_I_ETC___d4252 =
	     { ff_input_D_OUT[0] ? x_data__h248137 : x_data__h251209,
	       1'd1,
	       IF_ff_input_first__309_BIT_0_341_THEN_IF_NOT_I_ETC___d4251 } ;
  assign IF_ff_input_first__309_BIT_0_341_THEN_IF_ff_in_ETC___d3521 =
	     { ff_input_D_OUT[0] ? x_data__h225979 : x_data__h228557,
	       1'd1,
	       ff_input_D_OUT[0] ? x_fflags__h225981 : x_fflags__h228559 } ;
  assign IF_ff_input_first__309_BIT_1_534_THEN_0_ELSE_1_ETC___d3883 =
	     ff_input_D_OUT[1] ? 64'd0 : 64'hFFFFFFFFFFFFFFFF ;
  assign IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d3837 =
	     ff_input_D_OUT[1] ?
	       !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	       !lv_invalid__h248094 &&
	       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3833 :
	       !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	       !lv_invalid__h248094 &&
	       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3835 ;
  assign IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d3842 =
	     ff_input_D_OUT[1] ?
	       !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	       !lv_invalid__h248094 &&
	       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3838 :
	       !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	       !lv_invalid__h248094 &&
	       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3840 ;
  assign IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d4005 =
	     ff_input_D_OUT[1] ?
	       !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	       !lv_invalid__h251165 &&
	       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4001 :
	       !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	       !lv_invalid__h251165 &&
	       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4003 ;
  assign IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d4010 =
	     ff_input_D_OUT[1] ?
	       !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	       !lv_invalid__h251165 &&
	       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4006 :
	       !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	       !lv_invalid__h251165 &&
	       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4008 ;
  assign IF_ff_input_first__309_BIT_3_362_AND_IF_condFl_ETC___d3401 =
	     (ff_input_D_OUT[3] &&
	      condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) ?
	       lv_result__h226742 :
	       IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3400 ;
  assign IF_ff_input_first__309_BIT_3_362_AND_IF_condFl_ETC___d3480 =
	     (ff_input_D_OUT[3] &&
	      condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	      condFlags64_reswget_BITS_9_TO_5__q31[3]) ?
	       lv_result__h229289 :
	       ((!ff_input_D_OUT[3] && lv_compare_result__h228542 == 2'b01 ||
		 ff_input_D_OUT[3] && lv_compare_result__h228542 == 2'b10) ?
		  ff_input_D_OUT[208:145] :
		  ff_input_D_OUT[144:81]) ;
  assign IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822 =
	     getExp32_res_wget[23:16] - 8'd127 ;
  assign IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3833 =
	     (IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822 ^
	      8'h80) <
	     8'd192 ;
  assign IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3835 =
	     (IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822 ^
	      8'h80) <
	     8'd191 ;
  assign IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3838 =
	     (IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822 ^
	      8'h80) <
	     8'd160 ;
  assign IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3840 =
	     (IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822 ^
	      8'h80) <
	     8'd159 ;
  assign IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d4152 =
	     getExp32_res_wget[23:16] == 8'd126 &&
	     (ff_input_D_OUT[5:3] == 3'b100 ||
	      ff_input_D_OUT[5:3] == 3'b0 &&
	      getMant32_res_wget[68:46] != 23'd0) ||
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822[7] &&
	     ff_input_D_OUT[5:3] == 3'b010 ;
  assign IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4295 =
	     getExp64_res_wget[32:22] <= 11'd1150 ;
  assign IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 =
	     getExp64_res_wget[32:22] <= 11'd872 ;
  assign IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4306 =
	     getExp64_res_wget[32:22] <= 11'd896 ;
  assign IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2109 =
	     lv_product_mantissa__h107941 >>
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1871 ;
  assign IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2330 =
	     IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2109[0] |
	     ((_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1871 ^
	       13'h1000) >
	      ({ 6'd0, lsb_zeros__h107943 } ^ 13'h1000) ||
	      lv_product_mantissa__h107941[0]) ;
  assign IF_inst_dpfm_add_sub_ff_stage2_read__373_BITS__ETC___d2789 =
	     (inst_dpfm_add_sub_ff_stage2[9:7] == 3'b010 &&
	      sign2__h118010 | op_xor_sign3__h118023 ||
	      inst_dpfm_add_sub_ff_stage2[9:7] != 3'b010 &&
	      sign2__h118010 & op_xor_sign3__h118023) ?
	       2'b11 :
	       (sign2__h118010 ? lv_result_is_zero___1__h167605 : 2'b01) ;
  assign IF_inst_dpfm_add_sub_ff_stage2_read__373_BIT_5_ETC___d2390 =
	     exponent2__h118034 <= exponent3__h118025 ;
  assign IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3183 =
	     (resultant_exponent__h193901 - 13'd1023 ^ 13'h1000) <= 13'd5119 ;
  assign IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200 =
	     inst_dpfm_add_sub_ff_stage5[183] ?
	       resultant_mantissa___1__h194199 :
	       _theResult___snd_fst__h194444 ;
  assign IF_inst_dpfpu_divider_int_div_wr_final_out_wha_ETC___d1574 =
	     x_wget__h66759[55:0] >>
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1449 ;
  assign IF_inst_dpfpu_divider_rg_stage3_675_BIT_10_682_ETC___d1763 =
	     inst_dpfpu_divider_rg_stage3[10] ?
	       { 64'h7FF8000000000000, _theResult_____1_snd__h87530 } :
	       { _theResult_____1_fst__h87540,
		 _theResult_____1_snd__h87541 } ;
  assign IF_inst_dpfpu_divider_rg_stage3_675_BIT_7_731__ETC___d1752 =
	     (inst_dpfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_dpfpu_divider_rg_stage3_675_BIT_13_ETC___d1740[10:0] ==
	      11'd2047) ?
	       ((inst_dpfpu_divider_rg_stage3[4:2] == 3'b001 ||
		 inst_dpfpu_divider_rg_stage3[4:2] == 3'b010 &&
		 !inst_dpfpu_divider_rg_stage3[12] ||
		 inst_dpfpu_divider_rg_stage3[4:2] == 3'b011 &&
		 inst_dpfpu_divider_rg_stage3[12]) ?
		  63'h7FEFFFFFFFFFFFFF :
		  63'h7FF0000000000000) :
	       { IF_NOT_inst_dpfpu_divider_rg_stage3_675_BIT_13_ETC___d1740[10:0],
		 IF_IF_IF_inst_dpfpu_divider_rg_stage3_675_BITS_ETC___d1728[51:0] } ;
  assign IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d590 =
	     lv_product_mantissa__h25350 >>
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 ;
  assign IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d695 =
	     IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d590[0] |
	     ((_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 ^
	       10'h200) >
	      ({ 4'd0, lsb_zeros__h25352 } ^ 10'h200) ||
	      lv_product_mantissa__h25350[0]) ;
  assign IF_inst_spfm_add_sub_ff_stage2_read__38_BITS_9_ETC___d980 =
	     (inst_spfm_add_sub_ff_stage2[9:7] == 3'b010 &&
	      sign2__h30257 | op_xor_sign3__h30270 ||
	      inst_spfm_add_sub_ff_stage2[9:7] != 3'b010 &&
	      sign2__h30257 & op_xor_sign3__h30270) ?
	       2'b11 :
	       (sign2__h30257 ? lv_result_is_zero___1__h53317 : 2'b01) ;
  assign IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 =
	     exponent2__h30281 <= exponent3__h30272 ;
  assign IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1200 =
	     (resultant_exponent__h65519 - 10'd127 ^ 10'h200) <= 10'd639 ;
  assign IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217 =
	     inst_spfm_add_sub_ff_stage5[95] ?
	       resultant_mantissa___1__h65817 :
	       _theResult___snd_fst__h66062 ;
  assign IF_inst_spfpu_divider_int_div_wr_final_out_wha_ETC___d200 =
	     x_wget__h695[26:0] >>
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ;
  assign IF_inst_spfpu_divider_rg_stage3_72_BIT_10_79_T_ETC___d360 =
	     inst_spfpu_divider_rg_stage3[10] ?
	       { 32'h7FC00000, _theResult_____1_snd__h14272 } :
	       { _theResult_____1_fst__h14282,
		 _theResult_____1_snd__h14283 } ;
  assign IF_inst_spfpu_divider_rg_stage3_72_BIT_7_28_OR_ETC___d349 =
	     (inst_spfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_spfpu_divider_rg_stage3_72_BIT_77__ETC___d337[7:0] ==
	      8'd255) ?
	       ((inst_spfpu_divider_rg_stage3[4:2] == 3'b001 ||
		 inst_spfpu_divider_rg_stage3[4:2] == 3'b010 &&
		 !inst_spfpu_divider_rg_stage3[12] ||
		 inst_spfpu_divider_rg_stage3[4:2] == 3'b011 &&
		 inst_spfpu_divider_rg_stage3[12]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_NOT_inst_spfpu_divider_rg_stage3_72_BIT_77__ETC___d337[7:0],
		 IF_IF_IF_inst_spfpu_divider_rg_stage3_72_BITS__ETC___d325[22:0] } ;
  assign INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2091 =
	     shift_neg__h107946 < { 6'd0, x__h108011 } ;
  assign INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d572 =
	     shift_neg__h25355 < { 4'd0, x__h25420 } ;
  assign INV_1_MINUS_inst_dpfpu_divider_rg_stage2_444_B_ETC___d1569 =
	     shift_neg__h73058 < { 7'd0, msb_zeros__h72898 } ;
  assign INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d195 =
	     shift_neg__h7021 < { 5'd0, msb_zeros__h6861 } ;
  assign NOT_0b0_CONCAT_getExp64_res_wget__986_BITS_32__ETC___d4243 =
	     (x__h251313[10:0] != 11'd2047 ||
	      ff_input_D_OUT[5:3] != 3'b100 &&
	      (ff_input_D_OUT[5:3] != 3'b0 ||
	       getMant64_res_wget[155:104] == 52'd0)) &&
	     (!x__h251313[10] || ff_input_D_OUT[5:3] != 3'b010) ;
  assign NOT_IF_condFlags32_res_whas__343_THEN_condFlag_ETC___d3844 =
	     !condFlags32_reswget_BITS_14_TO_10__q52[4] &&
	     (!IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822[7] ||
	      IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3827) &&
	     (ff_input_D_OUT[2] ?
		IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d3837 :
		IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d3842) ;
  assign NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d4012 =
	     !condFlags64_reswget_BITS_14_TO_10__q30[4] &&
	     (!x__h251313[10] ||
	      IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3994) &&
	     (ff_input_D_OUT[2] ?
		IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d4005 :
		IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d4010) ;
  assign NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d5153 =
	     !condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[2] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4295 &&
	     !IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 &&
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4306 ;
  assign NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d5159 =
	     !condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[2] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4295 &&
	     !IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 &&
	     !IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4306 ;
  assign NOT_IF_getExp32_res_whas__818_THEN_getExp32_re_ETC___d4229 =
	     (getExp32_res_wget[23:16] != 8'd126 ||
	      ff_input_D_OUT[5:3] != 3'b100 &&
	      (ff_input_D_OUT[5:3] != 3'b0 ||
	       getMant32_res_wget[68:46] == 23'd0)) &&
	     (!IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822[7] ||
	      ff_input_D_OUT[5:3] != 3'b010) ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5338 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 &&
	     !lv_op2_Nan__h225959 &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	     condFlags32_reswget_BITS_9_TO_5__q53[3] ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5340 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5460 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] &&
	     !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 &&
	     !lv_op2_Nan__h228538 &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	     condFlags64_reswget_BITS_9_TO_5__q31[3] ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5462 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5721 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     (IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 ||
	      ff_input_D_OUT[176] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[3]) ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5746 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 &&
	     !ff_input_D_OUT[176] &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      !condFlags32_reswget_BITS_14_TO_10__q52[3]) ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5748 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5840 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] &&
	     (IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 ||
	      ff_input_D_OUT[208] ||
	      condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      condFlags64_reswget_BITS_14_TO_10__q30[3]) ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5865 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] &&
	     !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 &&
	     !ff_input_D_OUT[208] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      !condFlags64_reswget_BITS_14_TO_10__q30[3]) ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5867 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5176 =
	     (ff_input_D_OUT[12:8] == 5'b0 ||
	      ff_input_D_OUT[12:8] == 5'b00001) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[12:8] == 5'b00010 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[16:13] == 4'b0 ||
	     ff_input_D_OUT[16:13] == 4'b0001 ||
	     ff_input_D_OUT[16:13] == 4'b0010 ||
	     ff_input_D_OUT[16:13] == 4'b0011 ;
  assign NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5187 =
	     (ff_input_D_OUT[12:8] != 5'b11010 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b00100 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11100 ||
	      ff_input_D_OUT[5:3] != 3'b001 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b01000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110001 &&
	      ff_input_D_OUT[12:6] != 7'b1111001 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100 &&
	      ff_input_D_OUT[0] ||
	      (ff_input_D_OUT[12:8] != 5'b0 &&
	       ff_input_D_OUT[12:8] != 5'b00001 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b00011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b01011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      ff_input_first__309_BITS_12_TO_8_310_EQ_0b10_5_ETC___d4533) ;
  assign NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5266 =
	     (ff_input_D_OUT[12:8] != 5'b11010 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b00100 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11100 ||
	      ff_input_D_OUT[5:3] != 3'b001 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b01000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110001 &&
	      ff_input_D_OUT[12:6] != 7'b1111001 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100 &&
	      !ff_input_D_OUT[0] ||
	      (ff_input_D_OUT[12:8] != 5'b0 &&
	       ff_input_D_OUT[12:8] != 5'b00001 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b00011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b01011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      ff_input_first__309_BITS_12_TO_8_310_EQ_0b10_5_ETC___d4714) ;
  assign NOT_ff_input_first__309_BIT_1_534_548_AND_ff_i_ETC___d3713 =
	     { sign__h235102,
	       IF_IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0_ETC___d3706[52] ?
		 local_expo___1__h245789 :
		 expo__h220910,
	       IF_IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0_ETC___d3706[51:0] } ;
  assign NOT_ff_input_first__309_BIT_2_523_527_AND_NOT__ETC___d3941 =
	     !ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd157 &&
	     final_result__h248108[30:0] == 31'h7FFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign NOT_ff_input_first__309_BIT_2_523_527_AND_NOT__ETC___d4106 =
	     !ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     x__h251313[10:0] == 11'd30 &&
	     final_result__h251180[30:0] == 31'h7FFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign NOT_ff_input_first__309_BIT_2_523_527_AND_ff_i_ETC___d3948 =
	     !ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd158 &&
	     final_result__h248108[31:0] == 32'hFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign NOT_ff_input_first__309_BIT_2_523_527_AND_ff_i_ETC___d4112 =
	     !ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     x__h251313[10:0] == 11'd31 &&
	     final_result__h251180[31:0] == 32'hFFFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign NOT_inst_dpfpu_divider_rg_stage2_444_BITS_21_T_ETC___d1649 =
	     !inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1448 &&
	     (!_1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1450 ||
	      !x_wget__h66759[55] &&
	      INV_1_MINUS_inst_dpfpu_divider_rg_stage2_444_B_ETC___d1569) ;
  assign NOT_inst_dpfpu_divider_rg_stage3_675_BITS_82_T_ETC___d1698 =
	     x__h87575 | inst_dpfpu_divider_rg_stage3[84] ;
  assign NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d246 =
	     !inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 &&
	     (!_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 ||
	      !x_wget__h695[26] &&
	      INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d195) ;
  assign NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_TO_ETC___d295 =
	     x__h14317 | inst_spfpu_divider_rg_stage3[52] ;
  assign _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2742 =
	     ({ 5'd0, x__h153120 } < exponent_difference__h118048 ||
	      IF_IF_inst_dpfm_add_sub_ff_stage2_read__373_BI_ETC___d2414[0]) &&
	     mantissa_to_shift__h118047 != 160'd0 ;
  assign _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d933 =
	     ({ 3'd0, x__h46575 } < exponent_difference__h30295 ||
	      IF_IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_ETC___d779[0]) &&
	     mantissa_to_shift__h30294 != 73'd0 ;
  assign _0_CONCAT_INV_IF_condFlags32_res_whas__343_THEN_ETC___d5198 =
	     { 24'd0, x__h268222 } * { 24'd0, x__h268308 } ;
  assign _0_CONCAT_INV_IF_condFlags64_res_whas__428_THEN_ETC___d5277 =
	     { 53'd0, x__h270409 } * { 53'd0, x__h270495 } ;
  assign _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3175 =
	     { 5'd0, inst_dpfm_add_sub_ff_stage5[7:0] } - 13'd1 ;
  assign _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3177 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3175 <=
	     resultant_exponent_sub__h193894 ;
  assign _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1192 =
	     { 3'd0, inst_spfm_add_sub_ff_stage5[6:0] } - 10'd1 ;
  assign _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1192 <=
	     resultant_exponent_sub__h65512 ;
  assign _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4001 =
	     (x__h251313[10:0] ^ 11'h400) < 11'd1088 ;
  assign _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4003 =
	     (x__h251313[10:0] ^ 11'h400) < 11'd1087 ;
  assign _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4006 =
	     (x__h251313[10:0] ^ 11'h400) < 11'd1056 ;
  assign _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4008 =
	     (x__h251313[10:0] ^ 11'h400) < 11'd1055 ;
  assign _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4188 =
	     x__h251313[10:0] == 11'd2047 &&
	     (ff_input_D_OUT[5:3] == 3'b100 ||
	      ff_input_D_OUT[5:3] == 3'b0 &&
	      getMant64_res_wget[155:104] != 52'd0) ||
	     x__h251313[10] && ff_input_D_OUT[5:3] == 3'b010 ;
  assign _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858 =
	     final_man__h248106 <<
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822 ;
  assign _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC__q48 =
	     _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858[54:23] ;
  assign _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025 =
	     final_man__h251178 << x__h251313[10:0] ;
  assign _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC__q26 =
	     _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025[83:52] ;
  assign _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1871 =
	     13'd1 - lv_product_exponent__h107939 ;
  assign _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1872 =
	     (_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1871 ^
	      13'h1000) <=
	     13'd4096 ;
  assign _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 =
	     10'd1 - lv_product_exponent__h25348 ;
  assign _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d469 =
	     (_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 ^
	      10'h200) <=
	     10'd512 ;
  assign _1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1449 =
	     13'd1 - inst_dpfpu_divider_rg_stage2[21:9] ;
  assign _1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1450 =
	     (_1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1449 ^
	      13'h1000) <=
	     13'd4096 ;
  assign _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 =
	     10'd1 - inst_spfpu_divider_rg_stage2[18:9] ;
  assign _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 =
	     (_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ^
	      10'h200) <=
	     10'd512 ;
  assign _denominator__h5394 = { inst_spfpu_divider_rg_stage1[32:9], 3'd0 } ;
  assign _denominator__h71431 = { inst_dpfpu_divider_rg_stage1[61:9], 3'd0 } ;
  assign _dividend___1__h3597 = _dividend__h3427 - 27'd1 ;
  assign _dividend___1__h69640 = _dividend__h69470 - 56'd1 ;
  assign _dividend__h2784 =
	     { IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67[25:0],
	       !IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q11[28] } ;
  assign _dividend__h2922 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35[25:0],
	       !inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[55] } ;
  assign _dividend__h3426 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       _dividend__h2922 :
	       _dividend__h2784 ;
  assign _dividend__h3427 = _dividend__h3426 - ~_dividend__h3426 ;
  assign _dividend__h68827 =
	     { IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1383[54:0],
	       !IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q17[57] } ;
  assign _dividend__h68965 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1351[54:0],
	       !inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[113] } ;
  assign _dividend__h69469 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       _dividend__h68965 :
	       _dividend__h68827 ;
  assign _dividend__h69470 = _dividend__h69469 - ~_dividend__h69469 ;
  assign _numerator__h5395 = { inst_spfpu_divider_rg_stage1[56:33], 3'd0 } ;
  assign _numerator__h71432 = { inst_dpfpu_divider_rg_stage1[114:62], 3'd0 } ;
  assign _remainder___1__h3596 =
	     _remainder__h3424 +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       1'b0 } ;
  assign _remainder___1__h69639 =
	     _remainder__h69467 +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       1'b0 } ;
  assign _remainder__h3424 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35[54:26] :
	       IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67[54:26] ;
  assign _remainder__h69467 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1351[112:55] :
	       IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1383[112:55] ;
  assign _theResult_____1__h118058 = mantissa2__h118054 > mantissa3__h118055 ;
  assign _theResult_____1__h30305 = mantissa2__h30301 > mantissa3__h30302 ;
  assign _theResult_____1_fst__h108001 =
	     (msb_zeros__h107937 == 7'b0000001) ?
	       lv_product_exponent__h107939 :
	       _theResult_____1_fst__h108004 ;
  assign _theResult_____1_fst__h108004 =
	     INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2091 ?
	       lv_product_exponent_sub_shift__h107948 :
	       lv_product_exponent_sub_zerosMSB__h107950 ;
  assign _theResult_____1_fst__h14282 =
	     { inst_spfpu_divider_rg_stage3[12],
	       inst_spfpu_divider_rg_stage3[9] ?
		 31'h7F800000 :
		 (inst_spfpu_divider_rg_stage3[5] ?
		    31'd0 :
		    IF_NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_ETC___d350) } ;
  assign _theResult_____1_fst__h16830 =
	     lv_extended_mantissa___1__h16829[26] ?
	       result_exponent___1__h16852 :
	       inst_spfpu_sqrt_rg_inter_stage[67:59] ;
  assign _theResult_____1_fst__h194769 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     _theResult_____3_fst__h194036 ;
  assign _theResult_____1_fst__h249788 =
	     (ff_input_D_OUT[1] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q41[31]) ?
	       64'd0 :
	       final_result___3__h248728 ;
  assign _theResult_____1_fst__h252859 =
	     (ff_input_D_OUT[1] && ff_input_D_OUT[208]) ?
	       64'd0 :
	       final_result___3__h251803 ;
  assign _theResult_____1_fst__h25410 =
	     (msb_zeros__h25346 == 6'b000001) ?
	       lv_product_exponent__h25348 :
	       _theResult_____1_fst__h25413 ;
  assign _theResult_____1_fst__h25413 =
	     INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d572 ?
	       lv_product_exponent_sub_shift__h25357 :
	       lv_product_exponent_sub_zerosMSB__h25359 ;
  assign _theResult_____1_fst__h66387 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     _theResult_____3_fst__h65654 ;
  assign _theResult_____1_fst__h87540 =
	     { inst_dpfpu_divider_rg_stage3[12],
	       inst_dpfpu_divider_rg_stage3[9] ?
		 63'h7FF0000000000000 :
		 (inst_dpfpu_divider_rg_stage3[5] ?
		    63'd0 :
		    IF_NOT_inst_dpfpu_divider_rg_stage3_675_BITS_8_ETC___d1753) } ;
  assign _theResult_____1_fst__h90087 =
	     lv_extended_mantissa___1__h90086[55] ?
	       result_exponent___1__h90109 :
	       inst_dpfpu_sqrt_rg_inter_stage[128:117] ;
  assign _theResult_____1_snd__h108002 =
	     (msb_zeros__h107937 == 7'b0000001) ?
	       lv_product_mantissa__h107941 :
	       _theResult_____1_snd__h108005 ;
  assign _theResult_____1_snd__h108005 =
	     INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2091 ?
	       lv_product_mantissa_shiftL_expo__h107947 :
	       lv_product_mantissa_shiftL_zerosMSB__h107949 ;
  assign _theResult_____1_snd__h14261 =
	     inst_spfpu_divider_rg_stage3[9] ? 5'd8 : 5'd0 ;
  assign _theResult_____1_snd__h14272 =
	     (~inst_spfpu_divider_rg_stage3[0]) ? 5'd16 : 5'd0 ;
  assign _theResult_____1_snd__h14283 =
	     inst_spfpu_divider_rg_stage3[9] ?
	       5'd8 :
	       _theResult_____1_snd__h14300 ;
  assign _theResult_____1_snd__h14300 =
	     inst_spfpu_divider_rg_stage3[5] ?
	       5'd0 :
	       _theResult_____1_snd__h14410 ;
  assign _theResult_____1_snd__h14410 =
	     (NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_TO_ETC___d295 &&
	      inst_spfpu_divider_rg_stage3[1] ||
	      inst_spfpu_divider_rg_stage3[8]) ?
	       5'd3 :
	       _theResult_____1_snd__h14650 ;
  assign _theResult_____1_snd__h14650 =
	     (inst_spfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_spfpu_divider_rg_stage3_72_BIT_77__ETC___d337[7:0] ==
	      8'd255) ?
	       5'd5 :
	       _theResult_____1_snd__h14668 ;
  assign _theResult_____1_snd__h14668 =
	     NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_TO_ETC___d295 ?
	       5'd1 :
	       5'd0 ;
  assign _theResult_____1_snd__h249789 =
	     ff_input_D_OUT[1] &&
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ||
	     lv_invalid___2__h248729 ;
  assign _theResult_____1_snd__h249862 =
	     !IF_NOT_IF_condFlags32_res_whas__343_THEN_condF_ETC___d4182 &&
	     IF_NOT_IF_condFlags32_res_whas__343_THEN_condF_ETC___d4234 ;
  assign _theResult_____1_snd__h252860 =
	     ff_input_D_OUT[1] && ff_input_D_OUT[208] ||
	     lv_invalid___2__h251804 ;
  assign _theResult_____1_snd__h252933 =
	     !IF_NOT_IF_condFlags64_res_whas__428_THEN_condF_ETC___d4218 &&
	     IF_NOT_IF_condFlags64_res_whas__428_THEN_condF_ETC___d4248 ;
  assign _theResult_____1_snd__h25411 =
	     (msb_zeros__h25346 == 6'b000001) ?
	       lv_product_mantissa__h25350 :
	       _theResult_____1_snd__h25414 ;
  assign _theResult_____1_snd__h25414 =
	     INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d572 ?
	       lv_product_mantissa_shiftL_expo__h25356 :
	       lv_product_mantissa_shiftL_zerosMSB__h25358 ;
  assign _theResult_____1_snd__h87519 =
	     inst_dpfpu_divider_rg_stage3[9] ? 5'd8 : 5'd0 ;
  assign _theResult_____1_snd__h87530 =
	     (~inst_dpfpu_divider_rg_stage3[0]) ? 5'd16 : 5'd0 ;
  assign _theResult_____1_snd__h87541 =
	     inst_dpfpu_divider_rg_stage3[9] ?
	       5'd8 :
	       _theResult_____1_snd__h87558 ;
  assign _theResult_____1_snd__h87558 =
	     inst_dpfpu_divider_rg_stage3[5] ?
	       5'd0 :
	       _theResult_____1_snd__h87668 ;
  assign _theResult_____1_snd__h87668 =
	     (NOT_inst_dpfpu_divider_rg_stage3_675_BITS_82_T_ETC___d1698 &&
	      inst_dpfpu_divider_rg_stage3[1] ||
	      inst_dpfpu_divider_rg_stage3[8]) ?
	       5'd3 :
	       _theResult_____1_snd__h87908 ;
  assign _theResult_____1_snd__h87908 =
	     (inst_dpfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_dpfpu_divider_rg_stage3_675_BIT_13_ETC___d1740[10:0] ==
	      11'd2047) ?
	       5'd5 :
	       _theResult_____1_snd__h87926 ;
  assign _theResult_____1_snd__h87926 =
	     NOT_inst_dpfpu_divider_rg_stage3_675_BITS_82_T_ETC___d1698 ?
	       5'd1 :
	       5'd0 ;
  assign _theResult_____1_snd_fst__h194771 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     inst_dpfm_add_sub_ff_stage5_read__156_BIT_15_1_ETC___d3282 &&
	     _theResult_____3_snd_snd_fst__h194806 ;
  assign _theResult_____1_snd_fst__h66389 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     inst_spfm_add_sub_ff_stage5_read__173_BIT_14_1_ETC___d1299 &&
	     _theResult_____3_snd_snd_fst__h66424 ;
  assign _theResult_____1_snd_snd_snd__h194774 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     _theResult_____3_snd_snd_snd__h194807 ;
  assign _theResult_____1_snd_snd_snd__h66392 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     _theResult_____3_snd_snd_snd__h66425 ;
  assign _theResult_____2__h264971 =
	     IF_IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0_ETC___d4340[23] ?
	       expo___1__h265263 :
	       expo__h264580 ;
  assign _theResult_____2_fst__h249463 =
	     NOT_ff_input_first__309_BIT_2_523_527_AND_NOT__ETC___d3941 ?
	       64'h000000007FFFFFFF :
	       _theResult_____2_fst__h249570 ;
  assign _theResult_____2_fst__h249570 =
	     NOT_ff_input_first__309_BIT_2_523_527_AND_ff_i_ETC___d3948 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_fst__h249622 ;
  assign _theResult_____2_fst__h249622 =
	     ff_input_first__309_BIT_2_523_AND_NOT_ff_input_ETC___d3955 ?
	       64'h7FFFFFFFFFFFFFFF :
	       _theResult_____2_fst__h249673 ;
  assign _theResult_____2_fst__h249673 =
	     ff_input_first__309_BIT_2_523_AND_ff_input_fir_ETC___d3961 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_fst__h249677 ;
  assign _theResult_____2_fst__h249677 =
	     (!ff_input_D_OUT[2] && final_result___2__h249676[31]) ?
	       final_result___1__h249715 :
	       final_result___2__h249676 ;
  assign _theResult_____2_fst__h252536 =
	     NOT_ff_input_first__309_BIT_2_523_527_AND_NOT__ETC___d4106 ?
	       64'h000000007FFFFFFF :
	       _theResult_____2_fst__h252641 ;
  assign _theResult_____2_fst__h252641 =
	     NOT_ff_input_first__309_BIT_2_523_527_AND_ff_i_ETC___d4112 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_fst__h252693 ;
  assign _theResult_____2_fst__h252693 =
	     ff_input_first__309_BIT_2_523_AND_NOT_ff_input_ETC___d4118 ?
	       64'h7FFFFFFFFFFFFFFF :
	       _theResult_____2_fst__h252744 ;
  assign _theResult_____2_fst__h252744 =
	     ff_input_first__309_BIT_2_523_AND_ff_input_fir_ETC___d4123 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_fst__h252748 ;
  assign _theResult_____2_fst__h252748 =
	     (!ff_input_D_OUT[2] && final_result___2__h252747[31]) ?
	       final_result___1__h252786 :
	       final_result___2__h252747 ;
  assign _theResult_____2_snd__h249464 =
	     NOT_ff_input_first__309_BIT_2_523_527_AND_NOT__ETC___d3941 ||
	     NOT_ff_input_first__309_BIT_2_523_527_AND_ff_i_ETC___d3948 ||
	     ff_input_first__309_BIT_2_523_AND_NOT_ff_input_ETC___d3955 ||
	     ff_input_first__309_BIT_2_523_AND_ff_input_fir_ETC___d3961 ;
  assign _theResult_____2_snd__h252537 =
	     NOT_ff_input_first__309_BIT_2_523_527_AND_NOT__ETC___d4106 ||
	     NOT_ff_input_first__309_BIT_2_523_527_AND_ff_i_ETC___d4112 ||
	     ff_input_first__309_BIT_2_523_AND_NOT_ff_input_ETC___d4118 ||
	     ff_input_first__309_BIT_2_523_AND_ff_input_fir_ETC___d4123 ;
  assign _theResult_____3__h304258 =
	     { 27'd0,
	       IF_IF_IF_condFlags32_res_whas__343_THEN_condFl_ETC___d5813[51:50] } -
	     29'd1 ;
  assign _theResult_____3__h314849 =
	     { 56'd0,
	       IF_IF_IF_condFlags64_res_whas__428_THEN_condFl_ETC___d5989[109:108] } -
	     58'd1 ;
  assign _theResult_____3_fst__h194036 =
	     !inst_dpfm_add_sub_ff_stage5[15] &&
	     ((inst_dpfm_add_sub_ff_stage5[13] ||
	       inst_dpfm_add_sub_ff_stage5[18]) ?
		lv_inexact__h193917 :
		_theResult_____3_fst__h194684) ;
  assign _theResult_____3_fst__h194684 =
	     ex_overflow__h193909 || inst_dpfm_add_sub_ff_stage5[12] ||
	     IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3232[10:0] ==
	     11'd2047 ||
	     lv_inexact__h193917 ;
  assign _theResult_____3_fst__h226034 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[2] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[0]) ?
	       32'd0 :
	       CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q54 ;
  assign _theResult_____3_fst__h226656 =
	     (IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 &
	      lv_op2_Nan__h225959) ?
	       32'h7FC00000 :
	       IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3404 ;
  assign _theResult_____3_fst__h228587 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[2] ||
	      condFlags64_reswget_BITS_14_TO_10__q30[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[2] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[0]) ?
	       64'd0 :
	       CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q32 ;
  assign _theResult_____3_fst__h229203 =
	     (IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 &
	      lv_op2_Nan__h228538) ?
	       64'h7FF8000000000000 :
	       IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d3483 ;
  assign _theResult_____3_fst__h248731 =
	     (!ff_input_D_OUT[1] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q41[31]) ?
	       ((!ff_input_D_OUT[2] && final_result___2__h248775[31]) ?
		  final_result___1__h249745 :
		  final_result___2__h248775) :
	       _theResult_____1_fst__h249788 ;
  assign _theResult_____3_fst__h251806 =
	     sign__h235102 ?
	       ((!ff_input_D_OUT[2] && final_result___2__h251849[31]) ?
		  final_result___1__h252816 :
		  final_result___2__h251849) :
	       _theResult_____1_fst__h252859 ;
  assign _theResult_____3_fst__h65654 =
	     !inst_spfm_add_sub_ff_stage5[14] &&
	     ((inst_spfm_add_sub_ff_stage5[12] ||
	       inst_spfm_add_sub_ff_stage5[17]) ?
		lv_inexact__h65535 :
		_theResult_____3_fst__h66302) ;
  assign _theResult_____3_fst__h66302 =
	     ex_overflow__h65527 || inst_spfm_add_sub_ff_stage5[11] ||
	     IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249[7:0] ==
	     8'd255 ||
	     lv_inexact__h65535 ;
  assign _theResult_____3_snd__h226035 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[2] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[0]) ?
	       _theResult_____3_snd__h226240 :
	       5'd0 ;
  assign _theResult_____3_snd__h226240 =
	     (ff_input_D_OUT[5:3] != 3'b010 ||
	      condFlags32_reswget_BITS_14_TO_10__q52[0] |
	      condFlags32_reswget_BITS_9_TO_5__q53[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_snd__h226657 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_snd__h228588 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[2] ||
	      condFlags64_reswget_BITS_14_TO_10__q30[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[2] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[0]) ?
	       _theResult_____3_snd__h228793 :
	       5'd0 ;
  assign _theResult_____3_snd__h228793 =
	     (ff_input_D_OUT[5:3] != 3'b010 ||
	      condFlags64_reswget_BITS_14_TO_10__q30[0] |
	      condFlags64_reswget_BITS_9_TO_5__q31[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_snd__h229204 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_snd_fst__h194038 =
	     inst_dpfm_add_sub_ff_stage5[15] ?
	       { inst_dpfm_add_sub_ff_stage5[16], 63'h7FF0000000000000 } :
	       { inst_dpfm_add_sub_ff_stage5[13] ?
		   inst_dpfm_add_sub_ff_stage5[14] :
		   (inst_dpfm_add_sub_ff_stage5[18] ?
		      inst_dpfm_add_sub_ff_stage5[19] :
		      inst_dpfm_add_sub_ff_stage5[23]),
		 (inst_dpfm_add_sub_ff_stage5[13] ||
		  inst_dpfm_add_sub_ff_stage5[18]) ?
		   63'd0 :
		   IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__15_ETC___d3248 } ;
  assign _theResult_____3_snd_fst__h249795 =
	     (!ff_input_D_OUT[1] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q41[31]) ?
	       lv_invalid___2__h248729 :
	       _theResult_____1_snd__h249789 ;
  assign _theResult_____3_snd_fst__h252866 =
	     sign__h235102 ?
	       lv_invalid___2__h251804 :
	       _theResult_____1_snd__h252860 ;
  assign _theResult_____3_snd_fst__h65656 =
	     inst_spfm_add_sub_ff_stage5[14] ?
	       { inst_spfm_add_sub_ff_stage5[15], 31'h7F800000 } :
	       { inst_spfm_add_sub_ff_stage5[12] ?
		   inst_spfm_add_sub_ff_stage5[13] :
		   (inst_spfm_add_sub_ff_stage5[17] ?
		      inst_spfm_add_sub_ff_stage5[18] :
		      inst_spfm_add_sub_ff_stage5[22]),
		 (inst_spfm_add_sub_ff_stage5[12] ||
		  inst_spfm_add_sub_ff_stage5[17]) ?
		   31'd0 :
		   IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1265 } ;
  assign _theResult_____3_snd_snd__h194687 =
	     ex_overflow__h193909 || inst_dpfm_add_sub_ff_stage5[12] ||
	     IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3232[10:0] ==
	     11'd2047 ;
  assign _theResult_____3_snd_snd__h66305 =
	     ex_overflow__h65527 || inst_spfm_add_sub_ff_stage5[11] ||
	     IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249[7:0] ==
	     8'd255 ;
  assign _theResult_____3_snd_snd_fst__h194806 =
	     !inst_dpfm_add_sub_ff_stage5[15] && _theResult_____6__h193918 ;
  assign _theResult_____3_snd_snd_fst__h66424 =
	     !inst_spfm_add_sub_ff_stage5[14] && _theResult_____6__h65536 ;
  assign _theResult_____3_snd_snd_snd__h194807 =
	     !inst_dpfm_add_sub_ff_stage5[15] &&
	     ((inst_dpfm_add_sub_ff_stage5[13] ||
	       inst_dpfm_add_sub_ff_stage5[18]) ?
		ex_overflow__h193909 :
		_theResult_____3_snd_snd__h194687) ;
  assign _theResult_____3_snd_snd_snd__h66425 =
	     !inst_spfm_add_sub_ff_stage5[14] &&
	     ((inst_spfm_add_sub_ff_stage5[12] ||
	       inst_spfm_add_sub_ff_stage5[17]) ?
		ex_overflow__h65527 :
		_theResult_____3_snd_snd__h66305) ;
  assign _theResult_____4__h14158 =
	     IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317 ?
	       lv_rounded_quotient___1__h14525 :
	       lv_rounded_quotient__h14157 ;
  assign _theResult_____4__h87416 =
	     IF_inst_dpfpu_divider_rg_stage3_675_BITS_4_TO__ETC___d1720 ?
	       lv_rounded_quotient___1__h87783 :
	       lv_rounded_quotient__h87415 ;
  assign _theResult_____4_snd_fst__h118253 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__373_BIT_5_ETC___d2390 ?
	       exponent2__h118034 :
	       exponent3__h118025 ;
  assign _theResult_____4_snd_fst__h30500 =
	     IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 ?
	       exponent2__h30281 :
	       exponent3__h30272 ;
  assign _theResult_____5__h193919 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BITS__ETC___d3221 ?
	       lv_rounded_mantissa___1__h194599 :
	       IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[159:106] ;
  assign _theResult_____5__h65537 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238 ?
	       lv_rounded_mantissa___1__h66217 :
	       IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[72:48] ;
  assign _theResult_____6__h193918 =
	     !inst_dpfm_add_sub_ff_stage5[183] &&
	     !inst_dpfm_add_sub_ff_stage5[182] &&
	     !_0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3177 &&
	     lv_inexact__h193917 ||
	     IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_BI_ETC___d3292 ;
  assign _theResult_____6__h65536 =
	     !inst_spfm_add_sub_ff_stage5[95] &&
	     !inst_spfm_add_sub_ff_stage5[94] &&
	     !_0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194 &&
	     lv_inexact__h65535 ||
	     IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1309 ;
  assign _theResult_____6_fst__h167506 =
	     (!inst_dpfm_add_sub_ff_stage2[4] ||
	      !inst_dpfm_add_sub_ff_stage2[14]) &&
	     inst_dpfm_add_sub_ff_stage2[1] ;
  assign _theResult_____6_fst__h53218 =
	     (!inst_spfm_add_sub_ff_stage2[4] ||
	      !inst_spfm_add_sub_ff_stage2[14]) &&
	     inst_spfm_add_sub_ff_stage2[1] ;
  assign _theResult_____6_snd_snd__h167509 =
	     (inst_dpfm_add_sub_ff_stage2[4] &&
	      inst_dpfm_add_sub_ff_stage2[14]) ?
	       lv_result_is_infinity___1__h167510 :
	       ((inst_dpfm_add_sub_ff_stage2[4] ||
		 inst_dpfm_add_sub_ff_stage2[14]) ?
		  lv_result_is_infinity___1__h167572 :
		  2'd0) ;
  assign _theResult_____6_snd_snd__h53221 =
	     (inst_spfm_add_sub_ff_stage2[4] &&
	      inst_spfm_add_sub_ff_stage2[14]) ?
	       lv_result_is_infinity___1__h53222 :
	       ((inst_spfm_add_sub_ff_stage2[4] ||
		 inst_spfm_add_sub_ff_stage2[14]) ?
		  lv_result_is_infinity___1__h53284 :
		  2'd0) ;
  assign _theResult_____6_snd_snd_snd__h167556 =
	     (inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       (inst_dpfm_add_sub_ff_stage2[11] ?
		  lv_result_is_zero___1__h167609 :
		  IF_inst_dpfm_add_sub_ff_stage2_read__373_BITS__ETC___d2789) :
	       2'd0 ;
  assign _theResult_____6_snd_snd_snd__h53268 =
	     (inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       (inst_spfm_add_sub_ff_stage2[11] ?
		  lv_result_is_zero___1__h53321 :
		  IF_inst_spfm_add_sub_ff_stage2_read__38_BITS_9_ETC___d980) :
	       2'd0 ;
  assign _theResult____h118024 =
	     (!inst_dpfm_add_sub_ff_stage2[14] &&
	      !inst_dpfm_add_sub_ff_stage2_read__373_BIT_15_3_ETC___d2398 &&
	      !inst_dpfm_add_sub_ff_stage2[16]) ?
	       mantissa3___1__h137744 :
	       160'd0 ;
  assign _theResult____h14155 =
	     inst_spfpu_divider_rg_stage3[50:23] != 28'd0 ||
	     inst_spfpu_divider_rg_stage3[51] ||
	     inst_spfpu_divider_rg_stage3[6] ;
  assign _theResult____h15994 =
	     inst_spfpu_sqrt_rg_inter_stage[57] ?
	       lv_remainder__h16110 :
	       lv_remainder__h16200 ;
  assign _theResult____h167775 =
	     inst_dpfm_add_sub_ff_stage4[348] ?
	       sub_mantissa__h167774 :
	       add_mantissa__h167771 ;
  assign _theResult____h203931 =
	     (!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	      inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20[31]) ?
	       ~inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] + 32'd1 :
	       inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] ;
  assign _theResult____h203943 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110[5:0] !=
	     6'd0 ;
  assign _theResult____h209803 =
	     (!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	      inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21[63]) ?
	       ~inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] + 64'd1 :
	       inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] ;
  assign _theResult____h209815 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986[37:0] !=
	     38'd0 ;
  assign _theResult____h220894 =
	     lv_sign__h220890 ? inp32___1__h230148 : ff_input_D_OUT[176:145] ;
  assign _theResult____h220907 =
	     sign__h235102 ?
	       ~ff_input_D_OUT[208:145] + 64'd1 :
	       ff_input_D_OUT[208:145] ;
  assign _theResult____h226256 =
	     (setCanonicalNaN_reswget_BITS_95_TO_64__q41[30:23] <
	      setCanonicalNaN_reswget_BITS_63_TO_32__q42[30:23]) ?
	       2'b01 :
	       ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[30:23] ==
		 setCanonicalNaN_reswget_BITS_63_TO_32__q42[30:23]) ?
		  ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[22:0] <
		    setCanonicalNaN_reswget_BITS_63_TO_32__q42[22:0]) ?
		     2'b01 :
		     ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[22:0] ==
		       setCanonicalNaN_reswget_BITS_63_TO_32__q42[22:0]) ?
			2'b11 :
			2'b10)) :
		  2'b10) ;
  assign _theResult____h228809 =
	     (ff_input_D_OUT[207:197] < ff_input_D_OUT[143:133]) ?
	       2'b01 :
	       ((ff_input_D_OUT[207:197] == ff_input_D_OUT[143:133]) ?
		  ((ff_input_D_OUT[196:145] < ff_input_D_OUT[132:81]) ?
		     2'b01 :
		     ((ff_input_D_OUT[196:145] == ff_input_D_OUT[132:81]) ?
			2'b11 :
			2'b10)) :
		  2'b10) ;
  assign _theResult____h235104 =
	     IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682[8:0] !=
	     9'd0 ;
  assign _theResult____h30271 =
	     (!inst_spfm_add_sub_ff_stage2[14] &&
	      !inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 &&
	      !inst_spfm_add_sub_ff_stage2[16]) ?
	       mantissa3___1__h39493 :
	       73'd0 ;
  assign _theResult____h53487 =
	     inst_spfm_add_sub_ff_stage4[171] ?
	       sub_mantissa__h53486 :
	       add_mantissa__h53483 ;
  assign _theResult____h87413 =
	     inst_dpfpu_divider_rg_stage3[82:26] != 57'd0 ||
	     inst_dpfpu_divider_rg_stage3[83] ||
	     inst_dpfpu_divider_rg_stage3[6] ;
  assign _theResult____h89251 =
	     inst_dpfpu_sqrt_rg_inter_stage[115] ?
	       lv_remainder__h89367 :
	       lv_remainder__h89457 ;
  assign _theResult___fst__h13941 =
	     x_wget__h695[26] ?
	       x_wget__h695[26:0] :
	       _theResult___fst__h13945 ;
  assign _theResult___fst__h13945 =
	     INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d195 ?
	       lv_quotient_shiftL_expo__h7022 :
	       lv_quotient_shiftL_zerosMSB__h7024 ;
  assign _theResult___fst__h194227 =
	     inst_dpfm_add_sub_ff_stage5[182] ?
	       inst_dpfm_add_sub_ff_stage5[196:184] :
	       _theResult___fst__h194231 ;
  assign _theResult___fst__h194231 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3177 ?
	       resultant_exponent_sub_zerosMSB__h193899 :
	       13'd0 ;
  assign _theResult___fst__h248319 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[4] ||
	      IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822[7] &&
	      !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3827) ?
	       _theResult___fst__h249089 :
	       _theResult___fst__h248359 ;
  assign _theResult___fst__h248359 =
	     ff_input_D_OUT[2] ?
	       _theResult___fst__h248555 :
	       _theResult___fst__h248371 ;
  assign _theResult___fst__h248371 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h248488 :
	       _theResult___fst__h248422 ;
  assign _theResult___fst__h248422 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248094) ?
	       final_result___1__h249140 :
	       _theResult___fst__h248467 ;
  assign _theResult___fst__h248467 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3840 ?
	       final_result___1__h248477 :
	       _theResult___fst__h249192 ;
  assign _theResult___fst__h248488 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248094) ?
	       final_result___1__h248511 :
	       _theResult___fst__h248534 ;
  assign _theResult___fst__h248534 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3838 ?
	       final_result___1__h248477 :
	       _theResult___fst__h249260 ;
  assign _theResult___fst__h248555 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h248653 :
	       _theResult___fst__h248587 ;
  assign _theResult___fst__h248587 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248094) ?
	       final_result___1__h248610 :
	       _theResult___fst__h248633 ;
  assign _theResult___fst__h248633 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3835 ?
	       _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858[86:23] :
	       _theResult___fst__h249320 ;
  assign _theResult___fst__h248653 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248094) ?
	       final_result___1__h248511 :
	       _theResult___fst__h248699 ;
  assign _theResult___fst__h248699 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3833 ?
	       _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858[86:23] :
	       _theResult___fst__h249389 ;
  assign _theResult___fst__h249089 =
	     (!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
	      ff_input_D_OUT[5:3] == 3'b011) ?
	       64'd1 :
	       ((ff_input_D_OUT[5:3] == 3'b010 &&
		 setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
		 !ff_input_D_OUT[1]) ?
		  64'hFFFFFFFFFFFFFFFF :
		  IF_IF_getExp32_res_whas__818_THEN_getExp32_res_ETC___d3885) ;
  assign _theResult___fst__h249192 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3840 ?
	       64'd0 :
	       _theResult___fst__h249196 ;
  assign _theResult___fst__h249196 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       64'hFFFFFFFF80000000 :
	       64'h000000007FFFFFFF ;
  assign _theResult___fst__h249260 =
	     (IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3838 ||
	      setCanonicalNaN_reswget_BITS_95_TO_64__q41[31]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___fst__h249320 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3835 ?
	       64'd0 :
	       _theResult___fst__h249324 ;
  assign _theResult___fst__h249324 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       64'h8000000000000000 :
	       64'h7FFFFFFFFFFFFFFF ;
  assign _theResult___fst__h249389 =
	     (IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3833 ||
	      setCanonicalNaN_reswget_BITS_95_TO_64__q41[31]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___fst__h251394 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[4] ||
	      x__h251313[10] &&
	      !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3994) ?
	       _theResult___fst__h252164 :
	       _theResult___fst__h251434 ;
  assign _theResult___fst__h251434 =
	     ff_input_D_OUT[2] ?
	       _theResult___fst__h251630 :
	       _theResult___fst__h251446 ;
  assign _theResult___fst__h251446 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h251563 :
	       _theResult___fst__h251497 ;
  assign _theResult___fst__h251497 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251165) ?
	       final_result___1__h252213 :
	       _theResult___fst__h251542 ;
  assign _theResult___fst__h251542 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4008 ?
	       final_result___1__h251552 :
	       _theResult___fst__h252265 ;
  assign _theResult___fst__h251563 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251165) ?
	       final_result___1__h251586 :
	       _theResult___fst__h251609 ;
  assign _theResult___fst__h251609 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4006 ?
	       final_result___1__h251552 :
	       _theResult___fst__h252333 ;
  assign _theResult___fst__h251630 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h251728 :
	       _theResult___fst__h251662 ;
  assign _theResult___fst__h251662 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251165) ?
	       final_result___1__h251685 :
	       _theResult___fst__h251708 ;
  assign _theResult___fst__h251708 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4003 ?
	       _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025[115:52] :
	       _theResult___fst__h252393 ;
  assign _theResult___fst__h251728 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251165) ?
	       final_result___1__h251586 :
	       _theResult___fst__h251774 ;
  assign _theResult___fst__h251774 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4001 ?
	       _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025[115:52] :
	       _theResult___fst__h252462 ;
  assign _theResult___fst__h252164 =
	     (!ff_input_D_OUT[208] && ff_input_D_OUT[5:3] == 3'b011) ?
	       64'd1 :
	       ((ff_input_D_OUT[5:3] == 3'b010 && ff_input_D_OUT[208] &&
		 !ff_input_D_OUT[1]) ?
		  64'hFFFFFFFFFFFFFFFF :
		  IF_0b0_CONCAT_getExp64_res_wget__986_BITS_32_T_ETC___d4051) ;
  assign _theResult___fst__h252265 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4008 ?
	       64'd0 :
	       _theResult___fst__h252269 ;
  assign _theResult___fst__h252269 =
	     ff_input_D_OUT[208] ?
	       64'hFFFFFFFF80000000 :
	       64'h000000007FFFFFFF ;
  assign _theResult___fst__h252333 =
	     (_0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4006 ||
	      ff_input_D_OUT[208]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___fst__h252393 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4003 ?
	       64'd0 :
	       _theResult___fst__h252397 ;
  assign _theResult___fst__h252397 =
	     ff_input_D_OUT[208] ?
	       64'h8000000000000000 :
	       64'h7FFFFFFFFFFFFFFF ;
  assign _theResult___fst__h252462 =
	     (_0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4001 ||
	      ff_input_D_OUT[208]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___fst__h265052 =
	     (ff_input_D_OUT[5:3] == 3'b010 && ff_input_D_OUT[208]) ?
	       32'h80000001 :
	       ((ff_input_D_OUT[5:3] == 3'b011 && !ff_input_D_OUT[208]) ?
		  32'd1 :
		  { ff_input_D_OUT[208], 31'b0 }) ;
  assign _theResult___fst__h65845 =
	     inst_spfm_add_sub_ff_stage5[94] ?
	       inst_spfm_add_sub_ff_stage5[105:96] :
	       _theResult___fst__h65849 ;
  assign _theResult___fst__h65849 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194 ?
	       resultant_exponent_sub_zerosMSB__h65517 :
	       10'd0 ;
  assign _theResult___fst__h7010 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ?
	       27'd1 :
	       _theResult___fst__h7029 ;
  assign _theResult___fst__h7029 =
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 ?
	       _theResult___fst__h13941 :
	       lv_quotient___1__h7046 ;
  assign _theResult___fst__h73047 =
	     inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1448 ?
	       56'd1 :
	       _theResult___fst__h73066 ;
  assign _theResult___fst__h73066 =
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1450 ?
	       _theResult___fst__h87199 :
	       lv_quotient___1__h73083 ;
  assign _theResult___fst__h87199 =
	     x_wget__h66759[55] ?
	       x_wget__h66759[55:0] :
	       _theResult___fst__h87203 ;
  assign _theResult___fst__h87203 =
	     INV_1_MINUS_inst_dpfpu_divider_rg_stage2_444_B_ETC___d1569 ?
	       lv_quotient_shiftL_expo__h73059 :
	       lv_quotient_shiftL_zerosMSB__h73061 ;
  assign _theResult___snd__h249197 =
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ||
	     getExp32_res_wget[23:16] != 8'd158 ||
	     getMant32_res_wget[68:46] != 23'd0 ;
  assign _theResult___snd__h249261 =
	     !IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3838 ||
	     lv_invalid__h248094 ;
  assign _theResult___snd__h249325 =
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ||
	     getExp32_res_wget[23:16] != 8'd190 ||
	     getMant32_res_wget[68:46] != 23'd0 ;
  assign _theResult___snd__h249390 =
	     !IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3833 ||
	     lv_invalid__h248094 ;
  assign _theResult___snd__h252270 =
	     !ff_input_D_OUT[208] || x__h251313[10:0] != 11'd31 ||
	     getMant64_res_wget[155:104] != 52'd0 ;
  assign _theResult___snd__h252334 =
	     !_0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4006 ||
	     lv_invalid__h251165 ;
  assign _theResult___snd__h252398 =
	     !ff_input_D_OUT[208] || x__h251313[10:0] != 11'd63 ||
	     getMant64_res_wget[155:104] != 52'd0 ;
  assign _theResult___snd__h252463 =
	     !_0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4001 ||
	     lv_invalid__h251165 ;
  assign _theResult___snd_final_result__h220915 =
	     ff_input_D_OUT[2] ?
	       NOT_ff_input_first__309_BIT_1_534_548_AND_ff_i_ETC___d3713 :
	       { lv_sign__h220890, expo__h220897, mantissa__h220898 } ;
  assign _theResult___snd_fst__h14025 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 ?
	       _theResult___snd_fst__h14035 :
	       inst_spfpu_divider_rg_stage2[18:9] ;
  assign _theResult___snd_fst__h14035 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ?
	       10'd0 :
	       _theResult___snd_fst__h14043 ;
  assign _theResult___snd_fst__h14043 =
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 ?
	       _theResult___snd_fst__h14053 :
	       lv_exponent_inc_shift__h7020 ;
  assign _theResult___snd_fst__h14053 =
	     x_wget__h695[26] ?
	       inst_spfpu_divider_rg_stage2[18:9] :
	       _theResult___snd_fst__h14055 ;
  assign _theResult___snd_fst__h14055 =
	     INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d195 ?
	       lv_exponent_sub_shift__h7023 :
	       lv_exponent_sub_zerosMSB__h7025 ;
  assign _theResult___snd_fst__h194444 =
	     inst_dpfm_add_sub_ff_stage5[182] ?
	       inst_dpfm_add_sub_ff_stage5[183:24] :
	       _theResult___snd_fst__h194446 ;
  assign _theResult___snd_fst__h194446 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3177 ?
	       resultant_mantissa_norm_zerosMSB__h193898 :
	       resultant_mantissa_norm_expo__h193897 ;
  assign _theResult___snd_fst__h248321 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[4] ||
	      IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822[7] &&
	      !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3827) ?
	       _theResult___snd_fst__h249800 :
	       _theResult___snd_fst__h248361 ;
  assign _theResult___snd_fst__h248361 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_fst__h248557 :
	       _theResult___snd_fst__h248373 ;
  assign _theResult___snd_fst__h248373 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h248490 :
	       _theResult___snd_fst__h248424 ;
  assign _theResult___snd_fst__h248424 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248094 ||
	      IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3840) ?
	       lv_invalid__h248094 :
	       _theResult___snd__h249197 ;
  assign _theResult___snd_fst__h248490 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248094 ||
	      IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3838) ?
	       lv_invalid__h248094 :
	       _theResult___snd__h249261 ;
  assign _theResult___snd_fst__h248557 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h248655 :
	       _theResult___snd_fst__h248589 ;
  assign _theResult___snd_fst__h248589 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248094 ||
	      IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3835) ?
	       lv_invalid__h248094 :
	       _theResult___snd__h249325 ;
  assign _theResult___snd_fst__h248655 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248094 ||
	      IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3833) ?
	       lv_invalid__h248094 :
	       _theResult___snd__h249390 ;
  assign _theResult___snd_fst__h249800 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
	     ff_input_D_OUT[1] &&
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d4152 ||
	     lv_invalid__h248094 ;
  assign _theResult___snd_fst__h251396 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[4] ||
	      x__h251313[10] &&
	      !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3994) ?
	       _theResult___snd_fst__h252871 :
	       _theResult___snd_fst__h251436 ;
  assign _theResult___snd_fst__h251436 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_fst__h251632 :
	       _theResult___snd_fst__h251448 ;
  assign _theResult___snd_fst__h251448 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h251565 :
	       _theResult___snd_fst__h251499 ;
  assign _theResult___snd_fst__h251499 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251165 ||
	      _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4008) ?
	       lv_invalid__h251165 :
	       _theResult___snd__h252270 ;
  assign _theResult___snd_fst__h251565 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251165 ||
	      _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4006) ?
	       lv_invalid__h251165 :
	       _theResult___snd__h252334 ;
  assign _theResult___snd_fst__h251632 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h251730 :
	       _theResult___snd_fst__h251664 ;
  assign _theResult___snd_fst__h251664 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251165 ||
	      _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4003) ?
	       lv_invalid__h251165 :
	       _theResult___snd__h252398 ;
  assign _theResult___snd_fst__h251730 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251165 ||
	      _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4001) ?
	       lv_invalid__h251165 :
	       _theResult___snd__h252463 ;
  assign _theResult___snd_fst__h252871 =
	     ff_input_D_OUT[208] && ff_input_D_OUT[1] &&
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4188 ||
	     lv_invalid__h251165 ;
  assign _theResult___snd_fst__h66062 =
	     inst_spfm_add_sub_ff_stage5[94] ?
	       inst_spfm_add_sub_ff_stage5[95:23] :
	       _theResult___snd_fst__h66064 ;
  assign _theResult___snd_fst__h66064 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194 ?
	       resultant_mantissa_norm_zerosMSB__h65516 :
	       resultant_mantissa_norm_expo__h65515 ;
  assign _theResult___snd_fst__h87283 =
	     inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447 ?
	       _theResult___snd_fst__h87293 :
	       inst_dpfpu_divider_rg_stage2[21:9] ;
  assign _theResult___snd_fst__h87293 =
	     inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1448 ?
	       13'd0 :
	       _theResult___snd_fst__h87301 ;
  assign _theResult___snd_fst__h87301 =
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1450 ?
	       _theResult___snd_fst__h87311 :
	       lv_exponent_inc_shift__h73057 ;
  assign _theResult___snd_fst__h87311 =
	     x_wget__h66759[55] ?
	       inst_dpfpu_divider_rg_stage2[21:9] :
	       _theResult___snd_fst__h87313 ;
  assign _theResult___snd_fst__h87313 =
	     INV_1_MINUS_inst_dpfpu_divider_rg_stage2_444_B_ETC___d1569 ?
	       lv_exponent_sub_shift__h73060 :
	       lv_exponent_sub_zerosMSB__h73062 ;
  assign _theResult___snd_snd__h268675 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) &&
	     quiet_nan_two__h268165 ;
  assign _theResult___snd_snd__h270858 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[3]) &&
	     quiet_nan_two__h270352 ;
  assign _theResult___snd_snd_fst__h248363 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_snd_fst__h248559 :
	       _theResult___snd_snd_fst__h248375 ;
  assign _theResult___snd_snd_fst__h248375 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_fst__h248492 :
	       _theResult___snd_snd_fst__h248426 ;
  assign _theResult___snd_snd_fst__h248426 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248094) ?
	       getMant32_res_wget[68:46] :
	       _theResult___snd_snd_fst__h248471 ;
  assign _theResult___snd_snd_fst__h248471 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3840 ?
	       _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___snd_snd_fst__h248492 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248094) ?
	       getMant32_res_wget[68:46] :
	       _theResult___snd_snd_fst__h248538 ;
  assign _theResult___snd_snd_fst__h248538 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3838 ?
	       _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___snd_snd_fst__h248559 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_fst__h248657 :
	       _theResult___snd_snd_fst__h248591 ;
  assign _theResult___snd_snd_fst__h248591 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248094) ?
	       getMant32_res_wget[68:46] :
	       _theResult___snd_snd_fst__h248637 ;
  assign _theResult___snd_snd_fst__h248637 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3835 ?
	       _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___snd_snd_fst__h248657 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248094) ?
	       getMant32_res_wget[68:46] :
	       _theResult___snd_snd_fst__h248703 ;
  assign _theResult___snd_snd_fst__h248703 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3833 ?
	       _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___snd_snd_fst__h251438 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_snd_fst__h251634 :
	       _theResult___snd_snd_fst__h251450 ;
  assign _theResult___snd_snd_fst__h251450 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_fst__h251567 :
	       _theResult___snd_snd_fst__h251501 ;
  assign _theResult___snd_snd_fst__h251501 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251165) ?
	       getMant64_res_wget[155:104] :
	       _theResult___snd_snd_fst__h251546 ;
  assign _theResult___snd_snd_fst__h251546 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4008 ?
	       _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___snd_snd_fst__h251567 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251165) ?
	       getMant64_res_wget[155:104] :
	       _theResult___snd_snd_fst__h251613 ;
  assign _theResult___snd_snd_fst__h251613 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4006 ?
	       _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___snd_snd_fst__h251634 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_fst__h251732 :
	       _theResult___snd_snd_fst__h251666 ;
  assign _theResult___snd_snd_fst__h251666 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251165) ?
	       getMant64_res_wget[155:104] :
	       _theResult___snd_snd_fst__h251712 ;
  assign _theResult___snd_snd_fst__h251712 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4003 ?
	       _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___snd_snd_fst__h251732 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251165) ?
	       getMant64_res_wget[155:104] :
	       _theResult___snd_snd_fst__h251778 ;
  assign _theResult___snd_snd_fst__h251778 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4001 ?
	       _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___snd_snd_snd__h268669 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[1]) ?
	       _theResult___snd_snd__h268675 :
	       quiet_nan_two__h268165 ;
  assign _theResult___snd_snd_snd__h270852 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[1]) ?
	       _theResult___snd_snd__h270858 :
	       quiet_nan_two__h270352 ;
  assign _theResult___snd_snd_snd_fst__h107957 =
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1872 ?
	       _theResult_____1_fst__h108001 :
	       lv_product_exponent_inc_shift__h107945 ;
  assign _theResult___snd_snd_snd_fst__h25366 =
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d469 ?
	       _theResult_____1_fst__h25410 :
	       lv_product_exponent_inc_shift__h25354 ;
  assign _theResult___snd_snd_snd_snd_fst__h108042 =
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1872 ?
	       _theResult_____1_snd__h108002 :
	       lv_product_mantissa___1__h107993 ;
  assign _theResult___snd_snd_snd_snd_fst__h25451 =
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d469 ?
	       _theResult_____1_snd__h25411 :
	       lv_product_mantissa___1__h25402 ;
  assign add_mantissa__h167771 =
	     inst_dpfm_add_sub_ff_stage4[332:173] +
	     inst_dpfm_add_sub_ff_stage4[172:13] ;
  assign add_mantissa__h53483 =
	     inst_spfm_add_sub_ff_stage4[158:86] +
	     inst_spfm_add_sub_ff_stage4[85:13] ;
  assign and_sign__h225961 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &
	     setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] ;
  assign and_sign__h228540 = ff_input_D_OUT[208] & ff_input_D_OUT[144] ;
  assign condFlags32_argwget_BITS_30_TO_8__q51 = condFlags32_arg_wget[30:8] ;
  assign condFlags32_argwget_BITS_61_TO_39__q50 =
	     condFlags32_arg_wget[61:39] ;
  assign condFlags32_argwget_BITS_92_TO_70__q49 =
	     condFlags32_arg_wget[92:70] ;
  assign condFlags32_reswget_BITS_14_TO_10__q52 =
	     condFlags32_res_wget[14:10] ;
  assign condFlags32_reswget_BITS_9_TO_5__q53 = condFlags32_res_wget[9:5] ;
  assign condFlags64_argwget_BITS_125_TO_74__q28 =
	     condFlags64_arg_wget[125:74] ;
  assign condFlags64_argwget_BITS_188_TO_137__q27 =
	     condFlags64_arg_wget[188:137] ;
  assign condFlags64_argwget_BITS_62_TO_11__q29 =
	     condFlags64_arg_wget[62:11] ;
  assign condFlags64_reswget_BITS_14_TO_10__q30 =
	     condFlags64_res_wget[14:10] ;
  assign condFlags64_reswget_BITS_9_TO_5__q31 = condFlags64_res_wget[9:5] ;
  assign ex_overflow__h193909 =
	     !IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3183 ;
  assign ex_overflow__h65527 =
	     !IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1200 ;
  assign exception__h264586 =
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 ?
	       5'd3 :
	       5'd0 ;
  assign exp1__h274232 = exp1_temp__h268169 - { 5'd0, x__h274303 } ;
  assign exp1__h284234 = exp1_temp__h270356 - { 7'd0, x__h284305 } ;
  assign exp1_temp__h268169 = { 2'b0, getExp32_res_wget[23:16] } ;
  assign exp1_temp__h270356 = { 2'b0, getExp64_res_wget[32:22] } ;
  assign exp2__h274233 = exp2_temp__h268170 - { 5'd0, x__h278222 } ;
  assign exp2__h284235 = exp2_temp__h270357 - { 7'd0, x__h292893 } ;
  assign exp2_temp__h268170 = { 2'b0, getExp32_res_wget[15:8] } ;
  assign exp2_temp__h270357 = { 2'b0, getExp64_res_wget[21:11] } ;
  assign expo3_zero__h118022 = inst_dpfm_add_sub_ff_stage2[80:70] != 11'd0 ;
  assign expo3_zero__h30269 = inst_spfm_add_sub_ff_stage2[48:41] != 8'd0 ;
  assign expo___1__h265263 = expo__h264580 + 8'd1 ;
  assign expo__h203933 = 8'd158 - { 3'd0, x__h204223[4:0] } ;
  assign expo__h209805 = 8'd190 - { 2'd0, x__h210113[5:0] } ;
  assign expo__h220897 = 11'd1054 - { 6'd0, x__h229768[4:0] } ;
  assign expo__h220910 = 11'd1086 - { 5'd0, x__h235203[5:0] } ;
  assign expo__h258379 = { 3'd0, getExp32_res_wget[23:16] } + 11'd896 ;
  assign expo__h258438 = 11'd896 - { 6'd0, x__h258443 } ;
  assign expo__h264580 =
	     (IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 ||
	      IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4306) ?
	       8'd0 :
	       x__h264465[7:0] ;
  assign exponent2__h118034 =
	     inst_dpfm_add_sub_ff_stage2[5] ?
	       13'd0 :
	       inst_dpfm_add_sub_ff_stage2[201:189] ;
  assign exponent2__h30281 =
	     inst_spfm_add_sub_ff_stage2[5] ?
	       10'd0 :
	       inst_spfm_add_sub_ff_stage2[108:99] ;
  assign exponent3__h118013 = { 2'b0, inst_dpfm_add_sub_ff_stage2[80:70] } ;
  assign exponent3__h118025 =
	     exponent3__h118013 + { 12'd0, inst_dpfm_add_sub_ff_stage2[17] } ;
  assign exponent3__h30260 = { 2'b0, inst_spfm_add_sub_ff_stage2[48:41] } ;
  assign exponent3__h30272 =
	     exponent3__h30260 + { 9'd0, inst_spfm_add_sub_ff_stage2[17] } ;
  assign exponent___1__h304830 = exponent__h304244 + 9'd1 ;
  assign exponent___1__h315420 = lv_exp__h251175 + 12'd1 ;
  assign exponent__h304244 = { 1'b0, getExp32_res_wget[23:16] } ;
  assign exponent_difference__h118048 =
	     lv_minuend__h118044 - _theResult_____4_snd_fst__h118253 ;
  assign exponent_difference__h30295 =
	     lv_minuend__h30291 - _theResult_____4_snd_fst__h30500 ;
  assign ff_inputD_OUT_BITS_176_TO_145__q1 = ff_input_D_OUT[176:145] ;
  assign ff_input_first__309_BITS_12_TO_8_310_EQ_0b100__ETC___d3335 =
	     ff_input_D_OUT[12:8] == 5'b00100 ||
	     ff_input_D_OUT[12:8] == 5'b11000 ||
	     ff_input_D_OUT[12:8] == 5'b11100 &&
	     ff_input_D_OUT[5:3] == 3'b001 ||
	     ff_input_D_OUT[12:8] == 5'b01000 ||
	     (ff_input_D_OUT[12:6] == 7'b1110000 ||
	      ff_input_D_OUT[12:6] == 7'b1111000 ||
	      ff_input_D_OUT[12:6] == 7'b1110001 ||
	      ff_input_D_OUT[12:6] == 7'b1111001) &&
	     ff_input_D_OUT[5:3] == 3'b0 ;
  assign ff_input_first__309_BITS_12_TO_8_310_EQ_0b10_5_ETC___d4533 =
	     ff_input_D_OUT[12:8] == 5'b00010 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ||
	     (ff_input_D_OUT[16:13] == 4'b0 ||
	      ff_input_D_OUT[16:13] == 4'b0001 ||
	      ff_input_D_OUT[16:13] == 4'b0010 ||
	      ff_input_D_OUT[16:13] == 4'b0011) &&
	     ff_input_D_OUT[0] ;
  assign ff_input_first__309_BITS_12_TO_8_310_EQ_0b10_5_ETC___d4714 =
	     ff_input_D_OUT[12:8] == 5'b00010 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] ||
	     (ff_input_D_OUT[16:13] == 4'b0 ||
	      ff_input_D_OUT[16:13] == 4'b0001 ||
	      ff_input_D_OUT[16:13] == 4'b0010 ||
	      ff_input_D_OUT[16:13] == 4'b0011) &&
	     !ff_input_D_OUT[0] ;
  assign ff_input_first__309_BITS_12_TO_8_310_EQ_0b1100_ETC___d4597 =
	     (ff_input_D_OUT[12:8] == 5'b11000 ||
	      ff_input_D_OUT[12:8] == 5'b11100 &&
	      ff_input_D_OUT[5:3] == 3'b001 ||
	      ff_input_D_OUT[12:8] == 5'b01000) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ;
  assign ff_input_first__309_BIT_0_341_AND_NOT_IF_condF_ETC___d5150 =
	     ff_input_D_OUT[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[2] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4295 ;
  assign ff_input_first__309_BIT_208_447_XOR_ff_input_f_ETC___d3810 =
	     ff_input_D_OUT[208] ^ ff_input_D_OUT[144] ;
  assign ff_input_first__309_BIT_2_523_AND_NOT_ff_input_ETC___d3955 =
	     ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd189 &&
	     final_result__h248108[62:0] == 63'h7FFFFFFFFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign ff_input_first__309_BIT_2_523_AND_NOT_ff_input_ETC___d4118 =
	     ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     x__h251313[10:0] == 11'd62 &&
	     final_result__h251180[62:0] == 63'h7FFFFFFFFFFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign ff_input_first__309_BIT_2_523_AND_ff_input_fir_ETC___d3961 =
	     ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd190 &&
	     final_result__h248108 == 64'hFFFFFFFFFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign ff_input_first__309_BIT_2_523_AND_ff_input_fir_ETC___d4123 =
	     ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     x__h251313[10:0] == 11'd63 &&
	     final_result__h251180 == 64'hFFFFFFFFFFFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign fflags__h16387 = { 4'b0, lv_inexact__h16338 } ;
  assign fflags__h193940 =
	     { !inst_dpfm_add_sub_ff_stage5[10] &&
	       !inst_dpfm_add_sub_ff_stage5[9] &&
	       inst_dpfm_add_sub_ff_stage5[17],
	       1'b0,
	       _theResult_____1_snd_snd_snd__h194774,
	       _theResult_____1_snd_fst__h194771,
	       _theResult_____1_fst__h194769 } ;
  assign fflags__h203948 = { 4'd0, inexact__h203944 } ;
  assign fflags__h209820 = { 4'd0, inexact__h209816 } ;
  assign fflags__h304509 =
	     { condFlags32_reswget_BITS_14_TO_10__q52[0] | y__h304523,
	       4'b0 } ;
  assign fflags__h315099 =
	     { condFlags64_reswget_BITS_14_TO_10__q30[0] | y__h315113,
	       4'b0 } ;
  assign fflags__h65558 =
	     { !inst_spfm_add_sub_ff_stage5[9] &&
	       !inst_spfm_add_sub_ff_stage5[8] &&
	       inst_spfm_add_sub_ff_stage5[16],
	       1'b0,
	       _theResult_____1_snd_snd_snd__h66392,
	       _theResult_____1_snd_fst__h66389,
	       _theResult_____1_fst__h66387 } ;
  assign fflags__h89644 = { 4'b0, lv_inexact__h89595 } ;
  assign final_man__h248106 = { 64'd1, getMant32_res_wget[68:46] } ;
  assign final_man__h251178 = { 64'd1, getMant64_res_wget[155:104] } ;
  assign final_result___1__h248477 =
	     { {32{_1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC__q48[31]}},
	       _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC__q48 } ;
  assign final_result___1__h248511 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       (lv_invalid__h248094 ? 64'hFFFFFFFFFFFFFFFF : 64'd0) :
	       64'hFFFFFFFFFFFFFFFF ;
  assign final_result___1__h248610 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       (lv_invalid__h248094 ?
		  64'h7FFFFFFFFFFFFFFF :
		  64'h8000000000000000) :
	       64'h7FFFFFFFFFFFFFFF ;
  assign final_result___1__h249140 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       (lv_invalid__h248094 ?
		  64'h000000007FFFFFFF :
		  64'hFFFFFFFF80000000) :
	       64'h000000007FFFFFFF ;
  assign final_result___1__h249715 =
	     { {32{final_result___249676_BITS_31_TO_0__q56[31]}},
	       final_result___249676_BITS_31_TO_0__q56 } ;
  assign final_result___1__h249745 =
	     { {32{final_result___248775_BITS_31_TO_0__q57[31]}},
	       final_result___248775_BITS_31_TO_0__q57 } ;
  assign final_result___1__h251552 =
	     { {32{_1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC__q26[31]}},
	       _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC__q26 } ;
  assign final_result___1__h251586 =
	     ff_input_D_OUT[208] ?
	       (lv_invalid__h251165 ? 64'hFFFFFFFFFFFFFFFF : 64'd0) :
	       64'hFFFFFFFFFFFFFFFF ;
  assign final_result___1__h251685 =
	     ff_input_D_OUT[208] ?
	       (lv_invalid__h251165 ?
		  64'h7FFFFFFFFFFFFFFF :
		  64'h8000000000000000) :
	       64'h7FFFFFFFFFFFFFFF ;
  assign final_result___1__h252213 =
	     ff_input_D_OUT[208] ?
	       (lv_invalid__h251165 ?
		  64'h000000007FFFFFFF :
		  64'hFFFFFFFF80000000) :
	       64'h000000007FFFFFFF ;
  assign final_result___1__h252786 =
	     { {32{final_result___252747_BITS_31_TO_0__q34[31]}},
	       final_result___252747_BITS_31_TO_0__q34 } ;
  assign final_result___1__h252816 =
	     { {32{final_result___251849_BITS_31_TO_0__q35[31]}},
	       final_result___251849_BITS_31_TO_0__q35 } ;
  assign final_result___248775_BITS_31_TO_0__q57 =
	     final_result___2__h248775[31:0] ;
  assign final_result___249676_BITS_31_TO_0__q56 =
	     final_result___2__h249676[31:0] ;
  assign final_result___251849_BITS_31_TO_0__q35 =
	     final_result___2__h251849[31:0] ;
  assign final_result___252747_BITS_31_TO_0__q34 =
	     final_result___2__h252747[31:0] ;
  assign final_result___2__h248775 = ~final_result___3__h248728 + 64'd1 ;
  assign final_result___2__h249676 = final_result__h248108 + 64'd1 ;
  assign final_result___2__h251849 = ~final_result___3__h251803 + 64'd1 ;
  assign final_result___2__h252747 = final_result__h251180 + 64'd1 ;
  assign final_result___3__h248728 =
	     IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3934 ?
	       _theResult_____2_fst__h249463 :
	       final_result__h248108 ;
  assign final_result___3__h251803 =
	     IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d4100 ?
	       _theResult_____2_fst__h252536 :
	       final_result__h251180 ;
  assign final_result__h16343 =
	     { inst_spfpu_sqrt_rg_inter_stage[58],
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q3[7:0],
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q4[24:2] } ;
  assign final_result__h248108 =
	     condFlags32_reswget_BITS_14_TO_10__q52[3] ?
	       64'd0 :
	       _theResult___fst__h248319 ;
  assign final_result__h251180 =
	     condFlags64_reswget_BITS_14_TO_10__q30[3] ?
	       64'd0 :
	       _theResult___fst__h251394 ;
  assign final_result__h265404 =
	     { {32{ff_inputD_OUT_BITS_176_TO_145__q1[31]}},
	       ff_inputD_OUT_BITS_176_TO_145__q1 } ;
  assign final_result__h265427 = { 32'hFFFFFFFF, ff_input_D_OUT[176:145] } ;
  assign final_result__h304684 = { ff_input_D_OUT[176], 31'd0 } ;
  assign final_result__h315274 = { ff_input_D_OUT[208], 63'd0 } ;
  assign final_result__h89600 =
	     { inst_dpfpu_sqrt_rg_inter_stage[116],
	       IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_ETC__q5[10:0],
	       IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_ETC__q6[53:2] } ;
  assign fman___1__h265260 = fman__h264915 + 24'd1 ;
  assign fman__h264915 =
	     { 1'd0,
	       IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313[48:26] } ;
  assign getMant32_argwget_BITS_31_TO_0__q46 = getMant32_arg_wget[31:0] ;
  assign getMant32_argwget_BITS_63_TO_32__q45 = getMant32_arg_wget[63:32] ;
  assign getMant32_argwget_BITS_95_TO_64__q44 = getMant32_arg_wget[95:64] ;
  assign getMant32_reswget_BITS_45_TO_23__q55 = getMant32_res_wget[45:23] ;
  assign getMant32_reswget_BITS_68_TO_46__q47 = getMant32_res_wget[68:46] ;
  assign getMant64_argwget_BITS_127_TO_64__q23 = getMant64_arg_wget[127:64] ;
  assign getMant64_argwget_BITS_191_TO_128__q22 =
	     getMant64_arg_wget[191:128] ;
  assign getMant64_argwget_BITS_63_TO_0__q24 = getMant64_arg_wget[63:0] ;
  assign getMant64_reswget_BITS_103_TO_52__q33 = getMant64_res_wget[103:52] ;
  assign getMant64_reswget_BITS_155_TO_104__q25 =
	     getMant64_res_wget[155:104] ;
  assign inexact__h203944 = x__h203962 | _theResult____h203943 ;
  assign inexact__h209816 = x__h209834 | _theResult____h209815 ;
  assign inexact__h235105 = x__h235123 | _theResult____h235104 ;
  assign inp32___1__h230148 = ~ff_input_D_OUT[176:145] + 32'd1 ;
  assign inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1862 =
	     inst_dpfm_add_sub_ff_input_register[94:82] - 13'd1023 ;
  assign inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1863 =
	     (inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1862 ^
	      13'h1000) <=
	     13'd5119 ;
  assign inst_dpfm_add_sub_ff_stage2_read__373_BIT_15_3_ETC___d2398 =
	     inst_dpfm_add_sub_ff_stage2[15] |
	     inst_dpfm_add_sub_ff_stage2[13] ;
  assign inst_dpfm_add_sub_ff_stage5_read__156_BIT_15_1_ETC___d3282 =
	     inst_dpfm_add_sub_ff_stage5[15] ||
	     (inst_dpfm_add_sub_ff_stage5[183] ||
	      inst_dpfm_add_sub_ff_stage5[182] ||
	      _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3177 ||
	      !lv_inexact__h193917) &&
	     IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_BI_ETC___d3276 ||
	     !IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3245[52] ||
	     inst_dpfm_add_sub_ff_stage5[22:20] == 3'b011 ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[171:2] ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q15 =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[112:0],
	       1'd0 } +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       57'd0 } ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16 =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[112:0],
	       1'd0 } -
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       57'd0 } ;
  assign inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1446 =
	     inst_dpfpu_divider_rg_stage2[21:9] - 13'd1023 ;
  assign inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447 =
	     (inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1446 ^
	      13'h1000) <=
	     13'd5120 ;
  assign inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1448 =
	     (inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1446 ^
	      13'h1000) <
	     13'd3020 ;
  assign inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21 =
	     inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] ;
  assign inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20 =
	     inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] ;
  assign inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d459 =
	     inst_spfm_add_sub_ff_input_register[59:50] - 10'd127 ;
  assign inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460 =
	     (inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d459 ^
	      10'h200) <=
	     10'd639 ;
  assign inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 =
	     inst_spfm_add_sub_ff_stage2[15] |
	     inst_spfm_add_sub_ff_stage2[13] ;
  assign inst_spfm_add_sub_ff_stage5_read__173_BIT_14_1_ETC___d1299 =
	     inst_spfm_add_sub_ff_stage5[14] ||
	     (inst_spfm_add_sub_ff_stage5[95] ||
	      inst_spfm_add_sub_ff_stage5[94] ||
	      _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194 ||
	      !lv_inexact__h65535) &&
	     IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1293 ||
	     !IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1262[23] ||
	     inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[54:0],
	       1'd0 } -
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       28'd0 } ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[84:2] ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[54:0],
	       1'd0 } +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       28'd0 } ;
  assign inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130 =
	     inst_spfpu_divider_rg_stage2[18:9] - 10'd127 ;
  assign inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 =
	     (inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130 ^
	      10'h200) <=
	     10'd640 ;
  assign inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 =
	     (inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130 ^
	      10'h200) <
	     10'd361 ;
  assign local_expo___1__h209642 = expo__h203933 + 8'd1 ;
  assign local_expo___1__h220717 = expo__h209805 + 8'd1 ;
  assign local_expo___1__h245789 = expo__h220910 + 11'd1 ;
  assign lsb_zeros__h107943 =
	     lv_product_mantissa__h107941[0] ?
	       7'd0 :
	       (lv_product_mantissa__h107941[1] ?
		  7'd1 :
		  (lv_product_mantissa__h107941[2] ?
		     7'd2 :
		     (lv_product_mantissa__h107941[3] ?
			7'd3 :
			(lv_product_mantissa__h107941[4] ?
			   7'd4 :
			   (lv_product_mantissa__h107941[5] ?
			      7'd5 :
			      (lv_product_mantissa__h107941[6] ?
				 7'd6 :
				 (lv_product_mantissa__h107941[7] ?
				    7'd7 :
				    (lv_product_mantissa__h107941[8] ?
				       7'd8 :
				       (lv_product_mantissa__h107941[9] ?
					  7'd9 :
					  (lv_product_mantissa__h107941[10] ?
					     7'd10 :
					     (lv_product_mantissa__h107941[11] ?
						7'd11 :
						(lv_product_mantissa__h107941[12] ?
						   7'd12 :
						   (lv_product_mantissa__h107941[13] ?
						      7'd13 :
						      (lv_product_mantissa__h107941[14] ?
							 7'd14 :
							 (lv_product_mantissa__h107941[15] ?
							    7'd15 :
							    (lv_product_mantissa__h107941[16] ?
							       7'd16 :
							       (lv_product_mantissa__h107941[17] ?
								  7'd17 :
								  (lv_product_mantissa__h107941[18] ?
								     7'd18 :
								     (lv_product_mantissa__h107941[19] ?
									7'd19 :
									(lv_product_mantissa__h107941[20] ?
									   7'd20 :
									   (lv_product_mantissa__h107941[21] ?
									      7'd21 :
									      (lv_product_mantissa__h107941[22] ?
										 7'd22 :
										 (lv_product_mantissa__h107941[23] ?
										    7'd23 :
										    (lv_product_mantissa__h107941[24] ?
										       7'd24 :
										       (lv_product_mantissa__h107941[25] ?
											  7'd25 :
											  (lv_product_mantissa__h107941[26] ?
											     7'd26 :
											     (lv_product_mantissa__h107941[27] ?
												7'd27 :
												(lv_product_mantissa__h107941[28] ?
												   7'd28 :
												   (lv_product_mantissa__h107941[29] ?
												      7'd29 :
												      (lv_product_mantissa__h107941[30] ?
													 7'd30 :
													 (lv_product_mantissa__h107941[31] ?
													    7'd31 :
													    (lv_product_mantissa__h107941[32] ?
													       7'd32 :
													       (lv_product_mantissa__h107941[33] ?
														  7'd33 :
														  (lv_product_mantissa__h107941[34] ?
														     7'd34 :
														     (lv_product_mantissa__h107941[35] ?
															7'd35 :
															(lv_product_mantissa__h107941[36] ?
															   7'd36 :
															   (lv_product_mantissa__h107941[37] ?
															      7'd37 :
															      (lv_product_mantissa__h107941[38] ?
																 7'd38 :
																 (lv_product_mantissa__h107941[39] ?
																    7'd39 :
																    (lv_product_mantissa__h107941[40] ?
																       7'd40 :
																       (lv_product_mantissa__h107941[41] ?
																	  7'd41 :
																	  (lv_product_mantissa__h107941[42] ?
																	     7'd42 :
																	     (lv_product_mantissa__h107941[43] ?
																		7'd43 :
																		(lv_product_mantissa__h107941[44] ?
																		   7'd44 :
																		   (lv_product_mantissa__h107941[45] ?
																		      7'd45 :
																		      (lv_product_mantissa__h107941[46] ?
																			 7'd46 :
																			 (lv_product_mantissa__h107941[47] ?
																			    7'd47 :
																			    (lv_product_mantissa__h107941[48] ?
																			       7'd48 :
																			       (lv_product_mantissa__h107941[49] ?
																				  7'd49 :
																				  (lv_product_mantissa__h107941[50] ?
																				     7'd50 :
																				     (lv_product_mantissa__h107941[51] ?
																					7'd51 :
																					(lv_product_mantissa__h107941[52] ?
																					   7'd52 :
																					   (lv_product_mantissa__h107941[53] ?
																					      7'd53 :
																					      (lv_product_mantissa__h107941[54] ?
																						 7'd54 :
																						 (lv_product_mantissa__h107941[55] ?
																						    7'd55 :
																						    (lv_product_mantissa__h107941[56] ?
																						       7'd56 :
																						       (lv_product_mantissa__h107941[57] ?
																							  7'd57 :
																							  (lv_product_mantissa__h107941[58] ?
																							     7'd58 :
																							     (lv_product_mantissa__h107941[59] ?
																								7'd59 :
																								(lv_product_mantissa__h107941[60] ?
																								   7'd60 :
																								   (lv_product_mantissa__h107941[61] ?
																								      7'd61 :
																								      (lv_product_mantissa__h107941[62] ?
																									 7'd62 :
																									 (lv_product_mantissa__h107941[63] ?
																									    7'd63 :
																									    (lv_product_mantissa__h107941[64] ?
																									       7'd64 :
																									       (lv_product_mantissa__h107941[65] ?
																										  7'd65 :
																										  (lv_product_mantissa__h107941[66] ?
																										     7'd66 :
																										     (lv_product_mantissa__h107941[67] ?
																											7'd67 :
																											(lv_product_mantissa__h107941[68] ?
																											   7'd68 :
																											   (lv_product_mantissa__h107941[69] ?
																											      7'd69 :
																											      (lv_product_mantissa__h107941[70] ?
																												 7'd70 :
																												 (lv_product_mantissa__h107941[71] ?
																												    7'd71 :
																												    (lv_product_mantissa__h107941[72] ?
																												       7'd72 :
																												       (lv_product_mantissa__h107941[73] ?
																													  7'd73 :
																													  (lv_product_mantissa__h107941[74] ?
																													     7'd74 :
																													     (lv_product_mantissa__h107941[75] ?
																														7'd75 :
																														(lv_product_mantissa__h107941[76] ?
																														   7'd76 :
																														   (lv_product_mantissa__h107941[77] ?
																														      7'd77 :
																														      (lv_product_mantissa__h107941[78] ?
																															 7'd78 :
																															 (lv_product_mantissa__h107941[79] ?
																															    7'd79 :
																															    (lv_product_mantissa__h107941[80] ?
																															       7'd80 :
																															       (lv_product_mantissa__h107941[81] ?
																																  7'd81 :
																																  (lv_product_mantissa__h107941[82] ?
																																     7'd82 :
																																     (lv_product_mantissa__h107941[83] ?
																																	7'd83 :
																																	(lv_product_mantissa__h107941[84] ?
																																	   7'd84 :
																																	   (lv_product_mantissa__h107941[85] ?
																																	      7'd85 :
																																	      (lv_product_mantissa__h107941[86] ?
																																		 7'd86 :
																																		 (lv_product_mantissa__h107941[87] ?
																																		    7'd87 :
																																		    (lv_product_mantissa__h107941[88] ?
																																		       7'd88 :
																																		       (lv_product_mantissa__h107941[89] ?
																																			  7'd89 :
																																			  (lv_product_mantissa__h107941[90] ?
																																			     7'd90 :
																																			     (lv_product_mantissa__h107941[91] ?
																																				7'd91 :
																																				(lv_product_mantissa__h107941[92] ?
																																				   7'd92 :
																																				   (lv_product_mantissa__h107941[93] ?
																																				      7'd93 :
																																				      (lv_product_mantissa__h107941[94] ?
																																					 7'd94 :
																																					 (lv_product_mantissa__h107941[95] ?
																																					    7'd95 :
																																					    (lv_product_mantissa__h107941[96] ?
																																					       7'd96 :
																																					       (lv_product_mantissa__h107941[97] ?
																																						  7'd97 :
																																						  (lv_product_mantissa__h107941[98] ?
																																						     7'd98 :
																																						     (lv_product_mantissa__h107941[99] ?
																																							7'd99 :
																																							(lv_product_mantissa__h107941[100] ?
																																							   7'd100 :
																																							   (lv_product_mantissa__h107941[101] ?
																																							      7'd101 :
																																							      (lv_product_mantissa__h107941[102] ?
																																								 7'd102 :
																																								 (lv_product_mantissa__h107941[103] ?
																																								    7'd103 :
																																								    (lv_product_mantissa__h107941[104] ?
																																								       7'd104 :
																																								       (lv_product_mantissa__h107941[105] ?
																																									  7'd105 :
																																									  (lv_product_mantissa__h107941[106] ?
																																									     7'd106 :
																																									     7'd107)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lsb_zeros__h25352 =
	     lv_product_mantissa__h25350[0] ?
	       6'd0 :
	       (lv_product_mantissa__h25350[1] ?
		  6'd1 :
		  (lv_product_mantissa__h25350[2] ?
		     6'd2 :
		     (lv_product_mantissa__h25350[3] ?
			6'd3 :
			(lv_product_mantissa__h25350[4] ?
			   6'd4 :
			   (lv_product_mantissa__h25350[5] ?
			      6'd5 :
			      (lv_product_mantissa__h25350[6] ?
				 6'd6 :
				 (lv_product_mantissa__h25350[7] ?
				    6'd7 :
				    (lv_product_mantissa__h25350[8] ?
				       6'd8 :
				       (lv_product_mantissa__h25350[9] ?
					  6'd9 :
					  (lv_product_mantissa__h25350[10] ?
					     6'd10 :
					     (lv_product_mantissa__h25350[11] ?
						6'd11 :
						(lv_product_mantissa__h25350[12] ?
						   6'd12 :
						   (lv_product_mantissa__h25350[13] ?
						      6'd13 :
						      (lv_product_mantissa__h25350[14] ?
							 6'd14 :
							 (lv_product_mantissa__h25350[15] ?
							    6'd15 :
							    (lv_product_mantissa__h25350[16] ?
							       6'd16 :
							       (lv_product_mantissa__h25350[17] ?
								  6'd17 :
								  (lv_product_mantissa__h25350[18] ?
								     6'd18 :
								     (lv_product_mantissa__h25350[19] ?
									6'd19 :
									(lv_product_mantissa__h25350[20] ?
									   6'd20 :
									   (lv_product_mantissa__h25350[21] ?
									      6'd21 :
									      (lv_product_mantissa__h25350[22] ?
										 6'd22 :
										 (lv_product_mantissa__h25350[23] ?
										    6'd23 :
										    (lv_product_mantissa__h25350[24] ?
										       6'd24 :
										       (lv_product_mantissa__h25350[25] ?
											  6'd25 :
											  (lv_product_mantissa__h25350[26] ?
											     6'd26 :
											     (lv_product_mantissa__h25350[27] ?
												6'd27 :
												(lv_product_mantissa__h25350[28] ?
												   6'd28 :
												   (lv_product_mantissa__h25350[29] ?
												      6'd29 :
												      (lv_product_mantissa__h25350[30] ?
													 6'd30 :
													 (lv_product_mantissa__h25350[31] ?
													    6'd31 :
													    (lv_product_mantissa__h25350[32] ?
													       6'd32 :
													       (lv_product_mantissa__h25350[33] ?
														  6'd33 :
														  (lv_product_mantissa__h25350[34] ?
														     6'd34 :
														     (lv_product_mantissa__h25350[35] ?
															6'd35 :
															(lv_product_mantissa__h25350[36] ?
															   6'd36 :
															   (lv_product_mantissa__h25350[37] ?
															      6'd37 :
															      (lv_product_mantissa__h25350[38] ?
																 6'd38 :
																 (lv_product_mantissa__h25350[39] ?
																    6'd39 :
																    (lv_product_mantissa__h25350[40] ?
																       6'd40 :
																       (lv_product_mantissa__h25350[41] ?
																	  6'd41 :
																	  (lv_product_mantissa__h25350[42] ?
																	     6'd42 :
																	     (lv_product_mantissa__h25350[43] ?
																		6'd43 :
																		(lv_product_mantissa__h25350[44] ?
																		   6'd44 :
																		   (lv_product_mantissa__h25350[45] ?
																		      6'd45 :
																		      (lv_product_mantissa__h25350[46] ?
																			 6'd46 :
																			 (lv_product_mantissa__h25350[47] ?
																			    6'd47 :
																			    (lv_product_mantissa__h25350[48] ?
																			       6'd48 :
																			       6'd49)))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lsb_zeros__h7018 =
	     x_wget__h695[0] ?
	       5'd0 :
	       (x_wget__h695[1] ?
		  5'd1 :
		  (x_wget__h695[2] ?
		     5'd2 :
		     (x_wget__h695[3] ?
			5'd3 :
			(x_wget__h695[4] ?
			   5'd4 :
			   (x_wget__h695[5] ?
			      5'd5 :
			      (x_wget__h695[6] ?
				 5'd6 :
				 (x_wget__h695[7] ?
				    5'd7 :
				    (x_wget__h695[8] ?
				       5'd8 :
				       (x_wget__h695[9] ?
					  5'd9 :
					  (x_wget__h695[10] ?
					     5'd10 :
					     (x_wget__h695[11] ?
						5'd11 :
						(x_wget__h695[12] ?
						   5'd12 :
						   (x_wget__h695[13] ?
						      5'd13 :
						      (x_wget__h695[14] ?
							 5'd14 :
							 (x_wget__h695[15] ?
							    5'd15 :
							    (x_wget__h695[16] ?
							       5'd16 :
							       (x_wget__h695[17] ?
								  5'd17 :
								  (x_wget__h695[18] ?
								     5'd18 :
								     (x_wget__h695[19] ?
									5'd19 :
									(x_wget__h695[20] ?
									   5'd20 :
									   (x_wget__h695[21] ?
									      5'd21 :
									      (x_wget__h695[22] ?
										 5'd22 :
										 (x_wget__h695[23] ?
										    5'd23 :
										    (x_wget__h695[24] ?
										       5'd24 :
										       (x_wget__h695[25] ?
											  5'd25 :
											  (x_wget__h695[26] ?
											     5'd26 :
											     5'd27)))))))))))))))))))))))))) ;
  assign lsb_zeros__h73055 =
	     x_wget__h66759[0] ?
	       6'd0 :
	       (x_wget__h66759[1] ?
		  6'd1 :
		  (x_wget__h66759[2] ?
		     6'd2 :
		     (x_wget__h66759[3] ?
			6'd3 :
			(x_wget__h66759[4] ?
			   6'd4 :
			   (x_wget__h66759[5] ?
			      6'd5 :
			      (x_wget__h66759[6] ?
				 6'd6 :
				 (x_wget__h66759[7] ?
				    6'd7 :
				    (x_wget__h66759[8] ?
				       6'd8 :
				       (x_wget__h66759[9] ?
					  6'd9 :
					  (x_wget__h66759[10] ?
					     6'd10 :
					     (x_wget__h66759[11] ?
						6'd11 :
						(x_wget__h66759[12] ?
						   6'd12 :
						   (x_wget__h66759[13] ?
						      6'd13 :
						      (x_wget__h66759[14] ?
							 6'd14 :
							 (x_wget__h66759[15] ?
							    6'd15 :
							    (x_wget__h66759[16] ?
							       6'd16 :
							       (x_wget__h66759[17] ?
								  6'd17 :
								  (x_wget__h66759[18] ?
								     6'd18 :
								     (x_wget__h66759[19] ?
									6'd19 :
									(x_wget__h66759[20] ?
									   6'd20 :
									   (x_wget__h66759[21] ?
									      6'd21 :
									      (x_wget__h66759[22] ?
										 6'd22 :
										 (x_wget__h66759[23] ?
										    6'd23 :
										    (x_wget__h66759[24] ?
										       6'd24 :
										       (x_wget__h66759[25] ?
											  6'd25 :
											  (x_wget__h66759[26] ?
											     6'd26 :
											     (x_wget__h66759[27] ?
												6'd27 :
												(x_wget__h66759[28] ?
												   6'd28 :
												   (x_wget__h66759[29] ?
												      6'd29 :
												      (x_wget__h66759[30] ?
													 6'd30 :
													 (x_wget__h66759[31] ?
													    6'd31 :
													    (x_wget__h66759[32] ?
													       6'd32 :
													       (x_wget__h66759[33] ?
														  6'd33 :
														  (x_wget__h66759[34] ?
														     6'd34 :
														     (x_wget__h66759[35] ?
															6'd35 :
															(x_wget__h66759[36] ?
															   6'd36 :
															   (x_wget__h66759[37] ?
															      6'd37 :
															      (x_wget__h66759[38] ?
																 6'd38 :
																 (x_wget__h66759[39] ?
																    6'd39 :
																    (x_wget__h66759[40] ?
																       6'd40 :
																       (x_wget__h66759[41] ?
																	  6'd41 :
																	  (x_wget__h66759[42] ?
																	     6'd42 :
																	     (x_wget__h66759[43] ?
																		6'd43 :
																		(x_wget__h66759[44] ?
																		   6'd44 :
																		   (x_wget__h66759[45] ?
																		      6'd45 :
																		      (x_wget__h66759[46] ?
																			 6'd46 :
																			 (x_wget__h66759[47] ?
																			    6'd47 :
																			    (x_wget__h66759[48] ?
																			       6'd48 :
																			       (x_wget__h66759[49] ?
																				  6'd49 :
																				  (x_wget__h66759[50] ?
																				     6'd50 :
																				     (x_wget__h66759[51] ?
																					6'd51 :
																					(x_wget__h66759[52] ?
																					   6'd52 :
																					   (x_wget__h66759[53] ?
																					      6'd53 :
																					      (x_wget__h66759[54] ?
																						 6'd54 :
																						 (x_wget__h66759[55] ?
																						    6'd55 :
																						    6'd56))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_compare_result__h225963 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       (setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] ?
		  { _theResult____h226256[0], _theResult____h226256[1] } :
		  2'b01) :
	       (setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] ?
		  2'b10 :
		  _theResult____h226256) ;
  assign lv_compare_result__h228542 =
	     ff_input_D_OUT[208] ?
	       (ff_input_D_OUT[144] ?
		  { _theResult____h228809[0], _theResult____h228809[1] } :
		  2'b01) :
	       (ff_input_D_OUT[144] ? 2'b10 : _theResult____h228809) ;
  assign lv_exp__h251175 = { 1'b0, getExp64_res_wget[32:22] } ;
  assign lv_exponent___1__h14554 =
	     inst_spfpu_divider_rg_stage3[22:13] + 10'd1 ;
  assign lv_exponent___1__h14641 = lv_exponent__h14160 + 10'd1 ;
  assign lv_exponent___1__h87812 =
	     inst_dpfpu_divider_rg_stage3[25:13] + 13'd1 ;
  assign lv_exponent___1__h87899 = lv_exponent__h87418 + 13'd1 ;
  assign lv_exponent__h14160 =
	     _theResult_____4__h14158[24] ?
	       lv_exponent___1__h14554 :
	       inst_spfpu_divider_rg_stage3[22:13] ;
  assign lv_exponent__h274234 = 10'd127 + y__h274295 ;
  assign lv_exponent__h284236 = 13'd1023 + y__h284297 ;
  assign lv_exponent__h87418 =
	     _theResult_____4__h87416[53] ?
	       lv_exponent___1__h87812 :
	       inst_dpfpu_divider_rg_stage3[25:13] ;
  assign lv_exponent_inc_shift__h7020 =
	     inst_spfpu_divider_rg_stage2[18:9] +
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ;
  assign lv_exponent_inc_shift__h73057 =
	     inst_dpfpu_divider_rg_stage2[21:9] +
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1449 ;
  assign lv_exponent_sub_shift__h7023 =
	     inst_spfpu_divider_rg_stage2[18:9] - shift_neg__h7021 ;
  assign lv_exponent_sub_shift__h73060 =
	     inst_dpfpu_divider_rg_stage2[21:9] - shift_neg__h73058 ;
  assign lv_exponent_sub_zerosMSB__h7025 =
	     inst_spfpu_divider_rg_stage2[18:9] - { 5'd0, msb_zeros__h6861 } ;
  assign lv_exponent_sub_zerosMSB__h73062 =
	     inst_dpfpu_divider_rg_stage2[21:9] -
	     { 7'd0, msb_zeros__h72898 } ;
  assign lv_extended_mantissa___1__h16829 =
	     lv_extended_mantissa__h16339 + 27'd4 ;
  assign lv_extended_mantissa___1__h90086 =
	     lv_extended_mantissa__h89596 + 56'd4 ;
  assign lv_extended_mantissa__h16339 = { 1'b0, result_mantissa__h16330 } ;
  assign lv_extended_mantissa__h89596 = { 1'b0, result_mantissa__h89587 } ;
  assign lv_final_output__h14260 =
	     { inst_spfpu_divider_rg_stage3[12], 31'h7F800000 } ;
  assign lv_final_output__h87518 =
	     { inst_dpfpu_divider_rg_stage3[12], 63'h7FF0000000000000 } ;
  assign lv_inexact1__h248119 = x__h249438 | lv_sticky__h248117 ;
  assign lv_inexact1__h251191 = x__h252511 | lv_sticky__h251189 ;
  assign lv_inexact___1__h248726 =
	     lv_inexact__h248112 | lv_inexact1__h248119 ;
  assign lv_inexact___1__h251801 =
	     lv_inexact__h251184 | lv_inexact1__h251191 ;
  assign lv_inexact__h16338 = x__h16816 | lv_sticky__h16336 ;
  assign lv_inexact__h193917 = x__h194579 | lv_sticky__h193915 ;
  assign lv_inexact__h248112 =
	     !condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	     IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d4231 ;
  assign lv_inexact__h251184 =
	     !condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	     IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d4245 ;
  assign lv_inexact__h65535 = x__h66197 | lv_sticky__h65533 ;
  assign lv_inexact__h89595 = x__h90073 | lv_sticky__h89593 ;
  assign lv_invalid___2__h248729 =
	     IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3934 ?
	       _theResult_____2_snd__h249464 :
	       lv_invalid__h248110 ;
  assign lv_invalid___2__h251804 =
	     IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d4100 ?
	       _theResult_____2_snd__h252537 :
	       lv_invalid__h251182 ;
  assign lv_invalid__h248094 =
	     condFlags32_reswget_BITS_14_TO_10__q52[0] |
	     condFlags32_reswget_BITS_14_TO_10__q52[2] ;
  assign lv_invalid__h248110 =
	     condFlags32_reswget_BITS_14_TO_10__q52[3] ?
	       lv_invalid__h248094 :
	       _theResult___snd_fst__h248321 ;
  assign lv_invalid__h248122 =
	     (!condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	      NOT_IF_condFlags32_res_whas__343_THEN_condFlag_ETC___d3844) ?
	       _theResult_____3_snd_fst__h249795 :
	       lv_invalid__h248110 ;
  assign lv_invalid__h251165 =
	     condFlags64_reswget_BITS_14_TO_10__q30[0] |
	     condFlags64_reswget_BITS_14_TO_10__q30[2] ;
  assign lv_invalid__h251182 =
	     condFlags64_reswget_BITS_14_TO_10__q30[3] ?
	       lv_invalid__h251165 :
	       _theResult___snd_fst__h251396 ;
  assign lv_invalid__h251194 =
	     (!condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	      NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d4012) ?
	       _theResult_____3_snd_fst__h252866 :
	       lv_invalid__h251182 ;
  assign lv_leading_zeros__h304249 =
	     IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5753[1] ?
	       6'd0 :
	       (IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5753[0] ?
		  6'd1 :
		  (getMant32_res_wget[68] ?
		     6'd2 :
		     (getMant32_res_wget[67] ?
			6'd3 :
			(getMant32_res_wget[66] ?
			   6'd4 :
			   (getMant32_res_wget[65] ?
			      6'd5 :
			      (getMant32_res_wget[64] ?
				 6'd6 :
				 (getMant32_res_wget[63] ?
				    6'd7 :
				    (getMant32_res_wget[62] ?
				       6'd8 :
				       (getMant32_res_wget[61] ?
					  6'd9 :
					  (getMant32_res_wget[60] ?
					     6'd10 :
					     (getMant32_res_wget[59] ?
						6'd11 :
						(getMant32_res_wget[58] ?
						   6'd12 :
						   (getMant32_res_wget[57] ?
						      6'd13 :
						      (getMant32_res_wget[56] ?
							 6'd14 :
							 (getMant32_res_wget[55] ?
							    6'd15 :
							    (getMant32_res_wget[54] ?
							       6'd16 :
							       (getMant32_res_wget[53] ?
								  6'd17 :
								  (getMant32_res_wget[52] ?
								     6'd18 :
								     (getMant32_res_wget[51] ?
									6'd19 :
									(getMant32_res_wget[50] ?
									   6'd20 :
									   (getMant32_res_wget[49] ?
									      6'd21 :
									      (getMant32_res_wget[48] ?
										 6'd22 :
										 (getMant32_res_wget[47] ?
										    6'd23 :
										    (getMant32_res_wget[46] ?
										       6'd24 :
										       6'd52)))))))))))))))))))))))) ;
  assign lv_leading_zeros__h314840 =
	     IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5871[1] ?
	       7'd0 :
	       (IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5871[0] ?
		  7'd1 :
		  (getMant64_res_wget[155] ?
		     7'd2 :
		     (getMant64_res_wget[154] ?
			7'd3 :
			(getMant64_res_wget[153] ?
			   7'd4 :
			   (getMant64_res_wget[152] ?
			      7'd5 :
			      (getMant64_res_wget[151] ?
				 7'd6 :
				 (getMant64_res_wget[150] ?
				    7'd7 :
				    (getMant64_res_wget[149] ?
				       7'd8 :
				       (getMant64_res_wget[148] ?
					  7'd9 :
					  (getMant64_res_wget[147] ?
					     7'd10 :
					     (getMant64_res_wget[146] ?
						7'd11 :
						(getMant64_res_wget[145] ?
						   7'd12 :
						   (getMant64_res_wget[144] ?
						      7'd13 :
						      (getMant64_res_wget[143] ?
							 7'd14 :
							 (getMant64_res_wget[142] ?
							    7'd15 :
							    (getMant64_res_wget[141] ?
							       7'd16 :
							       (getMant64_res_wget[140] ?
								  7'd17 :
								  (getMant64_res_wget[139] ?
								     7'd18 :
								     (getMant64_res_wget[138] ?
									7'd19 :
									(getMant64_res_wget[137] ?
									   7'd20 :
									   (getMant64_res_wget[136] ?
									      7'd21 :
									      (getMant64_res_wget[135] ?
										 7'd22 :
										 (getMant64_res_wget[134] ?
										    7'd23 :
										    (getMant64_res_wget[133] ?
										       7'd24 :
										       (getMant64_res_wget[132] ?
											  7'd25 :
											  (getMant64_res_wget[131] ?
											     7'd26 :
											     (getMant64_res_wget[130] ?
												7'd27 :
												(getMant64_res_wget[129] ?
												   7'd28 :
												   (getMant64_res_wget[128] ?
												      7'd29 :
												      (getMant64_res_wget[127] ?
													 7'd30 :
													 (getMant64_res_wget[126] ?
													    7'd31 :
													    (getMant64_res_wget[125] ?
													       7'd32 :
													       (getMant64_res_wget[124] ?
														  7'd33 :
														  (getMant64_res_wget[123] ?
														     7'd34 :
														     (getMant64_res_wget[122] ?
															7'd35 :
															(getMant64_res_wget[121] ?
															   7'd36 :
															   (getMant64_res_wget[120] ?
															      7'd37 :
															      (getMant64_res_wget[119] ?
																 7'd38 :
																 (getMant64_res_wget[118] ?
																    7'd39 :
																    (getMant64_res_wget[117] ?
																       7'd40 :
																       (getMant64_res_wget[116] ?
																	  7'd41 :
																	  (getMant64_res_wget[115] ?
																	     7'd42 :
																	     (getMant64_res_wget[114] ?
																		7'd43 :
																		(getMant64_res_wget[113] ?
																		   7'd44 :
																		   (getMant64_res_wget[112] ?
																		      7'd45 :
																		      (getMant64_res_wget[111] ?
																			 7'd46 :
																			 (getMant64_res_wget[110] ?
																			    7'd47 :
																			    (getMant64_res_wget[109] ?
																			       7'd48 :
																			       (getMant64_res_wget[108] ?
																				  7'd49 :
																				  (getMant64_res_wget[107] ?
																				     7'd50 :
																				     (getMant64_res_wget[106] ?
																					7'd51 :
																					(getMant64_res_wget[105] ?
																					   7'd52 :
																					   (getMant64_res_wget[104] ?
																					      7'd53 :
																					      7'd110))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_man___1__h209617 = lv_man__h203946 + 25'd1 ;
  assign lv_man___1__h220692 = lv_man__h209818 + 25'd1 ;
  assign lv_man___1__h245766 = lv_man__h235107 + 54'd1 ;
  assign lv_man__h203946 =
	     { 2'b0,
	       IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110[30:8] } ;
  assign lv_man__h209818 =
	     { 2'b0,
	       IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986[62:40] } ;
  assign lv_man__h235107 =
	     { 2'b0,
	       IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682[62:11] } ;
  assign lv_minuend__h118044 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__373_BIT_5_ETC___d2390 ?
	       exponent3__h118025 :
	       exponent2__h118034 ;
  assign lv_minuend__h30291 =
	     IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 ?
	       exponent3__h30272 :
	       exponent2__h30281 ;
  assign lv_op1_subnormal__h268160 =
	     condFlags32_reswget_BITS_14_TO_10__q52[4] |
	     condFlags32_reswget_BITS_14_TO_10__q52[3] ;
  assign lv_op1_subnormal__h270347 =
	     condFlags64_reswget_BITS_14_TO_10__q30[4] |
	     condFlags64_reswget_BITS_14_TO_10__q30[3] ;
  assign lv_op2_Nan__h225959 =
	     condFlags32_reswget_BITS_9_TO_5__q53[2] |
	     condFlags32_reswget_BITS_9_TO_5__q53[0] ;
  assign lv_op2_Nan__h228538 =
	     condFlags64_reswget_BITS_9_TO_5__q31[2] |
	     condFlags64_reswget_BITS_9_TO_5__q31[0] ;
  assign lv_op2_subnormal__h268161 =
	     condFlags32_reswget_BITS_9_TO_5__q53[4] |
	     condFlags32_reswget_BITS_9_TO_5__q53[3] ;
  assign lv_op2_subnormal__h270348 =
	     condFlags64_reswget_BITS_9_TO_5__q31[4] |
	     condFlags64_reswget_BITS_9_TO_5__q31[3] ;
  assign lv_product_exponent___1__h107976 =
	     inst_dpfm_add_sub_ff_input_register[94:82] + 13'd1 ;
  assign lv_product_exponent___1__h25385 =
	     inst_spfm_add_sub_ff_input_register[59:50] + 10'd1 ;
  assign lv_product_exponent__h107939 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       lv_product_exponent___1__h107976 :
	       inst_dpfm_add_sub_ff_input_register[94:82] ;
  assign lv_product_exponent__h25348 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       lv_product_exponent___1__h25385 :
	       inst_spfm_add_sub_ff_input_register[59:50] ;
  assign lv_product_exponent_inc_shift__h107945 =
	     lv_product_exponent__h107939 +
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1871 ;
  assign lv_product_exponent_inc_shift__h25354 =
	     lv_product_exponent__h25348 +
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 ;
  assign lv_product_exponent_sub_shift__h107948 =
	     lv_product_exponent__h107939 - shift_neg__h107946 ;
  assign lv_product_exponent_sub_shift__h25357 =
	     lv_product_exponent__h25348 - shift_neg__h25355 ;
  assign lv_product_exponent_sub_zerosMSB__h107950 =
	     lv_product_exponent__h107939 - y__h108036 ;
  assign lv_product_exponent_sub_zerosMSB__h25359 =
	     lv_product_exponent__h25348 - y__h25445 ;
  assign lv_product_mantissa___1__h107975 =
	     { 1'd0, inst_dpfm_add_sub_ff_input_register[200:95] } ;
  assign lv_product_mantissa___1__h107993 =
	     { IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2109[106:1],
	       IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2330 } ;
  assign lv_product_mantissa___1__h25384 =
	     { 1'd0, inst_spfm_add_sub_ff_input_register[107:60] } ;
  assign lv_product_mantissa___1__h25402 =
	     { IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d590[48:1],
	       IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d695 } ;
  assign lv_product_mantissa__h107941 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       lv_product_mantissa___1__h107975 :
	       lv_product_mantissa__h90486 ;
  assign lv_product_mantissa__h17233 =
	     { inst_spfm_add_sub_ff_input_register[107:60], 1'b0 } ;
  assign lv_product_mantissa__h25350 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       lv_product_mantissa___1__h25384 :
	       lv_product_mantissa__h17233 ;
  assign lv_product_mantissa__h90486 =
	     { inst_dpfm_add_sub_ff_input_register[200:95], 1'b0 } ;
  assign lv_product_mantissa_shiftL_expo__h107947 =
	     lv_product_mantissa__h107941 << shift_neg__h107946 ;
  assign lv_product_mantissa_shiftL_expo__h25356 =
	     lv_product_mantissa__h25350 << shift_neg__h25355 ;
  assign lv_product_mantissa_shiftL_zerosMSB__h107949 =
	     lv_product_mantissa__h107941 << x__h108011 ;
  assign lv_product_mantissa_shiftL_zerosMSB__h25358 =
	     lv_product_mantissa__h25350 << x__h25420 ;
  assign lv_quotient___1__h7046 =
	     { IF_inst_spfpu_divider_int_div_wr_final_out_wha_ETC___d200[26:1],
	       lv_sticky___1__h7047 } ;
  assign lv_quotient___1__h73083 =
	     { IF_inst_dpfpu_divider_int_div_wr_final_out_wha_ETC___d1574[55:1],
	       lv_sticky___1__h73084 } ;
  assign lv_quotient_shiftL_expo__h7022 =
	     x_wget__h695[26:0] << shift_neg__h7021 ;
  assign lv_quotient_shiftL_expo__h73059 =
	     x_wget__h66759[55:0] << shift_neg__h73058 ;
  assign lv_quotient_shiftL_zerosMSB__h7024 =
	     x_wget__h695[26:0] << msb_zeros__h6861 ;
  assign lv_quotient_shiftL_zerosMSB__h73061 =
	     x_wget__h66759[55:0] << msb_zeros__h72898 ;
  assign lv_remainder__h16110 =
	     lv_remainder_temp__h15991 + lv_root_temp_1__h15992 ;
  assign lv_remainder__h16200 =
	     lv_remainder_temp__h15991 - lv_root_temp_2__h15993 ;
  assign lv_remainder__h16764 = _theResult____h15994 + lv_root_rem__h16331 ;
  assign lv_remainder__h89367 =
	     lv_remainder_temp__h89248 + lv_root_temp_1__h89249 ;
  assign lv_remainder__h89457 =
	     lv_remainder_temp__h89248 - lv_root_temp_2__h89250 ;
  assign lv_remainder__h90021 = _theResult____h89251 + lv_root_rem__h89588 ;
  assign lv_remainder_temp__h15991 =
	     { inst_spfpu_sqrt_rg_inter_stage[55:29],
	       inst_spfpu_sqrt_rg_inter_stage[145:144] } ;
  assign lv_remainder_temp__h89248 =
	     { inst_dpfpu_sqrt_rg_inter_stage[113:58],
	       inst_dpfpu_sqrt_rg_inter_stage[293:292] } ;
  assign lv_result__h226701 =
	     { or_sign__h225960,
	       setCanonicalNaN_reswget_BITS_63_TO_32__q42[30:0] } ;
  assign lv_result__h226742 =
	     { and_sign__h225961,
	       setCanonicalNaN_reswget_BITS_95_TO_64__q41[30:0] } ;
  assign lv_result__h229248 = { or_sign__h228539, ff_input_D_OUT[143:81] } ;
  assign lv_result__h229289 = { and_sign__h228540, ff_input_D_OUT[207:145] } ;
  assign lv_result_is_infinity___1__h167510 =
	     { sign2__h118010, ~x__h167544 } ;
  assign lv_result_is_infinity___1__h167572 =
	     { x__h167584 | y__h167585, 1'd1 } ;
  assign lv_result_is_infinity___1__h53222 = { sign2__h30257, ~x__h53256 } ;
  assign lv_result_is_infinity___1__h53284 = { x__h53296 | y__h53297, 1'd1 } ;
  assign lv_result_is_zero___1__h167605 = { op_xor_sign3__h118023, 1'b1 } ;
  assign lv_result_is_zero___1__h167609 = { sign2__h118010, 1'd1 } ;
  assign lv_result_is_zero___1__h53317 = { op_xor_sign3__h30270, 1'b1 } ;
  assign lv_result_is_zero___1__h53321 = { sign2__h30257, 1'd1 } ;
  assign lv_root_rem__h16331 = { 2'b0, x__h16303, 1'b1 } ;
  assign lv_root_rem__h89588 = { 2'b0, x__h89560, 1'b1 } ;
  assign lv_root_temp_1__h15992 =
	     { 1'b0, inst_spfpu_sqrt_rg_inter_stage[28:3], 2'd3 } ;
  assign lv_root_temp_1__h89249 =
	     { 1'b0, inst_dpfpu_sqrt_rg_inter_stage[57:3], 2'd3 } ;
  assign lv_root_temp_2__h15993 =
	     { 1'b0, inst_spfpu_sqrt_rg_inter_stage[28:3], 2'd1 } ;
  assign lv_root_temp_2__h89250 =
	     { 1'b0, inst_dpfpu_sqrt_rg_inter_stage[57:3], 2'd1 } ;
  assign lv_round_up___1__h14454 =
	     inst_spfpu_divider_rg_stage3[53] & y__h14466 ;
  assign lv_round_up___1__h14490 = x__h14502 & y__h14503 ;
  assign lv_round_up___1__h194345 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[105] &
	     y__h194357 ;
  assign lv_round_up___1__h194567 =
	     lv_inexact__h193917 & inst_dpfm_add_sub_ff_stage5[23] ;
  assign lv_round_up___1__h248809 =
	     IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871[22] &
	     y__h248821 ;
  assign lv_round_up___1__h249426 =
	     lv_inexact1__h248119 &
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign lv_round_up___1__h251884 =
	     IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038[51] &
	     y__h251896 ;
  assign lv_round_up___1__h252499 =
	     lv_inexact1__h251191 & ff_input_D_OUT[208] ;
  assign lv_round_up___1__h264744 =
	     IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313[25] &
	     y__h264756 ;
  assign lv_round_up___1__h264875 = x__h264887 & y__h252524 ;
  assign lv_round_up___1__h65963 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[47] &
	     y__h65975 ;
  assign lv_round_up___1__h66185 =
	     lv_inexact__h65535 & inst_spfm_add_sub_ff_stage5[22] ;
  assign lv_round_up___1__h87712 =
	     inst_dpfpu_divider_rg_stage3[85] & y__h87724 ;
  assign lv_round_up___1__h87748 = x__h87760 & y__h87761 ;
  assign lv_rounded_mantissa___1__h194599 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[159:106] +
	     54'd1 ;
  assign lv_rounded_mantissa___1__h66217 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[72:48] +
	     25'd1 ;
  assign lv_rounded_mantissa__h194629 =
	     { 1'd0, _theResult_____5__h193919[53:1] } ;
  assign lv_rounded_mantissa__h66247 =
	     { 1'd0, _theResult_____5__h65537[24:1] } ;
  assign lv_rounded_quotient___1__h14525 =
	     lv_rounded_quotient__h14157 + 25'd1 ;
  assign lv_rounded_quotient___1__h87783 =
	     lv_rounded_quotient__h87415 + 54'd1 ;
  assign lv_rounded_quotient__h14157 =
	     { 1'b0, inst_spfpu_divider_rg_stage3[77:54] } ;
  assign lv_rounded_quotient__h14555 =
	     { 1'd0, _theResult_____4__h14158[24:1] } ;
  assign lv_rounded_quotient__h87415 =
	     { 1'b0, inst_dpfpu_divider_rg_stage3[138:86] } ;
  assign lv_rounded_quotient__h87813 =
	     { 1'd0, _theResult_____4__h87416[53:1] } ;
  assign lv_roundup___1__h16410 =
	     inst_spfpu_sqrt_rg_inter_stage[69] & y__h16422 ;
  assign lv_roundup___1__h16792 = lv_inexact__h16338 & y__h16804 ;
  assign lv_roundup___1__h209545 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110[7] &
	     y__h209557 ;
  assign lv_roundup___1__h209582 = inexact__h203944 & y__h209595 ;
  assign lv_roundup___1__h220620 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986[39] &
	     y__h220632 ;
  assign lv_roundup___1__h220657 = inexact__h209816 & y__h220670 ;
  assign lv_roundup___1__h245695 =
	     IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682[10] &
	     y__h245707 ;
  assign lv_roundup___1__h245731 = inexact__h235105 & y__h245744 ;
  assign lv_roundup___1__h89667 =
	     inst_dpfpu_sqrt_rg_inter_stage[130] & y__h89679 ;
  assign lv_roundup___1__h90049 = lv_inexact__h89595 & y__h90061 ;
  assign lv_sign__h220890 = !ff_input_D_OUT[1] && ff_input_D_OUT[176] ;
  assign lv_sticky___1__h7047 =
	     IF_inst_spfpu_divider_int_div_wr_final_out_wha_ETC___d200[0] |
	     ((_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ^
	       10'h200) >
	      ({ 5'd0, lsb_zeros__h7018 } ^ 10'h200) ||
	      x_wget__h695[0]) ;
  assign lv_sticky___1__h73084 =
	     IF_inst_dpfpu_divider_int_div_wr_final_out_wha_ETC___d1574[0] |
	     ((_1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1449 ^
	       13'h1000) >
	      ({ 7'd0, lsb_zeros__h73055 } ^ 13'h1000) ||
	      x_wget__h66759[0]) ;
  assign lv_sticky__h16336 = x__h16742 != 29'd0 ;
  assign lv_sticky__h193915 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[103:0] !=
	     104'd0 ;
  assign lv_sticky__h248117 =
	     IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871[20:0] !=
	     21'd0 ;
  assign lv_sticky__h251189 =
	     IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038[49:0] !=
	     50'd0 ;
  assign lv_sticky__h264196 =
	     getMant64_reswget_BITS_155_TO_104__q25[26:0] != 27'd0 ;
  assign lv_sticky__h264584 =
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 ?
	       lv_sticky__h264196 :
	       y_avValue_snd_snd_snd_fst__h264817 ;
  assign lv_sticky__h65533 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[45:0] !=
	     46'd0 ;
  assign lv_sticky__h89593 = x__h89999 != 58'd0 ;
  assign lv_summed_exponent__h268171 = x__h268423 + y__h268424 ;
  assign lv_summed_exponent__h270358 = x__h270610 + y__h270611 ;
  assign lv_zeros_on_left__h167777 =
	     _theResult____h167775[159] ?
	       8'd0 :
	       (_theResult____h167775[158] ?
		  8'd1 :
		  (_theResult____h167775[157] ?
		     8'd2 :
		     (_theResult____h167775[156] ?
			8'd3 :
			(_theResult____h167775[155] ?
			   8'd4 :
			   (_theResult____h167775[154] ?
			      8'd5 :
			      (_theResult____h167775[153] ?
				 8'd6 :
				 (_theResult____h167775[152] ?
				    8'd7 :
				    (_theResult____h167775[151] ?
				       8'd8 :
				       (_theResult____h167775[150] ?
					  8'd9 :
					  (_theResult____h167775[149] ?
					     8'd10 :
					     (_theResult____h167775[148] ?
						8'd11 :
						(_theResult____h167775[147] ?
						   8'd12 :
						   (_theResult____h167775[146] ?
						      8'd13 :
						      (_theResult____h167775[145] ?
							 8'd14 :
							 (_theResult____h167775[144] ?
							    8'd15 :
							    (_theResult____h167775[143] ?
							       8'd16 :
							       (_theResult____h167775[142] ?
								  8'd17 :
								  (_theResult____h167775[141] ?
								     8'd18 :
								     (_theResult____h167775[140] ?
									8'd19 :
									(_theResult____h167775[139] ?
									   8'd20 :
									   (_theResult____h167775[138] ?
									      8'd21 :
									      (_theResult____h167775[137] ?
										 8'd22 :
										 (_theResult____h167775[136] ?
										    8'd23 :
										    (_theResult____h167775[135] ?
										       8'd24 :
										       (_theResult____h167775[134] ?
											  8'd25 :
											  (_theResult____h167775[133] ?
											     8'd26 :
											     (_theResult____h167775[132] ?
												8'd27 :
												(_theResult____h167775[131] ?
												   8'd28 :
												   (_theResult____h167775[130] ?
												      8'd29 :
												      (_theResult____h167775[129] ?
													 8'd30 :
													 (_theResult____h167775[128] ?
													    8'd31 :
													    (_theResult____h167775[127] ?
													       8'd32 :
													       (_theResult____h167775[126] ?
														  8'd33 :
														  (_theResult____h167775[125] ?
														     8'd34 :
														     (_theResult____h167775[124] ?
															8'd35 :
															(_theResult____h167775[123] ?
															   8'd36 :
															   (_theResult____h167775[122] ?
															      8'd37 :
															      (_theResult____h167775[121] ?
																 8'd38 :
																 (_theResult____h167775[120] ?
																    8'd39 :
																    (_theResult____h167775[119] ?
																       8'd40 :
																       (_theResult____h167775[118] ?
																	  8'd41 :
																	  (_theResult____h167775[117] ?
																	     8'd42 :
																	     (_theResult____h167775[116] ?
																		8'd43 :
																		(_theResult____h167775[115] ?
																		   8'd44 :
																		   (_theResult____h167775[114] ?
																		      8'd45 :
																		      (_theResult____h167775[113] ?
																			 8'd46 :
																			 (_theResult____h167775[112] ?
																			    8'd47 :
																			    (_theResult____h167775[111] ?
																			       8'd48 :
																			       (_theResult____h167775[110] ?
																				  8'd49 :
																				  (_theResult____h167775[109] ?
																				     8'd50 :
																				     (_theResult____h167775[108] ?
																					8'd51 :
																					(_theResult____h167775[107] ?
																					   8'd52 :
																					   (_theResult____h167775[106] ?
																					      8'd53 :
																					      (_theResult____h167775[105] ?
																						 8'd54 :
																						 (_theResult____h167775[104] ?
																						    8'd55 :
																						    (_theResult____h167775[103] ?
																						       8'd56 :
																						       (_theResult____h167775[102] ?
																							  8'd57 :
																							  (_theResult____h167775[101] ?
																							     8'd58 :
																							     (_theResult____h167775[100] ?
																								8'd59 :
																								(_theResult____h167775[99] ?
																								   8'd60 :
																								   (_theResult____h167775[98] ?
																								      8'd61 :
																								      (_theResult____h167775[97] ?
																									 8'd62 :
																									 (_theResult____h167775[96] ?
																									    8'd63 :
																									    (_theResult____h167775[95] ?
																									       8'd64 :
																									       (_theResult____h167775[94] ?
																										  8'd65 :
																										  (_theResult____h167775[93] ?
																										     8'd66 :
																										     (_theResult____h167775[92] ?
																											8'd67 :
																											(_theResult____h167775[91] ?
																											   8'd68 :
																											   (_theResult____h167775[90] ?
																											      8'd69 :
																											      (_theResult____h167775[89] ?
																												 8'd70 :
																												 (_theResult____h167775[88] ?
																												    8'd71 :
																												    (_theResult____h167775[87] ?
																												       8'd72 :
																												       (_theResult____h167775[86] ?
																													  8'd73 :
																													  (_theResult____h167775[85] ?
																													     8'd74 :
																													     (_theResult____h167775[84] ?
																														8'd75 :
																														(_theResult____h167775[83] ?
																														   8'd76 :
																														   (_theResult____h167775[82] ?
																														      8'd77 :
																														      (_theResult____h167775[81] ?
																															 8'd78 :
																															 (_theResult____h167775[80] ?
																															    8'd79 :
																															    (_theResult____h167775[79] ?
																															       8'd80 :
																															       (_theResult____h167775[78] ?
																																  8'd81 :
																																  (_theResult____h167775[77] ?
																																     8'd82 :
																																     (_theResult____h167775[76] ?
																																	8'd83 :
																																	(_theResult____h167775[75] ?
																																	   8'd84 :
																																	   (_theResult____h167775[74] ?
																																	      8'd85 :
																																	      (_theResult____h167775[73] ?
																																		 8'd86 :
																																		 (_theResult____h167775[72] ?
																																		    8'd87 :
																																		    (_theResult____h167775[71] ?
																																		       8'd88 :
																																		       (_theResult____h167775[70] ?
																																			  8'd89 :
																																			  (_theResult____h167775[69] ?
																																			     8'd90 :
																																			     (_theResult____h167775[68] ?
																																				8'd91 :
																																				(_theResult____h167775[67] ?
																																				   8'd92 :
																																				   (_theResult____h167775[66] ?
																																				      8'd93 :
																																				      (_theResult____h167775[65] ?
																																					 8'd94 :
																																					 (_theResult____h167775[64] ?
																																					    8'd95 :
																																					    (_theResult____h167775[63] ?
																																					       8'd96 :
																																					       (_theResult____h167775[62] ?
																																						  8'd97 :
																																						  (_theResult____h167775[61] ?
																																						     8'd98 :
																																						     (_theResult____h167775[60] ?
																																							8'd99 :
																																							(_theResult____h167775[59] ?
																																							   8'd100 :
																																							   (_theResult____h167775[58] ?
																																							      8'd101 :
																																							      (_theResult____h167775[57] ?
																																								 8'd102 :
																																								 (_theResult____h167775[56] ?
																																								    8'd103 :
																																								    (_theResult____h167775[55] ?
																																								       8'd104 :
																																								       (_theResult____h167775[54] ?
																																									  8'd105 :
																																									  (_theResult____h167775[53] ?
																																									     8'd106 :
																																									     (_theResult____h167775[52] ?
																																										8'd107 :
																																										(_theResult____h167775[51] ?
																																										   8'd108 :
																																										   (_theResult____h167775[50] ?
																																										      8'd109 :
																																										      (_theResult____h167775[49] ?
																																											 8'd110 :
																																											 (_theResult____h167775[48] ?
																																											    8'd111 :
																																											    (_theResult____h167775[47] ?
																																											       8'd112 :
																																											       (_theResult____h167775[46] ?
																																												  8'd113 :
																																												  (_theResult____h167775[45] ?
																																												     8'd114 :
																																												     (_theResult____h167775[44] ?
																																													8'd115 :
																																													(_theResult____h167775[43] ?
																																													   8'd116 :
																																													   (_theResult____h167775[42] ?
																																													      8'd117 :
																																													      (_theResult____h167775[41] ?
																																														 8'd118 :
																																														 (_theResult____h167775[40] ?
																																														    8'd119 :
																																														    (_theResult____h167775[39] ?
																																														       8'd120 :
																																														       (_theResult____h167775[38] ?
																																															  8'd121 :
																																															  (_theResult____h167775[37] ?
																																															     8'd122 :
																																															     (_theResult____h167775[36] ?
																																																8'd123 :
																																																(_theResult____h167775[35] ?
																																																   8'd124 :
																																																   (_theResult____h167775[34] ?
																																																      8'd125 :
																																																      (_theResult____h167775[33] ?
																																																	 8'd126 :
																																																	 (_theResult____h167775[32] ?
																																																	    8'd127 :
																																																	    (_theResult____h167775[31] ?
																																																	       8'd128 :
																																																	       (_theResult____h167775[30] ?
																																																		  8'd129 :
																																																		  (_theResult____h167775[29] ?
																																																		     8'd130 :
																																																		     (_theResult____h167775[28] ?
																																																			8'd131 :
																																																			(_theResult____h167775[27] ?
																																																			   8'd132 :
																																																			   (_theResult____h167775[26] ?
																																																			      8'd133 :
																																																			      (_theResult____h167775[25] ?
																																																				 8'd134 :
																																																				 (_theResult____h167775[24] ?
																																																				    8'd135 :
																																																				    (_theResult____h167775[23] ?
																																																				       8'd136 :
																																																				       (_theResult____h167775[22] ?
																																																					  8'd137 :
																																																					  (_theResult____h167775[21] ?
																																																					     8'd138 :
																																																					     (_theResult____h167775[20] ?
																																																						8'd139 :
																																																						(_theResult____h167775[19] ?
																																																						   8'd140 :
																																																						   (_theResult____h167775[18] ?
																																																						      8'd141 :
																																																						      (_theResult____h167775[17] ?
																																																							 8'd142 :
																																																							 (_theResult____h167775[16] ?
																																																							    8'd143 :
																																																							    (_theResult____h167775[15] ?
																																																							       8'd144 :
																																																							       (_theResult____h167775[14] ?
																																																								  8'd145 :
																																																								  (_theResult____h167775[13] ?
																																																								     8'd146 :
																																																								     (_theResult____h167775[12] ?
																																																									8'd147 :
																																																									(_theResult____h167775[11] ?
																																																									   8'd148 :
																																																									   (_theResult____h167775[10] ?
																																																									      8'd149 :
																																																									      (_theResult____h167775[9] ?
																																																										 8'd150 :
																																																										 (_theResult____h167775[8] ?
																																																										    8'd151 :
																																																										    (_theResult____h167775[7] ?
																																																										       8'd152 :
																																																										       (_theResult____h167775[6] ?
																																																											  8'd153 :
																																																											  (_theResult____h167775[5] ?
																																																											     8'd154 :
																																																											     (_theResult____h167775[4] ?
																																																												8'd155 :
																																																												(_theResult____h167775[3] ?
																																																												   8'd156 :
																																																												   (_theResult____h167775[2] ?
																																																												      8'd157 :
																																																												      (_theResult____h167775[1] ?
																																																													 8'd158 :
																																																													 (_theResult____h167775[0] ?
																																																													    8'd159 :
																																																													    8'd160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_zeros_on_left__h53489 =
	     _theResult____h53487[72] ?
	       7'd0 :
	       (_theResult____h53487[71] ?
		  7'd1 :
		  (_theResult____h53487[70] ?
		     7'd2 :
		     (_theResult____h53487[69] ?
			7'd3 :
			(_theResult____h53487[68] ?
			   7'd4 :
			   (_theResult____h53487[67] ?
			      7'd5 :
			      (_theResult____h53487[66] ?
				 7'd6 :
				 (_theResult____h53487[65] ?
				    7'd7 :
				    (_theResult____h53487[64] ?
				       7'd8 :
				       (_theResult____h53487[63] ?
					  7'd9 :
					  (_theResult____h53487[62] ?
					     7'd10 :
					     (_theResult____h53487[61] ?
						7'd11 :
						(_theResult____h53487[60] ?
						   7'd12 :
						   (_theResult____h53487[59] ?
						      7'd13 :
						      (_theResult____h53487[58] ?
							 7'd14 :
							 (_theResult____h53487[57] ?
							    7'd15 :
							    (_theResult____h53487[56] ?
							       7'd16 :
							       (_theResult____h53487[55] ?
								  7'd17 :
								  (_theResult____h53487[54] ?
								     7'd18 :
								     (_theResult____h53487[53] ?
									7'd19 :
									(_theResult____h53487[52] ?
									   7'd20 :
									   (_theResult____h53487[51] ?
									      7'd21 :
									      (_theResult____h53487[50] ?
										 7'd22 :
										 (_theResult____h53487[49] ?
										    7'd23 :
										    (_theResult____h53487[48] ?
										       7'd24 :
										       (_theResult____h53487[47] ?
											  7'd25 :
											  (_theResult____h53487[46] ?
											     7'd26 :
											     (_theResult____h53487[45] ?
												7'd27 :
												(_theResult____h53487[44] ?
												   7'd28 :
												   (_theResult____h53487[43] ?
												      7'd29 :
												      (_theResult____h53487[42] ?
													 7'd30 :
													 (_theResult____h53487[41] ?
													    7'd31 :
													    (_theResult____h53487[40] ?
													       7'd32 :
													       (_theResult____h53487[39] ?
														  7'd33 :
														  (_theResult____h53487[38] ?
														     7'd34 :
														     (_theResult____h53487[37] ?
															7'd35 :
															(_theResult____h53487[36] ?
															   7'd36 :
															   (_theResult____h53487[35] ?
															      7'd37 :
															      (_theResult____h53487[34] ?
																 7'd38 :
																 (_theResult____h53487[33] ?
																    7'd39 :
																    (_theResult____h53487[32] ?
																       7'd40 :
																       (_theResult____h53487[31] ?
																	  7'd41 :
																	  (_theResult____h53487[30] ?
																	     7'd42 :
																	     (_theResult____h53487[29] ?
																		7'd43 :
																		(_theResult____h53487[28] ?
																		   7'd44 :
																		   (_theResult____h53487[27] ?
																		      7'd45 :
																		      (_theResult____h53487[26] ?
																			 7'd46 :
																			 (_theResult____h53487[25] ?
																			    7'd47 :
																			    (_theResult____h53487[24] ?
																			       7'd48 :
																			       (_theResult____h53487[23] ?
																				  7'd49 :
																				  (_theResult____h53487[22] ?
																				     7'd50 :
																				     (_theResult____h53487[21] ?
																					7'd51 :
																					(_theResult____h53487[20] ?
																					   7'd52 :
																					   (_theResult____h53487[19] ?
																					      7'd53 :
																					      (_theResult____h53487[18] ?
																						 7'd54 :
																						 (_theResult____h53487[17] ?
																						    7'd55 :
																						    (_theResult____h53487[16] ?
																						       7'd56 :
																						       (_theResult____h53487[15] ?
																							  7'd57 :
																							  (_theResult____h53487[14] ?
																							     7'd58 :
																							     (_theResult____h53487[13] ?
																								7'd59 :
																								(_theResult____h53487[12] ?
																								   7'd60 :
																								   (_theResult____h53487[11] ?
																								      7'd61 :
																								      (_theResult____h53487[10] ?
																									 7'd62 :
																									 (_theResult____h53487[9] ?
																									    7'd63 :
																									    (_theResult____h53487[8] ?
																									       7'd64 :
																									       (_theResult____h53487[7] ?
																										  7'd65 :
																										  (_theResult____h53487[6] ?
																										     7'd66 :
																										     (_theResult____h53487[5] ?
																											7'd67 :
																											(_theResult____h53487[4] ?
																											   7'd68 :
																											   (_theResult____h53487[3] ?
																											      7'd69 :
																											      (_theResult____h53487[2] ?
																												 7'd70 :
																												 (_theResult____h53487[1] ?
																												    7'd71 :
																												    (_theResult____h53487[0] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign man1__h274224 =
	     { ~condFlags32_reswget_BITS_14_TO_10__q52[4],
	       getMant32_res_wget[68:46] } ;
  assign man1__h284226 =
	     { ~condFlags64_reswget_BITS_14_TO_10__q30[4],
	       getMant64_res_wget[155:104] } ;
  assign man2__h274225 =
	     { ~condFlags32_reswget_BITS_9_TO_5__q53[4],
	       getMant32_res_wget[45:23] } ;
  assign man2__h284227 =
	     { ~condFlags64_reswget_BITS_9_TO_5__q31[4],
	       getMant64_res_wget[103:52] } ;
  assign man__h258440 = { value__h262199[21:0], 30'd0 } ;
  assign man__h264318 =
	     { 1'b1, getMant64_reswget_BITS_155_TO_104__q25[51:27], 23'd0 } >>
	     shiftDist__h264317 ;
  assign man__h264435 =
	     { getMant64_reswget_BITS_155_TO_104__q25[51:27], 24'd0 } ;
  assign mant__h258380 = { getMant32_res_wget[68:46], 29'd0 } ;
  assign mantissa2__h118011 = { inst_dpfm_add_sub_ff_stage2[188:82], 53'd0 } ;
  assign mantissa2__h118033 =
	     inst_dpfm_add_sub_ff_stage2[5] ? 160'd0 : mantissa2__h118011 ;
  assign mantissa2__h118054 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__373_BIT_5_ETC___d2390 ?
	       mantissa_to_shift___1__h118052 :
	       mantissa2__h118033 ;
  assign mantissa2__h30258 = { inst_spfm_add_sub_ff_stage2[98:50], 24'd0 } ;
  assign mantissa2__h30280 =
	     inst_spfm_add_sub_ff_stage2[5] ? 73'd0 : mantissa2__h30258 ;
  assign mantissa2__h30301 =
	     IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 ?
	       mantissa_to_shift___1__h30299 :
	       mantissa2__h30280 ;
  assign mantissa3___1__h137744 =
	     { 1'd0,
	       expo3_zero__h118022,
	       inst_dpfm_add_sub_ff_stage2[69:18],
	       106'd0 } ;
  assign mantissa3___1__h39493 =
	     { 1'd0,
	       expo3_zero__h30269,
	       inst_spfm_add_sub_ff_stage2[40:18],
	       48'd0 } ;
  assign mantissa3__h118055 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__373_BIT_5_ETC___d2390 ?
	       _theResult____h118024 :
	       mantissa_to_shift___1__h118052 ;
  assign mantissa3__h30302 =
	     IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 ?
	       _theResult____h30271 :
	       mantissa_to_shift___1__h30299 ;
  assign mantissa___1__h313245 = { mantissa__h304250[50:0], 1'd0 } ;
  assign mantissa___1__h333173 = { mantissa__h314841[108:0], 1'd0 } ;
  assign mantissa__h15996 = { inst_spfpu_sqrt_rg_inter_stage[143:94], 2'd0 } ;
  assign mantissa__h220898 =
	     { theResult__20894_SL_x29768_BITS_4_TO_0__q2[30:0], 21'd0 } ;
  assign mantissa__h304248 =
	     { IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5753,
	       getMant32_res_wget[68:46],
	       27'd0 } ;
  assign mantissa__h304250 = mantissa__h304248 << x__h313248 ;
  assign mantissa__h304260 =
	     { IF_IF_IF_condFlags32_res_whas__343_THEN_condFl_ETC___d5813[49:0],
	       2'd0 } ;
  assign mantissa__h314839 =
	     { IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5871,
	       getMant64_res_wget[155:104],
	       56'd0 } ;
  assign mantissa__h314841 = mantissa__h314839 << x__h333176 ;
  assign mantissa__h314851 =
	     { IF_IF_IF_condFlags64_res_whas__428_THEN_condFl_ETC___d5989[107:0],
	       2'd0 } ;
  assign mantissa__h89253 =
	     { inst_dpfpu_sqrt_rg_inter_stage[291:184], 2'd0 } ;
  assign mantissa_to_shift___1__h118052 =
	     { IF_IF_inst_dpfm_add_sub_ff_stage2_read__373_BI_ETC___d2414[159:1],
	       _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2742 } ;
  assign mantissa_to_shift___1__h30299 =
	     { IF_IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_ETC___d779[72:1],
	       _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d933 } ;
  assign mantissa_to_shift__h118047 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__373_BIT_5_ETC___d2390 ?
	       mantissa2__h118033 :
	       _theResult____h118024 ;
  assign mantissa_to_shift__h30294 =
	     IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 ?
	       mantissa2__h30280 :
	       _theResult____h30271 ;
  assign msb_zeros___1__h107978 = msb_zeros__h90505 + 7'd1 ;
  assign msb_zeros___1__h25387 = msb_zeros__h17252 + 6'd1 ;
  assign msb_zeros__h107937 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       msb_zeros___1__h107978 :
	       msb_zeros__h90505 ;
  assign msb_zeros__h17252 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       6'd0 :
	       (inst_spfm_add_sub_ff_input_register[106] ?
		  6'd1 :
		  (inst_spfm_add_sub_ff_input_register[105] ?
		     6'd2 :
		     (inst_spfm_add_sub_ff_input_register[104] ?
			6'd3 :
			(inst_spfm_add_sub_ff_input_register[103] ?
			   6'd4 :
			   (inst_spfm_add_sub_ff_input_register[102] ?
			      6'd5 :
			      (inst_spfm_add_sub_ff_input_register[101] ?
				 6'd6 :
				 (inst_spfm_add_sub_ff_input_register[100] ?
				    6'd7 :
				    (inst_spfm_add_sub_ff_input_register[99] ?
				       6'd8 :
				       (inst_spfm_add_sub_ff_input_register[98] ?
					  6'd9 :
					  (inst_spfm_add_sub_ff_input_register[97] ?
					     6'd10 :
					     (inst_spfm_add_sub_ff_input_register[96] ?
						6'd11 :
						(inst_spfm_add_sub_ff_input_register[95] ?
						   6'd12 :
						   (inst_spfm_add_sub_ff_input_register[94] ?
						      6'd13 :
						      (inst_spfm_add_sub_ff_input_register[93] ?
							 6'd14 :
							 (inst_spfm_add_sub_ff_input_register[92] ?
							    6'd15 :
							    (inst_spfm_add_sub_ff_input_register[91] ?
							       6'd16 :
							       (inst_spfm_add_sub_ff_input_register[90] ?
								  6'd17 :
								  (inst_spfm_add_sub_ff_input_register[89] ?
								     6'd18 :
								     (inst_spfm_add_sub_ff_input_register[88] ?
									6'd19 :
									(inst_spfm_add_sub_ff_input_register[87] ?
									   6'd20 :
									   (inst_spfm_add_sub_ff_input_register[86] ?
									      6'd21 :
									      (inst_spfm_add_sub_ff_input_register[85] ?
										 6'd22 :
										 (inst_spfm_add_sub_ff_input_register[84] ?
										    6'd23 :
										    (inst_spfm_add_sub_ff_input_register[83] ?
										       6'd24 :
										       (inst_spfm_add_sub_ff_input_register[82] ?
											  6'd25 :
											  (inst_spfm_add_sub_ff_input_register[81] ?
											     6'd26 :
											     (inst_spfm_add_sub_ff_input_register[80] ?
												6'd27 :
												(inst_spfm_add_sub_ff_input_register[79] ?
												   6'd28 :
												   (inst_spfm_add_sub_ff_input_register[78] ?
												      6'd29 :
												      (inst_spfm_add_sub_ff_input_register[77] ?
													 6'd30 :
													 (inst_spfm_add_sub_ff_input_register[76] ?
													    6'd31 :
													    (inst_spfm_add_sub_ff_input_register[75] ?
													       6'd32 :
													       (inst_spfm_add_sub_ff_input_register[74] ?
														  6'd33 :
														  (inst_spfm_add_sub_ff_input_register[73] ?
														     6'd34 :
														     (inst_spfm_add_sub_ff_input_register[72] ?
															6'd35 :
															(inst_spfm_add_sub_ff_input_register[71] ?
															   6'd36 :
															   (inst_spfm_add_sub_ff_input_register[70] ?
															      6'd37 :
															      (inst_spfm_add_sub_ff_input_register[69] ?
																 6'd38 :
																 (inst_spfm_add_sub_ff_input_register[68] ?
																    6'd39 :
																    (inst_spfm_add_sub_ff_input_register[67] ?
																       6'd40 :
																       (inst_spfm_add_sub_ff_input_register[66] ?
																	  6'd41 :
																	  (inst_spfm_add_sub_ff_input_register[65] ?
																	     6'd42 :
																	     (inst_spfm_add_sub_ff_input_register[64] ?
																		6'd43 :
																		(inst_spfm_add_sub_ff_input_register[63] ?
																		   6'd44 :
																		   (inst_spfm_add_sub_ff_input_register[62] ?
																		      6'd45 :
																		      (inst_spfm_add_sub_ff_input_register[61] ?
																			 6'd46 :
																			 (inst_spfm_add_sub_ff_input_register[60] ?
																			    6'd47 :
																			    6'd49))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h25346 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       msb_zeros___1__h25387 :
	       msb_zeros__h17252 ;
  assign msb_zeros__h6861 =
	     x_wget__h695[26] ?
	       5'd0 :
	       (x_wget__h695[25] ?
		  5'd1 :
		  (x_wget__h695[24] ?
		     5'd2 :
		     (x_wget__h695[23] ?
			5'd3 :
			(x_wget__h695[22] ?
			   5'd4 :
			   (x_wget__h695[21] ?
			      5'd5 :
			      (x_wget__h695[20] ?
				 5'd6 :
				 (x_wget__h695[19] ?
				    5'd7 :
				    (x_wget__h695[18] ?
				       5'd8 :
				       (x_wget__h695[17] ?
					  5'd9 :
					  (x_wget__h695[16] ?
					     5'd10 :
					     (x_wget__h695[15] ?
						5'd11 :
						(x_wget__h695[14] ?
						   5'd12 :
						   (x_wget__h695[13] ?
						      5'd13 :
						      (x_wget__h695[12] ?
							 5'd14 :
							 (x_wget__h695[11] ?
							    5'd15 :
							    (x_wget__h695[10] ?
							       5'd16 :
							       (x_wget__h695[9] ?
								  5'd17 :
								  (x_wget__h695[8] ?
								     5'd18 :
								     (x_wget__h695[7] ?
									5'd19 :
									(x_wget__h695[6] ?
									   5'd20 :
									   (x_wget__h695[5] ?
									      5'd21 :
									      (x_wget__h695[4] ?
										 5'd22 :
										 (x_wget__h695[3] ?
										    5'd23 :
										    (x_wget__h695[2] ?
										       5'd24 :
										       (x_wget__h695[1] ?
											  5'd25 :
											  (x_wget__h695[0] ?
											     5'd26 :
											     5'd27)))))))))))))))))))))))))) ;
  assign msb_zeros__h72898 =
	     x_wget__h66759[55] ?
	       6'd0 :
	       (x_wget__h66759[54] ?
		  6'd1 :
		  (x_wget__h66759[53] ?
		     6'd2 :
		     (x_wget__h66759[52] ?
			6'd3 :
			(x_wget__h66759[51] ?
			   6'd4 :
			   (x_wget__h66759[50] ?
			      6'd5 :
			      (x_wget__h66759[49] ?
				 6'd6 :
				 (x_wget__h66759[48] ?
				    6'd7 :
				    (x_wget__h66759[47] ?
				       6'd8 :
				       (x_wget__h66759[46] ?
					  6'd9 :
					  (x_wget__h66759[45] ?
					     6'd10 :
					     (x_wget__h66759[44] ?
						6'd11 :
						(x_wget__h66759[43] ?
						   6'd12 :
						   (x_wget__h66759[42] ?
						      6'd13 :
						      (x_wget__h66759[41] ?
							 6'd14 :
							 (x_wget__h66759[40] ?
							    6'd15 :
							    (x_wget__h66759[39] ?
							       6'd16 :
							       (x_wget__h66759[38] ?
								  6'd17 :
								  (x_wget__h66759[37] ?
								     6'd18 :
								     (x_wget__h66759[36] ?
									6'd19 :
									(x_wget__h66759[35] ?
									   6'd20 :
									   (x_wget__h66759[34] ?
									      6'd21 :
									      (x_wget__h66759[33] ?
										 6'd22 :
										 (x_wget__h66759[32] ?
										    6'd23 :
										    (x_wget__h66759[31] ?
										       6'd24 :
										       (x_wget__h66759[30] ?
											  6'd25 :
											  (x_wget__h66759[29] ?
											     6'd26 :
											     (x_wget__h66759[28] ?
												6'd27 :
												(x_wget__h66759[27] ?
												   6'd28 :
												   (x_wget__h66759[26] ?
												      6'd29 :
												      (x_wget__h66759[25] ?
													 6'd30 :
													 (x_wget__h66759[24] ?
													    6'd31 :
													    (x_wget__h66759[23] ?
													       6'd32 :
													       (x_wget__h66759[22] ?
														  6'd33 :
														  (x_wget__h66759[21] ?
														     6'd34 :
														     (x_wget__h66759[20] ?
															6'd35 :
															(x_wget__h66759[19] ?
															   6'd36 :
															   (x_wget__h66759[18] ?
															      6'd37 :
															      (x_wget__h66759[17] ?
																 6'd38 :
																 (x_wget__h66759[16] ?
																    6'd39 :
																    (x_wget__h66759[15] ?
																       6'd40 :
																       (x_wget__h66759[14] ?
																	  6'd41 :
																	  (x_wget__h66759[13] ?
																	     6'd42 :
																	     (x_wget__h66759[12] ?
																		6'd43 :
																		(x_wget__h66759[11] ?
																		   6'd44 :
																		   (x_wget__h66759[10] ?
																		      6'd45 :
																		      (x_wget__h66759[9] ?
																			 6'd46 :
																			 (x_wget__h66759[8] ?
																			    6'd47 :
																			    (x_wget__h66759[7] ?
																			       6'd48 :
																			       (x_wget__h66759[6] ?
																				  6'd49 :
																				  (x_wget__h66759[5] ?
																				     6'd50 :
																				     (x_wget__h66759[4] ?
																					6'd51 :
																					(x_wget__h66759[3] ?
																					   6'd52 :
																					   (x_wget__h66759[2] ?
																					      6'd53 :
																					      (x_wget__h66759[1] ?
																						 6'd54 :
																						 (x_wget__h66759[0] ?
																						    6'd55 :
																						    6'd56))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h90505 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       7'd0 :
	       (inst_dpfm_add_sub_ff_input_register[199] ?
		  7'd1 :
		  (inst_dpfm_add_sub_ff_input_register[198] ?
		     7'd2 :
		     (inst_dpfm_add_sub_ff_input_register[197] ?
			7'd3 :
			(inst_dpfm_add_sub_ff_input_register[196] ?
			   7'd4 :
			   (inst_dpfm_add_sub_ff_input_register[195] ?
			      7'd5 :
			      (inst_dpfm_add_sub_ff_input_register[194] ?
				 7'd6 :
				 (inst_dpfm_add_sub_ff_input_register[193] ?
				    7'd7 :
				    (inst_dpfm_add_sub_ff_input_register[192] ?
				       7'd8 :
				       (inst_dpfm_add_sub_ff_input_register[191] ?
					  7'd9 :
					  (inst_dpfm_add_sub_ff_input_register[190] ?
					     7'd10 :
					     (inst_dpfm_add_sub_ff_input_register[189] ?
						7'd11 :
						(inst_dpfm_add_sub_ff_input_register[188] ?
						   7'd12 :
						   (inst_dpfm_add_sub_ff_input_register[187] ?
						      7'd13 :
						      (inst_dpfm_add_sub_ff_input_register[186] ?
							 7'd14 :
							 (inst_dpfm_add_sub_ff_input_register[185] ?
							    7'd15 :
							    (inst_dpfm_add_sub_ff_input_register[184] ?
							       7'd16 :
							       (inst_dpfm_add_sub_ff_input_register[183] ?
								  7'd17 :
								  (inst_dpfm_add_sub_ff_input_register[182] ?
								     7'd18 :
								     (inst_dpfm_add_sub_ff_input_register[181] ?
									7'd19 :
									(inst_dpfm_add_sub_ff_input_register[180] ?
									   7'd20 :
									   (inst_dpfm_add_sub_ff_input_register[179] ?
									      7'd21 :
									      (inst_dpfm_add_sub_ff_input_register[178] ?
										 7'd22 :
										 (inst_dpfm_add_sub_ff_input_register[177] ?
										    7'd23 :
										    (inst_dpfm_add_sub_ff_input_register[176] ?
										       7'd24 :
										       (inst_dpfm_add_sub_ff_input_register[175] ?
											  7'd25 :
											  (inst_dpfm_add_sub_ff_input_register[174] ?
											     7'd26 :
											     (inst_dpfm_add_sub_ff_input_register[173] ?
												7'd27 :
												(inst_dpfm_add_sub_ff_input_register[172] ?
												   7'd28 :
												   (inst_dpfm_add_sub_ff_input_register[171] ?
												      7'd29 :
												      (inst_dpfm_add_sub_ff_input_register[170] ?
													 7'd30 :
													 (inst_dpfm_add_sub_ff_input_register[169] ?
													    7'd31 :
													    (inst_dpfm_add_sub_ff_input_register[168] ?
													       7'd32 :
													       (inst_dpfm_add_sub_ff_input_register[167] ?
														  7'd33 :
														  (inst_dpfm_add_sub_ff_input_register[166] ?
														     7'd34 :
														     (inst_dpfm_add_sub_ff_input_register[165] ?
															7'd35 :
															(inst_dpfm_add_sub_ff_input_register[164] ?
															   7'd36 :
															   (inst_dpfm_add_sub_ff_input_register[163] ?
															      7'd37 :
															      (inst_dpfm_add_sub_ff_input_register[162] ?
																 7'd38 :
																 (inst_dpfm_add_sub_ff_input_register[161] ?
																    7'd39 :
																    (inst_dpfm_add_sub_ff_input_register[160] ?
																       7'd40 :
																       (inst_dpfm_add_sub_ff_input_register[159] ?
																	  7'd41 :
																	  (inst_dpfm_add_sub_ff_input_register[158] ?
																	     7'd42 :
																	     (inst_dpfm_add_sub_ff_input_register[157] ?
																		7'd43 :
																		(inst_dpfm_add_sub_ff_input_register[156] ?
																		   7'd44 :
																		   (inst_dpfm_add_sub_ff_input_register[155] ?
																		      7'd45 :
																		      (inst_dpfm_add_sub_ff_input_register[154] ?
																			 7'd46 :
																			 (inst_dpfm_add_sub_ff_input_register[153] ?
																			    7'd47 :
																			    (inst_dpfm_add_sub_ff_input_register[152] ?
																			       7'd48 :
																			       (inst_dpfm_add_sub_ff_input_register[151] ?
																				  7'd49 :
																				  (inst_dpfm_add_sub_ff_input_register[150] ?
																				     7'd50 :
																				     (inst_dpfm_add_sub_ff_input_register[149] ?
																					7'd51 :
																					(inst_dpfm_add_sub_ff_input_register[148] ?
																					   7'd52 :
																					   (inst_dpfm_add_sub_ff_input_register[147] ?
																					      7'd53 :
																					      (inst_dpfm_add_sub_ff_input_register[146] ?
																						 7'd54 :
																						 (inst_dpfm_add_sub_ff_input_register[145] ?
																						    7'd55 :
																						    (inst_dpfm_add_sub_ff_input_register[144] ?
																						       7'd56 :
																						       (inst_dpfm_add_sub_ff_input_register[143] ?
																							  7'd57 :
																							  (inst_dpfm_add_sub_ff_input_register[142] ?
																							     7'd58 :
																							     (inst_dpfm_add_sub_ff_input_register[141] ?
																								7'd59 :
																								(inst_dpfm_add_sub_ff_input_register[140] ?
																								   7'd60 :
																								   (inst_dpfm_add_sub_ff_input_register[139] ?
																								      7'd61 :
																								      (inst_dpfm_add_sub_ff_input_register[138] ?
																									 7'd62 :
																									 (inst_dpfm_add_sub_ff_input_register[137] ?
																									    7'd63 :
																									    (inst_dpfm_add_sub_ff_input_register[136] ?
																									       7'd64 :
																									       (inst_dpfm_add_sub_ff_input_register[135] ?
																										  7'd65 :
																										  (inst_dpfm_add_sub_ff_input_register[134] ?
																										     7'd66 :
																										     (inst_dpfm_add_sub_ff_input_register[133] ?
																											7'd67 :
																											(inst_dpfm_add_sub_ff_input_register[132] ?
																											   7'd68 :
																											   (inst_dpfm_add_sub_ff_input_register[131] ?
																											      7'd69 :
																											      (inst_dpfm_add_sub_ff_input_register[130] ?
																												 7'd70 :
																												 (inst_dpfm_add_sub_ff_input_register[129] ?
																												    7'd71 :
																												    (inst_dpfm_add_sub_ff_input_register[128] ?
																												       7'd72 :
																												       (inst_dpfm_add_sub_ff_input_register[127] ?
																													  7'd73 :
																													  (inst_dpfm_add_sub_ff_input_register[126] ?
																													     7'd74 :
																													     (inst_dpfm_add_sub_ff_input_register[125] ?
																														7'd75 :
																														(inst_dpfm_add_sub_ff_input_register[124] ?
																														   7'd76 :
																														   (inst_dpfm_add_sub_ff_input_register[123] ?
																														      7'd77 :
																														      (inst_dpfm_add_sub_ff_input_register[122] ?
																															 7'd78 :
																															 (inst_dpfm_add_sub_ff_input_register[121] ?
																															    7'd79 :
																															    (inst_dpfm_add_sub_ff_input_register[120] ?
																															       7'd80 :
																															       (inst_dpfm_add_sub_ff_input_register[119] ?
																																  7'd81 :
																																  (inst_dpfm_add_sub_ff_input_register[118] ?
																																     7'd82 :
																																     (inst_dpfm_add_sub_ff_input_register[117] ?
																																	7'd83 :
																																	(inst_dpfm_add_sub_ff_input_register[116] ?
																																	   7'd84 :
																																	   (inst_dpfm_add_sub_ff_input_register[115] ?
																																	      7'd85 :
																																	      (inst_dpfm_add_sub_ff_input_register[114] ?
																																		 7'd86 :
																																		 (inst_dpfm_add_sub_ff_input_register[113] ?
																																		    7'd87 :
																																		    (inst_dpfm_add_sub_ff_input_register[112] ?
																																		       7'd88 :
																																		       (inst_dpfm_add_sub_ff_input_register[111] ?
																																			  7'd89 :
																																			  (inst_dpfm_add_sub_ff_input_register[110] ?
																																			     7'd90 :
																																			     (inst_dpfm_add_sub_ff_input_register[109] ?
																																				7'd91 :
																																				(inst_dpfm_add_sub_ff_input_register[108] ?
																																				   7'd92 :
																																				   (inst_dpfm_add_sub_ff_input_register[107] ?
																																				      7'd93 :
																																				      (inst_dpfm_add_sub_ff_input_register[106] ?
																																					 7'd94 :
																																					 (inst_dpfm_add_sub_ff_input_register[105] ?
																																					    7'd95 :
																																					    (inst_dpfm_add_sub_ff_input_register[104] ?
																																					       7'd96 :
																																					       (inst_dpfm_add_sub_ff_input_register[103] ?
																																						  7'd97 :
																																						  (inst_dpfm_add_sub_ff_input_register[102] ?
																																						     7'd98 :
																																						     (inst_dpfm_add_sub_ff_input_register[101] ?
																																							7'd99 :
																																							(inst_dpfm_add_sub_ff_input_register[100] ?
																																							   7'd100 :
																																							   (inst_dpfm_add_sub_ff_input_register[99] ?
																																							      7'd101 :
																																							      (inst_dpfm_add_sub_ff_input_register[98] ?
																																								 7'd102 :
																																								 (inst_dpfm_add_sub_ff_input_register[97] ?
																																								    7'd103 :
																																								    (inst_dpfm_add_sub_ff_input_register[96] ?
																																								       7'd104 :
																																								       (inst_dpfm_add_sub_ff_input_register[95] ?
																																									  7'd105 :
																																									  7'd107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign new_value_final_result__h193949 =
	     inst_dpfm_add_sub_ff_stage5[17] ?
	       64'h7FF8000000000000 :
	       _theResult_____3_snd_fst__h194038 ;
  assign new_value_final_result__h65567 =
	     inst_spfm_add_sub_ff_stage5[16] ?
	       32'h7FC00000 :
	       _theResult_____3_snd_fst__h65656 ;
  assign op_xor_sign3__h118023 =
	     inst_dpfm_add_sub_ff_stage2[12] ^ sign3__h118012 ;
  assign op_xor_sign3__h30270 =
	     inst_spfm_add_sub_ff_stage2[12] ^ sign3__h30259 ;
  assign or_sign__h225960 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] |
	     setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] ;
  assign or_sign__h228539 = ff_input_D_OUT[208] | ff_input_D_OUT[144] ;
  assign quiet_nan_two__h268165 = x__h268817 | y__h268818 ;
  assign quiet_nan_two__h270352 = x__h270999 | y__h271000 ;
  assign res___1__h265239 =
	     { ff_input_D_OUT[208],
	       _theResult_____2__h264971,
	       IF_IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0_ETC___d4340[22:0] } ;
  assign res__h203848 = ff_input_D_OUT[176] ? 32'hCF000000 : 32'd0 ;
  assign res__h264578 =
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 ?
	       _theResult___fst__h265052 :
	       32'd0 ;
  assign result__h258251 =
	     condFlags32_reswget_BITS_14_TO_10__q52[0] ? 5'd16 : 5'd0 ;
  assign result__h263934 =
	     condFlags64_reswget_BITS_14_TO_10__q30[0] ? 5'd16 : 5'd0 ;
  assign result__h264999 =
	     { IF_NOT_IF_getExp64_res_whas__293_THEN_getExp64_ETC___d4436[4:1],
	       IF_NOT_IF_getExp64_res_whas__293_THEN_getExp64_ETC___d4436[0] |
	       x__h264887 } ;
  assign result__h265038 = { exception__h264586[4:2], 2'd3 } ;
  assign result_exponent___1__h16852 =
	     inst_spfpu_sqrt_rg_inter_stage[67:59] + 9'd1 ;
  assign result_exponent___1__h90109 =
	     inst_dpfpu_sqrt_rg_inter_stage[128:117] + 12'd1 ;
  assign result_exponent__h304257 = x__h313518 + y__h313519 ;
  assign result_exponent__h314848 = x__h333446 + y__h333447 ;
  assign result_mantissa__h16330 =
	     { inst_spfpu_sqrt_rg_inter_stage[93:69],
	       !_theResult____h15994[28] } ;
  assign result_mantissa__h89587 =
	     { inst_dpfpu_sqrt_rg_inter_stage[183:130],
	       !_theResult____h89251[57] } ;
  assign resultant_exponent___1__h194628 =
	     resultant_exponent__h193901 + 13'd1 ;
  assign resultant_exponent___1__h66246 = resultant_exponent__h65519 + 10'd1 ;
  assign resultant_exponent__h193901 =
	     inst_dpfm_add_sub_ff_stage5[183] ?
	       resultant_exponent_inc__h193896 :
	       _theResult___fst__h194227 ;
  assign resultant_exponent__h65519 =
	     inst_spfm_add_sub_ff_stage5[95] ?
	       resultant_exponent_inc__h65514 :
	       _theResult___fst__h65845 ;
  assign resultant_exponent_inc__h193896 =
	     inst_dpfm_add_sub_ff_stage5[196:184] + 13'd1 ;
  assign resultant_exponent_inc__h65514 =
	     inst_spfm_add_sub_ff_stage5[105:96] + 10'd1 ;
  assign resultant_exponent_sub__h193894 =
	     inst_dpfm_add_sub_ff_stage5[196:184] - 13'd1 ;
  assign resultant_exponent_sub__h65512 =
	     inst_spfm_add_sub_ff_stage5[105:96] - 10'd1 ;
  assign resultant_exponent_sub_zerosMSB__h193899 =
	     inst_dpfm_add_sub_ff_stage5[196:184] -
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3175 ;
  assign resultant_exponent_sub_zerosMSB__h65517 =
	     inst_spfm_add_sub_ff_stage5[105:96] -
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1192 ;
  assign resultant_mantissa___1__h194199 =
	     { 1'd0,
	       inst_dpfm_add_sub_ff_stage5[183:26],
	       inst_dpfm_add_sub_ff_stage5[24] |
	       inst_dpfm_add_sub_ff_stage5[25] } ;
  assign resultant_mantissa___1__h65817 =
	     { 1'd0,
	       inst_spfm_add_sub_ff_stage5[95:25],
	       inst_spfm_add_sub_ff_stage5[23] |
	       inst_spfm_add_sub_ff_stage5[24] } ;
  assign resultant_mantissa_norm_expo__h193897 =
	     inst_dpfm_add_sub_ff_stage5[183:24] <<
	     resultant_exponent_sub__h193894 ;
  assign resultant_mantissa_norm_expo__h65515 =
	     inst_spfm_add_sub_ff_stage5[95:23] <<
	     resultant_exponent_sub__h65512 ;
  assign resultant_mantissa_norm_zerosMSB__h193898 =
	     inst_dpfm_add_sub_ff_stage5[183:24] << x__h194476 ;
  assign resultant_mantissa_norm_zerosMSB__h65516 =
	     inst_spfm_add_sub_ff_stage5[95:23] << x__h66094 ;
  assign setCanonicalNaN_argwget_BITS_127_TO_64__q39 =
	     setCanonicalNaN_arg_wget[127:64] ;
  assign setCanonicalNaN_argwget_BITS_191_TO_128__q38 =
	     setCanonicalNaN_arg_wget[191:128] ;
  assign setCanonicalNaN_argwget_BITS_63_TO_0__q40 =
	     setCanonicalNaN_arg_wget[63:0] ;
  assign setCanonicalNaN_reswget_BITS_31_TO_0__q59 =
	     setCanonicalNaN_res_wget[31:0] ;
  assign setCanonicalNaN_reswget_BITS_63_TO_32__q42 =
	     setCanonicalNaN_res_wget[63:32] ;
  assign setCanonicalNaN_reswget_BITS_95_TO_64__q41 =
	     setCanonicalNaN_res_wget[95:64] ;
  assign shiftDist__h264317 = 11'd896 - getExp64_res_wget[32:22] ;
  assign shift_neg__h107946 =
	     ~_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1871 +
	     13'd1 ;
  assign shift_neg__h25355 =
	     ~_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 +
	     10'd1 ;
  assign shift_neg__h7021 =
	     ~_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 +
	     10'd1 ;
  assign shift_neg__h73058 =
	     ~_1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1449 +
	     13'd1 ;
  assign sign2__h118010 =
	     inst_dpfm_add_sub_ff_stage2[203] ^
	     inst_dpfm_add_sub_ff_stage2[202] ;
  assign sign2__h30257 =
	     inst_spfm_add_sub_ff_stage2[110] ^
	     inst_spfm_add_sub_ff_stage2[109] ;
  assign sign3__h118012 =
	     inst_dpfm_add_sub_ff_stage2[81] ^
	     inst_dpfm_add_sub_ff_stage2[202] ;
  assign sign3__h30259 =
	     inst_spfm_add_sub_ff_stage2[49] ^
	     inst_spfm_add_sub_ff_stage2[109] ;
  assign sign__h235102 = !ff_input_D_OUT[1] && ff_input_D_OUT[208] ;
  assign sub_mantissa1__h167772 =
	     inst_dpfm_add_sub_ff_stage4[346] ?
	       inst_dpfm_add_sub_ff_stage4[332:173] :
	       inst_dpfm_add_sub_ff_stage4[172:13] ;
  assign sub_mantissa1__h53484 =
	     inst_spfm_add_sub_ff_stage4[169] ?
	       inst_spfm_add_sub_ff_stage4[158:86] :
	       inst_spfm_add_sub_ff_stage4[85:13] ;
  assign sub_mantissa2__h167773 =
	     inst_dpfm_add_sub_ff_stage4[346] ?
	       inst_dpfm_add_sub_ff_stage4[172:13] :
	       inst_dpfm_add_sub_ff_stage4[332:173] ;
  assign sub_mantissa2__h53485 =
	     inst_spfm_add_sub_ff_stage4[169] ?
	       inst_spfm_add_sub_ff_stage4[85:13] :
	       inst_spfm_add_sub_ff_stage4[158:86] ;
  assign sub_mantissa__h167774 =
	     sub_mantissa1__h167772 - sub_mantissa2__h167773 ;
  assign sub_mantissa__h53486 =
	     sub_mantissa1__h53484 - sub_mantissa2__h53485 ;
  assign theResult__20894_SL_x29768_BITS_4_TO_0__q2 =
	     _theResult____h220894 << x__h229768[4:0] ;
  assign value__h262199 = getMant32_res_wget[68:46] << x__h258443 ;
  assign wr_final_out_fflags__h220914 = { 4'd0, inexact__h235105 } ;
  assign x1_avValue_fflags__h203854 =
	     (ff_input_D_OUT[175:145] == 31'd0) ?
	       5'd0 :
	       x_wget__h195118[36:32] ;
  assign x1_avValue_fflags__h209713 =
	     ff_input_D_OUT[1] ?
	       x_wget__h195118[36:32] :
	       x1_avValue_fflags__h203854 ;
  assign x1_avValue_fflags__h220793 =
	     ff_input_D_OUT[2] ?
	       x_wget__h195256[36:32] :
	       x1_avValue_fflags__h209713 ;
  assign x1_avValue_final_result__h203853 =
	     (ff_input_D_OUT[175:145] == 31'd0) ?
	       res__h203848 :
	       x_wget__h195118[31:0] ;
  assign x1_avValue_final_result__h209712 =
	     ff_input_D_OUT[1] ?
	       x_wget__h195118[31:0] :
	       x1_avValue_final_result__h203853 ;
  assign x1_avValue_final_result__h220792 =
	     ff_input_D_OUT[2] ?
	       x_wget__h195256[31:0] :
	       x1_avValue_final_result__h209712 ;
  assign x1_avValue_final_result__h220800 =
	     (ff_input_D_OUT[208:145] == 64'd0 && ff_input_D_OUT[2] ||
	      ff_input_D_OUT[176:145] == 32'd0 && !ff_input_D_OUT[2]) ?
	       32'b0 :
	       x1_avValue_final_result__h220792 ;
  assign x1_avValue_final_result__h245858 =
	     { CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q43,
	       setCanonicalNaN_reswget_BITS_95_TO_64__q41[30:0] } ;
  assign x1_avValue_fst__h264988 =
	     (!condFlags64_reswget_BITS_14_TO_10__q30[2] &&
	      !condFlags64_reswget_BITS_14_TO_10__q30[0] &&
	      !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	      !condFlags64_reswget_BITS_14_TO_10__q30[3]) ?
	       y_avValue_fst__h264985 :
	       res__h264578 ;
  assign x__h108011 = msb_zeros__h107937 - 7'd1 ;
  assign x__h108037 = { 6'd0, msb_zeros__h107937 } ;
  assign x__h117755 =
	     (!inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1863 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) &&
	     (!inst_dpfm_add_sub_ff_input_register[2] ||
	      !(x__h117786 ^ inst_dpfm_add_sub_ff_input_register[5])) ;
  assign x__h117786 =
	     inst_dpfm_add_sub_ff_input_register[81] ^
	     inst_dpfm_add_sub_ff_input_register[80] ;
  assign x__h117816 =
	     inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1863 &&
	     (!inst_dpfm_add_sub_ff_input_register[200] ||
	      inst_dpfm_add_sub_ff_input_register[94:82] != 13'd2046) &&
	     (inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1862 ^
	      13'h1000) <
	     13'd3020 &&
	     (!inst_dpfm_add_sub_ff_input_register[2] ||
	      inst_dpfm_add_sub_ff_input_register[12] ||
	      inst_dpfm_add_sub_ff_input_register[13]) &&
	     !inst_dpfm_add_sub_ff_input_register[14] ;
  assign x__h118164 = x__h118176 | y__h118177 ;
  assign x__h118176 = _theResult_____1__h118058 & sign2__h118010 ;
  assign x__h14083 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 &&
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ;
  assign x__h14088 =
	     (!inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 ||
	      inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ||
	      _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134) ?
	       x_wget__h695[0] :
	       lv_sticky___1__h7047 ;
  assign x__h14317 = _theResult____h14155 | inst_spfpu_divider_rg_stage3[53] ;
  assign x__h14467 = inst_spfpu_divider_rg_stage3[52] | _theResult____h14155 ;
  assign x__h14502 = x__h14504 | _theResult____h14155 ;
  assign x__h14504 =
	     inst_spfpu_divider_rg_stage3[53] |
	     inst_spfpu_divider_rg_stage3[52] ;
  assign x__h153120 =
	     mantissa_to_shift__h118047[0] ?
	       8'd0 :
	       (mantissa_to_shift__h118047[1] ?
		  8'd1 :
		  (mantissa_to_shift__h118047[2] ?
		     8'd2 :
		     (mantissa_to_shift__h118047[3] ?
			8'd3 :
			(mantissa_to_shift__h118047[4] ?
			   8'd4 :
			   (mantissa_to_shift__h118047[5] ?
			      8'd5 :
			      (mantissa_to_shift__h118047[6] ?
				 8'd6 :
				 (mantissa_to_shift__h118047[7] ?
				    8'd7 :
				    (mantissa_to_shift__h118047[8] ?
				       8'd8 :
				       (mantissa_to_shift__h118047[9] ?
					  8'd9 :
					  (mantissa_to_shift__h118047[10] ?
					     8'd10 :
					     (mantissa_to_shift__h118047[11] ?
						8'd11 :
						(mantissa_to_shift__h118047[12] ?
						   8'd12 :
						   (mantissa_to_shift__h118047[13] ?
						      8'd13 :
						      (mantissa_to_shift__h118047[14] ?
							 8'd14 :
							 (mantissa_to_shift__h118047[15] ?
							    8'd15 :
							    (mantissa_to_shift__h118047[16] ?
							       8'd16 :
							       (mantissa_to_shift__h118047[17] ?
								  8'd17 :
								  (mantissa_to_shift__h118047[18] ?
								     8'd18 :
								     (mantissa_to_shift__h118047[19] ?
									8'd19 :
									(mantissa_to_shift__h118047[20] ?
									   8'd20 :
									   (mantissa_to_shift__h118047[21] ?
									      8'd21 :
									      (mantissa_to_shift__h118047[22] ?
										 8'd22 :
										 (mantissa_to_shift__h118047[23] ?
										    8'd23 :
										    (mantissa_to_shift__h118047[24] ?
										       8'd24 :
										       (mantissa_to_shift__h118047[25] ?
											  8'd25 :
											  (mantissa_to_shift__h118047[26] ?
											     8'd26 :
											     (mantissa_to_shift__h118047[27] ?
												8'd27 :
												(mantissa_to_shift__h118047[28] ?
												   8'd28 :
												   (mantissa_to_shift__h118047[29] ?
												      8'd29 :
												      (mantissa_to_shift__h118047[30] ?
													 8'd30 :
													 (mantissa_to_shift__h118047[31] ?
													    8'd31 :
													    (mantissa_to_shift__h118047[32] ?
													       8'd32 :
													       (mantissa_to_shift__h118047[33] ?
														  8'd33 :
														  (mantissa_to_shift__h118047[34] ?
														     8'd34 :
														     (mantissa_to_shift__h118047[35] ?
															8'd35 :
															(mantissa_to_shift__h118047[36] ?
															   8'd36 :
															   (mantissa_to_shift__h118047[37] ?
															      8'd37 :
															      (mantissa_to_shift__h118047[38] ?
																 8'd38 :
																 (mantissa_to_shift__h118047[39] ?
																    8'd39 :
																    (mantissa_to_shift__h118047[40] ?
																       8'd40 :
																       (mantissa_to_shift__h118047[41] ?
																	  8'd41 :
																	  (mantissa_to_shift__h118047[42] ?
																	     8'd42 :
																	     (mantissa_to_shift__h118047[43] ?
																		8'd43 :
																		(mantissa_to_shift__h118047[44] ?
																		   8'd44 :
																		   (mantissa_to_shift__h118047[45] ?
																		      8'd45 :
																		      (mantissa_to_shift__h118047[46] ?
																			 8'd46 :
																			 (mantissa_to_shift__h118047[47] ?
																			    8'd47 :
																			    (mantissa_to_shift__h118047[48] ?
																			       8'd48 :
																			       (mantissa_to_shift__h118047[49] ?
																				  8'd49 :
																				  (mantissa_to_shift__h118047[50] ?
																				     8'd50 :
																				     (mantissa_to_shift__h118047[51] ?
																					8'd51 :
																					(mantissa_to_shift__h118047[52] ?
																					   8'd52 :
																					   (mantissa_to_shift__h118047[53] ?
																					      8'd53 :
																					      (mantissa_to_shift__h118047[54] ?
																						 8'd54 :
																						 (mantissa_to_shift__h118047[55] ?
																						    8'd55 :
																						    (mantissa_to_shift__h118047[56] ?
																						       8'd56 :
																						       (mantissa_to_shift__h118047[57] ?
																							  8'd57 :
																							  (mantissa_to_shift__h118047[58] ?
																							     8'd58 :
																							     (mantissa_to_shift__h118047[59] ?
																								8'd59 :
																								(mantissa_to_shift__h118047[60] ?
																								   8'd60 :
																								   (mantissa_to_shift__h118047[61] ?
																								      8'd61 :
																								      (mantissa_to_shift__h118047[62] ?
																									 8'd62 :
																									 (mantissa_to_shift__h118047[63] ?
																									    8'd63 :
																									    (mantissa_to_shift__h118047[64] ?
																									       8'd64 :
																									       (mantissa_to_shift__h118047[65] ?
																										  8'd65 :
																										  (mantissa_to_shift__h118047[66] ?
																										     8'd66 :
																										     (mantissa_to_shift__h118047[67] ?
																											8'd67 :
																											(mantissa_to_shift__h118047[68] ?
																											   8'd68 :
																											   (mantissa_to_shift__h118047[69] ?
																											      8'd69 :
																											      (mantissa_to_shift__h118047[70] ?
																												 8'd70 :
																												 (mantissa_to_shift__h118047[71] ?
																												    8'd71 :
																												    (mantissa_to_shift__h118047[72] ?
																												       8'd72 :
																												       (mantissa_to_shift__h118047[73] ?
																													  8'd73 :
																													  (mantissa_to_shift__h118047[74] ?
																													     8'd74 :
																													     (mantissa_to_shift__h118047[75] ?
																														8'd75 :
																														(mantissa_to_shift__h118047[76] ?
																														   8'd76 :
																														   (mantissa_to_shift__h118047[77] ?
																														      8'd77 :
																														      (mantissa_to_shift__h118047[78] ?
																															 8'd78 :
																															 (mantissa_to_shift__h118047[79] ?
																															    8'd79 :
																															    (mantissa_to_shift__h118047[80] ?
																															       8'd80 :
																															       (mantissa_to_shift__h118047[81] ?
																																  8'd81 :
																																  (mantissa_to_shift__h118047[82] ?
																																     8'd82 :
																																     (mantissa_to_shift__h118047[83] ?
																																	8'd83 :
																																	(mantissa_to_shift__h118047[84] ?
																																	   8'd84 :
																																	   (mantissa_to_shift__h118047[85] ?
																																	      8'd85 :
																																	      (mantissa_to_shift__h118047[86] ?
																																		 8'd86 :
																																		 (mantissa_to_shift__h118047[87] ?
																																		    8'd87 :
																																		    (mantissa_to_shift__h118047[88] ?
																																		       8'd88 :
																																		       (mantissa_to_shift__h118047[89] ?
																																			  8'd89 :
																																			  (mantissa_to_shift__h118047[90] ?
																																			     8'd90 :
																																			     (mantissa_to_shift__h118047[91] ?
																																				8'd91 :
																																				(mantissa_to_shift__h118047[92] ?
																																				   8'd92 :
																																				   (mantissa_to_shift__h118047[93] ?
																																				      8'd93 :
																																				      (mantissa_to_shift__h118047[94] ?
																																					 8'd94 :
																																					 (mantissa_to_shift__h118047[95] ?
																																					    8'd95 :
																																					    (mantissa_to_shift__h118047[96] ?
																																					       8'd96 :
																																					       (mantissa_to_shift__h118047[97] ?
																																						  8'd97 :
																																						  (mantissa_to_shift__h118047[98] ?
																																						     8'd98 :
																																						     (mantissa_to_shift__h118047[99] ?
																																							8'd99 :
																																							(mantissa_to_shift__h118047[100] ?
																																							   8'd100 :
																																							   (mantissa_to_shift__h118047[101] ?
																																							      8'd101 :
																																							      (mantissa_to_shift__h118047[102] ?
																																								 8'd102 :
																																								 (mantissa_to_shift__h118047[103] ?
																																								    8'd103 :
																																								    (mantissa_to_shift__h118047[104] ?
																																								       8'd104 :
																																								       (mantissa_to_shift__h118047[105] ?
																																									  8'd105 :
																																									  (mantissa_to_shift__h118047[106] ?
																																									     8'd106 :
																																									     (mantissa_to_shift__h118047[107] ?
																																										8'd107 :
																																										(mantissa_to_shift__h118047[108] ?
																																										   8'd108 :
																																										   (mantissa_to_shift__h118047[109] ?
																																										      8'd109 :
																																										      (mantissa_to_shift__h118047[110] ?
																																											 8'd110 :
																																											 (mantissa_to_shift__h118047[111] ?
																																											    8'd111 :
																																											    (mantissa_to_shift__h118047[112] ?
																																											       8'd112 :
																																											       (mantissa_to_shift__h118047[113] ?
																																												  8'd113 :
																																												  (mantissa_to_shift__h118047[114] ?
																																												     8'd114 :
																																												     (mantissa_to_shift__h118047[115] ?
																																													8'd115 :
																																													(mantissa_to_shift__h118047[116] ?
																																													   8'd116 :
																																													   (mantissa_to_shift__h118047[117] ?
																																													      8'd117 :
																																													      (mantissa_to_shift__h118047[118] ?
																																														 8'd118 :
																																														 (mantissa_to_shift__h118047[119] ?
																																														    8'd119 :
																																														    (mantissa_to_shift__h118047[120] ?
																																														       8'd120 :
																																														       (mantissa_to_shift__h118047[121] ?
																																															  8'd121 :
																																															  (mantissa_to_shift__h118047[122] ?
																																															     8'd122 :
																																															     (mantissa_to_shift__h118047[123] ?
																																																8'd123 :
																																																(mantissa_to_shift__h118047[124] ?
																																																   8'd124 :
																																																   (mantissa_to_shift__h118047[125] ?
																																																      8'd125 :
																																																      (mantissa_to_shift__h118047[126] ?
																																																	 8'd126 :
																																																	 (mantissa_to_shift__h118047[127] ?
																																																	    8'd127 :
																																																	    (mantissa_to_shift__h118047[128] ?
																																																	       8'd128 :
																																																	       (mantissa_to_shift__h118047[129] ?
																																																		  8'd129 :
																																																		  (mantissa_to_shift__h118047[130] ?
																																																		     8'd130 :
																																																		     (mantissa_to_shift__h118047[131] ?
																																																			8'd131 :
																																																			(mantissa_to_shift__h118047[132] ?
																																																			   8'd132 :
																																																			   (mantissa_to_shift__h118047[133] ?
																																																			      8'd133 :
																																																			      (mantissa_to_shift__h118047[134] ?
																																																				 8'd134 :
																																																				 (mantissa_to_shift__h118047[135] ?
																																																				    8'd135 :
																																																				    (mantissa_to_shift__h118047[136] ?
																																																				       8'd136 :
																																																				       (mantissa_to_shift__h118047[137] ?
																																																					  8'd137 :
																																																					  (mantissa_to_shift__h118047[138] ?
																																																					     8'd138 :
																																																					     (mantissa_to_shift__h118047[139] ?
																																																						8'd139 :
																																																						(mantissa_to_shift__h118047[140] ?
																																																						   8'd140 :
																																																						   (mantissa_to_shift__h118047[141] ?
																																																						      8'd141 :
																																																						      (mantissa_to_shift__h118047[142] ?
																																																							 8'd142 :
																																																							 (mantissa_to_shift__h118047[143] ?
																																																							    8'd143 :
																																																							    (mantissa_to_shift__h118047[144] ?
																																																							       8'd144 :
																																																							       (mantissa_to_shift__h118047[145] ?
																																																								  8'd145 :
																																																								  (mantissa_to_shift__h118047[146] ?
																																																								     8'd146 :
																																																								     (mantissa_to_shift__h118047[147] ?
																																																									8'd147 :
																																																									(mantissa_to_shift__h118047[148] ?
																																																									   8'd148 :
																																																									   (mantissa_to_shift__h118047[149] ?
																																																									      8'd149 :
																																																									      (mantissa_to_shift__h118047[150] ?
																																																										 8'd150 :
																																																										 (mantissa_to_shift__h118047[151] ?
																																																										    8'd151 :
																																																										    (mantissa_to_shift__h118047[152] ?
																																																										       8'd152 :
																																																										       (mantissa_to_shift__h118047[153] ?
																																																											  8'd153 :
																																																											  (mantissa_to_shift__h118047[154] ?
																																																											     8'd154 :
																																																											     (mantissa_to_shift__h118047[155] ?
																																																												8'd155 :
																																																												(mantissa_to_shift__h118047[156] ?
																																																												   8'd156 :
																																																												   (mantissa_to_shift__h118047[157] ?
																																																												      8'd157 :
																																																												      (mantissa_to_shift__h118047[158] ?
																																																													 8'd158 :
																																																													 (mantissa_to_shift__h118047[159] ?
																																																													    8'd159 :
																																																													    8'd160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h16040 =
	     { inst_spfpu_sqrt_rg_inter_stage[92:69],
	       !_theResult____h15994[28],
	       1'd0 } ;
  assign x__h16303 =
	     { inst_spfpu_sqrt_rg_inter_stage[27:3],
	       !_theResult____h15994[28] } ;
  assign x__h16701 =
	     inst_spfpu_sqrt_rg_inter_stage[70] | !_theResult____h15994[28] ;
  assign x__h16742 =
	     _theResult____h15994[28] ?
	       lv_remainder__h16764 :
	       _theResult____h15994 ;
  assign x__h167429 = ~_theResult_____1__h118058 ;
  assign x__h167436 =
	     inst_dpfm_add_sub_ff_stage2_read__373_BIT_15_3_ETC___d2398 ||
	     inst_dpfm_add_sub_ff_stage2[6] ||
	     (!inst_dpfm_add_sub_ff_stage2[16] ||
	      !inst_dpfm_add_sub_ff_stage2[5]) &&
	     inst_dpfm_add_sub_ff_stage2[4] &&
	     inst_dpfm_add_sub_ff_stage2[14] &&
	     x__h167544 ;
  assign x__h167544 = sign2__h118010 ^ op_xor_sign3__h118023 ;
  assign x__h167552 =
	     (inst_dpfm_add_sub_ff_stage2_read__373_BIT_15_3_ETC___d2398 ||
	      inst_dpfm_add_sub_ff_stage2[6] ||
	      inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       2'd0 :
	       _theResult_____6_snd_snd__h167509 ;
  assign x__h167584 = x__h167586 & sign2__h118010 ;
  assign x__h167586 = inst_dpfm_add_sub_ff_stage2[4] & y__h167587 ;
  assign x__h167588 = x__h167589 & inst_dpfm_add_sub_ff_stage2[14] ;
  assign x__h167589 = ~inst_dpfm_add_sub_ff_stage2[4] ;
  assign x__h167593 =
	     (inst_dpfm_add_sub_ff_stage2_read__373_BIT_15_3_ETC___d2398 ||
	      inst_dpfm_add_sub_ff_stage2[6]) ?
	       2'd0 :
	       _theResult_____6_snd_snd_snd__h167556 ;
  assign x__h167617 = x__h167629 & y__h167630 ;
  assign x__h167629 =
	     (inst_dpfm_add_sub_ff_stage2_read__373_BIT_15_3_ETC___d2398 ||
	      inst_dpfm_add_sub_ff_stage2[6] ||
	      inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       inst_dpfm_add_sub_ff_stage2[1] :
	       _theResult_____6_fst__h167506 ;
  assign x__h167659 =
	     (inst_dpfm_add_sub_ff_stage2[1] ||
	      !inst_dpfm_add_sub_ff_stage2[6]) &&
	     inst_dpfm_add_sub_ff_stage2[15] ;
  assign x__h167852 =
	     (_theResult____h167775 == 160'd0) ?
	       ((inst_dpfm_add_sub_ff_stage4[12:10] == 3'b010) ?
		  2'b11 :
		  2'b01) :
	       2'd0 ;
  assign x__h16816 =
	     inst_spfpu_sqrt_rg_inter_stage[69] | !_theResult____h15994[28] ;
  assign x__h194476 = inst_dpfm_add_sub_ff_stage5[7:0] - 8'd1 ;
  assign x__h194497 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[106] |
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[104] ;
  assign x__h194579 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[105] |
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[104] ;
  assign x__h203962 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110[7] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110[6] ;
  assign x__h204223 =
	     _theResult____h203931[31] ?
	       6'd0 :
	       (_theResult____h203931[30] ?
		  6'd1 :
		  (_theResult____h203931[29] ?
		     6'd2 :
		     (_theResult____h203931[28] ?
			6'd3 :
			(_theResult____h203931[27] ?
			   6'd4 :
			   (_theResult____h203931[26] ?
			      6'd5 :
			      (_theResult____h203931[25] ?
				 6'd6 :
				 (_theResult____h203931[24] ?
				    6'd7 :
				    (_theResult____h203931[23] ?
				       6'd8 :
				       (_theResult____h203931[22] ?
					  6'd9 :
					  (_theResult____h203931[21] ?
					     6'd10 :
					     (_theResult____h203931[20] ?
						6'd11 :
						(_theResult____h203931[19] ?
						   6'd12 :
						   (_theResult____h203931[18] ?
						      6'd13 :
						      (_theResult____h203931[17] ?
							 6'd14 :
							 (_theResult____h203931[16] ?
							    6'd15 :
							    (_theResult____h203931[15] ?
							       6'd16 :
							       (_theResult____h203931[14] ?
								  6'd17 :
								  (_theResult____h203931[13] ?
								     6'd18 :
								     (_theResult____h203931[12] ?
									6'd19 :
									(_theResult____h203931[11] ?
									   6'd20 :
									   (_theResult____h203931[10] ?
									      6'd21 :
									      (_theResult____h203931[9] ?
										 6'd22 :
										 (_theResult____h203931[8] ?
										    6'd23 :
										    (_theResult____h203931[7] ?
										       6'd24 :
										       (_theResult____h203931[6] ?
											  6'd25 :
											  (_theResult____h203931[5] ?
											     6'd26 :
											     (_theResult____h203931[4] ?
												6'd27 :
												(_theResult____h203931[3] ?
												   6'd28 :
												   (_theResult____h203931[2] ?
												      6'd29 :
												      (_theResult____h203931[1] ?
													 6'd30 :
													 (_theResult____h203931[0] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign x__h209558 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110[8] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110[6] ;
  assign x__h209834 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986[39] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986[38] ;
  assign x__h210113 =
	     _theResult____h209803[63] ?
	       7'd0 :
	       (_theResult____h209803[62] ?
		  7'd1 :
		  (_theResult____h209803[61] ?
		     7'd2 :
		     (_theResult____h209803[60] ?
			7'd3 :
			(_theResult____h209803[59] ?
			   7'd4 :
			   (_theResult____h209803[58] ?
			      7'd5 :
			      (_theResult____h209803[57] ?
				 7'd6 :
				 (_theResult____h209803[56] ?
				    7'd7 :
				    (_theResult____h209803[55] ?
				       7'd8 :
				       (_theResult____h209803[54] ?
					  7'd9 :
					  (_theResult____h209803[53] ?
					     7'd10 :
					     (_theResult____h209803[52] ?
						7'd11 :
						(_theResult____h209803[51] ?
						   7'd12 :
						   (_theResult____h209803[50] ?
						      7'd13 :
						      (_theResult____h209803[49] ?
							 7'd14 :
							 (_theResult____h209803[48] ?
							    7'd15 :
							    (_theResult____h209803[47] ?
							       7'd16 :
							       (_theResult____h209803[46] ?
								  7'd17 :
								  (_theResult____h209803[45] ?
								     7'd18 :
								     (_theResult____h209803[44] ?
									7'd19 :
									(_theResult____h209803[43] ?
									   7'd20 :
									   (_theResult____h209803[42] ?
									      7'd21 :
									      (_theResult____h209803[41] ?
										 7'd22 :
										 (_theResult____h209803[40] ?
										    7'd23 :
										    (_theResult____h209803[39] ?
										       7'd24 :
										       (_theResult____h209803[38] ?
											  7'd25 :
											  (_theResult____h209803[37] ?
											     7'd26 :
											     (_theResult____h209803[36] ?
												7'd27 :
												(_theResult____h209803[35] ?
												   7'd28 :
												   (_theResult____h209803[34] ?
												      7'd29 :
												      (_theResult____h209803[33] ?
													 7'd30 :
													 (_theResult____h209803[32] ?
													    7'd31 :
													    (_theResult____h209803[31] ?
													       7'd32 :
													       (_theResult____h209803[30] ?
														  7'd33 :
														  (_theResult____h209803[29] ?
														     7'd34 :
														     (_theResult____h209803[28] ?
															7'd35 :
															(_theResult____h209803[27] ?
															   7'd36 :
															   (_theResult____h209803[26] ?
															      7'd37 :
															      (_theResult____h209803[25] ?
																 7'd38 :
																 (_theResult____h209803[24] ?
																    7'd39 :
																    (_theResult____h209803[23] ?
																       7'd40 :
																       (_theResult____h209803[22] ?
																	  7'd41 :
																	  (_theResult____h209803[21] ?
																	     7'd42 :
																	     (_theResult____h209803[20] ?
																		7'd43 :
																		(_theResult____h209803[19] ?
																		   7'd44 :
																		   (_theResult____h209803[18] ?
																		      7'd45 :
																		      (_theResult____h209803[17] ?
																			 7'd46 :
																			 (_theResult____h209803[16] ?
																			    7'd47 :
																			    (_theResult____h209803[15] ?
																			       7'd48 :
																			       (_theResult____h209803[14] ?
																				  7'd49 :
																				  (_theResult____h209803[13] ?
																				     7'd50 :
																				     (_theResult____h209803[12] ?
																					7'd51 :
																					(_theResult____h209803[11] ?
																					   7'd52 :
																					   (_theResult____h209803[10] ?
																					      7'd53 :
																					      (_theResult____h209803[9] ?
																						 7'd54 :
																						 (_theResult____h209803[8] ?
																						    7'd55 :
																						    (_theResult____h209803[7] ?
																						       7'd56 :
																						       (_theResult____h209803[6] ?
																							  7'd57 :
																							  (_theResult____h209803[5] ?
																							     7'd58 :
																							     (_theResult____h209803[4] ?
																								7'd59 :
																								(_theResult____h209803[3] ?
																								   7'd60 :
																								   (_theResult____h209803[2] ?
																								      7'd61 :
																								      (_theResult____h209803[1] ?
																									 7'd62 :
																									 (_theResult____h209803[0] ?
																									    7'd63 :
																									    7'd64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h220633 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986[40] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986[38] ;
  assign x__h220976 =
	     (setCanonicalNaN_argwget_BITS_191_TO_128__q38[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_191_TO_128__q38[31:0] :
	       32'h7FC00000 ;
  assign x__h221117 =
	     (setCanonicalNaN_argwget_BITS_127_TO_64__q39[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_127_TO_64__q39[31:0] :
	       32'h7FC00000 ;
  assign x__h221199 =
	     (setCanonicalNaN_argwget_BITS_63_TO_0__q40[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_63_TO_0__q40[31:0] :
	       32'h7FC00000 ;
  assign x__h229768 =
	     _theResult____h220894[31] ?
	       6'd0 :
	       (_theResult____h220894[30] ?
		  6'd1 :
		  (_theResult____h220894[29] ?
		     6'd2 :
		     (_theResult____h220894[28] ?
			6'd3 :
			(_theResult____h220894[27] ?
			   6'd4 :
			   (_theResult____h220894[26] ?
			      6'd5 :
			      (_theResult____h220894[25] ?
				 6'd6 :
				 (_theResult____h220894[24] ?
				    6'd7 :
				    (_theResult____h220894[23] ?
				       6'd8 :
				       (_theResult____h220894[22] ?
					  6'd9 :
					  (_theResult____h220894[21] ?
					     6'd10 :
					     (_theResult____h220894[20] ?
						6'd11 :
						(_theResult____h220894[19] ?
						   6'd12 :
						   (_theResult____h220894[18] ?
						      6'd13 :
						      (_theResult____h220894[17] ?
							 6'd14 :
							 (_theResult____h220894[16] ?
							    6'd15 :
							    (_theResult____h220894[15] ?
							       6'd16 :
							       (_theResult____h220894[14] ?
								  6'd17 :
								  (_theResult____h220894[13] ?
								     6'd18 :
								     (_theResult____h220894[12] ?
									6'd19 :
									(_theResult____h220894[11] ?
									   6'd20 :
									   (_theResult____h220894[10] ?
									      6'd21 :
									      (_theResult____h220894[9] ?
										 6'd22 :
										 (_theResult____h220894[8] ?
										    6'd23 :
										    (_theResult____h220894[7] ?
										       6'd24 :
										       (_theResult____h220894[6] ?
											  6'd25 :
											  (_theResult____h220894[5] ?
											     6'd26 :
											     (_theResult____h220894[4] ?
												6'd27 :
												(_theResult____h220894[3] ?
												   6'd28 :
												   (_theResult____h220894[2] ?
												      6'd29 :
												      (_theResult____h220894[1] ?
													 6'd30 :
													 (_theResult____h220894[0] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign x__h235123 =
	     IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682[10] |
	     IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682[9] ;
  assign x__h235203 =
	     _theResult____h220907[63] ?
	       7'd0 :
	       (_theResult____h220907[62] ?
		  7'd1 :
		  (_theResult____h220907[61] ?
		     7'd2 :
		     (_theResult____h220907[60] ?
			7'd3 :
			(_theResult____h220907[59] ?
			   7'd4 :
			   (_theResult____h220907[58] ?
			      7'd5 :
			      (_theResult____h220907[57] ?
				 7'd6 :
				 (_theResult____h220907[56] ?
				    7'd7 :
				    (_theResult____h220907[55] ?
				       7'd8 :
				       (_theResult____h220907[54] ?
					  7'd9 :
					  (_theResult____h220907[53] ?
					     7'd10 :
					     (_theResult____h220907[52] ?
						7'd11 :
						(_theResult____h220907[51] ?
						   7'd12 :
						   (_theResult____h220907[50] ?
						      7'd13 :
						      (_theResult____h220907[49] ?
							 7'd14 :
							 (_theResult____h220907[48] ?
							    7'd15 :
							    (_theResult____h220907[47] ?
							       7'd16 :
							       (_theResult____h220907[46] ?
								  7'd17 :
								  (_theResult____h220907[45] ?
								     7'd18 :
								     (_theResult____h220907[44] ?
									7'd19 :
									(_theResult____h220907[43] ?
									   7'd20 :
									   (_theResult____h220907[42] ?
									      7'd21 :
									      (_theResult____h220907[41] ?
										 7'd22 :
										 (_theResult____h220907[40] ?
										    7'd23 :
										    (_theResult____h220907[39] ?
										       7'd24 :
										       (_theResult____h220907[38] ?
											  7'd25 :
											  (_theResult____h220907[37] ?
											     7'd26 :
											     (_theResult____h220907[36] ?
												7'd27 :
												(_theResult____h220907[35] ?
												   7'd28 :
												   (_theResult____h220907[34] ?
												      7'd29 :
												      (_theResult____h220907[33] ?
													 7'd30 :
													 (_theResult____h220907[32] ?
													    7'd31 :
													    (_theResult____h220907[31] ?
													       7'd32 :
													       (_theResult____h220907[30] ?
														  7'd33 :
														  (_theResult____h220907[29] ?
														     7'd34 :
														     (_theResult____h220907[28] ?
															7'd35 :
															(_theResult____h220907[27] ?
															   7'd36 :
															   (_theResult____h220907[26] ?
															      7'd37 :
															      (_theResult____h220907[25] ?
																 7'd38 :
																 (_theResult____h220907[24] ?
																    7'd39 :
																    (_theResult____h220907[23] ?
																       7'd40 :
																       (_theResult____h220907[22] ?
																	  7'd41 :
																	  (_theResult____h220907[21] ?
																	     7'd42 :
																	     (_theResult____h220907[20] ?
																		7'd43 :
																		(_theResult____h220907[19] ?
																		   7'd44 :
																		   (_theResult____h220907[18] ?
																		      7'd45 :
																		      (_theResult____h220907[17] ?
																			 7'd46 :
																			 (_theResult____h220907[16] ?
																			    7'd47 :
																			    (_theResult____h220907[15] ?
																			       7'd48 :
																			       (_theResult____h220907[14] ?
																				  7'd49 :
																				  (_theResult____h220907[13] ?
																				     7'd50 :
																				     (_theResult____h220907[12] ?
																					7'd51 :
																					(_theResult____h220907[11] ?
																					   7'd52 :
																					   (_theResult____h220907[10] ?
																					      7'd53 :
																					      (_theResult____h220907[9] ?
																						 7'd54 :
																						 (_theResult____h220907[8] ?
																						    7'd55 :
																						    (_theResult____h220907[7] ?
																						       7'd56 :
																						       (_theResult____h220907[6] ?
																							  7'd57 :
																							  (_theResult____h220907[5] ?
																							     7'd58 :
																							     (_theResult____h220907[4] ?
																								7'd59 :
																								(_theResult____h220907[3] ?
																								   7'd60 :
																								   (_theResult____h220907[2] ?
																								      7'd61 :
																								      (_theResult____h220907[1] ?
																									 7'd62 :
																									 (_theResult____h220907[0] ?
																									    7'd63 :
																									    7'd64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h245708 =
	     IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682[11] |
	     IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682[9] ;
  assign x__h247332 =
	     { condFlags32_arg_wget[69:62] == 8'd0 &&
	       condFlags32_arg_wget[92:70] != 23'd0,
	       condFlags32_arg_wget[92:70] == 23'd0 &&
	       condFlags32_arg_wget[69:62] == 8'd0,
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       condFlags32_argwget_BITS_92_TO_70__q49[22],
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       condFlags32_arg_wget[92:70] == 23'd0,
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       !condFlags32_argwget_BITS_92_TO_70__q49[22] &&
	       condFlags32_arg_wget[92:70] != 23'd0 } ;
  assign x__h247666 =
	     { condFlags32_arg_wget[38:31] == 8'd0 &&
	       condFlags32_arg_wget[61:39] != 23'd0,
	       condFlags32_arg_wget[61:39] == 23'd0 &&
	       condFlags32_arg_wget[38:31] == 8'd0,
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       condFlags32_argwget_BITS_61_TO_39__q50[22],
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       condFlags32_arg_wget[61:39] == 23'd0,
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       !condFlags32_argwget_BITS_61_TO_39__q50[22] &&
	       condFlags32_arg_wget[61:39] != 23'd0 } ;
  assign x__h247847 =
	     { condFlags32_arg_wget[7:0] == 8'd0 &&
	       condFlags32_arg_wget[30:8] != 23'd0,
	       condFlags32_arg_wget[30:8] == 23'd0 &&
	       condFlags32_arg_wget[7:0] == 8'd0,
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       condFlags32_argwget_BITS_30_TO_8__q51[22],
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       condFlags32_arg_wget[30:8] == 23'd0,
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       !condFlags32_argwget_BITS_30_TO_8__q51[22] &&
	       condFlags32_arg_wget[30:8] != 23'd0 } ;
  assign x__h249067 =
	     final_result__h248108[0] |
	     IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871[21] ;
  assign x__h249438 =
	     IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871[22] |
	     IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871[21] ;
  assign x__h250403 =
	     { condFlags64_arg_wget[136:126] == 11'd0 &&
	       condFlags64_arg_wget[188:137] != 52'd0,
	       condFlags64_arg_wget[188:137] == 52'd0 &&
	       condFlags64_arg_wget[136:126] == 11'd0,
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       condFlags64_argwget_BITS_188_TO_137__q27[51],
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       condFlags64_arg_wget[188:137] == 52'd0,
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       !condFlags64_argwget_BITS_188_TO_137__q27[51] &&
	       condFlags64_arg_wget[188:137] != 52'd0 } ;
  assign x__h250737 =
	     { condFlags64_arg_wget[73:63] == 11'd0 &&
	       condFlags64_arg_wget[125:74] != 52'd0,
	       condFlags64_arg_wget[125:74] == 52'd0 &&
	       condFlags64_arg_wget[73:63] == 11'd0,
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       condFlags64_argwget_BITS_125_TO_74__q28[51],
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       condFlags64_arg_wget[125:74] == 52'd0,
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       !condFlags64_argwget_BITS_125_TO_74__q28[51] &&
	       condFlags64_arg_wget[125:74] != 52'd0 } ;
  assign x__h250918 =
	     { condFlags64_arg_wget[10:0] == 11'd0 &&
	       condFlags64_arg_wget[62:11] != 52'd0,
	       condFlags64_arg_wget[62:11] == 52'd0 &&
	       condFlags64_arg_wget[10:0] == 11'd0,
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       condFlags64_argwget_BITS_62_TO_11__q29[51],
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       condFlags64_arg_wget[62:11] == 52'd0,
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       !condFlags64_argwget_BITS_62_TO_11__q29[51] &&
	       condFlags64_arg_wget[62:11] != 52'd0 } ;
  assign x__h251313 = lv_exp__h251175 - 12'd1023 ;
  assign x__h252142 =
	     final_result__h251180[0] |
	     IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038[50] ;
  assign x__h252511 =
	     IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038[51] |
	     IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038[50] ;
  assign x__h25420 = msb_zeros__h25346 - 6'd1 ;
  assign x__h25446 = { 4'd0, msb_zeros__h25346 } ;
  assign x__h254679 =
	     (setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
	      condFlags32_reswget_BITS_14_TO_10__q52[1]) ?
	       10'd1 :
	       ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
		 condFlags32_res_wget[14:10] == 5'd0) ?
		  10'd2 :
		  ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
		    condFlags32_reswget_BITS_14_TO_10__q52[4]) ?
		     10'd4 :
		     ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
		       condFlags32_reswget_BITS_14_TO_10__q52[3]) ?
			10'd8 :
			((!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
			  condFlags32_reswget_BITS_14_TO_10__q52[3]) ?
			   10'd16 :
			   ((!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
			     condFlags32_reswget_BITS_14_TO_10__q52[4]) ?
			      10'd32 :
			      ((!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
				condFlags32_res_wget[14:10] == 5'd0) ?
				 10'd64 :
				 ((!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
				   condFlags32_reswget_BITS_14_TO_10__q52[1]) ?
				    10'd128 :
				    (condFlags32_reswget_BITS_14_TO_10__q52[0] ?
				       10'd256 :
				       10'd512)))))))) ;
  assign x__h256156 =
	     (ff_input_D_OUT[208] &&
	      condFlags64_reswget_BITS_14_TO_10__q30[1]) ?
	       10'd1 :
	       ((ff_input_D_OUT[208] && condFlags64_res_wget[14:10] == 5'd0) ?
		  10'd2 :
		  ((ff_input_D_OUT[208] &&
		    condFlags64_reswget_BITS_14_TO_10__q30[4]) ?
		     10'd4 :
		     ((ff_input_D_OUT[208] &&
		       condFlags64_reswget_BITS_14_TO_10__q30[3]) ?
			10'd8 :
			((!ff_input_D_OUT[208] &&
			  condFlags64_reswget_BITS_14_TO_10__q30[3]) ?
			   10'd16 :
			   ((!ff_input_D_OUT[208] &&
			     condFlags64_reswget_BITS_14_TO_10__q30[4]) ?
			      10'd32 :
			      ((!ff_input_D_OUT[208] &&
				condFlags64_res_wget[14:10] == 5'd0) ?
				 10'd64 :
				 ((!ff_input_D_OUT[208] &&
				   condFlags64_reswget_BITS_14_TO_10__q30[1]) ?
				    10'd128 :
				    (condFlags64_reswget_BITS_14_TO_10__q30[0] ?
				       10'd256 :
				       10'd512)))))))) ;
  assign x__h258443 =
	     getMant32_reswget_BITS_68_TO_46__q47[22] ?
	       5'd0 :
	       (getMant32_reswget_BITS_68_TO_46__q47[21] ?
		  5'd1 :
		  (getMant32_reswget_BITS_68_TO_46__q47[20] ?
		     5'd2 :
		     (getMant32_reswget_BITS_68_TO_46__q47[19] ?
			5'd3 :
			(getMant32_reswget_BITS_68_TO_46__q47[18] ?
			   5'd4 :
			   (getMant32_reswget_BITS_68_TO_46__q47[17] ?
			      5'd5 :
			      (getMant32_reswget_BITS_68_TO_46__q47[16] ?
				 5'd6 :
				 (getMant32_reswget_BITS_68_TO_46__q47[15] ?
				    5'd7 :
				    (getMant32_reswget_BITS_68_TO_46__q47[14] ?
				       5'd8 :
				       (getMant32_reswget_BITS_68_TO_46__q47[13] ?
					  5'd9 :
					  (getMant32_reswget_BITS_68_TO_46__q47[12] ?
					     5'd10 :
					     (getMant32_reswget_BITS_68_TO_46__q47[11] ?
						5'd11 :
						(getMant32_reswget_BITS_68_TO_46__q47[10] ?
						   5'd12 :
						   (getMant32_reswget_BITS_68_TO_46__q47[9] ?
						      5'd13 :
						      (getMant32_reswget_BITS_68_TO_46__q47[8] ?
							 5'd14 :
							 (getMant32_reswget_BITS_68_TO_46__q47[7] ?
							    5'd15 :
							    (getMant32_reswget_BITS_68_TO_46__q47[6] ?
							       5'd16 :
							       (getMant32_reswget_BITS_68_TO_46__q47[5] ?
								  5'd17 :
								  (getMant32_reswget_BITS_68_TO_46__q47[4] ?
								     5'd18 :
								     (getMant32_reswget_BITS_68_TO_46__q47[3] ?
									5'd19 :
									(getMant32_reswget_BITS_68_TO_46__q47[2] ?
									   5'd20 :
									   (getMant32_reswget_BITS_68_TO_46__q47[1] ?
									      5'd21 :
									      (getMant32_reswget_BITS_68_TO_46__q47[0] ?
										 5'd22 :
										 5'd23)))))))))))))))))))))) ;
  assign x__h264465 = getExp64_res_wget[32:22] - 11'd896 ;
  assign x__h264794 =
	     IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313[24] |
	     lv_sticky__h264584 ;
  assign x__h264887 = x__h264889 | lv_sticky__h264584 ;
  assign x__h264889 =
	     IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313[25] |
	     IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313[24] ;
  assign x__h268222 =
	     { ~lv_op1_subnormal__h268160, getMant32_res_wget[68:46] } ;
  assign x__h268308 =
	     { ~lv_op2_subnormal__h268161, getMant32_res_wget[45:23] } ;
  assign x__h268423 = x__h268425 + y__h268426 ;
  assign x__h268425 = x__h268427 - 10'd127 ;
  assign x__h268427 = exp1_temp__h268169 + exp2_temp__h268170 ;
  assign x__h268478 =
	     lv_invalid__h248094 ||
	     IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d5215 ||
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[1]) &&
	     (condFlags32_reswget_BITS_14_TO_10__q52[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) ;
  assign x__h268741 =
	     !lv_invalid__h248094 &&
	     !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d5215 &&
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[1]) &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	     !condFlags32_reswget_BITS_9_TO_5__q53[3] ;
  assign x__h268747 =
	     !lv_invalid__h248094 &&
	     !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d5215 &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	     !condFlags32_reswget_BITS_9_TO_5__q53[1] &&
	     (condFlags32_reswget_BITS_14_TO_10__q52[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) ;
  assign x__h268804 =
	     (lv_invalid__h248094 ||
	      IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d5215) ?
	       quiet_nan_two__h268165 :
	       _theResult___snd_snd_snd__h268669 ;
  assign x__h268817 = condFlags32_reswget_BITS_14_TO_10__q52[2] & y__h268820 ;
  assign x__h268907 = lv_op1_subnormal__h268160 | lv_op2_subnormal__h268161 ;
  assign x__h270409 =
	     { ~lv_op1_subnormal__h270347, getMant64_res_wget[155:104] } ;
  assign x__h270495 =
	     { ~lv_op2_subnormal__h270348, getMant64_res_wget[103:52] } ;
  assign x__h270610 = x__h270612 + y__h270613 ;
  assign x__h270612 = x__h270614 - 13'd1023 ;
  assign x__h270614 = exp1_temp__h270356 + exp2_temp__h270357 ;
  assign x__h270661 =
	     lv_invalid__h251165 ||
	     IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d5292 ||
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[1]) &&
	     (condFlags64_reswget_BITS_14_TO_10__q30[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[3]) ;
  assign x__h270924 =
	     !lv_invalid__h251165 &&
	     !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d5292 &&
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[1]) &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	     !condFlags64_reswget_BITS_9_TO_5__q31[3] ;
  assign x__h270930 =
	     !lv_invalid__h251165 &&
	     !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d5292 &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	     !condFlags64_reswget_BITS_9_TO_5__q31[1] &&
	     (condFlags64_reswget_BITS_14_TO_10__q30[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[3]) ;
  assign x__h270986 =
	     (lv_invalid__h251165 ||
	      IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d5292) ?
	       quiet_nan_two__h270352 :
	       _theResult___snd_snd_snd__h270852 ;
  assign x__h270999 = condFlags64_reswget_BITS_14_TO_10__q30[2] & y__h271002 ;
  assign x__h271089 = lv_op1_subnormal__h270347 | lv_op2_subnormal__h270348 ;
  assign x__h274296 = exp1__h274232 + y__h274298 ;
  assign x__h274303 =
	     (~condFlags32_reswget_BITS_14_TO_10__q52[4]) ?
	       5'd0 :
	       (getMant32_reswget_BITS_68_TO_46__q47[22] ?
		  5'd1 :
		  (getMant32_reswget_BITS_68_TO_46__q47[21] ?
		     5'd2 :
		     (getMant32_reswget_BITS_68_TO_46__q47[20] ?
			5'd3 :
			(getMant32_reswget_BITS_68_TO_46__q47[19] ?
			   5'd4 :
			   (getMant32_reswget_BITS_68_TO_46__q47[18] ?
			      5'd5 :
			      (getMant32_reswget_BITS_68_TO_46__q47[17] ?
				 5'd6 :
				 (getMant32_reswget_BITS_68_TO_46__q47[16] ?
				    5'd7 :
				    (getMant32_reswget_BITS_68_TO_46__q47[15] ?
				       5'd8 :
				       (getMant32_reswget_BITS_68_TO_46__q47[14] ?
					  5'd9 :
					  (getMant32_reswget_BITS_68_TO_46__q47[13] ?
					     5'd10 :
					     (getMant32_reswget_BITS_68_TO_46__q47[12] ?
						5'd11 :
						(getMant32_reswget_BITS_68_TO_46__q47[11] ?
						   5'd12 :
						   (getMant32_reswget_BITS_68_TO_46__q47[10] ?
						      5'd13 :
						      (getMant32_reswget_BITS_68_TO_46__q47[9] ?
							 5'd14 :
							 (getMant32_reswget_BITS_68_TO_46__q47[8] ?
							    5'd15 :
							    (getMant32_reswget_BITS_68_TO_46__q47[7] ?
							       5'd16 :
							       (getMant32_reswget_BITS_68_TO_46__q47[6] ?
								  5'd17 :
								  (getMant32_reswget_BITS_68_TO_46__q47[5] ?
								     5'd18 :
								     (getMant32_reswget_BITS_68_TO_46__q47[4] ?
									5'd19 :
									(getMant32_reswget_BITS_68_TO_46__q47[3] ?
									   5'd20 :
									   (getMant32_reswget_BITS_68_TO_46__q47[2] ?
									      5'd21 :
									      (getMant32_reswget_BITS_68_TO_46__q47[1] ?
										 5'd22 :
										 (getMant32_reswget_BITS_68_TO_46__q47[0] ?
										    5'd23 :
										    5'd24))))))))))))))))))))))) ;
  assign x__h278222 =
	     (~condFlags32_reswget_BITS_9_TO_5__q53[4]) ?
	       5'd0 :
	       (getMant32_reswget_BITS_45_TO_23__q55[22] ?
		  5'd1 :
		  (getMant32_reswget_BITS_45_TO_23__q55[21] ?
		     5'd2 :
		     (getMant32_reswget_BITS_45_TO_23__q55[20] ?
			5'd3 :
			(getMant32_reswget_BITS_45_TO_23__q55[19] ?
			   5'd4 :
			   (getMant32_reswget_BITS_45_TO_23__q55[18] ?
			      5'd5 :
			      (getMant32_reswget_BITS_45_TO_23__q55[17] ?
				 5'd6 :
				 (getMant32_reswget_BITS_45_TO_23__q55[16] ?
				    5'd7 :
				    (getMant32_reswget_BITS_45_TO_23__q55[15] ?
				       5'd8 :
				       (getMant32_reswget_BITS_45_TO_23__q55[14] ?
					  5'd9 :
					  (getMant32_reswget_BITS_45_TO_23__q55[13] ?
					     5'd10 :
					     (getMant32_reswget_BITS_45_TO_23__q55[12] ?
						5'd11 :
						(getMant32_reswget_BITS_45_TO_23__q55[11] ?
						   5'd12 :
						   (getMant32_reswget_BITS_45_TO_23__q55[10] ?
						      5'd13 :
						      (getMant32_reswget_BITS_45_TO_23__q55[9] ?
							 5'd14 :
							 (getMant32_reswget_BITS_45_TO_23__q55[8] ?
							    5'd15 :
							    (getMant32_reswget_BITS_45_TO_23__q55[7] ?
							       5'd16 :
							       (getMant32_reswget_BITS_45_TO_23__q55[6] ?
								  5'd17 :
								  (getMant32_reswget_BITS_45_TO_23__q55[5] ?
								     5'd18 :
								     (getMant32_reswget_BITS_45_TO_23__q55[4] ?
									5'd19 :
									(getMant32_reswget_BITS_45_TO_23__q55[3] ?
									   5'd20 :
									   (getMant32_reswget_BITS_45_TO_23__q55[2] ?
									      5'd21 :
									      (getMant32_reswget_BITS_45_TO_23__q55[1] ?
										 5'd22 :
										 (getMant32_reswget_BITS_45_TO_23__q55[0] ?
										    5'd23 :
										    5'd24))))))))))))))))))))))) ;
  assign x__h282138 = man1__h274224 << x__h274303 ;
  assign x__h282166 = man2__h274225 << x__h278222 ;
  assign x__h282196 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ^
	     setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] ;
  assign x__h282260 =
	     !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 &&
	     !lv_op2_Nan__h225959 &&
	     (!condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      !condFlags32_reswget_BITS_9_TO_5__q53[1]) &&
	     (!condFlags32_reswget_BITS_14_TO_10__q52[3] ||
	      !condFlags32_reswget_BITS_9_TO_5__q53[3]) &&
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) ;
  assign x__h282275 =
	     !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 &&
	     !lv_op2_Nan__h225959 &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	     condFlags32_reswget_BITS_9_TO_5__q53[3] ;
  assign x__h282280 =
	     !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 &&
	     !lv_op2_Nan__h225959 &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	     !condFlags32_reswget_BITS_9_TO_5__q53[3] &&
	     (condFlags32_reswget_BITS_9_TO_5__q53[1] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[3]) ;
  assign x__h284298 = exp1__h284234 + y__h284300 ;
  assign x__h284305 =
	     (~condFlags64_reswget_BITS_14_TO_10__q30[4]) ?
	       6'd0 :
	       (getMant64_reswget_BITS_155_TO_104__q25[51] ?
		  6'd1 :
		  (getMant64_reswget_BITS_155_TO_104__q25[50] ?
		     6'd2 :
		     (getMant64_reswget_BITS_155_TO_104__q25[49] ?
			6'd3 :
			(getMant64_reswget_BITS_155_TO_104__q25[48] ?
			   6'd4 :
			   (getMant64_reswget_BITS_155_TO_104__q25[47] ?
			      6'd5 :
			      (getMant64_reswget_BITS_155_TO_104__q25[46] ?
				 6'd6 :
				 (getMant64_reswget_BITS_155_TO_104__q25[45] ?
				    6'd7 :
				    (getMant64_reswget_BITS_155_TO_104__q25[44] ?
				       6'd8 :
				       (getMant64_reswget_BITS_155_TO_104__q25[43] ?
					  6'd9 :
					  (getMant64_reswget_BITS_155_TO_104__q25[42] ?
					     6'd10 :
					     (getMant64_reswget_BITS_155_TO_104__q25[41] ?
						6'd11 :
						(getMant64_reswget_BITS_155_TO_104__q25[40] ?
						   6'd12 :
						   (getMant64_reswget_BITS_155_TO_104__q25[39] ?
						      6'd13 :
						      (getMant64_reswget_BITS_155_TO_104__q25[38] ?
							 6'd14 :
							 (getMant64_reswget_BITS_155_TO_104__q25[37] ?
							    6'd15 :
							    (getMant64_reswget_BITS_155_TO_104__q25[36] ?
							       6'd16 :
							       (getMant64_reswget_BITS_155_TO_104__q25[35] ?
								  6'd17 :
								  (getMant64_reswget_BITS_155_TO_104__q25[34] ?
								     6'd18 :
								     (getMant64_reswget_BITS_155_TO_104__q25[33] ?
									6'd19 :
									(getMant64_reswget_BITS_155_TO_104__q25[32] ?
									   6'd20 :
									   (getMant64_reswget_BITS_155_TO_104__q25[31] ?
									      6'd21 :
									      (getMant64_reswget_BITS_155_TO_104__q25[30] ?
										 6'd22 :
										 (getMant64_reswget_BITS_155_TO_104__q25[29] ?
										    6'd23 :
										    (getMant64_reswget_BITS_155_TO_104__q25[28] ?
										       6'd24 :
										       (getMant64_reswget_BITS_155_TO_104__q25[27] ?
											  6'd25 :
											  (getMant64_reswget_BITS_155_TO_104__q25[26] ?
											     6'd26 :
											     (getMant64_reswget_BITS_155_TO_104__q25[25] ?
												6'd27 :
												(getMant64_reswget_BITS_155_TO_104__q25[24] ?
												   6'd28 :
												   (getMant64_reswget_BITS_155_TO_104__q25[23] ?
												      6'd29 :
												      (getMant64_reswget_BITS_155_TO_104__q25[22] ?
													 6'd30 :
													 (getMant64_reswget_BITS_155_TO_104__q25[21] ?
													    6'd31 :
													    (getMant64_reswget_BITS_155_TO_104__q25[20] ?
													       6'd32 :
													       (getMant64_reswget_BITS_155_TO_104__q25[19] ?
														  6'd33 :
														  (getMant64_reswget_BITS_155_TO_104__q25[18] ?
														     6'd34 :
														     (getMant64_reswget_BITS_155_TO_104__q25[17] ?
															6'd35 :
															(getMant64_reswget_BITS_155_TO_104__q25[16] ?
															   6'd36 :
															   (getMant64_reswget_BITS_155_TO_104__q25[15] ?
															      6'd37 :
															      (getMant64_reswget_BITS_155_TO_104__q25[14] ?
																 6'd38 :
																 (getMant64_reswget_BITS_155_TO_104__q25[13] ?
																    6'd39 :
																    (getMant64_reswget_BITS_155_TO_104__q25[12] ?
																       6'd40 :
																       (getMant64_reswget_BITS_155_TO_104__q25[11] ?
																	  6'd41 :
																	  (getMant64_reswget_BITS_155_TO_104__q25[10] ?
																	     6'd42 :
																	     (getMant64_reswget_BITS_155_TO_104__q25[9] ?
																		6'd43 :
																		(getMant64_reswget_BITS_155_TO_104__q25[8] ?
																		   6'd44 :
																		   (getMant64_reswget_BITS_155_TO_104__q25[7] ?
																		      6'd45 :
																		      (getMant64_reswget_BITS_155_TO_104__q25[6] ?
																			 6'd46 :
																			 (getMant64_reswget_BITS_155_TO_104__q25[5] ?
																			    6'd47 :
																			    (getMant64_reswget_BITS_155_TO_104__q25[4] ?
																			       6'd48 :
																			       (getMant64_reswget_BITS_155_TO_104__q25[3] ?
																				  6'd49 :
																				  (getMant64_reswget_BITS_155_TO_104__q25[2] ?
																				     6'd50 :
																				     (getMant64_reswget_BITS_155_TO_104__q25[1] ?
																					6'd51 :
																					(getMant64_reswget_BITS_155_TO_104__q25[0] ?
																					   6'd52 :
																					   6'd53)))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h292893 =
	     (~condFlags64_reswget_BITS_9_TO_5__q31[4]) ?
	       6'd0 :
	       (getMant64_reswget_BITS_103_TO_52__q33[51] ?
		  6'd1 :
		  (getMant64_reswget_BITS_103_TO_52__q33[50] ?
		     6'd2 :
		     (getMant64_reswget_BITS_103_TO_52__q33[49] ?
			6'd3 :
			(getMant64_reswget_BITS_103_TO_52__q33[48] ?
			   6'd4 :
			   (getMant64_reswget_BITS_103_TO_52__q33[47] ?
			      6'd5 :
			      (getMant64_reswget_BITS_103_TO_52__q33[46] ?
				 6'd6 :
				 (getMant64_reswget_BITS_103_TO_52__q33[45] ?
				    6'd7 :
				    (getMant64_reswget_BITS_103_TO_52__q33[44] ?
				       6'd8 :
				       (getMant64_reswget_BITS_103_TO_52__q33[43] ?
					  6'd9 :
					  (getMant64_reswget_BITS_103_TO_52__q33[42] ?
					     6'd10 :
					     (getMant64_reswget_BITS_103_TO_52__q33[41] ?
						6'd11 :
						(getMant64_reswget_BITS_103_TO_52__q33[40] ?
						   6'd12 :
						   (getMant64_reswget_BITS_103_TO_52__q33[39] ?
						      6'd13 :
						      (getMant64_reswget_BITS_103_TO_52__q33[38] ?
							 6'd14 :
							 (getMant64_reswget_BITS_103_TO_52__q33[37] ?
							    6'd15 :
							    (getMant64_reswget_BITS_103_TO_52__q33[36] ?
							       6'd16 :
							       (getMant64_reswget_BITS_103_TO_52__q33[35] ?
								  6'd17 :
								  (getMant64_reswget_BITS_103_TO_52__q33[34] ?
								     6'd18 :
								     (getMant64_reswget_BITS_103_TO_52__q33[33] ?
									6'd19 :
									(getMant64_reswget_BITS_103_TO_52__q33[32] ?
									   6'd20 :
									   (getMant64_reswget_BITS_103_TO_52__q33[31] ?
									      6'd21 :
									      (getMant64_reswget_BITS_103_TO_52__q33[30] ?
										 6'd22 :
										 (getMant64_reswget_BITS_103_TO_52__q33[29] ?
										    6'd23 :
										    (getMant64_reswget_BITS_103_TO_52__q33[28] ?
										       6'd24 :
										       (getMant64_reswget_BITS_103_TO_52__q33[27] ?
											  6'd25 :
											  (getMant64_reswget_BITS_103_TO_52__q33[26] ?
											     6'd26 :
											     (getMant64_reswget_BITS_103_TO_52__q33[25] ?
												6'd27 :
												(getMant64_reswget_BITS_103_TO_52__q33[24] ?
												   6'd28 :
												   (getMant64_reswget_BITS_103_TO_52__q33[23] ?
												      6'd29 :
												      (getMant64_reswget_BITS_103_TO_52__q33[22] ?
													 6'd30 :
													 (getMant64_reswget_BITS_103_TO_52__q33[21] ?
													    6'd31 :
													    (getMant64_reswget_BITS_103_TO_52__q33[20] ?
													       6'd32 :
													       (getMant64_reswget_BITS_103_TO_52__q33[19] ?
														  6'd33 :
														  (getMant64_reswget_BITS_103_TO_52__q33[18] ?
														     6'd34 :
														     (getMant64_reswget_BITS_103_TO_52__q33[17] ?
															6'd35 :
															(getMant64_reswget_BITS_103_TO_52__q33[16] ?
															   6'd36 :
															   (getMant64_reswget_BITS_103_TO_52__q33[15] ?
															      6'd37 :
															      (getMant64_reswget_BITS_103_TO_52__q33[14] ?
																 6'd38 :
																 (getMant64_reswget_BITS_103_TO_52__q33[13] ?
																    6'd39 :
																    (getMant64_reswget_BITS_103_TO_52__q33[12] ?
																       6'd40 :
																       (getMant64_reswget_BITS_103_TO_52__q33[11] ?
																	  6'd41 :
																	  (getMant64_reswget_BITS_103_TO_52__q33[10] ?
																	     6'd42 :
																	     (getMant64_reswget_BITS_103_TO_52__q33[9] ?
																		6'd43 :
																		(getMant64_reswget_BITS_103_TO_52__q33[8] ?
																		   6'd44 :
																		   (getMant64_reswget_BITS_103_TO_52__q33[7] ?
																		      6'd45 :
																		      (getMant64_reswget_BITS_103_TO_52__q33[6] ?
																			 6'd46 :
																			 (getMant64_reswget_BITS_103_TO_52__q33[5] ?
																			    6'd47 :
																			    (getMant64_reswget_BITS_103_TO_52__q33[4] ?
																			       6'd48 :
																			       (getMant64_reswget_BITS_103_TO_52__q33[3] ?
																				  6'd49 :
																				  (getMant64_reswget_BITS_103_TO_52__q33[2] ?
																				     6'd50 :
																				     (getMant64_reswget_BITS_103_TO_52__q33[1] ?
																					6'd51 :
																					(getMant64_reswget_BITS_103_TO_52__q33[0] ?
																					   6'd52 :
																					   6'd53)))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h30002 =
	     (!inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) &&
	     (!inst_spfm_add_sub_ff_input_register[2] ||
	      !(x__h30033 ^ inst_spfm_add_sub_ff_input_register[5])) ;
  assign x__h30033 =
	     inst_spfm_add_sub_ff_input_register[49] ^
	     inst_spfm_add_sub_ff_input_register[48] ;
  assign x__h30063 =
	     inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460 &&
	     (!inst_spfm_add_sub_ff_input_register[107] ||
	      inst_spfm_add_sub_ff_input_register[59:50] != 10'd254) &&
	     (inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d459 ^
	      10'h200) <
	     10'd361 &&
	     (!inst_spfm_add_sub_ff_input_register[2] ||
	      inst_spfm_add_sub_ff_input_register[12] ||
	      inst_spfm_add_sub_ff_input_register[13]) &&
	     !inst_spfm_add_sub_ff_input_register[14] ;
  assign x__h301478 = man1__h284226 << x__h284305 ;
  assign x__h301506 = man2__h284227 << x__h292893 ;
  assign x__h301588 =
	     !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 &&
	     !lv_op2_Nan__h228538 &&
	     (!condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      !condFlags64_reswget_BITS_9_TO_5__q31[1]) &&
	     (!condFlags64_reswget_BITS_14_TO_10__q30[3] ||
	      !condFlags64_reswget_BITS_9_TO_5__q31[3]) &&
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[3]) ;
  assign x__h301603 =
	     !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 &&
	     !lv_op2_Nan__h228538 &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	     condFlags64_reswget_BITS_9_TO_5__q31[3] ;
  assign x__h301608 =
	     !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 &&
	     !lv_op2_Nan__h228538 &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	     !condFlags64_reswget_BITS_9_TO_5__q31[3] &&
	     (condFlags64_reswget_BITS_9_TO_5__q31[1] ||
	      condFlags64_reswget_BITS_14_TO_10__q30[3]) ;
  assign x__h30411 = x__h30423 | y__h30424 ;
  assign x__h30423 = _theResult_____1__h30305 & sign2__h30257 ;
  assign x__h304801 =
	     condFlags32_reswget_BITS_14_TO_10__q52[4] ?
	       exponent___1__h304830 :
	       exponent__h304244 ;
  assign x__h304832 = { 3'd0, lv_leading_zeros__h304249 } ;
  assign x__h313248 = lv_leading_zeros__h304249 - 6'd1 ;
  assign x__h313274 =
	     { IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58[24:0],
	       1'd0 } ;
  assign x__h313518 = x__h313520 + 9'd63 ;
  assign x__h313520 =
	     { 1'd0,
	       IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5806[8:1] } ;
  assign x__h315391 =
	     condFlags64_reswget_BITS_14_TO_10__q30[4] ?
	       exponent___1__h315420 :
	       lv_exp__h251175 ;
  assign x__h315422 = { 5'd0, lv_leading_zeros__h314840 } ;
  assign x__h333176 = lv_leading_zeros__h314840 - 7'd1 ;
  assign x__h333202 =
	     { IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q37[53:0],
	       1'd0 } ;
  assign x__h333446 = x__h333448 + 12'd511 ;
  assign x__h333448 =
	     { 1'd0,
	       IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5982[11:1] } ;
  assign x__h342407 = ff_input_D_OUT[13] ^ ff_input_D_OUT[14] ;
  assign x__h46575 =
	     mantissa_to_shift__h30294[0] ?
	       7'd0 :
	       (mantissa_to_shift__h30294[1] ?
		  7'd1 :
		  (mantissa_to_shift__h30294[2] ?
		     7'd2 :
		     (mantissa_to_shift__h30294[3] ?
			7'd3 :
			(mantissa_to_shift__h30294[4] ?
			   7'd4 :
			   (mantissa_to_shift__h30294[5] ?
			      7'd5 :
			      (mantissa_to_shift__h30294[6] ?
				 7'd6 :
				 (mantissa_to_shift__h30294[7] ?
				    7'd7 :
				    (mantissa_to_shift__h30294[8] ?
				       7'd8 :
				       (mantissa_to_shift__h30294[9] ?
					  7'd9 :
					  (mantissa_to_shift__h30294[10] ?
					     7'd10 :
					     (mantissa_to_shift__h30294[11] ?
						7'd11 :
						(mantissa_to_shift__h30294[12] ?
						   7'd12 :
						   (mantissa_to_shift__h30294[13] ?
						      7'd13 :
						      (mantissa_to_shift__h30294[14] ?
							 7'd14 :
							 (mantissa_to_shift__h30294[15] ?
							    7'd15 :
							    (mantissa_to_shift__h30294[16] ?
							       7'd16 :
							       (mantissa_to_shift__h30294[17] ?
								  7'd17 :
								  (mantissa_to_shift__h30294[18] ?
								     7'd18 :
								     (mantissa_to_shift__h30294[19] ?
									7'd19 :
									(mantissa_to_shift__h30294[20] ?
									   7'd20 :
									   (mantissa_to_shift__h30294[21] ?
									      7'd21 :
									      (mantissa_to_shift__h30294[22] ?
										 7'd22 :
										 (mantissa_to_shift__h30294[23] ?
										    7'd23 :
										    (mantissa_to_shift__h30294[24] ?
										       7'd24 :
										       (mantissa_to_shift__h30294[25] ?
											  7'd25 :
											  (mantissa_to_shift__h30294[26] ?
											     7'd26 :
											     (mantissa_to_shift__h30294[27] ?
												7'd27 :
												(mantissa_to_shift__h30294[28] ?
												   7'd28 :
												   (mantissa_to_shift__h30294[29] ?
												      7'd29 :
												      (mantissa_to_shift__h30294[30] ?
													 7'd30 :
													 (mantissa_to_shift__h30294[31] ?
													    7'd31 :
													    (mantissa_to_shift__h30294[32] ?
													       7'd32 :
													       (mantissa_to_shift__h30294[33] ?
														  7'd33 :
														  (mantissa_to_shift__h30294[34] ?
														     7'd34 :
														     (mantissa_to_shift__h30294[35] ?
															7'd35 :
															(mantissa_to_shift__h30294[36] ?
															   7'd36 :
															   (mantissa_to_shift__h30294[37] ?
															      7'd37 :
															      (mantissa_to_shift__h30294[38] ?
																 7'd38 :
																 (mantissa_to_shift__h30294[39] ?
																    7'd39 :
																    (mantissa_to_shift__h30294[40] ?
																       7'd40 :
																       (mantissa_to_shift__h30294[41] ?
																	  7'd41 :
																	  (mantissa_to_shift__h30294[42] ?
																	     7'd42 :
																	     (mantissa_to_shift__h30294[43] ?
																		7'd43 :
																		(mantissa_to_shift__h30294[44] ?
																		   7'd44 :
																		   (mantissa_to_shift__h30294[45] ?
																		      7'd45 :
																		      (mantissa_to_shift__h30294[46] ?
																			 7'd46 :
																			 (mantissa_to_shift__h30294[47] ?
																			    7'd47 :
																			    (mantissa_to_shift__h30294[48] ?
																			       7'd48 :
																			       (mantissa_to_shift__h30294[49] ?
																				  7'd49 :
																				  (mantissa_to_shift__h30294[50] ?
																				     7'd50 :
																				     (mantissa_to_shift__h30294[51] ?
																					7'd51 :
																					(mantissa_to_shift__h30294[52] ?
																					   7'd52 :
																					   (mantissa_to_shift__h30294[53] ?
																					      7'd53 :
																					      (mantissa_to_shift__h30294[54] ?
																						 7'd54 :
																						 (mantissa_to_shift__h30294[55] ?
																						    7'd55 :
																						    (mantissa_to_shift__h30294[56] ?
																						       7'd56 :
																						       (mantissa_to_shift__h30294[57] ?
																							  7'd57 :
																							  (mantissa_to_shift__h30294[58] ?
																							     7'd58 :
																							     (mantissa_to_shift__h30294[59] ?
																								7'd59 :
																								(mantissa_to_shift__h30294[60] ?
																								   7'd60 :
																								   (mantissa_to_shift__h30294[61] ?
																								      7'd61 :
																								      (mantissa_to_shift__h30294[62] ?
																									 7'd62 :
																									 (mantissa_to_shift__h30294[63] ?
																									    7'd63 :
																									    (mantissa_to_shift__h30294[64] ?
																									       7'd64 :
																									       (mantissa_to_shift__h30294[65] ?
																										  7'd65 :
																										  (mantissa_to_shift__h30294[66] ?
																										     7'd66 :
																										     (mantissa_to_shift__h30294[67] ?
																											7'd67 :
																											(mantissa_to_shift__h30294[68] ?
																											   7'd68 :
																											   (mantissa_to_shift__h30294[69] ?
																											      7'd69 :
																											      (mantissa_to_shift__h30294[70] ?
																												 7'd70 :
																												 (mantissa_to_shift__h30294[71] ?
																												    7'd71 :
																												    (mantissa_to_shift__h30294[72] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h53141 = ~_theResult_____1__h30305 ;
  assign x__h53148 =
	     inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 ||
	     inst_spfm_add_sub_ff_stage2[6] ||
	     (!inst_spfm_add_sub_ff_stage2[16] ||
	      !inst_spfm_add_sub_ff_stage2[5]) &&
	     inst_spfm_add_sub_ff_stage2[4] &&
	     inst_spfm_add_sub_ff_stage2[14] &&
	     x__h53256 ;
  assign x__h53256 = sign2__h30257 ^ op_xor_sign3__h30270 ;
  assign x__h53264 =
	     (inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 ||
	      inst_spfm_add_sub_ff_stage2[6] ||
	      inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       2'd0 :
	       _theResult_____6_snd_snd__h53221 ;
  assign x__h53296 = x__h53298 & sign2__h30257 ;
  assign x__h53298 = inst_spfm_add_sub_ff_stage2[4] & y__h53299 ;
  assign x__h53300 = x__h53301 & inst_spfm_add_sub_ff_stage2[14] ;
  assign x__h53301 = ~inst_spfm_add_sub_ff_stage2[4] ;
  assign x__h53305 =
	     (inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 ||
	      inst_spfm_add_sub_ff_stage2[6]) ?
	       2'd0 :
	       _theResult_____6_snd_snd_snd__h53268 ;
  assign x__h53329 = x__h53341 & y__h53342 ;
  assign x__h53341 =
	     (inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 ||
	      inst_spfm_add_sub_ff_stage2[6] ||
	      inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       inst_spfm_add_sub_ff_stage2[1] :
	       _theResult_____6_fst__h53218 ;
  assign x__h53371 =
	     (inst_spfm_add_sub_ff_stage2[1] ||
	      !inst_spfm_add_sub_ff_stage2[6]) &&
	     inst_spfm_add_sub_ff_stage2[15] ;
  assign x__h53564 =
	     (_theResult____h53487 == 73'd0) ?
	       ((inst_spfm_add_sub_ff_stage4[12:10] == 3'b010) ?
		  2'b11 :
		  2'b01) :
	       2'd0 ;
  assign x__h5459 = { _denominator__h5394, 2'b0, _numerator__h5395, 27'd0 } ;
  assign x__h66094 = inst_spfm_add_sub_ff_stage5[6:0] - 7'd1 ;
  assign x__h66115 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[48] |
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[46] ;
  assign x__h66197 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[47] |
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[46] ;
  assign x__h71496 =
	     { _denominator__h71431, 2'b0, _numerator__h71432, 56'd0 } ;
  assign x__h87341 =
	     inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447 &&
	     inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1448 ;
  assign x__h87346 =
	     (!inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447 ||
	      inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1448 ||
	      _1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1450) ?
	       x_wget__h66759[0] :
	       lv_sticky___1__h73084 ;
  assign x__h87575 = _theResult____h87413 | inst_dpfpu_divider_rg_stage3[85] ;
  assign x__h87725 = inst_dpfpu_divider_rg_stage3[84] | _theResult____h87413 ;
  assign x__h87760 = x__h87762 | _theResult____h87413 ;
  assign x__h87762 =
	     inst_dpfpu_divider_rg_stage3[85] |
	     inst_dpfpu_divider_rg_stage3[84] ;
  assign x__h89297 =
	     { inst_dpfpu_sqrt_rg_inter_stage[182:130],
	       !_theResult____h89251[57],
	       1'd0 } ;
  assign x__h89560 =
	     { inst_dpfpu_sqrt_rg_inter_stage[56:3],
	       !_theResult____h89251[57] } ;
  assign x__h89958 =
	     inst_dpfpu_sqrt_rg_inter_stage[131] | !_theResult____h89251[57] ;
  assign x__h89999 =
	     _theResult____h89251[57] ?
	       lv_remainder__h90021 :
	       _theResult____h89251 ;
  assign x__h90073 =
	     inst_dpfpu_sqrt_rg_inter_stage[130] | !_theResult____h89251[57] ;
  assign x_data__h225979 =
	     ff_input_D_OUT[8] ?
	       { 32'hFFFFFFFF, _theResult_____3_fst__h226656 } :
	       { 32'd0, _theResult_____3_fst__h226034 } ;
  assign x_data__h228557 =
	     ff_input_D_OUT[8] ?
	       _theResult_____3_fst__h229203 :
	       _theResult_____3_fst__h228587 ;
  assign x_data__h229540 =
	     { 32'hFFFFFFFF, x1_avValue_final_result__h220800 } ;
  assign x_data__h229696 =
	     (ff_input_D_OUT[208:145] == 64'd0 && ff_input_D_OUT[2] ||
	      ff_input_D_OUT[176:145] == 32'd0 && !ff_input_D_OUT[2]) ?
	       64'b0 :
	       _theResult___snd_final_result__h220915 ;
  assign x_data__h245869 =
	     { 32'hFFFFFFFF, x1_avValue_final_result__h245858 } ;
  assign x_data__h246173 =
	     { CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q7,
	       ff_input_D_OUT[207:145] } ;
  assign x_data__h248137 =
	     (!condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	      NOT_IF_condFlags32_res_whas__343_THEN_condFlag_ETC___d3844) ?
	       _theResult_____3_fst__h248731 :
	       final_result__h248108 ;
  assign x_data__h251209 =
	     (!condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	      NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d4012) ?
	       _theResult_____3_fst__h251806 :
	       final_result__h251180 ;
  assign x_data__h258135 =
	     condFlags32_reswget_BITS_14_TO_10__q52[3] ?
	       { setCanonicalNaN_reswget_BITS_95_TO_64__q41[31], 63'b0 } :
	       IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d4426 ;
  assign x_data__h265328 =
	     { 32'hFFFFFFFF,
	       condFlags64_reswget_BITS_14_TO_10__q30[3] ?
		 { ff_input_D_OUT[208], 31'b0 } :
		 IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4363 } ;
  assign x_data__h265400 =
	     (ff_input_D_OUT[12:6] == 7'b1110000) ?
	       final_result__h265404 :
	       final_result__h265427 ;
  assign x_data__h344868 =
	     { 32'hFFFFFFFF, inst_spfpu_divider_wr_final_out_wget[36:5] } ;
  assign x_data__h344992 =
	     { 32'hFFFFFFFF, inst_spfpu_sqrt_ff_final_out[36:5] } ;
  assign x_data__h345107 =
	     { 32'hFFFFFFFF, inst_spfm_add_sub_ff_final_out_wget[36:5] } ;
  assign x_fflags__h225981 =
	     ff_input_D_OUT[8] ?
	       _theResult_____3_snd__h226657 :
	       _theResult_____3_snd__h226035 ;
  assign x_fflags__h228559 =
	     ff_input_D_OUT[8] ?
	       _theResult_____3_snd__h229204 :
	       _theResult_____3_snd__h228588 ;
  assign x_fflags__h229542 =
	     (ff_input_D_OUT[208:145] == 64'd0 && ff_input_D_OUT[2] ||
	      ff_input_D_OUT[176:145] == 32'd0 && !ff_input_D_OUT[2]) ?
	       5'b0 :
	       x1_avValue_fflags__h220793 ;
  assign x_fflags__h229698 =
	     (ff_input_D_OUT[208:145] == 64'd0 || !ff_input_D_OUT[2]) ?
	       5'b0 :
	       wr_final_out_fflags__h220914 ;
  assign x_fflags__h258137 =
	     condFlags32_reswget_BITS_14_TO_10__q52[3] ?
	       5'b0 :
	       ((condFlags32_reswget_BITS_14_TO_10__q52[2] ||
		 condFlags32_reswget_BITS_14_TO_10__q52[0]) ?
		  result__h258251 :
		  5'd0) ;
  assign x_fflags__h265330 =
	     condFlags64_reswget_BITS_14_TO_10__q30[3] ?
	       5'b0 :
	       ((condFlags64_reswget_BITS_14_TO_10__q30[2] ||
		 condFlags64_reswget_BITS_14_TO_10__q30[0]) ?
		  result__h263934 :
		  IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4442) ;
  assign x_lv_exponent__h6913 =
	     (inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 &&
	      NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d246) ?
	       10'd0 :
	       _theResult___snd_fst__h14025 ;
  assign x_lv_exponent__h72950 =
	     (inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447 &&
	      NOT_inst_dpfpu_divider_rg_stage2_444_BITS_21_T_ETC___d1649) ?
	       13'd0 :
	       _theResult___snd_fst__h87283 ;
  assign x_lv_product_exponent__h17309 =
	     (!inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) ?
	       inst_spfm_add_sub_ff_input_register[59:50] :
	       _theResult___snd_snd_snd_fst__h25366 ;
  assign x_lv_product_exponent__h90562 =
	     (!inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1863 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) ?
	       inst_dpfm_add_sub_ff_input_register[94:82] :
	       _theResult___snd_snd_snd_fst__h107957 ;
  assign x_lv_product_mantissa__h17310 =
	     (!inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) ?
	       lv_product_mantissa__h17233 :
	       _theResult___snd_snd_snd_snd_fst__h25451 ;
  assign x_lv_product_mantissa__h90563 =
	     (!inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1863 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) ?
	       lv_product_mantissa__h90486 :
	       _theResult___snd_snd_snd_snd_fst__h108042 ;
  assign x_lv_quotient__h6912 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 ?
	       _theResult___fst__h7010 :
	       x_wget__h695[26:0] ;
  assign x_lv_quotient__h72949 =
	     inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447 ?
	       _theResult___fst__h73047 :
	       x_wget__h66759[55:0] ;
  assign x_wget__h195118 =
	     { fflags__h203948,
	       !inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20[31],
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5139[23] ?
		 local_expo___1__h209642 :
		 expo__h203933,
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5139[22:0] } ;
  assign x_wget__h195256 =
	     { fflags__h209820,
	       !inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21[63],
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5015[23] ?
		 local_expo___1__h220717 :
		 expo__h209805,
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5015[22:0] } ;
  assign x_wget__h66759 =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1401 } ;
  assign x_wget__h695 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d85 } ;
  assign y__h108036 = x__h108037 - 13'd1 ;
  assign y__h118177 = x__h167429 & op_xor_sign3__h118023 ;
  assign y__h14466 = x__h14467 | inst_spfpu_divider_rg_stage3[54] ;
  assign y__h14503 = ~inst_spfpu_divider_rg_stage3[12] ;
  assign y__h16422 = x__h16701 | lv_sticky__h16336 ;
  assign y__h167585 = x__h167588 & op_xor_sign3__h118023 ;
  assign y__h167587 = ~inst_dpfm_add_sub_ff_stage2[14] ;
  assign y__h167630 = ~inst_dpfm_add_sub_ff_stage2[13] ;
  assign y__h16804 = ~inst_spfpu_sqrt_rg_inter_stage[58] ;
  assign y__h194357 = x__h194497 | lv_sticky__h193915 ;
  assign y__h194593 = ~inst_dpfm_add_sub_ff_stage5[23] ;
  assign y__h209557 = x__h209558 | _theResult____h203943 ;
  assign y__h209595 =
	     ~(!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20[31]) ;
  assign y__h220632 = x__h220633 | _theResult____h209815 ;
  assign y__h220670 =
	     ~(!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21[63]) ;
  assign y__h245707 = x__h245708 | _theResult____h235104 ;
  assign y__h245744 = ~sign__h235102 ;
  assign y__h248821 = x__h249067 | lv_sticky__h248117 ;
  assign y__h249451 = ~setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign y__h251896 = x__h252142 | lv_sticky__h251189 ;
  assign y__h252524 = ~ff_input_D_OUT[208] ;
  assign y__h25445 = x__h25446 - 10'd1 ;
  assign y__h264756 =
	     x__h264794 |
	     IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313[26] ;
  assign y__h268424 = { 9'd0, lv_op2_subnormal__h268161 } ;
  assign y__h268426 = { 9'd0, lv_op1_subnormal__h268160 } ;
  assign y__h268818 = condFlags32_reswget_BITS_9_TO_5__q53[2] & y__h268864 ;
  assign y__h268820 = ~condFlags32_reswget_BITS_9_TO_5__q53[0] ;
  assign y__h268864 = ~condFlags32_reswget_BITS_14_TO_10__q52[0] ;
  assign y__h270611 = { 12'd0, lv_op2_subnormal__h270348 } ;
  assign y__h270613 = { 12'd0, lv_op1_subnormal__h270347 } ;
  assign y__h271000 = condFlags64_reswget_BITS_9_TO_5__q31[2] & y__h271046 ;
  assign y__h271002 = ~condFlags64_reswget_BITS_9_TO_5__q31[0] ;
  assign y__h271046 = ~condFlags64_reswget_BITS_14_TO_10__q30[0] ;
  assign y__h274295 = x__h274296 - y__h274297 ;
  assign y__h274297 = exp2__h274233 + y__h278221 ;
  assign y__h274298 = { 9'd0, condFlags32_reswget_BITS_14_TO_10__q52[4] } ;
  assign y__h278221 = { 9'd0, condFlags32_reswget_BITS_9_TO_5__q53[4] } ;
  assign y__h284297 = x__h284298 - y__h284299 ;
  assign y__h284299 = exp2__h284235 + y__h292892 ;
  assign y__h284300 = { 12'd0, condFlags64_reswget_BITS_14_TO_10__q30[4] } ;
  assign y__h292892 = { 12'd0, condFlags64_reswget_BITS_9_TO_5__q31[4] } ;
  assign y__h30424 = x__h53141 & op_xor_sign3__h30270 ;
  assign y__h304523 = ff_input_D_OUT[176] & y__h304544 ;
  assign y__h304544 = ~condFlags32_reswget_BITS_14_TO_10__q52[2] ;
  assign y__h304802 = x__h304832 - 9'd1 ;
  assign y__h313519 =
	     { 8'd0,
	       IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5806[0] } ;
  assign y__h315113 = ff_input_D_OUT[208] & y__h315134 ;
  assign y__h315134 = ~condFlags64_reswget_BITS_14_TO_10__q30[2] ;
  assign y__h315392 = x__h315422 - 12'd1 ;
  assign y__h333447 =
	     { 11'd0,
	       IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5982[0] } ;
  assign y__h53297 = x__h53300 & op_xor_sign3__h30270 ;
  assign y__h53299 = ~inst_spfm_add_sub_ff_stage2[14] ;
  assign y__h53342 = ~inst_spfm_add_sub_ff_stage2[13] ;
  assign y__h65975 = x__h66115 | lv_sticky__h65533 ;
  assign y__h66211 = ~inst_spfm_add_sub_ff_stage5[22] ;
  assign y__h87724 = x__h87725 | inst_dpfpu_divider_rg_stage3[86] ;
  assign y__h87761 = ~inst_dpfpu_divider_rg_stage3[12] ;
  assign y__h89679 = x__h89958 | lv_sticky__h89593 ;
  assign y__h90061 = ~inst_dpfpu_sqrt_rg_inter_stage[116] ;
  assign y_avValue_fst__h264985 =
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 ?
	       res__h264578 :
	       res___1__h265239 ;
  assign y_avValue_snd_snd_fst__h264782 =
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4306 ?
	       man__h264318 :
	       man__h264435 ;
  assign y_avValue_snd_snd_fst__h264821 =
	     man__h264318[23:0] != 24'd0 || lv_sticky__h264196 ;
  assign y_avValue_snd_snd_snd_fst__h264817 =
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4306 ?
	       y_avValue_snd_snd_fst__h264821 :
	       lv_sticky__h264196 ;
  always@(inst_spfpu_divider_rg_stage3 or
	  x__h14502 or lv_round_up___1__h14454 or lv_round_up___1__h14490)
  begin
    case (inst_spfpu_divider_rg_stage3[4:2])
      3'b0:
	  IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317 =
	      lv_round_up___1__h14454;
      3'b011:
	  IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317 =
	      lv_round_up___1__h14490;
      3'b100:
	  IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317 =
	      inst_spfpu_divider_rg_stage3[53];
      default: IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317 =
		   inst_spfpu_divider_rg_stage3[4:2] == 3'b010 &&
		   x__h14502 & inst_spfpu_divider_rg_stage3[12];
    endcase
  end
  always@(inst_spfpu_sqrt_rg_inter_stage or
	  lv_inexact__h16338 or
	  lv_roundup___1__h16410 or lv_roundup___1__h16792)
  begin
    case (inst_spfpu_sqrt_rg_inter_stage[2:0])
      3'b0:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 =
	      lv_roundup___1__h16410;
      3'b011:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 =
	      lv_roundup___1__h16792;
      3'b100:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 =
	      inst_spfpu_sqrt_rg_inter_stage[69];
      default: IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 =
		   inst_spfpu_sqrt_rg_inter_stage[2:0] == 3'b010 &&
		   lv_inexact__h16338 & inst_spfpu_sqrt_rg_inter_stage[58];
    endcase
  end
  always@(inst_spfm_add_sub_ff_stage5 or
	  lv_inexact__h65535 or
	  y__h66211 or
	  lv_round_up___1__h65963 or
	  lv_round_up___1__h66185 or
	  IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217)
  begin
    case (inst_spfm_add_sub_ff_stage5[21:19])
      3'b0:
	  IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238 =
	      lv_round_up___1__h65963;
      3'b010:
	  IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238 =
	      lv_round_up___1__h66185;
      3'b100:
	  IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238 =
	      IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[47];
      default: IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238 =
		   inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 &&
		   lv_inexact__h65535 & y__h66211;
    endcase
  end
  always@(inst_dpfpu_divider_rg_stage3 or
	  x__h87760 or lv_round_up___1__h87712 or lv_round_up___1__h87748)
  begin
    case (inst_dpfpu_divider_rg_stage3[4:2])
      3'b0:
	  IF_inst_dpfpu_divider_rg_stage3_675_BITS_4_TO__ETC___d1720 =
	      lv_round_up___1__h87712;
      3'b011:
	  IF_inst_dpfpu_divider_rg_stage3_675_BITS_4_TO__ETC___d1720 =
	      lv_round_up___1__h87748;
      3'b100:
	  IF_inst_dpfpu_divider_rg_stage3_675_BITS_4_TO__ETC___d1720 =
	      inst_dpfpu_divider_rg_stage3[85];
      default: IF_inst_dpfpu_divider_rg_stage3_675_BITS_4_TO__ETC___d1720 =
		   inst_dpfpu_divider_rg_stage3[4:2] == 3'b010 &&
		   x__h87760 & inst_dpfpu_divider_rg_stage3[12];
    endcase
  end
  always@(inst_dpfpu_sqrt_rg_inter_stage or
	  lv_inexact__h89595 or
	  lv_roundup___1__h89667 or lv_roundup___1__h90049)
  begin
    case (inst_dpfpu_sqrt_rg_inter_stage[2:0])
      3'b0:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_BI_ETC___d1833 =
	      lv_roundup___1__h89667;
      3'b011:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_BI_ETC___d1833 =
	      lv_roundup___1__h90049;
      3'b100:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_BI_ETC___d1833 =
	      inst_dpfpu_sqrt_rg_inter_stage[130];
      default: IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_BI_ETC___d1833 =
		   inst_dpfpu_sqrt_rg_inter_stage[2:0] == 3'b010 &&
		   lv_inexact__h89595 & inst_dpfpu_sqrt_rg_inter_stage[116];
    endcase
  end
  always@(inst_dpfm_add_sub_ff_stage5 or
	  lv_inexact__h193917 or
	  y__h194593 or
	  lv_round_up___1__h194345 or
	  lv_round_up___1__h194567 or
	  IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200)
  begin
    case (inst_dpfm_add_sub_ff_stage5[22:20])
      3'b0:
	  IF_inst_dpfm_add_sub_ff_stage5_read__156_BITS__ETC___d3221 =
	      lv_round_up___1__h194345;
      3'b010:
	  IF_inst_dpfm_add_sub_ff_stage5_read__156_BITS__ETC___d3221 =
	      lv_round_up___1__h194567;
      3'b100:
	  IF_inst_dpfm_add_sub_ff_stage5_read__156_BITS__ETC___d3221 =
	      IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[105];
      default: IF_inst_dpfm_add_sub_ff_stage5_read__156_BITS__ETC___d3221 =
		   inst_dpfm_add_sub_ff_stage5[22:20] == 3'b011 &&
		   lv_inexact__h193917 & y__h194593;
    endcase
  end
  always@(ff_input_D_OUT or
	  inexact__h235105 or
	  sign__h235102 or
	  lv_roundup___1__h245695 or
	  lv_roundup___1__h245731 or
	  IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3702 =
	      lv_roundup___1__h245695;
      3'b011:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3702 =
	      lv_roundup___1__h245731;
      3'b100:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3702 =
	      IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682[10];
      default: IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3702 =
		   ff_input_D_OUT[5:3] == 3'b010 &&
		   inexact__h235105 & sign__h235102;
    endcase
  end
  always@(ff_input_D_OUT or
	  ff_input_first__309_BIT_208_447_XOR_ff_input_f_ETC___d3810)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q7 =
	      ff_input_D_OUT[144];
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q7 =
	      ~ff_input_D_OUT[144];
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q7 =
		   ff_input_first__309_BIT_208_447_XOR_ff_input_f_ETC___d3810;
    endcase
  end
  always@(inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget or
	  inexact__h203944 or
	  inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20 or
	  lv_roundup___1__h209545 or
	  lv_roundup___1__h209582 or
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110)
  begin
    case (inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[2:0])
      3'b0:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5135 =
	      lv_roundup___1__h209545;
      3'b011:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5135 =
	      lv_roundup___1__h209582;
      3'b100:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5135 =
	      IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110[7];
      default: IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5135 =
		   inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[2:0] == 3'b010 &&
		   inexact__h203944 &
		   (!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
		    inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20[31]);
    endcase
  end
  always@(inst_fpu_int_to_fp_fcvt_s_llu_arg_wget or
	  inexact__h209816 or
	  inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21 or
	  lv_roundup___1__h220620 or
	  lv_roundup___1__h220657 or
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986)
  begin
    case (inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[2:0])
      3'b0:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5011 =
	      lv_roundup___1__h220620;
      3'b011:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5011 =
	      lv_roundup___1__h220657;
      3'b100:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5011 =
	      IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986[39];
      default: IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5011 =
		   inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[2:0] == 3'b010 &&
		   inexact__h209816 &
		   (!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
		    inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21[63]);
    endcase
  end
  always@(ff_input_D_OUT or
	  x__h264887 or
	  lv_round_up___1__h264744 or
	  lv_round_up___1__h264875 or
	  IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0: _theResult_____4___1__h264715 = lv_round_up___1__h264744;
      3'b011: _theResult_____4___1__h264715 = lv_round_up___1__h264875;
      3'b100:
	  _theResult_____4___1__h264715 =
	      IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313[25];
      default: _theResult_____4___1__h264715 =
		   ff_input_D_OUT[5:3] == 3'b010 &&
		   x__h264887 & ff_input_D_OUT[208];
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_compare_result__h228542 or
	  condFlags64_reswget_BITS_14_TO_10__q30 or
	  condFlags64_reswget_BITS_9_TO_5__q31)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q32 =
	      (lv_compare_result__h228542[0] ||
	       condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	       condFlags64_reswget_BITS_9_TO_5__q31[3]) ?
		64'd1 :
		64'd0;
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q32 =
	      (lv_compare_result__h228542 == 2'b01 &&
	       (!condFlags64_reswget_BITS_14_TO_10__q30[3] ||
		!condFlags64_reswget_BITS_9_TO_5__q31[3])) ?
		64'd1 :
		64'd0;
      3'b010:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q32 =
	      (lv_compare_result__h228542 == 2'b11 ||
	       condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	       condFlags64_reswget_BITS_9_TO_5__q31[3]) ?
		64'd1 :
		64'd0;
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q32 = 64'd0;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_inexact1__h251191 or
	  y__h252524 or
	  lv_round_up___1__h251884 or
	  lv_round_up___1__h252499 or
	  IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d4100 =
	      lv_round_up___1__h251884;
      3'b010:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d4100 =
	      lv_round_up___1__h252499;
      3'b100:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d4100 =
	      IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038[51];
      default: IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d4100 =
		   ff_input_D_OUT[5:3] == 3'b011 &&
		   lv_inexact1__h251191 & y__h252524;
    endcase
  end
  always@(ff_input_D_OUT)
  begin
    case (ff_input_D_OUT[5:3])
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q36 =
	      { ff_input_D_OUT[208], 31'h7F7FFFFF };
      3'b010:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q36 =
	      { ff_input_D_OUT[208],
		ff_input_D_OUT[208] ? 31'h7F800000 : 31'h7F7FFFFF };
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q36 =
		   { ff_input_D_OUT[208],
		     (ff_input_D_OUT[5:3] == 3'b011 && ff_input_D_OUT[208]) ?
		       31'h7F7FFFFF :
		       31'h7F800000 };
    endcase
  end
  always@(ff_input_D_OUT or
	  x__h282196 or setCanonicalNaN_reswget_BITS_63_TO_32__q42)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q43 =
	      setCanonicalNaN_reswget_BITS_63_TO_32__q42[31];
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q43 =
	      ~setCanonicalNaN_reswget_BITS_63_TO_32__q42[31];
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q43 =
		   x__h282196;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_compare_result__h225963 or
	  condFlags32_reswget_BITS_14_TO_10__q52 or
	  condFlags32_reswget_BITS_9_TO_5__q53)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q54 =
	      (lv_compare_result__h225963[0] ||
	       condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q53[3]) ?
		32'd1 :
		32'd0;
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q54 =
	      (lv_compare_result__h225963 == 2'b01 &&
	       (!condFlags32_reswget_BITS_14_TO_10__q52[3] ||
		!condFlags32_reswget_BITS_9_TO_5__q53[3])) ?
		32'd1 :
		32'd0;
      3'b010:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q54 =
	      (lv_compare_result__h225963 == 2'b11 ||
	       condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q53[3]) ?
		32'd1 :
		32'd0;
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q54 = 32'd0;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_inexact1__h248119 or
	  y__h249451 or
	  lv_round_up___1__h248809 or
	  lv_round_up___1__h249426 or
	  IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3934 =
	      lv_round_up___1__h248809;
      3'b010:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3934 =
	      lv_round_up___1__h249426;
      3'b100:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3934 =
	      IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871[22];
      default: IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3934 =
		   ff_input_D_OUT[5:3] == 3'b011 &&
		   lv_inexact1__h248119 & y__h249451;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inst_dpfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inst_dpfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_dpfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inst_dpfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	inst_dpfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	    294'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	inst_dpfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_spfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inst_spfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_spfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inst_spfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	inst_spfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	    146'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	inst_spfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_multicycle_op <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_result <= `BSV_ASSIGNMENT_DELAY
	    { 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	      6'd0 };
      end
    else
      begin
        if (inst_dpfm_add_sub_rg_state_handler_EN)
	  inst_dpfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfm_add_sub_rg_state_handler_D_IN;
	if (inst_dpfpu_divider_int_div_rg_state_EN)
	  inst_dpfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_divider_int_div_rg_state_D_IN;
	if (inst_dpfpu_divider_rg_state_handler_EN)
	  inst_dpfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_divider_rg_state_handler_D_IN;
	if (inst_dpfpu_sqrt_ff_final_out_EN)
	  inst_dpfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_ff_final_out_D_IN;
	if (inst_dpfpu_sqrt_rg_inter_stage_EN)
	  inst_dpfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_rg_inter_stage_D_IN;
	if (inst_dpfpu_sqrt_rg_state_EN)
	  inst_dpfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_rg_state_D_IN;
	if (inst_spfm_add_sub_rg_state_handler_EN)
	  inst_spfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_spfm_add_sub_rg_state_handler_D_IN;
	if (inst_spfpu_divider_int_div_rg_state_EN)
	  inst_spfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_divider_int_div_rg_state_D_IN;
	if (inst_spfpu_divider_rg_state_handler_EN)
	  inst_spfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_divider_rg_state_handler_D_IN;
	if (inst_spfpu_sqrt_ff_final_out_EN)
	  inst_spfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_ff_final_out_D_IN;
	if (inst_spfpu_sqrt_rg_inter_stage_EN)
	  inst_spfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_rg_inter_stage_D_IN;
	if (inst_spfpu_sqrt_rg_state_EN)
	  inst_spfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_rg_state_D_IN;
	if (rg_multicycle_op_EN)
	  rg_multicycle_op <= `BSV_ASSIGNMENT_DELAY rg_multicycle_op_D_IN;
	if (rg_result_EN) rg_result <= `BSV_ASSIGNMENT_DELAY rg_result_D_IN;
      end
    if (inst_dpfm_add_sub_ff_input_register_EN)
      inst_dpfm_add_sub_ff_input_register <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_input_register_D_IN;
    if (inst_dpfm_add_sub_ff_stage2_EN)
      inst_dpfm_add_sub_ff_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage2_D_IN;
    if (inst_dpfm_add_sub_ff_stage4_EN)
      inst_dpfm_add_sub_ff_stage4 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage4_D_IN;
    if (inst_dpfm_add_sub_ff_stage5_EN)
      inst_dpfm_add_sub_ff_stage5 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage5_D_IN;
    if (inst_dpfpu_divider_int_div_rg_inter_stage_EN)
      inst_dpfpu_divider_int_div_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_int_div_rg_inter_stage_D_IN;
    if (inst_dpfpu_divider_rg_stage1_EN)
      inst_dpfpu_divider_rg_stage1 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage1_D_IN;
    if (inst_dpfpu_divider_rg_stage2_EN)
      inst_dpfpu_divider_rg_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage2_D_IN;
    if (inst_dpfpu_divider_rg_stage3_EN)
      inst_dpfpu_divider_rg_stage3 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage3_D_IN;
    if (inst_spfm_add_sub_ff_input_register_EN)
      inst_spfm_add_sub_ff_input_register <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_input_register_D_IN;
    if (inst_spfm_add_sub_ff_stage2_EN)
      inst_spfm_add_sub_ff_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage2_D_IN;
    if (inst_spfm_add_sub_ff_stage4_EN)
      inst_spfm_add_sub_ff_stage4 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage4_D_IN;
    if (inst_spfm_add_sub_ff_stage5_EN)
      inst_spfm_add_sub_ff_stage5 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage5_D_IN;
    if (inst_spfpu_divider_int_div_rg_inter_stage_EN)
      inst_spfpu_divider_int_div_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_int_div_rg_inter_stage_D_IN;
    if (inst_spfpu_divider_rg_stage1_EN)
      inst_spfpu_divider_rg_stage1 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage1_D_IN;
    if (inst_spfpu_divider_rg_stage2_EN)
      inst_spfpu_divider_rg_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage2_D_IN;
    if (inst_spfpu_divider_rg_stage3_EN)
      inst_spfpu_divider_rg_stage3 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage3_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inst_dpfm_add_sub_ff_input_register =
	201'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage2 =
	204'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage4 =
	349'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage5 =
	197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_rg_state_handler = 3'h2;
    inst_dpfpu_divider_int_div_rg_inter_stage =
	170'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_int_div_rg_state = 6'h2A;
    inst_dpfpu_divider_rg_stage1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_rg_stage2 = 22'h2AAAAA;
    inst_dpfpu_divider_rg_stage3 = 139'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_rg_state_handler = 2'h2;
    inst_dpfpu_sqrt_ff_final_out = 70'h2AAAAAAAAAAAAAAAAA;
    inst_dpfpu_sqrt_rg_inter_stage =
	294'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_sqrt_rg_state = 6'h2A;
    inst_spfm_add_sub_ff_input_register = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage2 = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage4 =
	172'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage5 = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_rg_state_handler = 3'h2;
    inst_spfpu_divider_int_div_rg_inter_stage = 83'h2AAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_divider_int_div_rg_state = 6'h2A;
    inst_spfpu_divider_rg_stage1 = 67'h2AAAAAAAAAAAAAAAA;
    inst_spfpu_divider_rg_stage2 = 19'h2AAAA;
    inst_spfpu_divider_rg_stage3 = 78'h2AAAAAAAAAAAAAAAAAAA;
    inst_spfpu_divider_rg_state_handler = 2'h2;
    inst_spfpu_sqrt_ff_final_out = 38'h2AAAAAAAAA;
    inst_spfpu_sqrt_rg_inter_stage =
	146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_sqrt_rg_state = 6'h2A;
    rg_multicycle_op = 1'h0;
    rg_result = 70'h2AAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6060 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6061 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6062 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  v__h345343 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6060 ||
	   TASK_testplusargs___d6061 && TASK_testplusargs___d6062))
	$write("[%10d", v__h345343, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6060 ||
	   TASK_testplusargs___d6061 && TASK_testplusargs___d6062))
	$write("FPU: op1:%h op2:%h op3:%h",
	       _start_operand1,
	       _start_operand2,
	       _start_operand3);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6060 ||
	   TASK_testplusargs___d6061 && TASK_testplusargs___d6062))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6066 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6067 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6068 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  v__h345478 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6066 ||
	   TASK_testplusargs___d6067 && TASK_testplusargs___d6068))
	$write("[%10d", v__h345478, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6066 ||
	   TASK_testplusargs___d6067 && TASK_testplusargs___d6068))
	$write("FPU: opcode:%b f7:%h f3:%b imm:%h issp:%b",
	       _start_opcode,
	       _start_funct7,
	       _start_funct3,
	       _start_imm,
	       _start_issp);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6066 ||
	   TASK_testplusargs___d6067 && TASK_testplusargs___d6068))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_stage_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_stage_1] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_stage_1] and\n  [RL_inst_spfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_recursive_stage] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_rl_stage3)
	$display("Error: \"../src/core/fpu//fpu_divider.bsv\", line 123, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_flush]\n  and [RL_inst_spfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_rl_stage2)
	$display("Error: \"../src/core/fpu//fpu_divider.bsv\", line 123, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_flush]\n  and [RL_inst_spfpu_divider_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage3)
	$display("Error: \"../src/core/fpu//fpu_divider.bsv\", line 123, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_stage2]\n  and [RL_inst_spfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_stage2]\n  and [RL_inst_spfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_stage2]\n  and [RL_inst_spfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_sqrt_rl_inter_stage] and [RL_inst_spfpu_sqrt_rl_final_stage]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_stage_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_stage_1] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_stage_1] and\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"../src/core/fpu//integer_divider.bsv\", line 92, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3)
	$display("Error: \"../src/core/fpu//fpu_divider.bsv\", line 123, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_flush]\n  and [RL_inst_dpfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2)
	$display("Error: \"../src/core/fpu//fpu_divider.bsv\", line 123, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_flush]\n  and [RL_inst_dpfpu_divider_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3)
	$display("Error: \"../src/core/fpu//fpu_divider.bsv\", line 123, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_stage2]\n  and [RL_inst_dpfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_stage2]\n  and [RL_inst_dpfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_stage2]\n  and [RL_inst_dpfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"../src/core/fpu//fpu_sqrt.bsv\", line 113, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_sqrt_rl_inter_stage] and [RL_inst_dpfpu_sqrt_rl_final_stage]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and\n  [RL_rl_get_output_from_dpfm_add_sub] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_fm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_dpfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_spfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_divider)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and\n  [RL_rl_get_output_from_dpfpu_divider] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and\n  [RL_rl_get_output_from_dpfm_add_sub] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_fm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_dpfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_spfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_fm_add_sub] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_dpfpu_sqrt] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 122: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_sqrt] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 122: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_sqrt] and [RL_rl_get_output_from_fm_add_sub] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"../src/core/fpu//fpu.bsv\", line 215, column 152: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_fm_add_sub] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0])
	$display("sign : %b exponent %b mantissa %b rounding_mode %b flags %b",
		 ff_input_D_OUT[208],
		 getExp64_res_wget[32:22],
		 getMant64_res_wget[155:104],
		 ff_input_D_OUT[5:3],
		 condFlags64_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0])
	$display("sign : %b exponent : %b mantissa : %b flags : %b",
		 ff_input_D_OUT[208],
		 getExp64_res_wget[32:22],
		 getMant64_res_wget[155:104],
		 condFlags64_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__309_BIT_0_341_AND_NOT_IF_condF_ETC___d5150)
	$display("sign : %b exponent %b mantissa %b rounding %b flags %b",
		 ff_input_D_OUT[208],
		 getExp64_res_wget[32:22],
		 getMant64_res_wget[155:104],
		 ff_input_D_OUT[5:3],
		 condFlags64_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__309_BIT_0_341_AND_NOT_IF_condF_ETC___d5150)
	$display("exponent : %d", getExp64_res_wget[32:22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d5153)
	$display("Denormal lv_sticky : %b", lv_sticky__h264196);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d5153)
	$display("lv_guard : %b shiftDist : %d", 1'd0, shiftDist__h264317);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d5153)
	$display("expo : %b man : %b", 8'd0, man__h264318);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d5159)
	$display("expo : %b man : %b", x__h264465[7:0], man__h264435);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__309_BIT_0_341_AND_NOT_IF_condF_ETC___d5150)
	$display("lv_roundup : %b", _theResult_____4___1__h264715);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__309_BIT_0_341_AND_NOT_IF_condF_ETC___d5150)
	$display("fman: %b", fman__h264915);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  !condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	  !condFlags64_reswget_BITS_14_TO_10__q30[2] &&
	  !condFlags64_reswget_BITS_14_TO_10__q30[0] &&
	  !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	  !IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4295)
	$display("overflow");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  !ff_input_D_OUT[0])
	$display("sign : %b exponent %b mantissa %b rounding_mode %b flags %b",
		 setCanonicalNaN_reswget_BITS_95_TO_64__q41[31],
		 getExp32_res_wget[23:16],
		 getMant32_res_wget[68:46],
		 ff_input_D_OUT[5:3],
		 condFlags32_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5338)
	$display("Divide_by_zero");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5460)
	$display("Divide_by_zero");
  end
  // synopsys translate_on
endmodule  // mkfpu

