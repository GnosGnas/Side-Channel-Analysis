//
// Generated by Bluespec Compiler, version 2021.07-1-gaf77efcd (build af77efcd)
//
// On Tue Dec  7 15:47:28 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_from_tlb_put               O     1 reg
// to_tlb_get                     O    63 reg
// RDY_to_tlb_get                 O     1 reg
// request_to_cache_get           O   143 reg
// RDY_request_to_cache_get       O     1 reg
// RDY_response_frm_cache_put     O     1 reg
// RDY_hold_req_put               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// from_tlb_put                   I    66 reg
// response_frm_cache_put         I    72 reg
// hold_req_put                   I   141 reg
// satp_from_csr_put              I    64
// mstatus_from_csr_put           I    64
// curr_priv_put                  I     2
// EN_from_tlb_put                I     1
// EN_response_frm_cache_put      I     1
// EN_hold_req_put                I     1
// EN_to_tlb_get                  I     1
// EN_request_to_cache_get        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkinstance(CLK,
		  RST_N,

		  from_tlb_put,
		  EN_from_tlb_put,
		  RDY_from_tlb_put,

		  EN_to_tlb_get,
		  to_tlb_get,
		  RDY_to_tlb_get,

		  EN_request_to_cache_get,
		  request_to_cache_get,
		  RDY_request_to_cache_get,

		  response_frm_cache_put,
		  EN_response_frm_cache_put,
		  RDY_response_frm_cache_put,

		  hold_req_put,
		  EN_hold_req_put,
		  RDY_hold_req_put,

		  satp_from_csr_put,

		  mstatus_from_csr_put,

		  curr_priv_put);
  input  CLK;
  input  RST_N;

  // action method from_tlb_put
  input  [65 : 0] from_tlb_put;
  input  EN_from_tlb_put;
  output RDY_from_tlb_put;

  // actionvalue method to_tlb_get
  input  EN_to_tlb_get;
  output [62 : 0] to_tlb_get;
  output RDY_to_tlb_get;

  // actionvalue method request_to_cache_get
  input  EN_request_to_cache_get;
  output [142 : 0] request_to_cache_get;
  output RDY_request_to_cache_get;

  // action method response_frm_cache_put
  input  [71 : 0] response_frm_cache_put;
  input  EN_response_frm_cache_put;
  output RDY_response_frm_cache_put;

  // action method hold_req_put
  input  [140 : 0] hold_req_put;
  input  EN_hold_req_put;
  output RDY_hold_req_put;

  // action method satp_from_csr_put
  input  [63 : 0] satp_from_csr_put;

  // action method mstatus_from_csr_put
  input  [63 : 0] mstatus_from_csr_put;

  // action method curr_priv_put
  input  [1 : 0] curr_priv_put;

  // signals for module outputs
  wire [142 : 0] request_to_cache_get;
  wire [62 : 0] to_tlb_get;
  wire RDY_from_tlb_put,
       RDY_hold_req_put,
       RDY_request_to_cache_get,
       RDY_response_frm_cache_put,
       RDY_to_tlb_get;

  // inlined wires
  wire wr_deq_holding_ff_whas;

  // register rg_a
  reg [55 : 0] rg_a;
  wire [55 : 0] rg_a_D_IN;
  wire rg_a_EN;

  // register rg_hold_epoch
  reg rg_hold_epoch;
  wire rg_hold_epoch_D_IN, rg_hold_epoch_EN;

  // register rg_levels
  reg [1 : 0] rg_levels;
  wire [1 : 0] rg_levels_D_IN;
  wire rg_levels_EN;

  // register rg_state
  reg [1 : 0] rg_state;
  reg [1 : 0] rg_state_D_IN;
  wire rg_state_EN;

  // ports of submodule ff_hold_req
  wire [140 : 0] ff_hold_req_D_IN, ff_hold_req_D_OUT;
  wire ff_hold_req_CLR,
       ff_hold_req_DEQ,
       ff_hold_req_EMPTY_N,
       ff_hold_req_ENQ,
       ff_hold_req_FULL_N;

  // ports of submodule ff_memory_req
  reg [142 : 0] ff_memory_req_D_IN;
  wire [142 : 0] ff_memory_req_D_OUT;
  wire ff_memory_req_CLR,
       ff_memory_req_DEQ,
       ff_memory_req_EMPTY_N,
       ff_memory_req_ENQ,
       ff_memory_req_FULL_N;

  // ports of submodule ff_memory_response
  wire [71 : 0] ff_memory_response_D_IN, ff_memory_response_D_OUT;
  wire ff_memory_response_CLR,
       ff_memory_response_DEQ,
       ff_memory_response_EMPTY_N,
       ff_memory_response_ENQ,
       ff_memory_response_FULL_N;

  // ports of submodule ff_req_queue
  wire [65 : 0] ff_req_queue_D_IN, ff_req_queue_D_OUT;
  wire ff_req_queue_CLR,
       ff_req_queue_DEQ,
       ff_req_queue_EMPTY_N,
       ff_req_queue_ENQ,
       ff_req_queue_FULL_N;

  // ports of submodule ff_response
  wire [62 : 0] ff_response_D_IN, ff_response_D_OUT;
  wire ff_response_CLR,
       ff_response_DEQ,
       ff_response_EMPTY_N,
       ff_response_ENQ,
       ff_response_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_check_pte,
       CAN_FIRE_RL_deq_holding_fifo,
       CAN_FIRE_RL_generate_pte,
       CAN_FIRE_RL_resend_core_req_to_cache,
       CAN_FIRE_curr_priv_put,
       CAN_FIRE_from_tlb_put,
       CAN_FIRE_hold_req_put,
       CAN_FIRE_mstatus_from_csr_put,
       CAN_FIRE_request_to_cache_get,
       CAN_FIRE_response_frm_cache_put,
       CAN_FIRE_satp_from_csr_put,
       CAN_FIRE_to_tlb_get,
       WILL_FIRE_RL_check_pte,
       WILL_FIRE_RL_deq_holding_fifo,
       WILL_FIRE_RL_generate_pte,
       WILL_FIRE_RL_resend_core_req_to_cache,
       WILL_FIRE_curr_priv_put,
       WILL_FIRE_from_tlb_put,
       WILL_FIRE_hold_req_put,
       WILL_FIRE_mstatus_from_csr_put,
       WILL_FIRE_request_to_cache_get,
       WILL_FIRE_response_frm_cache_put,
       WILL_FIRE_satp_from_csr_put,
       WILL_FIRE_to_tlb_get;

  // inputs to muxes for submodule ports
  wire [142 : 0] MUX_ff_memory_req_enq_1__VAL_1,
		 MUX_ff_memory_req_enq_1__VAL_2,
		 MUX_ff_memory_req_enq_1__VAL_3;
  wire [1 : 0] MUX_rg_state_write_1__VAL_1;
  wire MUX_ff_memory_req_enq_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d9;
  reg TASK_testplusargs___d10;
  reg TASK_testplusargs___d11;
  reg [63 : 0] v__h1041;
  reg TASK_testplusargs___d44;
  reg TASK_testplusargs___d45;
  reg TASK_testplusargs___d46;
  reg [63 : 0] v__h1404;
  reg TASK_testplusargs___d53;
  reg TASK_testplusargs___d54;
  reg TASK_testplusargs___d55;
  reg [63 : 0] v__h1566;
  reg TASK_testplusargs___d96;
  reg TASK_testplusargs___d97;
  reg TASK_testplusargs___d98;
  reg [63 : 0] v__h1953;
  reg TASK_testplusargs___d110;
  reg TASK_testplusargs___d111;
  reg TASK_testplusargs___d112;
  reg [63 : 0] v__h2137;
  reg TASK_testplusargs___d116;
  reg TASK_testplusargs___d117;
  reg TASK_testplusargs___d118;
  reg [63 : 0] v__h2315;
  reg TASK_testplusargs___d272;
  reg TASK_testplusargs___d273;
  reg TASK_testplusargs___d274;
  reg [63 : 0] v__h3135;
  reg TASK_testplusargs___d326;
  reg TASK_testplusargs___d327;
  reg TASK_testplusargs___d328;
  reg [63 : 0] v__h3677;
  reg TASK_testplusargs___d357;
  reg TASK_testplusargs___d358;
  reg TASK_testplusargs___d359;
  reg [63 : 0] v__h3799;
  reg NOT_ff_memory_response_first__02_BIT_9_26_28_A_ETC___d331;
  reg ff_memory_response_first__02_BIT_9_26_OR_ff_me_ETC___d362;
  reg TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d18;
  reg TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d20;
  reg TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d27;
  reg TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d29;
  reg TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d105;
  reg TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d107;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d123;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d125;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d127;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d129;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d131;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d133;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d135;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d137;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d139;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d141;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d143;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d145;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d147;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d149;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d151;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d153;
  reg NOT_ff_memory_response_first__02_BIT_8_22_24_O_ETC___d277;
  reg ff_memory_response_first__02_BIT_8_22_AND_ff_m_ETC___d363;
  // synopsys translate_on

  // remaining internal signals
  reg [8 : 0] CASE_rg_levels_0_ff_req_queueD_OUT_BITS_22_TO_ETC__q1;
  reg [5 : 0] cause___1__h3197, cause___1__h3218;
  wire [63 : 0] x_address__h1833, x_writedata__h1838, x_writedata__h3363;
  wire [55 : 0] a__h1498, pte_address__h1499, x__h3543;
  wire [11 : 0] x__h1681;
  wire [6 : 0] IF_NOT_ff_memory_response_first__02_BIT_8_22_2_ETC___d252;
  wire [5 : 0] IF_NOT_ff_memory_response_first__02_BIT_8_22_2_ETC___d249,
	       _theResult_____1__h3049;
  wire [1 : 0] max_levels__h1497, priv__h2248, x__h3260;
  wire IF_IF_wr_mstatus_whas__5_THEN_wr_mstatus_wget__ETC___d197,
       IF_IF_wr_mstatus_whas__5_THEN_wr_mstatus_wget__ETC___d257,
       NOT_ff_memory_response_first__02_BIT_8_22_24_O_ETC___d204,
       NOT_ff_memory_response_first__02_BIT_8_22_24_O_ETC___d279,
       NOT_ff_req_queue_first__0_BITS_1_TO_0_2_EQ_0_9_ETC___d347,
       NOT_ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_9_ETC___d238,
       NOT_ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_9_ETC___d345,
       NOT_rg_levels_9_EQ_0_55_86_OR_ff_memory_respon_ETC___d353,
       NOT_rg_levels_9_EQ_1_56_89_OR_ff_memory_respon_ETC___d318,
       NOT_rg_levels_9_EQ_1_56_89_OR_ff_memory_respon_ETC___d351,
       _dand1ff_req_queue_EN_deq,
       ff_memory_response_first__02_BIT_8_22_AND_ff_m_ETC___d321,
       ff_req_queue_first__0_BITS_1_TO_0_2_EQ_0_91_AN_ETC___d236,
       ff_req_queue_first__0_BITS_1_TO_0_2_EQ_2_73_OR_ETC___d199,
       ff_req_queue_first__0_BITS_1_TO_0_2_EQ_2_73_OR_ETC___d259,
       ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_92_AN_ETC___d234,
       ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_92_OR_ETC___d307,
       ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_92_OR_ETC___d315,
       ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_92_OR_ETC___d349,
       rg_levels_9_EQ_0_55_AND_NOT_ff_memory_response_ETC___d242,
       rg_levels_9_EQ_0_55_AND_NOT_ff_memory_response_ETC___d262,
       rg_levels_9_EQ_1_56_AND_NOT_ff_memory_response_ETC___d240;

  // action method from_tlb_put
  assign RDY_from_tlb_put = ff_req_queue_FULL_N ;
  assign CAN_FIRE_from_tlb_put = ff_req_queue_FULL_N ;
  assign WILL_FIRE_from_tlb_put = EN_from_tlb_put ;

  // actionvalue method to_tlb_get
  assign to_tlb_get = ff_response_D_OUT ;
  assign RDY_to_tlb_get = ff_response_EMPTY_N ;
  assign CAN_FIRE_to_tlb_get = ff_response_EMPTY_N ;
  assign WILL_FIRE_to_tlb_get = EN_to_tlb_get ;

  // actionvalue method request_to_cache_get
  assign request_to_cache_get = ff_memory_req_D_OUT ;
  assign RDY_request_to_cache_get = ff_memory_req_EMPTY_N ;
  assign CAN_FIRE_request_to_cache_get = ff_memory_req_EMPTY_N ;
  assign WILL_FIRE_request_to_cache_get = EN_request_to_cache_get ;

  // action method response_frm_cache_put
  assign RDY_response_frm_cache_put = ff_memory_response_FULL_N ;
  assign CAN_FIRE_response_frm_cache_put = ff_memory_response_FULL_N ;
  assign WILL_FIRE_response_frm_cache_put = EN_response_frm_cache_put ;

  // action method hold_req_put
  assign RDY_hold_req_put = ff_hold_req_FULL_N ;
  assign CAN_FIRE_hold_req_put = ff_hold_req_FULL_N ;
  assign WILL_FIRE_hold_req_put = EN_hold_req_put ;

  // action method satp_from_csr_put
  assign CAN_FIRE_satp_from_csr_put = 1'd1 ;
  assign WILL_FIRE_satp_from_csr_put = 1'd1 ;

  // action method mstatus_from_csr_put
  assign CAN_FIRE_mstatus_from_csr_put = 1'd1 ;
  assign WILL_FIRE_mstatus_from_csr_put = 1'd1 ;

  // action method curr_priv_put
  assign CAN_FIRE_curr_priv_put = 1'd1 ;
  assign WILL_FIRE_curr_priv_put = 1'd1 ;

  // submodule ff_hold_req
  FIFO1 #(.width(32'd141), .guarded(1'd1)) ff_hold_req(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ff_hold_req_D_IN),
						       .ENQ(ff_hold_req_ENQ),
						       .DEQ(ff_hold_req_DEQ),
						       .CLR(ff_hold_req_CLR),
						       .D_OUT(ff_hold_req_D_OUT),
						       .FULL_N(ff_hold_req_FULL_N),
						       .EMPTY_N(ff_hold_req_EMPTY_N));

  // submodule ff_memory_req
  FIFO2 #(.width(32'd143), .guarded(1'd1)) ff_memory_req(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ff_memory_req_D_IN),
							 .ENQ(ff_memory_req_ENQ),
							 .DEQ(ff_memory_req_DEQ),
							 .CLR(ff_memory_req_CLR),
							 .D_OUT(ff_memory_req_D_OUT),
							 .FULL_N(ff_memory_req_FULL_N),
							 .EMPTY_N(ff_memory_req_EMPTY_N));

  // submodule ff_memory_response
  FIFO2 #(.width(32'd72), .guarded(1'd1)) ff_memory_response(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ff_memory_response_D_IN),
							     .ENQ(ff_memory_response_ENQ),
							     .DEQ(ff_memory_response_DEQ),
							     .CLR(ff_memory_response_CLR),
							     .D_OUT(ff_memory_response_D_OUT),
							     .FULL_N(ff_memory_response_FULL_N),
							     .EMPTY_N(ff_memory_response_EMPTY_N));

  // submodule ff_req_queue
  FIFO2 #(.width(32'd66), .guarded(1'd1)) ff_req_queue(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ff_req_queue_D_IN),
						       .ENQ(ff_req_queue_ENQ),
						       .DEQ(ff_req_queue_DEQ),
						       .CLR(ff_req_queue_CLR),
						       .D_OUT(ff_req_queue_D_OUT),
						       .FULL_N(ff_req_queue_FULL_N),
						       .EMPTY_N(ff_req_queue_EMPTY_N));

  // submodule ff_response
  FIFO2 #(.width(32'd63), .guarded(1'd1)) ff_response(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(ff_response_D_IN),
						      .ENQ(ff_response_ENQ),
						      .DEQ(ff_response_DEQ),
						      .CLR(ff_response_CLR),
						      .D_OUT(ff_response_D_OUT),
						      .FULL_N(ff_response_FULL_N),
						      .EMPTY_N(ff_response_EMPTY_N));

  // rule RL_resend_core_req_to_cache
  assign CAN_FIRE_RL_resend_core_req_to_cache =
	     ff_hold_req_EMPTY_N && ff_memory_req_FULL_N &&
	     ff_req_queue_EMPTY_N &&
	     rg_state == 2'd0 ;
  assign WILL_FIRE_RL_resend_core_req_to_cache =
	     CAN_FIRE_RL_resend_core_req_to_cache ;

  // rule RL_generate_pte
  assign CAN_FIRE_RL_generate_pte =
	     ff_memory_req_FULL_N && ff_req_queue_EMPTY_N &&
	     rg_state == 2'd2 ;
  assign WILL_FIRE_RL_generate_pte = CAN_FIRE_RL_generate_pte ;

  // rule RL_check_pte
  assign CAN_FIRE_RL_check_pte =
	     ff_memory_response_EMPTY_N && ff_req_queue_EMPTY_N &&
	     ff_response_FULL_N &&
	     ff_memory_req_FULL_N &&
	     rg_state == 2'd1 ;
  assign WILL_FIRE_RL_check_pte = CAN_FIRE_RL_check_pte ;

  // rule RL_deq_holding_fifo
  assign CAN_FIRE_RL_deq_holding_fifo =
	     ff_hold_req_EMPTY_N && wr_deq_holding_ff_whas ;
  assign WILL_FIRE_RL_deq_holding_fifo = CAN_FIRE_RL_deq_holding_fifo ;

  // inputs to muxes for submodule ports
  assign MUX_ff_memory_req_enq_1__SEL_1 =
	     WILL_FIRE_RL_check_pte &&
	     NOT_ff_memory_response_first__02_BIT_8_22_24_O_ETC___d279 ;
  assign MUX_ff_memory_req_enq_1__VAL_1 =
	     { ff_req_queue_D_OUT[65:2],
	       rg_hold_epoch,
	       6'd24,
	       x_writedata__h3363,
	       5'bxxxxx /* unspecified value */ ,
	       3'd1 } ;
  assign MUX_ff_memory_req_enq_1__VAL_2 =
	     { ff_hold_req_D_OUT[140:77],
	       ff_hold_req_D_OUT[75],
	       ff_hold_req_D_OUT[72:70],
	       1'd0,
	       ff_hold_req_D_OUT[74:73],
	       ff_hold_req_D_OUT[69:1],
	       3'd0 } ;
  assign MUX_ff_memory_req_enq_1__VAL_3 =
	     { x_address__h1833,
	       rg_hold_epoch,
	       6'd24,
	       x_writedata__h1838,
	       5'bxxxxx /* unspecified value */ ,
	       3'd2 } ;
  assign MUX_rg_state_write_1__VAL_1 =
	     (!ff_memory_response_D_OUT[8] ||
	      !ff_memory_response_D_OUT[9] && ff_memory_response_D_OUT[10] ||
	      rg_levels_9_EQ_0_55_AND_NOT_ff_memory_response_ETC___d262 ||
	      ff_memory_response_D_OUT[7] ||
	      !ff_memory_response_D_OUT[9] && !ff_memory_response_D_OUT[11] ||
	      ff_req_queue_D_OUT[1:0] == 2'd3) ?
	       2'd2 :
	       2'd0 ;

  // inlined wires
  assign wr_deq_holding_ff_whas =
	     WILL_FIRE_RL_check_pte &&
	     NOT_ff_memory_response_first__02_BIT_8_22_24_O_ETC___d279 ||
	     WILL_FIRE_RL_resend_core_req_to_cache ;

  // register rg_a
  assign rg_a_D_IN = x__h3543 ;
  assign rg_a_EN =
	     WILL_FIRE_RL_check_pte &&
	     ff_memory_response_first__02_BIT_8_22_AND_ff_m_ETC___d321 &&
	     !ff_memory_response_D_OUT[7] &&
	     !ff_memory_response_D_OUT[9] &&
	     !ff_memory_response_D_OUT[11] ;

  // register rg_hold_epoch
  assign rg_hold_epoch_D_IN = hold_req_put[75] ;
  assign rg_hold_epoch_EN = EN_hold_req_put ;

  // register rg_levels
  assign rg_levels_D_IN =
	     (!ff_memory_response_D_OUT[8] ||
	      !ff_memory_response_D_OUT[9] && ff_memory_response_D_OUT[10] ||
	      rg_levels_9_EQ_0_55_AND_NOT_ff_memory_response_ETC___d242 ||
	      ff_memory_response_D_OUT[7]) ?
	       max_levels__h1497 :
	       ((!ff_memory_response_D_OUT[9] &&
		 !ff_memory_response_D_OUT[11]) ?
		  x__h3260 :
		  max_levels__h1497) ;
  assign rg_levels_EN = CAN_FIRE_RL_check_pte ;

  // register rg_state
  always@(WILL_FIRE_RL_check_pte or
	  MUX_rg_state_write_1__VAL_1 or
	  WILL_FIRE_RL_generate_pte or WILL_FIRE_RL_resend_core_req_to_cache)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_check_pte: rg_state_D_IN = MUX_rg_state_write_1__VAL_1;
      WILL_FIRE_RL_generate_pte: rg_state_D_IN = 2'd1;
      WILL_FIRE_RL_resend_core_req_to_cache: rg_state_D_IN = 2'd2;
      default: rg_state_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign rg_state_EN =
	     WILL_FIRE_RL_check_pte || WILL_FIRE_RL_generate_pte ||
	     WILL_FIRE_RL_resend_core_req_to_cache ;

  // submodule ff_hold_req
  assign ff_hold_req_D_IN = hold_req_put ;
  assign ff_hold_req_ENQ = EN_hold_req_put ;
  assign ff_hold_req_DEQ = CAN_FIRE_RL_deq_holding_fifo ;
  assign ff_hold_req_CLR = 1'b0 ;

  // submodule ff_memory_req
  always@(MUX_ff_memory_req_enq_1__SEL_1 or
	  MUX_ff_memory_req_enq_1__VAL_1 or
	  WILL_FIRE_RL_resend_core_req_to_cache or
	  MUX_ff_memory_req_enq_1__VAL_2 or
	  WILL_FIRE_RL_generate_pte or MUX_ff_memory_req_enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_memory_req_enq_1__SEL_1:
	  ff_memory_req_D_IN = MUX_ff_memory_req_enq_1__VAL_1;
      WILL_FIRE_RL_resend_core_req_to_cache:
	  ff_memory_req_D_IN = MUX_ff_memory_req_enq_1__VAL_2;
      WILL_FIRE_RL_generate_pte:
	  ff_memory_req_D_IN = MUX_ff_memory_req_enq_1__VAL_3;
      default: ff_memory_req_D_IN =
		   143'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign ff_memory_req_ENQ =
	     WILL_FIRE_RL_check_pte &&
	     NOT_ff_memory_response_first__02_BIT_8_22_24_O_ETC___d279 ||
	     WILL_FIRE_RL_resend_core_req_to_cache ||
	     WILL_FIRE_RL_generate_pte ;
  assign ff_memory_req_DEQ = EN_request_to_cache_get ;
  assign ff_memory_req_CLR = 1'b0 ;

  // submodule ff_memory_response
  assign ff_memory_response_D_IN = response_frm_cache_put ;
  assign ff_memory_response_ENQ = EN_response_frm_cache_put ;
  assign ff_memory_response_DEQ = CAN_FIRE_RL_check_pte ;
  assign ff_memory_response_CLR = 1'b0 ;

  // submodule ff_req_queue
  assign ff_req_queue_D_IN = from_tlb_put ;
  assign ff_req_queue_ENQ = EN_from_tlb_put ;
  assign ff_req_queue_DEQ =
	     _dand1ff_req_queue_EN_deq ||
	     WILL_FIRE_RL_resend_core_req_to_cache ;
  assign ff_req_queue_CLR = 1'b0 ;

  // submodule ff_response
  assign ff_response_D_IN =
	     { ff_memory_response_D_OUT[61:8],
	       rg_levels,
	       IF_NOT_ff_memory_response_first__02_BIT_8_22_2_ETC___d252 } ;
  assign ff_response_ENQ =
	     WILL_FIRE_RL_check_pte &&
	     (NOT_ff_memory_response_first__02_BIT_8_22_24_O_ETC___d204 ||
	      ff_memory_response_D_OUT[9] ||
	      ff_memory_response_D_OUT[11]) ;
  assign ff_response_DEQ = EN_to_tlb_get ;
  assign ff_response_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_wr_mstatus_whas__5_THEN_wr_mstatus_wget__ETC___d197 =
	     priv__h2248 == 2'd1 && ff_memory_response_D_OUT[12] &&
	     !mstatus_from_csr_put[18] ||
	     ff_req_queue_D_OUT[1:0] == 2'd0 ||
	     ff_req_queue_D_OUT[1:0] == 2'd3 ||
	     !ff_memory_response_D_OUT[14] ||
	     !ff_memory_response_D_OUT[15] &&
	     (ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ff_req_queue_D_OUT[1:0] == 2'd1) ;
  assign IF_IF_wr_mstatus_whas__5_THEN_wr_mstatus_wget__ETC___d257 =
	     priv__h2248 == 2'd1 && ff_memory_response_D_OUT[12] &&
	     !mstatus_from_csr_put[18] ||
	     ff_req_queue_D_OUT[1:0] == 2'd0 &&
	     !ff_memory_response_D_OUT[9] &&
	     (!ff_memory_response_D_OUT[11] || !mstatus_from_csr_put[19]) ||
	     !ff_memory_response_D_OUT[14] ||
	     !ff_memory_response_D_OUT[15] &&
	     (ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ff_req_queue_D_OUT[1:0] == 2'd1) ;
  assign IF_NOT_ff_memory_response_first__02_BIT_8_22_2_ETC___d249 =
	     (!ff_memory_response_D_OUT[8] ||
	      !ff_memory_response_D_OUT[9] && ff_memory_response_D_OUT[10] ||
	      rg_levels_9_EQ_0_55_AND_NOT_ff_memory_response_ETC___d242) ?
	       cause___1__h3218 :
	       6'd0 ;
  assign IF_NOT_ff_memory_response_first__02_BIT_8_22_2_ETC___d252 =
	     (!ff_memory_response_D_OUT[8] ||
	      !ff_memory_response_D_OUT[9] && ff_memory_response_D_OUT[10] ||
	      rg_levels_9_EQ_0_55_AND_NOT_ff_memory_response_ETC___d242 ||
	      ff_memory_response_D_OUT[7]) ?
	       { 1'd1, _theResult_____1__h3049 } :
	       7'd0 ;
  assign NOT_ff_memory_response_first__02_BIT_8_22_24_O_ETC___d204 =
	     !ff_memory_response_D_OUT[8] || ff_memory_response_D_OUT[10] ||
	     rg_levels == 2'd0 ||
	     ff_memory_response_D_OUT[10] &&
	     (rg_levels == 2'd1 && ff_memory_response_D_OUT[26:18] != 9'd0 ||
	      rg_levels == 2'd2 && ff_memory_response_D_OUT[35:18] != 18'd0 ||
	      rg_levels == 2'd3 && ff_memory_response_D_OUT[44:18] != 27'd0 ||
	      ff_req_queue_first__0_BITS_1_TO_0_2_EQ_2_73_OR_ETC___d199) ||
	     ff_memory_response_D_OUT[7] ;
  assign NOT_ff_memory_response_first__02_BIT_8_22_24_O_ETC___d279 =
	     (!ff_memory_response_D_OUT[8] ||
	      !ff_memory_response_D_OUT[9] && ff_memory_response_D_OUT[10] ||
	      rg_levels_9_EQ_0_55_AND_NOT_ff_memory_response_ETC___d262 ||
	      ff_memory_response_D_OUT[7]) &&
	     ff_req_queue_D_OUT[1:0] != 2'd3 ;
  assign NOT_ff_req_queue_first__0_BITS_1_TO_0_2_EQ_0_9_ETC___d347 =
	     (ff_req_queue_D_OUT[1:0] != 2'd0 ||
	      ff_memory_response_D_OUT[9] ||
	      ff_memory_response_D_OUT[11] && mstatus_from_csr_put[19]) &&
	     (ff_req_queue_D_OUT[1:0] != 2'd3 ||
	      !ff_memory_response_D_OUT[11] ||
	      ff_memory_response_D_OUT[12] ||
	      curr_priv_put != 2'd0) &&
	     NOT_ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_9_ETC___d345 ;
  assign NOT_ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_9_ETC___d238 =
	     ff_req_queue_D_OUT[1:0] != 2'd3 &&
	     !ff_memory_response_D_OUT[12] &&
	     priv__h2248 == 2'd0 ||
	     ff_req_queue_D_OUT[1:0] != 2'd3 && priv__h2248 == 2'd1 &&
	     ff_memory_response_D_OUT[12] &&
	     !mstatus_from_csr_put[18] ||
	     ff_req_queue_first__0_BITS_1_TO_0_2_EQ_0_91_AN_ETC___d236 ;
  assign NOT_ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_9_ETC___d345 =
	     (ff_req_queue_D_OUT[1:0] != 2'd3 ||
	      !ff_memory_response_D_OUT[11] ||
	      !ff_memory_response_D_OUT[12] ||
	      curr_priv_put != 2'd1) &&
	     (ff_req_queue_D_OUT[1:0] != 2'd3 ||
	      ff_memory_response_D_OUT[11]) &&
	     ff_memory_response_D_OUT[14] &&
	     (ff_memory_response_D_OUT[15] ||
	      ff_req_queue_D_OUT[1:0] != 2'd2 &&
	      ff_req_queue_D_OUT[1:0] != 2'd1) ;
  assign NOT_rg_levels_9_EQ_0_55_86_OR_ff_memory_respon_ETC___d353 =
	     (rg_levels != 2'd0 || ff_memory_response_D_OUT[9] ||
	      ff_memory_response_D_OUT[11]) &&
	     (!ff_memory_response_D_OUT[11] && !ff_memory_response_D_OUT[9] &&
	      !ff_memory_response_D_OUT[10] ||
	      NOT_rg_levels_9_EQ_1_56_89_OR_ff_memory_respon_ETC___d351) ;
  assign NOT_rg_levels_9_EQ_1_56_89_OR_ff_memory_respon_ETC___d318 =
	     (rg_levels != 2'd1 || ff_memory_response_D_OUT[26:18] == 9'd0) &&
	     (rg_levels != 2'd2 ||
	      ff_memory_response_D_OUT[35:18] == 18'd0) &&
	     (rg_levels != 2'd3 ||
	      ff_memory_response_D_OUT[44:18] == 27'd0) &&
	     (ff_req_queue_D_OUT[1:0] != 2'd2 &&
	      ff_req_queue_D_OUT[1:0] != 2'd1 ||
	      ff_memory_response_D_OUT[10]) &&
	     (ff_req_queue_D_OUT[1:0] == 2'd3 ||
	      ff_memory_response_D_OUT[12] ||
	      priv__h2248 != 2'd0) &&
	     ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_92_OR_ETC___d315 ;
  assign NOT_rg_levels_9_EQ_1_56_89_OR_ff_memory_respon_ETC___d351 =
	     (rg_levels != 2'd1 || ff_memory_response_D_OUT[26:18] == 9'd0) &&
	     (rg_levels != 2'd2 ||
	      ff_memory_response_D_OUT[35:18] == 18'd0) &&
	     (rg_levels != 2'd3 ||
	      ff_memory_response_D_OUT[44:18] == 27'd0) &&
	     (ff_req_queue_D_OUT[1:0] != 2'd2 &&
	      ff_req_queue_D_OUT[1:0] != 2'd1 ||
	      ff_memory_response_D_OUT[10]) &&
	     ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_92_OR_ETC___d349 ;
  assign _dand1ff_req_queue_EN_deq =
	     WILL_FIRE_RL_check_pte &&
	     (!ff_memory_response_D_OUT[8] ||
	      !ff_memory_response_D_OUT[9] && ff_memory_response_D_OUT[10] ||
	      rg_levels_9_EQ_0_55_AND_NOT_ff_memory_response_ETC___d242 ||
	      ff_memory_response_D_OUT[7] ||
	      (ff_memory_response_D_OUT[9] || ff_memory_response_D_OUT[11]) &&
	      ff_req_queue_D_OUT[1:0] == 2'd3) ;
  assign _theResult_____1__h3049 =
	     ff_memory_response_D_OUT[7] ?
	       cause___1__h3197 :
	       IF_NOT_ff_memory_response_first__02_BIT_8_22_2_ETC___d249 ;
  assign a__h1498 =
	     (rg_levels == max_levels__h1497) ?
	       { satp_from_csr_put[43:0], 12'b0 } :
	       rg_a ;
  assign ff_memory_response_first__02_BIT_8_22_AND_ff_m_ETC___d321 =
	     ff_memory_response_D_OUT[8] &&
	     (ff_memory_response_D_OUT[9] || !ff_memory_response_D_OUT[10]) &&
	     (rg_levels != 2'd0 || ff_memory_response_D_OUT[9] ||
	      ff_memory_response_D_OUT[11]) &&
	     (!ff_memory_response_D_OUT[10] ||
	      NOT_rg_levels_9_EQ_1_56_89_OR_ff_memory_respon_ETC___d318) ;
  assign ff_req_queue_first__0_BITS_1_TO_0_2_EQ_0_91_AN_ETC___d236 =
	     ff_req_queue_D_OUT[1:0] == 2'd0 &&
	     !ff_memory_response_D_OUT[9] &&
	     (!ff_memory_response_D_OUT[11] || !mstatus_from_csr_put[19]) ||
	     ff_req_queue_D_OUT[1:0] == 2'd3 &&
	     ff_memory_response_D_OUT[11] &&
	     !ff_memory_response_D_OUT[12] &&
	     curr_priv_put == 2'd0 ||
	     ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_92_AN_ETC___d234 ;
  assign ff_req_queue_first__0_BITS_1_TO_0_2_EQ_2_73_OR_ETC___d199 =
	     (ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ff_req_queue_D_OUT[1:0] == 2'd1) &&
	     !ff_memory_response_D_OUT[10] ||
	     !ff_memory_response_D_OUT[12] && priv__h2248 == 2'd0 ||
	     IF_IF_wr_mstatus_whas__5_THEN_wr_mstatus_wget__ETC___d197 ;
  assign ff_req_queue_first__0_BITS_1_TO_0_2_EQ_2_73_OR_ETC___d259 =
	     (ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ff_req_queue_D_OUT[1:0] == 2'd1) &&
	     !ff_memory_response_D_OUT[10] ||
	     !ff_memory_response_D_OUT[12] && priv__h2248 == 2'd0 ||
	     IF_IF_wr_mstatus_whas__5_THEN_wr_mstatus_wget__ETC___d257 ;
  assign ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_92_AN_ETC___d234 =
	     ff_req_queue_D_OUT[1:0] == 2'd3 &&
	     ff_memory_response_D_OUT[11] &&
	     ff_memory_response_D_OUT[12] &&
	     curr_priv_put == 2'd1 ||
	     ff_req_queue_D_OUT[1:0] == 2'd3 &&
	     !ff_memory_response_D_OUT[11] ||
	     !ff_memory_response_D_OUT[14] ||
	     !ff_memory_response_D_OUT[15] &&
	     (ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ff_req_queue_D_OUT[1:0] == 2'd1) ;
  assign ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_92_OR_ETC___d307 =
	     ff_req_queue_D_OUT[1:0] == 2'd3 || priv__h2248 != 2'd1 ||
	     !ff_memory_response_D_OUT[12] ||
	     mstatus_from_csr_put[18] ;
  assign ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_92_OR_ETC___d315 =
	     ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_92_OR_ETC___d307 &&
	     (ff_req_queue_D_OUT[1:0] != 2'd0 ||
	      ff_memory_response_D_OUT[9]) &&
	     (ff_req_queue_D_OUT[1:0] != 2'd3 ||
	      ff_memory_response_D_OUT[11]) &&
	     ff_memory_response_D_OUT[14] &&
	     (ff_memory_response_D_OUT[15] ||
	      ff_req_queue_D_OUT[1:0] != 2'd2 &&
	      ff_req_queue_D_OUT[1:0] != 2'd1) ;
  assign ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_92_OR_ETC___d349 =
	     (ff_req_queue_D_OUT[1:0] == 2'd3 ||
	      ff_memory_response_D_OUT[12] ||
	      priv__h2248 != 2'd0) &&
	     ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_92_OR_ETC___d307 &&
	     NOT_ff_req_queue_first__0_BITS_1_TO_0_2_EQ_0_9_ETC___d347 ;
  assign max_levels__h1497 =
	     (satp_from_csr_put[63:60] == 4'd8) ? 2'd2 : 2'd3 ;
  assign priv__h2248 =
	     mstatus_from_csr_put[17] ?
	       mstatus_from_csr_put[12:11] :
	       curr_priv_put ;
  assign pte_address__h1499 = a__h1498 + { 44'd0, x__h1681 } ;
  assign rg_levels_9_EQ_0_55_AND_NOT_ff_memory_response_ETC___d242 =
	     rg_levels == 2'd0 && !ff_memory_response_D_OUT[9] &&
	     !ff_memory_response_D_OUT[11] ||
	     (ff_memory_response_D_OUT[11] || ff_memory_response_D_OUT[9] ||
	      ff_memory_response_D_OUT[10]) &&
	     rg_levels_9_EQ_1_56_AND_NOT_ff_memory_response_ETC___d240 ;
  assign rg_levels_9_EQ_0_55_AND_NOT_ff_memory_response_ETC___d262 =
	     rg_levels == 2'd0 && !ff_memory_response_D_OUT[9] &&
	     !ff_memory_response_D_OUT[11] ||
	     (ff_memory_response_D_OUT[11] || ff_memory_response_D_OUT[9] ||
	      ff_memory_response_D_OUT[10]) &&
	     (rg_levels == 2'd1 && ff_memory_response_D_OUT[26:18] != 9'd0 ||
	      rg_levels == 2'd2 && ff_memory_response_D_OUT[35:18] != 18'd0 ||
	      rg_levels == 2'd3 && ff_memory_response_D_OUT[44:18] != 27'd0 ||
	      ff_req_queue_first__0_BITS_1_TO_0_2_EQ_2_73_OR_ETC___d259) ;
  assign rg_levels_9_EQ_1_56_AND_NOT_ff_memory_response_ETC___d240 =
	     rg_levels == 2'd1 && ff_memory_response_D_OUT[26:18] != 9'd0 ||
	     rg_levels == 2'd2 && ff_memory_response_D_OUT[35:18] != 18'd0 ||
	     rg_levels == 2'd3 && ff_memory_response_D_OUT[44:18] != 27'd0 ||
	     (ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ff_req_queue_D_OUT[1:0] == 2'd1) &&
	     !ff_memory_response_D_OUT[10] ||
	     NOT_ff_req_queue_first__0_BITS_1_TO_0_2_EQ_3_9_ETC___d238 ;
  assign x__h1681 =
	     { CASE_rg_levels_0_ff_req_queueD_OUT_BITS_22_TO_ETC__q1, 3'b0 } ;
  assign x__h3260 = rg_levels - 2'd1 ;
  assign x__h3543 = { ff_memory_response_D_OUT[61:18], 12'b0 } ;
  assign x_address__h1833 =
	     { {8{pte_address__h1499[55]}}, pte_address__h1499 } ;
  assign x_writedata__h1838 = { 58'd0, 6'bxxxxxx /* unspecified value */  } ;
  assign x_writedata__h3363 = { 58'd0, _theResult_____1__h3049 } ;
  always@(ff_req_queue_D_OUT)
  begin
    case (ff_req_queue_D_OUT[1:0])
      2'd0: cause___1__h3218 = 6'd13;
      2'd3: cause___1__h3218 = 6'd12;
      default: cause___1__h3218 = 6'd15;
    endcase
  end
  always@(ff_req_queue_D_OUT)
  begin
    case (ff_req_queue_D_OUT[1:0])
      2'd0: cause___1__h3197 = 6'd5;
      2'd3: cause___1__h3197 = 6'd1;
      default: cause___1__h3197 = 6'd7;
    endcase
  end
  always@(rg_levels or ff_req_queue_D_OUT)
  begin
    case (rg_levels)
      2'd0:
	  CASE_rg_levels_0_ff_req_queueD_OUT_BITS_22_TO_ETC__q1 =
	      ff_req_queue_D_OUT[22:14];
      2'd1:
	  CASE_rg_levels_0_ff_req_queueD_OUT_BITS_22_TO_ETC__q1 =
	      ff_req_queue_D_OUT[31:23];
      2'd2:
	  CASE_rg_levels_0_ff_req_queueD_OUT_BITS_22_TO_ETC__q1 =
	      ff_req_queue_D_OUT[40:32];
      2'd3:
	  CASE_rg_levels_0_ff_req_queueD_OUT_BITS_22_TO_ETC__q1 =
	      9'bxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_a <= `BSV_ASSIGNMENT_DELAY 56'd0;
	rg_hold_epoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_levels <= `BSV_ASSIGNMENT_DELAY 2'd2;
	rg_state <= `BSV_ASSIGNMENT_DELAY 2'd2;
      end
    else
      begin
        if (rg_a_EN) rg_a <= `BSV_ASSIGNMENT_DELAY rg_a_D_IN;
	if (rg_hold_epoch_EN)
	  rg_hold_epoch <= `BSV_ASSIGNMENT_DELAY rg_hold_epoch_D_IN;
	if (rg_levels_EN) rg_levels <= `BSV_ASSIGNMENT_DELAY rg_levels_D_IN;
	if (rg_state_EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_a = 56'hAAAAAAAAAAAAAA;
    rg_hold_epoch = 1'h0;
    rg_levels = 2'h2;
    rg_state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache)
	begin
	  TASK_testplusargs___d9 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache)
	begin
	  TASK_testplusargs___d10 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache)
	begin
	  TASK_testplusargs___d11 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d18 =
	(TASK_testplusargs___d9 ||
	 TASK_testplusargs___d10 && TASK_testplusargs___d11) &&
	ff_hold_req_D_OUT[76];
    TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d20 =
	(TASK_testplusargs___d9 ||
	 TASK_testplusargs___d10 && TASK_testplusargs___d11) &&
	!ff_hold_req_D_OUT[76];
    TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d27 =
	(TASK_testplusargs___d9 ||
	 TASK_testplusargs___d10 && TASK_testplusargs___d11) &&
	ff_hold_req_D_OUT[0];
    TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d29 =
	(TASK_testplusargs___d9 ||
	 TASK_testplusargs___d10 && TASK_testplusargs___d11) &&
	!ff_hold_req_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache)
	begin
	  v__h1041 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("[%10d", v__h1041, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("PTW : Resending Core request back to DCache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("DCache_core_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("'h%h", ff_hold_req_D_OUT[140:77]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write(", ", "fence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d18)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d20)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("'h%h", ff_hold_req_D_OUT[75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("'h%h", ff_hold_req_D_OUT[74:73]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("'h%h", ff_hold_req_D_OUT[72:70]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("'h%h", ff_hold_req_D_OUT[69:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write(", ", "atomic_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("'h%h", ff_hold_req_D_OUT[5:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write(", ", "ptwalk_req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d27)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d29)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte)
	begin
	  TASK_testplusargs___d44 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte)
	begin
	  TASK_testplusargs___d45 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte)
	begin
	  TASK_testplusargs___d46 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte)
	begin
	  v__h1404 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte &&
	  (TASK_testplusargs___d44 ||
	   TASK_testplusargs___d45 && TASK_testplusargs___d46))
	$write("[%10d", v__h1404, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte &&
	  (TASK_testplusargs___d44 ||
	   TASK_testplusargs___d45 && TASK_testplusargs___d46))
	$write("PTW : Recieved Request: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte &&
	  (TASK_testplusargs___d44 ||
	   TASK_testplusargs___d45 && TASK_testplusargs___d46))
	$write("PTWalk_tlb_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte &&
	  (TASK_testplusargs___d44 ||
	   TASK_testplusargs___d45 && TASK_testplusargs___d46))
	$write("'h%h", ff_req_queue_D_OUT[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte &&
	  (TASK_testplusargs___d44 ||
	   TASK_testplusargs___d45 && TASK_testplusargs___d46))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte &&
	  (TASK_testplusargs___d44 ||
	   TASK_testplusargs___d45 && TASK_testplusargs___d46))
	$write("'h%h", ff_req_queue_D_OUT[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte &&
	  (TASK_testplusargs___d44 ||
	   TASK_testplusargs___d45 && TASK_testplusargs___d46))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte)
	begin
	  TASK_testplusargs___d53 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte)
	begin
	  TASK_testplusargs___d54 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte)
	begin
	  TASK_testplusargs___d55 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte)
	begin
	  v__h1566 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write("[%10d", v__h1566, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write("PTW : Sending PTE - Address to DMEM:%h", pte_address__h1499);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_generate_pte &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte)
	begin
	  TASK_testplusargs___d96 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte)
	begin
	  TASK_testplusargs___d97 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte)
	begin
	  TASK_testplusargs___d98 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d105 =
	(TASK_testplusargs___d96 ||
	 TASK_testplusargs___d97 && TASK_testplusargs___d98) &&
	ff_memory_response_D_OUT[7];
    TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d107 =
	(TASK_testplusargs___d96 ||
	 TASK_testplusargs___d97 && TASK_testplusargs___d98) &&
	!ff_memory_response_D_OUT[7];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte)
	begin
	  v__h1953 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("[%10d", v__h1953, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("PTW : Memory Response: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("DMem_core_response { ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("'h%h", ff_memory_response_D_OUT[71:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write(", ", "trap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d105)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d107)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write(", ", "cause: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("'h%h", ff_memory_response_D_OUT[6:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("'h%h", ff_memory_response_D_OUT[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte)
	begin
	  TASK_testplusargs___d110 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte)
	begin
	  TASK_testplusargs___d111 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte)
	begin
	  TASK_testplusargs___d112 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte)
	begin
	  v__h2137 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d110 ||
	   TASK_testplusargs___d111 && TASK_testplusargs___d112))
	$write("[%10d", v__h2137, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d110 ||
	   TASK_testplusargs___d111 && TASK_testplusargs___d112))
	$write("PTW : For Request: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d110 ||
	   TASK_testplusargs___d111 && TASK_testplusargs___d112))
	$write("PTWalk_tlb_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d110 ||
	   TASK_testplusargs___d111 && TASK_testplusargs___d112))
	$write("'h%h", ff_req_queue_D_OUT[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d110 ||
	   TASK_testplusargs___d111 && TASK_testplusargs___d112))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d110 ||
	   TASK_testplusargs___d111 && TASK_testplusargs___d112))
	$write("'h%h", ff_req_queue_D_OUT[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d110 ||
	   TASK_testplusargs___d111 && TASK_testplusargs___d112))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte)
	begin
	  TASK_testplusargs___d116 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte)
	begin
	  TASK_testplusargs___d117 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte)
	begin
	  TASK_testplusargs___d118 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d123 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	ff_memory_response_D_OUT[8];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d125 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	!ff_memory_response_D_OUT[8];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d127 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	ff_memory_response_D_OUT[9];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d129 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	!ff_memory_response_D_OUT[9];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d131 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	ff_memory_response_D_OUT[10];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d133 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	!ff_memory_response_D_OUT[10];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d135 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	ff_memory_response_D_OUT[11];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d139 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	ff_memory_response_D_OUT[12];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d137 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	!ff_memory_response_D_OUT[11];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d141 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	!ff_memory_response_D_OUT[12];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d143 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	ff_memory_response_D_OUT[13];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d145 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	!ff_memory_response_D_OUT[13];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d147 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	ff_memory_response_D_OUT[14];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d149 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	!ff_memory_response_D_OUT[14];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d151 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	ff_memory_response_D_OUT[15];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d153 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	!ff_memory_response_D_OUT[15];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte)
	begin
	  v__h2315 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write("[%10d", v__h2315, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write("PTW : Permissions");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write("TLB_permissions { ", "v: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d123)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d125)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write(", ", "r: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d127)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d129)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write(", ", "w: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d131)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d133)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write(", ", "x: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d135)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d137)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write(", ", "u: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d139)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d141)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write(", ", "g: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d143)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d145)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write(", ", "a: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d147)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d149)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write(", ", "d: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d151)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d153)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (!ff_memory_response_D_OUT[8] ||
	   !ff_memory_response_D_OUT[9] && ff_memory_response_D_OUT[10] ||
	   rg_levels_9_EQ_0_55_AND_NOT_ff_memory_response_ETC___d242 ||
	   ff_memory_response_D_OUT[7]))
	begin
	  TASK_testplusargs___d272 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (!ff_memory_response_D_OUT[8] ||
	   !ff_memory_response_D_OUT[9] && ff_memory_response_D_OUT[10] ||
	   rg_levels_9_EQ_0_55_AND_NOT_ff_memory_response_ETC___d242 ||
	   ff_memory_response_D_OUT[7]))
	begin
	  TASK_testplusargs___d273 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (!ff_memory_response_D_OUT[8] ||
	   !ff_memory_response_D_OUT[9] && ff_memory_response_D_OUT[10] ||
	   rg_levels_9_EQ_0_55_AND_NOT_ff_memory_response_ETC___d242 ||
	   ff_memory_response_D_OUT[7]))
	begin
	  TASK_testplusargs___d274 = $test$plusargs("l2");
	  #0;
	end
    NOT_ff_memory_response_first__02_BIT_8_22_24_O_ETC___d277 =
	(!ff_memory_response_D_OUT[8] ||
	 !ff_memory_response_D_OUT[9] && ff_memory_response_D_OUT[10] ||
	 rg_levels_9_EQ_0_55_AND_NOT_ff_memory_response_ETC___d242 ||
	 ff_memory_response_D_OUT[7]) &&
	(TASK_testplusargs___d272 ||
	 TASK_testplusargs___d273 && TASK_testplusargs___d274);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  (!ff_memory_response_D_OUT[8] ||
	   !ff_memory_response_D_OUT[9] && ff_memory_response_D_OUT[10] ||
	   rg_levels_9_EQ_0_55_AND_NOT_ff_memory_response_ETC___d242 ||
	   ff_memory_response_D_OUT[7]))
	begin
	  v__h3135 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  NOT_ff_memory_response_first__02_BIT_8_22_24_O_ETC___d277)
	$write("[%10d", v__h3135, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  NOT_ff_memory_response_first__02_BIT_8_22_24_O_ETC___d277)
	$write("PTW : Generated Error. Cause:%d", _theResult_____1__h3049);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  NOT_ff_memory_response_first__02_BIT_8_22_24_O_ETC___d277)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  ff_memory_response_first__02_BIT_8_22_AND_ff_m_ETC___d321 &&
	  !ff_memory_response_D_OUT[7] &&
	  !ff_memory_response_D_OUT[9] &&
	  !ff_memory_response_D_OUT[11])
	begin
	  TASK_testplusargs___d326 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  ff_memory_response_first__02_BIT_8_22_AND_ff_m_ETC___d321 &&
	  !ff_memory_response_D_OUT[7] &&
	  !ff_memory_response_D_OUT[9] &&
	  !ff_memory_response_D_OUT[11])
	begin
	  TASK_testplusargs___d327 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  ff_memory_response_first__02_BIT_8_22_AND_ff_m_ETC___d321 &&
	  !ff_memory_response_D_OUT[7] &&
	  !ff_memory_response_D_OUT[9] &&
	  !ff_memory_response_D_OUT[11])
	begin
	  TASK_testplusargs___d328 = $test$plusargs("l2");
	  #0;
	end
    NOT_ff_memory_response_first__02_BIT_9_26_28_A_ETC___d331 =
	!ff_memory_response_D_OUT[9] && !ff_memory_response_D_OUT[11] &&
	(TASK_testplusargs___d326 ||
	 TASK_testplusargs___d327 && TASK_testplusargs___d328);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  ff_memory_response_first__02_BIT_8_22_AND_ff_m_ETC___d321 &&
	  !ff_memory_response_D_OUT[7] &&
	  !ff_memory_response_D_OUT[9] &&
	  !ff_memory_response_D_OUT[11])
	begin
	  v__h3677 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  ff_memory_response_first__02_BIT_8_22_AND_ff_m_ETC___d321 &&
	  !ff_memory_response_D_OUT[7] &&
	  NOT_ff_memory_response_first__02_BIT_9_26_28_A_ETC___d331)
	$write("[%10d", v__h3677, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  ff_memory_response_first__02_BIT_8_22_AND_ff_m_ETC___d321 &&
	  !ff_memory_response_D_OUT[7] &&
	  NOT_ff_memory_response_first__02_BIT_9_26_28_A_ETC___d331)
	$write("PTW : Pointer to NextLevel:%h Levels:%d",
	       x__h3543,
	       rg_levels);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  ff_memory_response_first__02_BIT_8_22_AND_ff_m_ETC___d321 &&
	  !ff_memory_response_D_OUT[7] &&
	  NOT_ff_memory_response_first__02_BIT_9_26_28_A_ETC___d331)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte && ff_memory_response_D_OUT[8] &&
	  (ff_memory_response_D_OUT[9] || !ff_memory_response_D_OUT[10]) &&
	  NOT_rg_levels_9_EQ_0_55_86_OR_ff_memory_respon_ETC___d353 &&
	  !ff_memory_response_D_OUT[7] &&
	  (ff_memory_response_D_OUT[9] || ff_memory_response_D_OUT[11]))
	begin
	  TASK_testplusargs___d357 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte && ff_memory_response_D_OUT[8] &&
	  (ff_memory_response_D_OUT[9] || !ff_memory_response_D_OUT[10]) &&
	  NOT_rg_levels_9_EQ_0_55_86_OR_ff_memory_respon_ETC___d353 &&
	  !ff_memory_response_D_OUT[7] &&
	  (ff_memory_response_D_OUT[9] || ff_memory_response_D_OUT[11]))
	begin
	  TASK_testplusargs___d358 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte && ff_memory_response_D_OUT[8] &&
	  (ff_memory_response_D_OUT[9] || !ff_memory_response_D_OUT[10]) &&
	  NOT_rg_levels_9_EQ_0_55_86_OR_ff_memory_respon_ETC___d353 &&
	  !ff_memory_response_D_OUT[7] &&
	  (ff_memory_response_D_OUT[9] || ff_memory_response_D_OUT[11]))
	begin
	  TASK_testplusargs___d359 = $test$plusargs("l2");
	  #0;
	end
    ff_memory_response_first__02_BIT_9_26_OR_ff_me_ETC___d362 =
	(ff_memory_response_D_OUT[9] || ff_memory_response_D_OUT[11]) &&
	(TASK_testplusargs___d357 ||
	 TASK_testplusargs___d358 && TASK_testplusargs___d359);
    ff_memory_response_first__02_BIT_8_22_AND_ff_m_ETC___d363 =
	ff_memory_response_D_OUT[8] &&
	(ff_memory_response_D_OUT[9] || !ff_memory_response_D_OUT[10]) &&
	NOT_rg_levels_9_EQ_0_55_86_OR_ff_memory_respon_ETC___d353 &&
	!ff_memory_response_D_OUT[7] &&
	ff_memory_response_first__02_BIT_9_26_OR_ff_me_ETC___d362;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte && ff_memory_response_D_OUT[8] &&
	  (ff_memory_response_D_OUT[9] || !ff_memory_response_D_OUT[10]) &&
	  NOT_rg_levels_9_EQ_0_55_86_OR_ff_memory_respon_ETC___d353 &&
	  !ff_memory_response_D_OUT[7] &&
	  (ff_memory_response_D_OUT[9] || ff_memory_response_D_OUT[11]))
	begin
	  v__h3799 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  ff_memory_response_first__02_BIT_8_22_AND_ff_m_ETC___d363)
	$write("[%10d", v__h3799, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  ff_memory_response_first__02_BIT_8_22_AND_ff_m_ETC___d363)
	$write("PTW : Found Leaf PTE:%h levels: %d",
	       ff_memory_response_D_OUT[71:8],
	       rg_levels);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_pte &&
	  ff_memory_response_first__02_BIT_8_22_AND_ff_m_ETC___d363)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkinstance

