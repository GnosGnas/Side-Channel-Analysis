//
// Generated by Bluespec Compiler, version 2021.07-1-gaf77efcd (build af77efcd)
//
// On Mon Dec  6 11:47:47 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// read_rs1                       O    65
// RDY_read_rs1                   O     1 const
// read_rs2                       O    65
// RDY_read_rs2                   O     1 const
// read_rs3                       O    65
// RDY_read_rs3                   O     1 const
// CLK                            I     1 unused
// RST_N                          I     1 unused
// fwd_from_pipe3_fwd             I    72
// fwd_from_pipe4_first_fwd       I    72
// read_rs1_val                   I    64
// read_rs1_addr                  I     5
// read_rs1_rftype                I     1
// read_rs2_val                   I    64
// read_rs2_addr                  I     5
// read_rs2_rftype                I     1
// read_rs3_val                   I    64
// read_rs3_addr                  I     5
// read_rs3_rftype                I     1
// EN_read_rs1                    I     1 unused
// EN_read_rs2                    I     1 unused
// EN_read_rs3                    I     1 unused
//
// Combinational paths from inputs to outputs:
//   (fwd_from_pipe3_fwd,
//    fwd_from_pipe4_first_fwd,
//    read_rs1_val,
//    read_rs1_addr,
//    read_rs1_rftype) -> read_rs1
//   (fwd_from_pipe3_fwd,
//    fwd_from_pipe4_first_fwd,
//    read_rs2_val,
//    read_rs2_addr,
//    read_rs2_rftype) -> read_rs2
//   (fwd_from_pipe3_fwd,
//    fwd_from_pipe4_first_fwd,
//    read_rs3_val,
//    read_rs3_addr,
//    read_rs3_rftype) -> read_rs3
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfwding(CLK,
		RST_N,

		fwd_from_pipe3_fwd,

		fwd_from_pipe4_first_fwd,

		read_rs1_val,
		read_rs1_addr,
		read_rs1_rftype,
		EN_read_rs1,
		read_rs1,
		RDY_read_rs1,

		read_rs2_val,
		read_rs2_addr,
		read_rs2_rftype,
		EN_read_rs2,
		read_rs2,
		RDY_read_rs2,

		read_rs3_val,
		read_rs3_addr,
		read_rs3_rftype,
		EN_read_rs3,
		read_rs3,
		RDY_read_rs3);
  parameter [63 : 0] hartid = 64'b0;
  input  CLK;
  input  RST_N;

  // action method fwd_from_pipe3
  input  [71 : 0] fwd_from_pipe3_fwd;

  // action method fwd_from_pipe4_first
  input  [71 : 0] fwd_from_pipe4_first_fwd;

  // actionvalue method read_rs1
  input  [63 : 0] read_rs1_val;
  input  [4 : 0] read_rs1_addr;
  input  read_rs1_rftype;
  input  EN_read_rs1;
  output [64 : 0] read_rs1;
  output RDY_read_rs1;

  // actionvalue method read_rs2
  input  [63 : 0] read_rs2_val;
  input  [4 : 0] read_rs2_addr;
  input  read_rs2_rftype;
  input  EN_read_rs2;
  output [64 : 0] read_rs2;
  output RDY_read_rs2;

  // actionvalue method read_rs3
  input  [63 : 0] read_rs3_val;
  input  [4 : 0] read_rs3_addr;
  input  read_rs3_rftype;
  input  EN_read_rs3;
  output [64 : 0] read_rs3;
  output RDY_read_rs3;

  // signals for module outputs
  wire [64 : 0] read_rs1, read_rs2, read_rs3;
  wire RDY_read_rs1, RDY_read_rs2, RDY_read_rs3;

  // rule scheduling signals
  wire CAN_FIRE_fwd_from_pipe3,
       CAN_FIRE_fwd_from_pipe4_first,
       CAN_FIRE_read_rs1,
       CAN_FIRE_read_rs2,
       CAN_FIRE_read_rs3,
       WILL_FIRE_fwd_from_pipe3,
       WILL_FIRE_fwd_from_pipe4_first,
       WILL_FIRE_read_rs1,
       WILL_FIRE_read_rs2,
       WILL_FIRE_read_rs3;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d1;
  reg TASK_testplusargs___d2;
  reg TASK_testplusargs___d3;
  reg [63 : 0] v__h255;
  reg TASK_testplusargs___d21;
  reg TASK_testplusargs___d22;
  reg TASK_testplusargs___d23;
  reg [63 : 0] v__h479;
  reg TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d10;
  reg TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d12;
  reg TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d8;
  reg TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d14;
  reg TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d18;
  reg TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d20;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d28;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d30;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d32;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d34;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d38;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d40;
  // synopsys translate_on

  // remaining internal signals
  wire [63 : 0] IF_wr_from_pipe4_first_wget__2_BIT_71_3_AND_wr_ETC___d101,
		IF_wr_from_pipe4_first_wget__2_BIT_71_3_AND_wr_ETC___d68,
		IF_wr_from_pipe4_first_wget__2_BIT_71_3_AND_wr_ETC___d86;
  wire wr_from_pipe4_first_wget__2_BITS_69_TO_65_5_EQ_ETC___d56,
       wr_from_pipe4_first_wget__2_BITS_69_TO_65_5_EQ_ETC___d77,
       wr_from_pipe4_first_wget__2_BITS_69_TO_65_5_EQ_ETC___d92,
       wr_from_pipe4_first_wget__2_BIT_0_9_EQ_read_rs_ETC___d60,
       wr_from_pipe4_first_wget__2_BIT_0_9_EQ_read_rs_ETC___d80,
       wr_from_pipe4_first_wget__2_BIT_0_9_EQ_read_rs_ETC___d95;

  // action method fwd_from_pipe3
  assign CAN_FIRE_fwd_from_pipe3 = 1'd1 ;
  assign WILL_FIRE_fwd_from_pipe3 = 1'd1 ;

  // action method fwd_from_pipe4_first
  assign CAN_FIRE_fwd_from_pipe4_first = 1'd1 ;
  assign WILL_FIRE_fwd_from_pipe4_first = 1'd1 ;

  // actionvalue method read_rs1
  assign read_rs1 =
	     (fwd_from_pipe3_fwd[71] &&
	      fwd_from_pipe3_fwd[69:65] == read_rs1_addr &&
	      fwd_from_pipe3_fwd[0] == read_rs1_rftype) ?
	       { fwd_from_pipe3_fwd[70], fwd_from_pipe3_fwd[64:1] } :
	       { !fwd_from_pipe4_first_fwd[71] ||
		 !wr_from_pipe4_first_wget__2_BITS_69_TO_65_5_EQ_ETC___d56 ||
		 !wr_from_pipe4_first_wget__2_BIT_0_9_EQ_read_rs_ETC___d60 ||
		 fwd_from_pipe4_first_fwd[70],
		 IF_wr_from_pipe4_first_wget__2_BIT_71_3_AND_wr_ETC___d68 } ;
  assign RDY_read_rs1 = 1'b1 ;
  assign CAN_FIRE_read_rs1 = 1'b1 ;
  assign WILL_FIRE_read_rs1 = EN_read_rs1 ;

  // actionvalue method read_rs2
  assign read_rs2 =
	     (fwd_from_pipe3_fwd[71] &&
	      fwd_from_pipe3_fwd[69:65] == read_rs2_addr &&
	      fwd_from_pipe3_fwd[0] == read_rs2_rftype) ?
	       { fwd_from_pipe3_fwd[70], fwd_from_pipe3_fwd[64:1] } :
	       { !fwd_from_pipe4_first_fwd[71] ||
		 !wr_from_pipe4_first_wget__2_BITS_69_TO_65_5_EQ_ETC___d77 ||
		 !wr_from_pipe4_first_wget__2_BIT_0_9_EQ_read_rs_ETC___d80 ||
		 fwd_from_pipe4_first_fwd[70],
		 IF_wr_from_pipe4_first_wget__2_BIT_71_3_AND_wr_ETC___d86 } ;
  assign RDY_read_rs2 = 1'b1 ;
  assign CAN_FIRE_read_rs2 = 1'b1 ;
  assign WILL_FIRE_read_rs2 = EN_read_rs2 ;

  // actionvalue method read_rs3
  assign read_rs3 =
	     (fwd_from_pipe3_fwd[71] &&
	      fwd_from_pipe3_fwd[69:65] == read_rs3_addr &&
	      fwd_from_pipe3_fwd[0] == read_rs3_rftype) ?
	       { fwd_from_pipe3_fwd[70], fwd_from_pipe3_fwd[64:1] } :
	       { !fwd_from_pipe4_first_fwd[71] ||
		 !wr_from_pipe4_first_wget__2_BITS_69_TO_65_5_EQ_ETC___d92 ||
		 !wr_from_pipe4_first_wget__2_BIT_0_9_EQ_read_rs_ETC___d95 ||
		 fwd_from_pipe4_first_fwd[70],
		 IF_wr_from_pipe4_first_wget__2_BIT_71_3_AND_wr_ETC___d101 } ;
  assign RDY_read_rs3 = 1'b1 ;
  assign CAN_FIRE_read_rs3 = 1'b1 ;
  assign WILL_FIRE_read_rs3 = EN_read_rs3 ;

  // remaining internal signals
  assign IF_wr_from_pipe4_first_wget__2_BIT_71_3_AND_wr_ETC___d101 =
	     (fwd_from_pipe4_first_fwd[71] &&
	      wr_from_pipe4_first_wget__2_BITS_69_TO_65_5_EQ_ETC___d92 &&
	      wr_from_pipe4_first_wget__2_BIT_0_9_EQ_read_rs_ETC___d95) ?
	       fwd_from_pipe4_first_fwd[64:1] :
	       read_rs3_val ;
  assign IF_wr_from_pipe4_first_wget__2_BIT_71_3_AND_wr_ETC___d68 =
	     (fwd_from_pipe4_first_fwd[71] &&
	      wr_from_pipe4_first_wget__2_BITS_69_TO_65_5_EQ_ETC___d56 &&
	      wr_from_pipe4_first_wget__2_BIT_0_9_EQ_read_rs_ETC___d60) ?
	       fwd_from_pipe4_first_fwd[64:1] :
	       read_rs1_val ;
  assign IF_wr_from_pipe4_first_wget__2_BIT_71_3_AND_wr_ETC___d86 =
	     (fwd_from_pipe4_first_fwd[71] &&
	      wr_from_pipe4_first_wget__2_BITS_69_TO_65_5_EQ_ETC___d77 &&
	      wr_from_pipe4_first_wget__2_BIT_0_9_EQ_read_rs_ETC___d80) ?
	       fwd_from_pipe4_first_fwd[64:1] :
	       read_rs2_val ;
  assign wr_from_pipe4_first_wget__2_BITS_69_TO_65_5_EQ_ETC___d56 =
	     fwd_from_pipe4_first_fwd[69:65] == read_rs1_addr ;
  assign wr_from_pipe4_first_wget__2_BITS_69_TO_65_5_EQ_ETC___d77 =
	     fwd_from_pipe4_first_fwd[69:65] == read_rs2_addr ;
  assign wr_from_pipe4_first_wget__2_BITS_69_TO_65_5_EQ_ETC___d92 =
	     fwd_from_pipe4_first_fwd[69:65] == read_rs3_addr ;
  assign wr_from_pipe4_first_wget__2_BIT_0_9_EQ_read_rs_ETC___d60 =
	     fwd_from_pipe4_first_fwd[0] == read_rs1_rftype ;
  assign wr_from_pipe4_first_wget__2_BIT_0_9_EQ_read_rs_ETC___d80 =
	     fwd_from_pipe4_first_fwd[0] == read_rs2_rftype ;
  assign wr_from_pipe4_first_wget__2_BIT_0_9_EQ_read_rs_ETC___d95 =
	     fwd_from_pipe4_first_fwd[0] == read_rs3_rftype ;

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d1 = $test$plusargs("fullverbose");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d2 = $test$plusargs("mfwding");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d3 = $test$plusargs("l2");
	#0;
      end
    TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d10 =
	(TASK_testplusargs___d1 ||
	 TASK_testplusargs___d2 && TASK_testplusargs___d3) &&
	!fwd_from_pipe3_fwd[71];
    TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d12 =
	(TASK_testplusargs___d1 ||
	 TASK_testplusargs___d2 && TASK_testplusargs___d3) &&
	fwd_from_pipe3_fwd[70];
    TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d8 =
	(TASK_testplusargs___d1 ||
	 TASK_testplusargs___d2 && TASK_testplusargs___d3) &&
	fwd_from_pipe3_fwd[71];
    TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d14 =
	(TASK_testplusargs___d1 ||
	 TASK_testplusargs___d2 && TASK_testplusargs___d3) &&
	!fwd_from_pipe3_fwd[70];
    TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d18 =
	(TASK_testplusargs___d1 ||
	 TASK_testplusargs___d2 && TASK_testplusargs___d3) &&
	fwd_from_pipe3_fwd[0];
    TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d20 =
	(TASK_testplusargs___d1 ||
	 TASK_testplusargs___d2 && TASK_testplusargs___d3) &&
	!fwd_from_pipe3_fwd[0];
    if (RST_N != `BSV_RESET_VALUE)
      begin
        v__h255 = $time;
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("[%10d", v__h255, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("core:%2d ", hartid, "FWDING: from PIPE3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("FwdType { ", "valid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d8)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d10)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write(", ", "available: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d12)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d14)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("'h%h", fwd_from_pipe3_fwd[69:65]);
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("'h%h", fwd_from_pipe3_fwd[64:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write(", ", "rftype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d18)
	$write("FRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs_OR_TASK_testplusargs_AND_TAS_ETC___d20)
	$write("IRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d21 = $test$plusargs("fullverbose");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d22 = $test$plusargs("mfwding");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d23 = $test$plusargs("l2");
	#0;
      end
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d28 =
	(TASK_testplusargs___d21 ||
	 TASK_testplusargs___d22 && TASK_testplusargs___d23) &&
	fwd_from_pipe4_first_fwd[71];
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d30 =
	(TASK_testplusargs___d21 ||
	 TASK_testplusargs___d22 && TASK_testplusargs___d23) &&
	!fwd_from_pipe4_first_fwd[71];
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d32 =
	(TASK_testplusargs___d21 ||
	 TASK_testplusargs___d22 && TASK_testplusargs___d23) &&
	fwd_from_pipe4_first_fwd[70];
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d34 =
	(TASK_testplusargs___d21 ||
	 TASK_testplusargs___d22 && TASK_testplusargs___d23) &&
	!fwd_from_pipe4_first_fwd[70];
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d38 =
	(TASK_testplusargs___d21 ||
	 TASK_testplusargs___d22 && TASK_testplusargs___d23) &&
	fwd_from_pipe4_first_fwd[0];
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d40 =
	(TASK_testplusargs___d21 ||
	 TASK_testplusargs___d22 && TASK_testplusargs___d23) &&
	!fwd_from_pipe4_first_fwd[0];
    if (RST_N != `BSV_RESET_VALUE)
      begin
        v__h479 = $time;
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d21 ||
	  TASK_testplusargs___d22 && TASK_testplusargs___d23)
	$write("[%10d", v__h479, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d21 ||
	  TASK_testplusargs___d22 && TASK_testplusargs___d23)
	$write("core:%2d ", hartid, "FWDING: from PIPE4-first: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d21 ||
	  TASK_testplusargs___d22 && TASK_testplusargs___d23)
	$write("FwdType { ", "valid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d28)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d30)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d21 ||
	  TASK_testplusargs___d22 && TASK_testplusargs___d23)
	$write(", ", "available: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d32)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d34)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d21 ||
	  TASK_testplusargs___d22 && TASK_testplusargs___d23)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d21 ||
	  TASK_testplusargs___d22 && TASK_testplusargs___d23)
	$write("'h%h", fwd_from_pipe4_first_fwd[69:65]);
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d21 ||
	  TASK_testplusargs___d22 && TASK_testplusargs___d23)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d21 ||
	  TASK_testplusargs___d22 && TASK_testplusargs___d23)
	$write("'h%h", fwd_from_pipe4_first_fwd[64:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d21 ||
	  TASK_testplusargs___d22 && TASK_testplusargs___d23)
	$write(", ", "rftype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d38)
	$write("FRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d40)
	$write("IRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d21 ||
	  TASK_testplusargs___d22 && TASK_testplusargs___d23)
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d21 ||
	  TASK_testplusargs___d22 && TASK_testplusargs___d23)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkfwding

