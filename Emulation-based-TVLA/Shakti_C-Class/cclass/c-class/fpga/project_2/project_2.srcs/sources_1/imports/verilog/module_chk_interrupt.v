//
// Generated by Bluespec Compiler, version 2021.07-1-gaf77efcd (build af77efcd)
//
// On Mon Dec  6 11:47:44 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// chk_interrupt                  O     7
// chk_interrupt_prv              I     2
// chk_interrupt_mstatus          I    64
// chk_interrupt_mip              I    19
// chk_interrupt_mie              I    17
// chk_interrupt_mideleg          I    12
// chk_interrupt_sip              I    12
// chk_interrupt_sie              I    12
// chk_interrupt_debug            I     5
// chk_interrupt_step_done        I     1
//
// Combinational paths from inputs to outputs:
//   (chk_interrupt_prv,
//    chk_interrupt_mstatus,
//    chk_interrupt_mip,
//    chk_interrupt_mie,
//    chk_interrupt_mideleg,
//    chk_interrupt_sip,
//    chk_interrupt_sie,
//    chk_interrupt_debug,
//    chk_interrupt_step_done) -> chk_interrupt
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module module_chk_interrupt(chk_interrupt_prv,
			    chk_interrupt_mstatus,
			    chk_interrupt_mip,
			    chk_interrupt_mie,
			    chk_interrupt_mideleg,
			    chk_interrupt_sip,
			    chk_interrupt_sie,
			    chk_interrupt_debug,
			    chk_interrupt_step_done,
			    chk_interrupt);
  // value method chk_interrupt
  input  [1 : 0] chk_interrupt_prv;
  input  [63 : 0] chk_interrupt_mstatus;
  input  [18 : 0] chk_interrupt_mip;
  input  [16 : 0] chk_interrupt_mie;
  input  [11 : 0] chk_interrupt_mideleg;
  input  [11 : 0] chk_interrupt_sip;
  input  [11 : 0] chk_interrupt_sie;
  input  [4 : 0] chk_interrupt_debug;
  input  chk_interrupt_step_done;
  output [6 : 0] chk_interrupt;

  // signals for module outputs
  wire [6 : 0] chk_interrupt;

  // remaining internal signals
  wire [18 : 0] debug_interrupts__h39,
		pending_interrupts__h43,
		x__h109,
		x__h111,
		y__h110,
		y__h112;
  wire [16 : 0] m_interrupts__h41,
		x__h213,
		x__h215,
		x__h217,
		y__h214,
		y__h216,
		y__h218;
  wire [11 : 0] s_interrupts__h42,
		x__h284,
		x__h286,
		x__h288,
		y__h285,
		y__h287;
  wire [5 : 0] x__h30;
  wire [4 : 0] IF_chk_interrupt_step_done_AND_NOT_chk_interru_ETC___d64;

  // value method chk_interrupt
  assign chk_interrupt =
	     { x__h30,
	       pending_interrupts__h43 != 19'd0 ||
	       chk_interrupt_step_done && !chk_interrupt_debug[3] } ;

  // remaining internal signals
  assign IF_chk_interrupt_step_done_AND_NOT_chk_interru_ETC___d64 =
	     (chk_interrupt_step_done && !chk_interrupt_debug[3]) ?
	       5'd20 :
	       (pending_interrupts__h43[17] ?
		  5'd19 :
		  (pending_interrupts__h43[18] ?
		     5'd22 :
		     (pending_interrupts__h43[16] ?
			5'd16 :
			(pending_interrupts__h43[11] ?
			   5'd11 :
			   (pending_interrupts__h43[3] ?
			      5'd3 :
			      (pending_interrupts__h43[7] ?
				 5'd7 :
				 (pending_interrupts__h43[9] ?
				    5'd9 :
				    (pending_interrupts__h43[1] ?
				       5'd1 :
				       (pending_interrupts__h43[5] ?
					  5'd5 :
					  (pending_interrupts__h43[8] ?
					     5'd8 :
					     (pending_interrupts__h43[0] ?
						5'd0 :
						(pending_interrupts__h43[4] ?
						   5'd4 :
						   5'd31)))))))))))) ;
  assign debug_interrupts__h39 = { chk_interrupt_mip[18:17], 17'd0 } ;
  assign m_interrupts__h41 = x__h213 & y__h214 ;
  assign pending_interrupts__h43 = x__h109 | y__h110 ;
  assign s_interrupts__h42 = x__h284 & y__h285 ;
  assign x__h109 = x__h111 | y__h112 ;
  assign x__h111 =
	     (chk_interrupt_debug[4] && chk_interrupt_debug[0]) ?
	       debug_interrupts__h39 :
	       19'd0 ;
  assign x__h213 = x__h215 & y__h216 ;
  assign x__h215 = x__h217 & y__h218 ;
  assign x__h217 = chk_interrupt_mie & chk_interrupt_mip[16:0] ;
  assign x__h284 = x__h286 & y__h287 ;
  assign x__h286 = x__h288 & chk_interrupt_mideleg ;
  assign x__h288 = chk_interrupt_sie & chk_interrupt_sip ;
  assign x__h30 =
	     { 1'b1,
	       IF_chk_interrupt_step_done_AND_NOT_chk_interru_ETC___d64 } ;
  assign y__h110 =
	     (chk_interrupt_prv == 2'd0 ||
	      chk_interrupt_mstatus[1] && chk_interrupt_prv == 2'd1) ?
	       { 7'd0, s_interrupts__h42 } :
	       19'd0 ;
  assign y__h112 =
	     (chk_interrupt_prv != 2'd3 || chk_interrupt_mstatus[3]) ?
	       { 2'd0, m_interrupts__h41 } :
	       19'd0 ;
  assign y__h214 = {17{!chk_interrupt_debug[3]}} ;
  assign y__h216 = { 5'd31, ~chk_interrupt_mideleg } ;
  assign y__h218 =
	     {17{chk_interrupt_prv != 2'd3 || chk_interrupt_mstatus[3]}} ;
  assign y__h285 = {12{!chk_interrupt_debug[3]}} ;
  assign y__h287 =
	     {12{chk_interrupt_prv == 2'd0 ||
		 chk_interrupt_mstatus[1] && chk_interrupt_prv == 2'd1}} ;
endmodule  // module_chk_interrupt

