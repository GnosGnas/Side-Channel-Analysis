//
// Generated by Bluespec Compiler, version 2021.07-1-gaf77efcd (build af77efcd)
//
// On Mon Dec  6 11:51:29 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_ma_core_req                O     1
// mv_resp_to_core                O    65
// RDY_mv_resp_to_core            O     1 const
// mav_upd_on_ret                 O    64
// RDY_mav_upd_on_ret             O     1 const
// mav_upd_on_trap                O    64
// RDY_mav_upd_on_trap            O     1
// RDY_ma_clint_msip              O     1 const
// RDY_ma_clint_mtip              O     1 const
// RDY_ma_set_external_interrupt  O     1 const
// mv_csr_satp                    O    64
// RDY_mv_csr_satp                O     1 const
// mv_csr_mstatus                 O    64
// RDY_mv_csr_mstatus             O     1 const
// mv_csrs_to_decode              O   199
// RDY_mv_csrs_to_decode          O     1 const
// mv_curr_priv                   O     2 reg
// RDY_mv_curr_priv               O     1 const
// mv_resume_wfi                  O     1
// RDY_mv_resume_wfi              O     1 const
// RDY_ma_update_fflags           O     1 const
// mv_cacheenable                 O     3 reg
// RDY_mv_cacheenable             O     1 const
// mv_csr_misa_c                  O     1 reg
// RDY_mv_csr_misa_c              O     1 const
// RDY_ma_clint_mtime             O     1 const
// RDY_ma_incr_minstret           O     1 const
// mv_mcounteren                  O    32 reg
// RDY_mv_mcounteren              O     1 const
// RDY_ma_debug_halt_request      O     1 const
// RDY_ma_debug_resume_request    O     1 const
// mv_core_is_halted              O     1 reg
// RDY_mv_core_is_halted          O     1 const
// mv_step_is_set                 O     1 reg
// RDY_mv_step_is_set             O     1 const
// mv_step_ie                     O     1 reg
// RDY_mv_step_ie                 O     1 const
// mv_core_debugenable            O     1 reg
// RDY_mv_core_debugenable        O     1 const
// RDY_ma_events_grp4             O     1 const
// RDY_ma_events_grp5             O     1 const
// RDY_ma_events_grp6             O     1 const
// RDY_ma_events_grp7             O     1 const
// mv_counter_values_fst          O  1856 reg
// RDY_mv_counter_values_fst      O     1 const
// mv_counter_values_snd          O  1856 reg
// RDY_mv_counter_values_snd      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_core_req_req                I    80
// mav_upd_on_ret_prv             I     2
// mav_upd_on_trap_c              I     6
// mav_upd_on_trap_pc             I    64
// mav_upd_on_trap_tval           I    64
// ma_clint_msip_intrpt           I     1 reg
// ma_clint_mtip_intrpt           I     1 reg
// ma_set_external_interrupt_ex_i  I     1 reg
// ma_update_fflags_flags         I     5
// ma_clint_mtime_c_mtime         I    64 reg
// ma_debug_halt_request_ip       I     1 reg
// ma_debug_resume_request_ip     I     1 reg
// ma_events_grp4_e               I    30
// ma_events_grp5_e               I    30
// ma_events_grp6_e               I    30
// ma_events_grp7_e               I    30
// EN_ma_core_req                 I     1
// EN_ma_clint_msip               I     1
// EN_ma_clint_mtip               I     1
// EN_ma_set_external_interrupt   I     1
// EN_ma_update_fflags            I     1
// EN_ma_clint_mtime              I     1
// EN_ma_incr_minstret            I     1
// EN_ma_debug_halt_request       I     1
// EN_ma_debug_resume_request     I     1
// EN_ma_events_grp4              I     1
// EN_ma_events_grp5              I     1
// EN_ma_events_grp6              I     1
// EN_ma_events_grp7              I     1
// EN_mav_upd_on_ret              I     1
// EN_mav_upd_on_trap             I     1
//
// Combinational paths from inputs to outputs:
//   (ma_core_req_req, EN_ma_core_req) -> mv_resp_to_core
//   (mav_upd_on_ret_prv, EN_mav_upd_on_ret) -> mav_upd_on_ret
//   (mav_upd_on_trap_c, EN_mav_upd_on_trap) -> mav_upd_on_trap
//
//
// module : provides interface for all core-to-CSRs side-band accesses and a method to            perform regular CSR read-write operations, with access to registers being in a            daisy-chain manner.
//
// Comments on the inlined module `wr_core_resp':
//   wire : the wire captures the repsonse from the groups and is used to send the   	         data to core
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_csr_daisy(CLK,
		    RST_N,

		    ma_core_req_req,
		    EN_ma_core_req,
		    RDY_ma_core_req,

		    mv_resp_to_core,
		    RDY_mv_resp_to_core,

		    mav_upd_on_ret_prv,
		    EN_mav_upd_on_ret,
		    mav_upd_on_ret,
		    RDY_mav_upd_on_ret,

		    mav_upd_on_trap_c,
		    mav_upd_on_trap_pc,
		    mav_upd_on_trap_tval,
		    EN_mav_upd_on_trap,
		    mav_upd_on_trap,
		    RDY_mav_upd_on_trap,

		    ma_clint_msip_intrpt,
		    EN_ma_clint_msip,
		    RDY_ma_clint_msip,

		    ma_clint_mtip_intrpt,
		    EN_ma_clint_mtip,
		    RDY_ma_clint_mtip,

		    ma_set_external_interrupt_ex_i,
		    EN_ma_set_external_interrupt,
		    RDY_ma_set_external_interrupt,

		    mv_csr_satp,
		    RDY_mv_csr_satp,

		    mv_csr_mstatus,
		    RDY_mv_csr_mstatus,

		    mv_csrs_to_decode,
		    RDY_mv_csrs_to_decode,

		    mv_curr_priv,
		    RDY_mv_curr_priv,

		    mv_resume_wfi,
		    RDY_mv_resume_wfi,

		    ma_update_fflags_flags,
		    EN_ma_update_fflags,
		    RDY_ma_update_fflags,

		    mv_cacheenable,
		    RDY_mv_cacheenable,

		    mv_csr_misa_c,
		    RDY_mv_csr_misa_c,

		    ma_clint_mtime_c_mtime,
		    EN_ma_clint_mtime,
		    RDY_ma_clint_mtime,

		    EN_ma_incr_minstret,
		    RDY_ma_incr_minstret,

		    mv_mcounteren,
		    RDY_mv_mcounteren,

		    ma_debug_halt_request_ip,
		    EN_ma_debug_halt_request,
		    RDY_ma_debug_halt_request,

		    ma_debug_resume_request_ip,
		    EN_ma_debug_resume_request,
		    RDY_ma_debug_resume_request,

		    mv_core_is_halted,
		    RDY_mv_core_is_halted,

		    mv_step_is_set,
		    RDY_mv_step_is_set,

		    mv_step_ie,
		    RDY_mv_step_ie,

		    mv_core_debugenable,
		    RDY_mv_core_debugenable,

		    ma_events_grp4_e,
		    EN_ma_events_grp4,
		    RDY_ma_events_grp4,

		    ma_events_grp5_e,
		    EN_ma_events_grp5,
		    RDY_ma_events_grp5,

		    ma_events_grp6_e,
		    EN_ma_events_grp6,
		    RDY_ma_events_grp6,

		    ma_events_grp7_e,
		    EN_ma_events_grp7,
		    RDY_ma_events_grp7,

		    mv_counter_values_fst,
		    RDY_mv_counter_values_fst,

		    mv_counter_values_snd,
		    RDY_mv_counter_values_snd);
  input  CLK;
  input  RST_N;

  // action method ma_core_req
  input  [79 : 0] ma_core_req_req;
  input  EN_ma_core_req;
  output RDY_ma_core_req;

  // value method mv_resp_to_core
  output [64 : 0] mv_resp_to_core;
  output RDY_mv_resp_to_core;

  // actionvalue method mav_upd_on_ret
  input  [1 : 0] mav_upd_on_ret_prv;
  input  EN_mav_upd_on_ret;
  output [63 : 0] mav_upd_on_ret;
  output RDY_mav_upd_on_ret;

  // actionvalue method mav_upd_on_trap
  input  [5 : 0] mav_upd_on_trap_c;
  input  [63 : 0] mav_upd_on_trap_pc;
  input  [63 : 0] mav_upd_on_trap_tval;
  input  EN_mav_upd_on_trap;
  output [63 : 0] mav_upd_on_trap;
  output RDY_mav_upd_on_trap;

  // action method ma_clint_msip
  input  ma_clint_msip_intrpt;
  input  EN_ma_clint_msip;
  output RDY_ma_clint_msip;

  // action method ma_clint_mtip
  input  ma_clint_mtip_intrpt;
  input  EN_ma_clint_mtip;
  output RDY_ma_clint_mtip;

  // action method ma_set_external_interrupt
  input  ma_set_external_interrupt_ex_i;
  input  EN_ma_set_external_interrupt;
  output RDY_ma_set_external_interrupt;

  // value method mv_csr_satp
  output [63 : 0] mv_csr_satp;
  output RDY_mv_csr_satp;

  // value method mv_csr_mstatus
  output [63 : 0] mv_csr_mstatus;
  output RDY_mv_csr_mstatus;

  // value method mv_csrs_to_decode
  output [198 : 0] mv_csrs_to_decode;
  output RDY_mv_csrs_to_decode;

  // value method mv_curr_priv
  output [1 : 0] mv_curr_priv;
  output RDY_mv_curr_priv;

  // value method mv_resume_wfi
  output mv_resume_wfi;
  output RDY_mv_resume_wfi;

  // action method ma_update_fflags
  input  [4 : 0] ma_update_fflags_flags;
  input  EN_ma_update_fflags;
  output RDY_ma_update_fflags;

  // value method mv_cacheenable
  output [2 : 0] mv_cacheenable;
  output RDY_mv_cacheenable;

  // value method mv_csr_misa_c
  output mv_csr_misa_c;
  output RDY_mv_csr_misa_c;

  // action method ma_clint_mtime
  input  [63 : 0] ma_clint_mtime_c_mtime;
  input  EN_ma_clint_mtime;
  output RDY_ma_clint_mtime;

  // action method ma_incr_minstret
  input  EN_ma_incr_minstret;
  output RDY_ma_incr_minstret;

  // value method mv_mcounteren
  output [31 : 0] mv_mcounteren;
  output RDY_mv_mcounteren;

  // action method ma_debug_halt_request
  input  ma_debug_halt_request_ip;
  input  EN_ma_debug_halt_request;
  output RDY_ma_debug_halt_request;

  // action method ma_debug_resume_request
  input  ma_debug_resume_request_ip;
  input  EN_ma_debug_resume_request;
  output RDY_ma_debug_resume_request;

  // value method mv_core_is_halted
  output mv_core_is_halted;
  output RDY_mv_core_is_halted;

  // value method mv_step_is_set
  output mv_step_is_set;
  output RDY_mv_step_is_set;

  // value method mv_step_ie
  output mv_step_ie;
  output RDY_mv_step_ie;

  // value method mv_core_debugenable
  output mv_core_debugenable;
  output RDY_mv_core_debugenable;

  // action method ma_events_grp4
  input  [29 : 0] ma_events_grp4_e;
  input  EN_ma_events_grp4;
  output RDY_ma_events_grp4;

  // action method ma_events_grp5
  input  [29 : 0] ma_events_grp5_e;
  input  EN_ma_events_grp5;
  output RDY_ma_events_grp5;

  // action method ma_events_grp6
  input  [29 : 0] ma_events_grp6_e;
  input  EN_ma_events_grp6;
  output RDY_ma_events_grp6;

  // action method ma_events_grp7
  input  [29 : 0] ma_events_grp7_e;
  input  EN_ma_events_grp7;
  output RDY_ma_events_grp7;

  // value method mv_counter_values_fst
  output [1855 : 0] mv_counter_values_fst;
  output RDY_mv_counter_values_fst;

  // value method mv_counter_values_snd
  output [1855 : 0] mv_counter_values_snd;
  output RDY_mv_counter_values_snd;

  // signals for module outputs
  wire [1855 : 0] mv_counter_values_fst, mv_counter_values_snd;
  wire [198 : 0] mv_csrs_to_decode;
  wire [64 : 0] mv_resp_to_core;
  wire [63 : 0] mav_upd_on_ret, mav_upd_on_trap, mv_csr_mstatus, mv_csr_satp;
  wire [31 : 0] mv_mcounteren;
  wire [2 : 0] mv_cacheenable;
  wire [1 : 0] mv_curr_priv;
  wire RDY_ma_clint_msip,
       RDY_ma_clint_mtime,
       RDY_ma_clint_mtip,
       RDY_ma_core_req,
       RDY_ma_debug_halt_request,
       RDY_ma_debug_resume_request,
       RDY_ma_events_grp4,
       RDY_ma_events_grp5,
       RDY_ma_events_grp6,
       RDY_ma_events_grp7,
       RDY_ma_incr_minstret,
       RDY_ma_set_external_interrupt,
       RDY_ma_update_fflags,
       RDY_mav_upd_on_ret,
       RDY_mav_upd_on_trap,
       RDY_mv_cacheenable,
       RDY_mv_core_debugenable,
       RDY_mv_core_is_halted,
       RDY_mv_counter_values_fst,
       RDY_mv_counter_values_snd,
       RDY_mv_csr_misa_c,
       RDY_mv_csr_mstatus,
       RDY_mv_csr_satp,
       RDY_mv_csrs_to_decode,
       RDY_mv_curr_priv,
       RDY_mv_mcounteren,
       RDY_mv_resp_to_core,
       RDY_mv_resume_wfi,
       RDY_mv_step_ie,
       RDY_mv_step_is_set,
       mv_core_debugenable,
       mv_core_is_halted,
       mv_csr_misa_c,
       mv_resume_wfi,
       mv_step_ie,
       mv_step_is_set;

  // register rg_prv
  // reg : holds the current privilege level and provides this information to groups 1,3
  reg [1 : 0] rg_prv;
  wire [1 : 0] rg_prv_D_IN;
  wire rg_prv_EN;

  // ports of submodule mk_grp1
  wire [198 : 0] mk_grp1_mv_csrs_to_decode;
  wire [79 : 0] mk_grp1_ma_core_req_req, mk_grp1_mav_fwd_req;
  wire [64 : 0] mk_grp1_mv_core_resp;
  wire [63 : 0] mk_grp1_ma_csr_misa_m,
		mk_grp1_mav_upd_on_ret,
		mk_grp1_mav_upd_on_trap,
		mk_grp1_mav_upd_on_trap_pc,
		mk_grp1_mav_upd_on_trap_tval,
		mk_grp1_mv_csr_mstatus,
		mk_grp1_mv_csr_satp;
  wire [31 : 0] mk_grp1_ma_csr_dcsr_dcsr_val;
  wire [28 : 0] mk_grp1_ma_counter_interrupts_i;
  wire [15 : 0] mk_grp1_mv_medeleg;
  wire [11 : 0] mk_grp1_mv_mideleg;
  wire [5 : 0] mk_grp1_mav_upd_on_trap_c;
  wire [2 : 0] mk_grp1_ma_frm_frm_val;
  wire [1 : 0] mk_grp1_ma_upd_privilege_prv,
	       mk_grp1_mav_upd_on_ret_prv,
	       mk_grp1_mav_upd_on_trap_prv,
	       mk_grp1_mv_mpp;
  wire mk_grp1_EN_ma_clint_msip,
       mk_grp1_EN_ma_clint_mtip,
       mk_grp1_EN_ma_core_req,
       mk_grp1_EN_ma_counter_interrupts,
       mk_grp1_EN_ma_set_external_interrupt,
       mk_grp1_EN_mav_fwd_req,
       mk_grp1_EN_mav_upd_on_ret,
       mk_grp1_EN_mav_upd_on_trap,
       mk_grp1_RDY_ma_core_req,
       mk_grp1_RDY_ma_set_external_interrupt,
       mk_grp1_RDY_mav_fwd_req,
       mk_grp1_RDY_mav_upd_on_ret,
       mk_grp1_RDY_mav_upd_on_trap,
       mk_grp1_RDY_mv_csrs_to_decode,
       mk_grp1_RDY_mv_resume_wfi,
       mk_grp1_ma_clint_msip_intrpt,
       mk_grp1_ma_clint_mtip_intrpt,
       mk_grp1_ma_core_halted_core_halted_val,
       mk_grp1_ma_halt_int_halt_int_val,
       mk_grp1_ma_resume_int_resume_int_val,
       mk_grp1_ma_set_external_interrupt_ex_i,
       mk_grp1_mv_resume_wfi,
       mk_grp1_mv_spp;

  // ports of submodule mk_grp2
  wire [79 : 0] mk_grp2_ma_core_req_req, mk_grp2_mav_fwd_req;
  wire [64 : 0] mk_grp2_mv_core_resp;
  wire [63 : 0] mk_grp2_mv_csr_misa;
  wire [4 : 0] mk_grp2_ma_update_fflags_flags;
  wire [2 : 0] mk_grp2_mv_cacheenable, mk_grp2_mv_frm;
  wire mk_grp2_EN_ma_core_req,
       mk_grp2_EN_ma_update_fflags,
       mk_grp2_EN_mav_fwd_req,
       mk_grp2_RDY_ma_core_req,
       mk_grp2_RDY_mav_fwd_req,
       mk_grp2_mv_csr_misa_c;

  // ports of submodule mk_grp3
  wire [79 : 0] mk_grp3_ma_core_req_req, mk_grp3_mav_fwd_req;
  wire [65 : 0] mk_grp3_mav_upd_on_debugger;
  wire [64 : 0] mk_grp3_mv_core_resp;
  wire [63 : 0] mk_grp3_ma_clint_mtime_c_mtime,
		mk_grp3_mav_upd_on_debugger_pc,
		mk_grp3_mav_upd_on_debugger_tval;
  wire [31 : 0] mk_grp3_mv_csr_dcsr, mk_grp3_mv_mcounteren;
  wire [7 : 0] mk_grp3_mv_mcountinhibit_grp7, mk_grp3_mv_mhpminterrupten_grp7;
  wire [6 : 0] mk_grp3_mv_mcountinhibit_grp4,
	       mk_grp3_mv_mcountinhibit_grp5,
	       mk_grp3_mv_mcountinhibit_grp6,
	       mk_grp3_mv_mhpminterrupten_grp4,
	       mk_grp3_mv_mhpminterrupten_grp5,
	       mk_grp3_mv_mhpminterrupten_grp6;
  wire [5 : 0] mk_grp3_mav_upd_on_debugger_c;
  wire [1 : 0] mk_grp3_ma_upd_privilege_prv;
  wire mk_grp3_EN_ma_clint_mtime,
       mk_grp3_EN_ma_core_req,
       mk_grp3_EN_ma_debug_halt_request,
       mk_grp3_EN_ma_debug_resume_request,
       mk_grp3_EN_ma_incr_minstret,
       mk_grp3_EN_mav_fwd_req,
       mk_grp3_EN_mav_upd_on_debugger,
       mk_grp3_RDY_ma_core_req,
       mk_grp3_RDY_mav_fwd_req,
       mk_grp3_RDY_mav_upd_on_debugger,
       mk_grp3_ma_debug_halt_request_ip,
       mk_grp3_ma_debug_resume_request_ip,
       mk_grp3_mv_core_debugenable,
       mk_grp3_mv_core_halted,
       mk_grp3_mv_core_is_halted,
       mk_grp3_mv_dcsr_stopcount,
       mk_grp3_mv_halt_int,
       mk_grp3_mv_resume_int,
       mk_grp3_mv_step_ie,
       mk_grp3_mv_step_is_set;

  // ports of submodule mk_grp4
  wire [447 : 0] mk_grp4_mv_counter_values_fst, mk_grp4_mv_counter_values_snd;
  wire [79 : 0] mk_grp4_ma_core_req_req, mk_grp4_mav_fwd_req;
  wire [64 : 0] mk_grp4_mv_core_resp;
  wire [29 : 0] mk_grp4_ma_events_e;
  wire [6 : 0] mk_grp4_ma_mcountinhibit_mcountinhibit_val,
	       mk_grp4_ma_mhpminterrupten_v,
	       mk_grp4_mv_counter_interrupt;
  wire mk_grp4_EN_ma_core_req,
       mk_grp4_EN_ma_events,
       mk_grp4_EN_mav_fwd_req,
       mk_grp4_RDY_ma_core_req,
       mk_grp4_RDY_mav_fwd_req,
       mk_grp4_RDY_mv_counter_interrupt,
       mk_grp4_ma_dcsr_stopcount_dcsr_stopcount_val;

  // ports of submodule mk_grp5
  wire [447 : 0] mk_grp5_mv_counter_values_fst, mk_grp5_mv_counter_values_snd;
  wire [79 : 0] mk_grp5_ma_core_req_req, mk_grp5_mav_fwd_req;
  wire [64 : 0] mk_grp5_mv_core_resp;
  wire [29 : 0] mk_grp5_ma_events_e;
  wire [6 : 0] mk_grp5_ma_mcountinhibit_mcountinhibit_val,
	       mk_grp5_ma_mhpminterrupten_v,
	       mk_grp5_mv_counter_interrupt;
  wire mk_grp5_EN_ma_core_req,
       mk_grp5_EN_ma_events,
       mk_grp5_EN_mav_fwd_req,
       mk_grp5_RDY_ma_core_req,
       mk_grp5_RDY_mav_fwd_req,
       mk_grp5_RDY_mv_counter_interrupt,
       mk_grp5_ma_dcsr_stopcount_dcsr_stopcount_val;

  // ports of submodule mk_grp6
  wire [447 : 0] mk_grp6_mv_counter_values_fst, mk_grp6_mv_counter_values_snd;
  wire [79 : 0] mk_grp6_ma_core_req_req, mk_grp6_mav_fwd_req;
  wire [64 : 0] mk_grp6_mv_core_resp;
  wire [29 : 0] mk_grp6_ma_events_e;
  wire [6 : 0] mk_grp6_ma_mcountinhibit_mcountinhibit_val,
	       mk_grp6_ma_mhpminterrupten_v,
	       mk_grp6_mv_counter_interrupt;
  wire mk_grp6_EN_ma_core_req,
       mk_grp6_EN_ma_events,
       mk_grp6_EN_mav_fwd_req,
       mk_grp6_RDY_ma_core_req,
       mk_grp6_RDY_mav_fwd_req,
       mk_grp6_RDY_mv_counter_interrupt,
       mk_grp6_ma_dcsr_stopcount_dcsr_stopcount_val;

  // ports of submodule mk_grp7
  wire [511 : 0] mk_grp7_mv_counter_values_fst, mk_grp7_mv_counter_values_snd;
  wire [79 : 0] mk_grp7_ma_core_req_req;
  wire [64 : 0] mk_grp7_mv_core_resp;
  wire [29 : 0] mk_grp7_ma_events_e;
  wire [7 : 0] mk_grp7_ma_mcountinhibit_mcountinhibit_val,
	       mk_grp7_ma_mhpminterrupten_v,
	       mk_grp7_mv_counter_interrupt;
  wire mk_grp7_EN_ma_core_req,
       mk_grp7_EN_ma_events,
       mk_grp7_RDY_mv_counter_interrupt,
       mk_grp7_ma_dcsr_stopcount_dcsr_stopcount_val;

  // rule scheduling signals
  wire CAN_FIRE_RL_mkConnectionAVtoAf,
       CAN_FIRE_RL_mkConnectionAVtoAf_1,
       CAN_FIRE_RL_mkConnectionAVtoAf_2,
       CAN_FIRE_RL_mkConnectionAVtoAf_3,
       CAN_FIRE_RL_mkConnectionAVtoAf_4,
       CAN_FIRE_RL_mkConnectionAVtoAf_5,
       CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_mkConnectionVtoAf_1,
       CAN_FIRE_RL_mkConnectionVtoAf_10,
       CAN_FIRE_RL_mkConnectionVtoAf_11,
       CAN_FIRE_RL_mkConnectionVtoAf_12,
       CAN_FIRE_RL_mkConnectionVtoAf_13,
       CAN_FIRE_RL_mkConnectionVtoAf_14,
       CAN_FIRE_RL_mkConnectionVtoAf_15,
       CAN_FIRE_RL_mkConnectionVtoAf_16,
       CAN_FIRE_RL_mkConnectionVtoAf_17,
       CAN_FIRE_RL_mkConnectionVtoAf_2,
       CAN_FIRE_RL_mkConnectionVtoAf_3,
       CAN_FIRE_RL_mkConnectionVtoAf_4,
       CAN_FIRE_RL_mkConnectionVtoAf_5,
       CAN_FIRE_RL_mkConnectionVtoAf_6,
       CAN_FIRE_RL_mkConnectionVtoAf_7,
       CAN_FIRE_RL_mkConnectionVtoAf_8,
       CAN_FIRE_RL_mkConnectionVtoAf_9,
       CAN_FIRE_RL_rl_send_counter_interrupts,
       CAN_FIRE_RL_rl_upd_grp_privilege,
       CAN_FIRE_ma_clint_msip,
       CAN_FIRE_ma_clint_mtime,
       CAN_FIRE_ma_clint_mtip,
       CAN_FIRE_ma_core_req,
       CAN_FIRE_ma_debug_halt_request,
       CAN_FIRE_ma_debug_resume_request,
       CAN_FIRE_ma_events_grp4,
       CAN_FIRE_ma_events_grp5,
       CAN_FIRE_ma_events_grp6,
       CAN_FIRE_ma_events_grp7,
       CAN_FIRE_ma_incr_minstret,
       CAN_FIRE_ma_set_external_interrupt,
       CAN_FIRE_ma_update_fflags,
       CAN_FIRE_mav_upd_on_ret,
       CAN_FIRE_mav_upd_on_trap,
       WILL_FIRE_RL_mkConnectionAVtoAf,
       WILL_FIRE_RL_mkConnectionAVtoAf_1,
       WILL_FIRE_RL_mkConnectionAVtoAf_2,
       WILL_FIRE_RL_mkConnectionAVtoAf_3,
       WILL_FIRE_RL_mkConnectionAVtoAf_4,
       WILL_FIRE_RL_mkConnectionAVtoAf_5,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_mkConnectionVtoAf_1,
       WILL_FIRE_RL_mkConnectionVtoAf_10,
       WILL_FIRE_RL_mkConnectionVtoAf_11,
       WILL_FIRE_RL_mkConnectionVtoAf_12,
       WILL_FIRE_RL_mkConnectionVtoAf_13,
       WILL_FIRE_RL_mkConnectionVtoAf_14,
       WILL_FIRE_RL_mkConnectionVtoAf_15,
       WILL_FIRE_RL_mkConnectionVtoAf_16,
       WILL_FIRE_RL_mkConnectionVtoAf_17,
       WILL_FIRE_RL_mkConnectionVtoAf_2,
       WILL_FIRE_RL_mkConnectionVtoAf_3,
       WILL_FIRE_RL_mkConnectionVtoAf_4,
       WILL_FIRE_RL_mkConnectionVtoAf_5,
       WILL_FIRE_RL_mkConnectionVtoAf_6,
       WILL_FIRE_RL_mkConnectionVtoAf_7,
       WILL_FIRE_RL_mkConnectionVtoAf_8,
       WILL_FIRE_RL_mkConnectionVtoAf_9,
       WILL_FIRE_RL_rl_send_counter_interrupts,
       WILL_FIRE_RL_rl_upd_grp_privilege,
       WILL_FIRE_ma_clint_msip,
       WILL_FIRE_ma_clint_mtime,
       WILL_FIRE_ma_clint_mtip,
       WILL_FIRE_ma_core_req,
       WILL_FIRE_ma_debug_halt_request,
       WILL_FIRE_ma_debug_resume_request,
       WILL_FIRE_ma_events_grp4,
       WILL_FIRE_ma_events_grp5,
       WILL_FIRE_ma_events_grp6,
       WILL_FIRE_ma_events_grp7,
       WILL_FIRE_ma_incr_minstret,
       WILL_FIRE_ma_set_external_interrupt,
       WILL_FIRE_ma_update_fflags,
       WILL_FIRE_mav_upd_on_ret,
       WILL_FIRE_mav_upd_on_trap;

  // inputs to muxes for submodule ports
  wire [1 : 0] MUX_rg_prv_write_1__VAL_1, MUX_rg_prv_write_1__VAL_2;

  // remaining internal signals
  wire [63 : 0] anydata__h1210,
		x__h2737,
		x__h2739,
		x__h2741,
		x__h2743,
		x__h2745;
  wire [15 : 0] x__h3049;
  wire [11 : 0] x__h3009;
  wire mav_upd_on_trap_c_ULE_53___d92,
       mav_upd_on_trap_c_ULT_49___d90,
       mk_grp1_mv_core_resp__2_BIT_64_3_OR_mk_grp2_mv_ETC___d71,
       mk_grp1_mv_mideleg__9_SRL_mav_upd_on_trap_c_BI_ETC___d112,
       y__h3046;

  // action method ma_core_req
  assign RDY_ma_core_req = mk_grp1_RDY_ma_core_req ;
  assign CAN_FIRE_ma_core_req = mk_grp1_RDY_ma_core_req ;
  assign WILL_FIRE_ma_core_req = EN_ma_core_req ;

  // value method mv_resp_to_core
  assign mv_resp_to_core =
	     { mk_grp1_mv_core_resp__2_BIT_64_3_OR_mk_grp2_mv_ETC___d71,
	       anydata__h1210 } ;
  assign RDY_mv_resp_to_core = 1'd1 ;

  // actionvalue method mav_upd_on_ret
  assign mav_upd_on_ret = mk_grp1_mav_upd_on_ret ;
  assign RDY_mav_upd_on_ret = mk_grp1_RDY_mav_upd_on_ret ;
  assign CAN_FIRE_mav_upd_on_ret = mk_grp1_RDY_mav_upd_on_ret ;
  assign WILL_FIRE_mav_upd_on_ret = EN_mav_upd_on_ret ;

  // actionvalue method mav_upd_on_trap
  assign mav_upd_on_trap =
	     (!mav_upd_on_trap_c_ULT_49___d90 &&
	      mav_upd_on_trap_c_ULE_53___d92 ||
	      mav_upd_on_trap_c == 6'd54) ?
	       mk_grp3_mav_upd_on_debugger[63:0] :
	       mk_grp1_mav_upd_on_trap ;
  assign RDY_mav_upd_on_trap =
	     mk_grp3_RDY_mav_upd_on_debugger && mk_grp1_RDY_mav_upd_on_trap ;
  assign CAN_FIRE_mav_upd_on_trap =
	     mk_grp3_RDY_mav_upd_on_debugger && mk_grp1_RDY_mav_upd_on_trap ;
  assign WILL_FIRE_mav_upd_on_trap = EN_mav_upd_on_trap ;

  // action method ma_clint_msip
  assign RDY_ma_clint_msip = 1'd1 ;
  assign CAN_FIRE_ma_clint_msip = 1'd1 ;
  assign WILL_FIRE_ma_clint_msip = EN_ma_clint_msip ;

  // action method ma_clint_mtip
  assign RDY_ma_clint_mtip = 1'd1 ;
  assign CAN_FIRE_ma_clint_mtip = 1'd1 ;
  assign WILL_FIRE_ma_clint_mtip = EN_ma_clint_mtip ;

  // action method ma_set_external_interrupt
  assign RDY_ma_set_external_interrupt =
	     mk_grp1_RDY_ma_set_external_interrupt ;
  assign CAN_FIRE_ma_set_external_interrupt =
	     mk_grp1_RDY_ma_set_external_interrupt ;
  assign WILL_FIRE_ma_set_external_interrupt = EN_ma_set_external_interrupt ;

  // value method mv_csr_satp
  assign mv_csr_satp = mk_grp1_mv_csr_satp ;
  assign RDY_mv_csr_satp = 1'd1 ;

  // value method mv_csr_mstatus
  assign mv_csr_mstatus = mk_grp1_mv_csr_mstatus ;
  assign RDY_mv_csr_mstatus = 1'd1 ;

  // value method mv_csrs_to_decode
  assign mv_csrs_to_decode = mk_grp1_mv_csrs_to_decode ;
  assign RDY_mv_csrs_to_decode = mk_grp1_RDY_mv_csrs_to_decode ;

  // value method mv_curr_priv
  assign mv_curr_priv = rg_prv ;
  assign RDY_mv_curr_priv = 1'd1 ;

  // value method mv_resume_wfi
  assign mv_resume_wfi = mk_grp1_mv_resume_wfi ;
  assign RDY_mv_resume_wfi = mk_grp1_RDY_mv_resume_wfi ;

  // action method ma_update_fflags
  assign RDY_ma_update_fflags = 1'd1 ;
  assign CAN_FIRE_ma_update_fflags = 1'd1 ;
  assign WILL_FIRE_ma_update_fflags = EN_ma_update_fflags ;

  // value method mv_cacheenable
  assign mv_cacheenable = mk_grp2_mv_cacheenable ;
  assign RDY_mv_cacheenable = 1'd1 ;

  // value method mv_csr_misa_c
  assign mv_csr_misa_c = mk_grp2_mv_csr_misa_c ;
  assign RDY_mv_csr_misa_c = 1'd1 ;

  // action method ma_clint_mtime
  assign RDY_ma_clint_mtime = 1'd1 ;
  assign CAN_FIRE_ma_clint_mtime = 1'd1 ;
  assign WILL_FIRE_ma_clint_mtime = EN_ma_clint_mtime ;

  // action method ma_incr_minstret
  assign RDY_ma_incr_minstret = 1'd1 ;
  assign CAN_FIRE_ma_incr_minstret = 1'd1 ;
  assign WILL_FIRE_ma_incr_minstret = EN_ma_incr_minstret ;

  // value method mv_mcounteren
  assign mv_mcounteren = mk_grp3_mv_mcounteren ;
  assign RDY_mv_mcounteren = 1'd1 ;

  // action method ma_debug_halt_request
  assign RDY_ma_debug_halt_request = 1'd1 ;
  assign CAN_FIRE_ma_debug_halt_request = 1'd1 ;
  assign WILL_FIRE_ma_debug_halt_request = EN_ma_debug_halt_request ;

  // action method ma_debug_resume_request
  assign RDY_ma_debug_resume_request = 1'd1 ;
  assign CAN_FIRE_ma_debug_resume_request = 1'd1 ;
  assign WILL_FIRE_ma_debug_resume_request = EN_ma_debug_resume_request ;

  // value method mv_core_is_halted
  assign mv_core_is_halted = mk_grp3_mv_core_is_halted ;
  assign RDY_mv_core_is_halted = 1'd1 ;

  // value method mv_step_is_set
  assign mv_step_is_set = mk_grp3_mv_step_is_set ;
  assign RDY_mv_step_is_set = 1'd1 ;

  // value method mv_step_ie
  assign mv_step_ie = mk_grp3_mv_step_ie ;
  assign RDY_mv_step_ie = 1'd1 ;

  // value method mv_core_debugenable
  assign mv_core_debugenable = mk_grp3_mv_core_debugenable ;
  assign RDY_mv_core_debugenable = 1'd1 ;

  // action method ma_events_grp4
  assign RDY_ma_events_grp4 = 1'd1 ;
  assign CAN_FIRE_ma_events_grp4 = 1'd1 ;
  assign WILL_FIRE_ma_events_grp4 = EN_ma_events_grp4 ;

  // action method ma_events_grp5
  assign RDY_ma_events_grp5 = 1'd1 ;
  assign CAN_FIRE_ma_events_grp5 = 1'd1 ;
  assign WILL_FIRE_ma_events_grp5 = EN_ma_events_grp5 ;

  // action method ma_events_grp6
  assign RDY_ma_events_grp6 = 1'd1 ;
  assign CAN_FIRE_ma_events_grp6 = 1'd1 ;
  assign WILL_FIRE_ma_events_grp6 = EN_ma_events_grp6 ;

  // action method ma_events_grp7
  assign RDY_ma_events_grp7 = 1'd1 ;
  assign CAN_FIRE_ma_events_grp7 = 1'd1 ;
  assign WILL_FIRE_ma_events_grp7 = EN_ma_events_grp7 ;

  // value method mv_counter_values_fst
  assign mv_counter_values_fst =
	     { mk_grp7_mv_counter_values_fst,
	       mk_grp6_mv_counter_values_fst,
	       mk_grp5_mv_counter_values_fst,
	       mk_grp4_mv_counter_values_fst } ;
  assign RDY_mv_counter_values_fst = 1'd1 ;

  // value method mv_counter_values_snd
  assign mv_counter_values_snd =
	     { mk_grp7_mv_counter_values_snd,
	       mk_grp6_mv_counter_values_snd,
	       mk_grp5_mv_counter_values_snd,
	       mk_grp4_mv_counter_values_snd } ;
  assign RDY_mv_counter_values_snd = 1'd1 ;

  // submodule mk_grp1
  mk_csr_grp1 mk_grp1(.CLK(CLK),
		      .RST_N(RST_N),
		      .ma_clint_msip_intrpt(mk_grp1_ma_clint_msip_intrpt),
		      .ma_clint_mtip_intrpt(mk_grp1_ma_clint_mtip_intrpt),
		      .ma_core_halted_core_halted_val(mk_grp1_ma_core_halted_core_halted_val),
		      .ma_core_req_req(mk_grp1_ma_core_req_req),
		      .ma_counter_interrupts_i(mk_grp1_ma_counter_interrupts_i),
		      .ma_csr_dcsr_dcsr_val(mk_grp1_ma_csr_dcsr_dcsr_val),
		      .ma_csr_misa_m(mk_grp1_ma_csr_misa_m),
		      .ma_frm_frm_val(mk_grp1_ma_frm_frm_val),
		      .ma_halt_int_halt_int_val(mk_grp1_ma_halt_int_halt_int_val),
		      .ma_resume_int_resume_int_val(mk_grp1_ma_resume_int_resume_int_val),
		      .ma_set_external_interrupt_ex_i(mk_grp1_ma_set_external_interrupt_ex_i),
		      .ma_upd_privilege_prv(mk_grp1_ma_upd_privilege_prv),
		      .mav_upd_on_ret_prv(mk_grp1_mav_upd_on_ret_prv),
		      .mav_upd_on_trap_c(mk_grp1_mav_upd_on_trap_c),
		      .mav_upd_on_trap_pc(mk_grp1_mav_upd_on_trap_pc),
		      .mav_upd_on_trap_prv(mk_grp1_mav_upd_on_trap_prv),
		      .mav_upd_on_trap_tval(mk_grp1_mav_upd_on_trap_tval),
		      .EN_ma_core_req(mk_grp1_EN_ma_core_req),
		      .EN_mav_fwd_req(mk_grp1_EN_mav_fwd_req),
		      .EN_ma_counter_interrupts(mk_grp1_EN_ma_counter_interrupts),
		      .EN_ma_clint_msip(mk_grp1_EN_ma_clint_msip),
		      .EN_ma_clint_mtip(mk_grp1_EN_ma_clint_mtip),
		      .EN_ma_set_external_interrupt(mk_grp1_EN_ma_set_external_interrupt),
		      .EN_mav_upd_on_ret(mk_grp1_EN_mav_upd_on_ret),
		      .EN_mav_upd_on_trap(mk_grp1_EN_mav_upd_on_trap),
		      .RDY_ma_core_req(mk_grp1_RDY_ma_core_req),
		      .mv_core_resp(mk_grp1_mv_core_resp),
		      .RDY_mv_core_resp(),
		      .mav_fwd_req(mk_grp1_mav_fwd_req),
		      .RDY_mav_fwd_req(mk_grp1_RDY_mav_fwd_req),
		      .RDY_ma_counter_interrupts(),
		      .RDY_ma_clint_msip(),
		      .RDY_ma_clint_mtip(),
		      .RDY_ma_set_external_interrupt(mk_grp1_RDY_ma_set_external_interrupt),
		      .mv_csr_satp(mk_grp1_mv_csr_satp),
		      .RDY_mv_csr_satp(),
		      .mv_csr_mstatus(mk_grp1_mv_csr_mstatus),
		      .RDY_mv_csr_mstatus(),
		      .mv_csrs_to_decode(mk_grp1_mv_csrs_to_decode),
		      .RDY_mv_csrs_to_decode(mk_grp1_RDY_mv_csrs_to_decode),
		      .mav_upd_on_ret(mk_grp1_mav_upd_on_ret),
		      .RDY_mav_upd_on_ret(mk_grp1_RDY_mav_upd_on_ret),
		      .mav_upd_on_trap(mk_grp1_mav_upd_on_trap),
		      .RDY_mav_upd_on_trap(mk_grp1_RDY_mav_upd_on_trap),
		      .mv_mpp(mk_grp1_mv_mpp),
		      .mv_resume_wfi(mk_grp1_mv_resume_wfi),
		      .RDY_mv_resume_wfi(mk_grp1_RDY_mv_resume_wfi),
		      .mv_spp(mk_grp1_mv_spp),
		      .mv_medeleg(mk_grp1_mv_medeleg),
		      .RDY_mv_medeleg(),
		      .mv_mideleg(mk_grp1_mv_mideleg),
		      .RDY_mv_mideleg());

  // submodule mk_grp2
  mk_csr_grp2 mk_grp2(.CLK(CLK),
		      .RST_N(RST_N),
		      .ma_core_req_req(mk_grp2_ma_core_req_req),
		      .ma_update_fflags_flags(mk_grp2_ma_update_fflags_flags),
		      .EN_ma_core_req(mk_grp2_EN_ma_core_req),
		      .EN_mav_fwd_req(mk_grp2_EN_mav_fwd_req),
		      .EN_ma_update_fflags(mk_grp2_EN_ma_update_fflags),
		      .RDY_ma_core_req(mk_grp2_RDY_ma_core_req),
		      .mv_core_resp(mk_grp2_mv_core_resp),
		      .RDY_mv_core_resp(),
		      .mav_fwd_req(mk_grp2_mav_fwd_req),
		      .RDY_mav_fwd_req(mk_grp2_RDY_mav_fwd_req),
		      .mv_csr_misa(mk_grp2_mv_csr_misa),
		      .mv_frm(mk_grp2_mv_frm),
		      .mv_update_fs(),
		      .RDY_mv_update_fs(),
		      .RDY_ma_update_fflags(),
		      .mv_cacheenable(mk_grp2_mv_cacheenable),
		      .RDY_mv_cacheenable(),
		      .mv_csr_misa_c(mk_grp2_mv_csr_misa_c),
		      .RDY_mv_csr_misa_c());

  // submodule mk_grp3
  mk_csr_grp3 mk_grp3(.CLK(CLK),
		      .RST_N(RST_N),
		      .ma_clint_mtime_c_mtime(mk_grp3_ma_clint_mtime_c_mtime),
		      .ma_core_req_req(mk_grp3_ma_core_req_req),
		      .ma_debug_halt_request_ip(mk_grp3_ma_debug_halt_request_ip),
		      .ma_debug_resume_request_ip(mk_grp3_ma_debug_resume_request_ip),
		      .ma_upd_privilege_prv(mk_grp3_ma_upd_privilege_prv),
		      .mav_upd_on_debugger_c(mk_grp3_mav_upd_on_debugger_c),
		      .mav_upd_on_debugger_pc(mk_grp3_mav_upd_on_debugger_pc),
		      .mav_upd_on_debugger_tval(mk_grp3_mav_upd_on_debugger_tval),
		      .EN_ma_core_req(mk_grp3_EN_ma_core_req),
		      .EN_mav_fwd_req(mk_grp3_EN_mav_fwd_req),
		      .EN_ma_debug_halt_request(mk_grp3_EN_ma_debug_halt_request),
		      .EN_ma_debug_resume_request(mk_grp3_EN_ma_debug_resume_request),
		      .EN_mav_upd_on_debugger(mk_grp3_EN_mav_upd_on_debugger),
		      .EN_ma_clint_mtime(mk_grp3_EN_ma_clint_mtime),
		      .EN_ma_incr_minstret(mk_grp3_EN_ma_incr_minstret),
		      .RDY_ma_core_req(mk_grp3_RDY_ma_core_req),
		      .mv_core_resp(mk_grp3_mv_core_resp),
		      .RDY_mv_core_resp(),
		      .mav_fwd_req(mk_grp3_mav_fwd_req),
		      .RDY_mav_fwd_req(mk_grp3_RDY_mav_fwd_req),
		      .mv_csr_dcsr(mk_grp3_mv_csr_dcsr),
		      .mv_resume_int(mk_grp3_mv_resume_int),
		      .mv_core_halted(mk_grp3_mv_core_halted),
		      .mv_halt_int(mk_grp3_mv_halt_int),
		      .mv_dcsr_stopcount(mk_grp3_mv_dcsr_stopcount),
		      .RDY_ma_debug_halt_request(),
		      .RDY_ma_debug_resume_request(),
		      .mv_core_is_halted(mk_grp3_mv_core_is_halted),
		      .RDY_mv_core_is_halted(),
		      .mv_step_is_set(mk_grp3_mv_step_is_set),
		      .RDY_mv_step_is_set(),
		      .mv_step_ie(mk_grp3_mv_step_ie),
		      .RDY_mv_step_ie(),
		      .mv_core_debugenable(mk_grp3_mv_core_debugenable),
		      .RDY_mv_core_debugenable(),
		      .mav_upd_on_debugger(mk_grp3_mav_upd_on_debugger),
		      .RDY_mav_upd_on_debugger(mk_grp3_RDY_mav_upd_on_debugger),
		      .mv_mcounteren(mk_grp3_mv_mcounteren),
		      .mv_mcountinhibit_grp4(mk_grp3_mv_mcountinhibit_grp4),
		      .mv_mhpminterrupten_grp4(mk_grp3_mv_mhpminterrupten_grp4),
		      .mv_mcountinhibit_grp5(mk_grp3_mv_mcountinhibit_grp5),
		      .mv_mhpminterrupten_grp5(mk_grp3_mv_mhpminterrupten_grp5),
		      .mv_mcountinhibit_grp6(mk_grp3_mv_mcountinhibit_grp6),
		      .mv_mhpminterrupten_grp6(mk_grp3_mv_mhpminterrupten_grp6),
		      .mv_mcountinhibit_grp7(mk_grp3_mv_mcountinhibit_grp7),
		      .mv_mhpminterrupten_grp7(mk_grp3_mv_mhpminterrupten_grp7),
		      .RDY_ma_clint_mtime(),
		      .RDY_ma_incr_minstret());

  // submodule mk_grp4
  mk_csr_grp4 mk_grp4(.CLK(CLK),
		      .RST_N(RST_N),
		      .ma_core_req_req(mk_grp4_ma_core_req_req),
		      .ma_dcsr_stopcount_dcsr_stopcount_val(mk_grp4_ma_dcsr_stopcount_dcsr_stopcount_val),
		      .ma_events_e(mk_grp4_ma_events_e),
		      .ma_mcountinhibit_mcountinhibit_val(mk_grp4_ma_mcountinhibit_mcountinhibit_val),
		      .ma_mhpminterrupten_v(mk_grp4_ma_mhpminterrupten_v),
		      .EN_ma_core_req(mk_grp4_EN_ma_core_req),
		      .EN_mav_fwd_req(mk_grp4_EN_mav_fwd_req),
		      .EN_ma_events(mk_grp4_EN_ma_events),
		      .RDY_ma_core_req(mk_grp4_RDY_ma_core_req),
		      .mv_core_resp(mk_grp4_mv_core_resp),
		      .RDY_mv_core_resp(),
		      .mav_fwd_req(mk_grp4_mav_fwd_req),
		      .RDY_mav_fwd_req(mk_grp4_RDY_mav_fwd_req),
		      .mv_counter_interrupt(mk_grp4_mv_counter_interrupt),
		      .RDY_mv_counter_interrupt(mk_grp4_RDY_mv_counter_interrupt),
		      .RDY_ma_events(),
		      .mv_counter_values_fst(mk_grp4_mv_counter_values_fst),
		      .RDY_mv_counter_values_fst(),
		      .mv_counter_values_snd(mk_grp4_mv_counter_values_snd),
		      .RDY_mv_counter_values_snd());

  // submodule mk_grp5
  mk_csr_grp5 mk_grp5(.CLK(CLK),
		      .RST_N(RST_N),
		      .ma_core_req_req(mk_grp5_ma_core_req_req),
		      .ma_dcsr_stopcount_dcsr_stopcount_val(mk_grp5_ma_dcsr_stopcount_dcsr_stopcount_val),
		      .ma_events_e(mk_grp5_ma_events_e),
		      .ma_mcountinhibit_mcountinhibit_val(mk_grp5_ma_mcountinhibit_mcountinhibit_val),
		      .ma_mhpminterrupten_v(mk_grp5_ma_mhpminterrupten_v),
		      .EN_ma_core_req(mk_grp5_EN_ma_core_req),
		      .EN_mav_fwd_req(mk_grp5_EN_mav_fwd_req),
		      .EN_ma_events(mk_grp5_EN_ma_events),
		      .RDY_ma_core_req(mk_grp5_RDY_ma_core_req),
		      .mv_core_resp(mk_grp5_mv_core_resp),
		      .RDY_mv_core_resp(),
		      .mav_fwd_req(mk_grp5_mav_fwd_req),
		      .RDY_mav_fwd_req(mk_grp5_RDY_mav_fwd_req),
		      .mv_counter_interrupt(mk_grp5_mv_counter_interrupt),
		      .RDY_mv_counter_interrupt(mk_grp5_RDY_mv_counter_interrupt),
		      .RDY_ma_events(),
		      .mv_counter_values_fst(mk_grp5_mv_counter_values_fst),
		      .RDY_mv_counter_values_fst(),
		      .mv_counter_values_snd(mk_grp5_mv_counter_values_snd),
		      .RDY_mv_counter_values_snd());

  // submodule mk_grp6
  mk_csr_grp6 mk_grp6(.CLK(CLK),
		      .RST_N(RST_N),
		      .ma_core_req_req(mk_grp6_ma_core_req_req),
		      .ma_dcsr_stopcount_dcsr_stopcount_val(mk_grp6_ma_dcsr_stopcount_dcsr_stopcount_val),
		      .ma_events_e(mk_grp6_ma_events_e),
		      .ma_mcountinhibit_mcountinhibit_val(mk_grp6_ma_mcountinhibit_mcountinhibit_val),
		      .ma_mhpminterrupten_v(mk_grp6_ma_mhpminterrupten_v),
		      .EN_ma_core_req(mk_grp6_EN_ma_core_req),
		      .EN_mav_fwd_req(mk_grp6_EN_mav_fwd_req),
		      .EN_ma_events(mk_grp6_EN_ma_events),
		      .RDY_ma_core_req(mk_grp6_RDY_ma_core_req),
		      .mv_core_resp(mk_grp6_mv_core_resp),
		      .RDY_mv_core_resp(),
		      .mav_fwd_req(mk_grp6_mav_fwd_req),
		      .RDY_mav_fwd_req(mk_grp6_RDY_mav_fwd_req),
		      .mv_counter_interrupt(mk_grp6_mv_counter_interrupt),
		      .RDY_mv_counter_interrupt(mk_grp6_RDY_mv_counter_interrupt),
		      .RDY_ma_events(),
		      .mv_counter_values_fst(mk_grp6_mv_counter_values_fst),
		      .RDY_mv_counter_values_fst(),
		      .mv_counter_values_snd(mk_grp6_mv_counter_values_snd),
		      .RDY_mv_counter_values_snd());

  // submodule mk_grp7
  mk_csr_grp7 mk_grp7(.CLK(CLK),
		      .RST_N(RST_N),
		      .ma_core_req_req(mk_grp7_ma_core_req_req),
		      .ma_dcsr_stopcount_dcsr_stopcount_val(mk_grp7_ma_dcsr_stopcount_dcsr_stopcount_val),
		      .ma_events_e(mk_grp7_ma_events_e),
		      .ma_mcountinhibit_mcountinhibit_val(mk_grp7_ma_mcountinhibit_mcountinhibit_val),
		      .ma_mhpminterrupten_v(mk_grp7_ma_mhpminterrupten_v),
		      .EN_ma_core_req(mk_grp7_EN_ma_core_req),
		      .EN_ma_events(mk_grp7_EN_ma_events),
		      .RDY_ma_core_req(),
		      .mv_core_resp(mk_grp7_mv_core_resp),
		      .RDY_mv_core_resp(),
		      .mv_counter_interrupt(mk_grp7_mv_counter_interrupt),
		      .RDY_mv_counter_interrupt(mk_grp7_RDY_mv_counter_interrupt),
		      .RDY_ma_events(),
		      .mv_counter_values_fst(mk_grp7_mv_counter_values_fst),
		      .RDY_mv_counter_values_fst(),
		      .mv_counter_values_snd(mk_grp7_mv_counter_values_snd),
		      .RDY_mv_counter_values_snd());

  // rule RL_rl_upd_grp_privilege
  //   rule : forwards the data in rg_prv (the current privilege level) to groups 1 and 3
  assign CAN_FIRE_RL_rl_upd_grp_privilege = 1'd1 ;
  assign WILL_FIRE_RL_rl_upd_grp_privilege = 1'd1 ;

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf = 1'd1 ;

  // rule RL_mkConnectionVtoAf_1
  assign CAN_FIRE_RL_mkConnectionVtoAf_1 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_1 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_2
  assign CAN_FIRE_RL_mkConnectionVtoAf_2 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_2 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_3
  assign CAN_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_4
  assign CAN_FIRE_RL_mkConnectionVtoAf_4 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_4 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_5
  assign CAN_FIRE_RL_mkConnectionVtoAf_5 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_5 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_6
  assign CAN_FIRE_RL_mkConnectionVtoAf_6 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_6 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_7
  assign CAN_FIRE_RL_mkConnectionVtoAf_7 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_7 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_8
  assign CAN_FIRE_RL_mkConnectionVtoAf_8 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_8 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_9
  assign CAN_FIRE_RL_mkConnectionVtoAf_9 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_9 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_10
  assign CAN_FIRE_RL_mkConnectionVtoAf_10 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_10 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_11
  assign CAN_FIRE_RL_mkConnectionVtoAf_11 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_11 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_12
  assign CAN_FIRE_RL_mkConnectionVtoAf_12 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_12 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_13
  assign CAN_FIRE_RL_mkConnectionVtoAf_13 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_13 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_14
  assign CAN_FIRE_RL_mkConnectionVtoAf_14 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_14 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_15
  assign CAN_FIRE_RL_mkConnectionVtoAf_15 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_15 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_16
  assign CAN_FIRE_RL_mkConnectionVtoAf_16 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_16 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_17
  assign CAN_FIRE_RL_mkConnectionVtoAf_17 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_17 = 1'd1 ;

  // rule RL_rl_send_counter_interrupts
  assign CAN_FIRE_RL_rl_send_counter_interrupts =
	     mk_grp4_RDY_mv_counter_interrupt &&
	     mk_grp5_RDY_mv_counter_interrupt &&
	     mk_grp6_RDY_mv_counter_interrupt &&
	     mk_grp7_RDY_mv_counter_interrupt ;
  assign WILL_FIRE_RL_rl_send_counter_interrupts =
	     CAN_FIRE_RL_rl_send_counter_interrupts ;

  // rule RL_mkConnectionAVtoAf_5
  assign CAN_FIRE_RL_mkConnectionAVtoAf_5 = mk_grp6_RDY_mav_fwd_req ;
  assign WILL_FIRE_RL_mkConnectionAVtoAf_5 = mk_grp6_RDY_mav_fwd_req ;

  // rule RL_mkConnectionAVtoAf_4
  assign CAN_FIRE_RL_mkConnectionAVtoAf_4 =
	     mk_grp5_RDY_mav_fwd_req && mk_grp6_RDY_ma_core_req ;
  assign WILL_FIRE_RL_mkConnectionAVtoAf_4 =
	     CAN_FIRE_RL_mkConnectionAVtoAf_4 ;

  // rule RL_mkConnectionAVtoAf_3
  assign CAN_FIRE_RL_mkConnectionAVtoAf_3 =
	     mk_grp4_RDY_mav_fwd_req && mk_grp5_RDY_ma_core_req ;
  assign WILL_FIRE_RL_mkConnectionAVtoAf_3 =
	     CAN_FIRE_RL_mkConnectionAVtoAf_3 ;

  // rule RL_mkConnectionAVtoAf_2
  assign CAN_FIRE_RL_mkConnectionAVtoAf_2 =
	     mk_grp3_RDY_mav_fwd_req && mk_grp4_RDY_ma_core_req ;
  assign WILL_FIRE_RL_mkConnectionAVtoAf_2 =
	     CAN_FIRE_RL_mkConnectionAVtoAf_2 ;

  // rule RL_mkConnectionAVtoAf_1
  assign CAN_FIRE_RL_mkConnectionAVtoAf_1 =
	     mk_grp2_RDY_mav_fwd_req && mk_grp3_RDY_ma_core_req ;
  assign WILL_FIRE_RL_mkConnectionAVtoAf_1 =
	     CAN_FIRE_RL_mkConnectionAVtoAf_1 ;

  // rule RL_mkConnectionAVtoAf
  assign CAN_FIRE_RL_mkConnectionAVtoAf =
	     mk_grp1_RDY_mav_fwd_req && mk_grp2_RDY_ma_core_req ;
  assign WILL_FIRE_RL_mkConnectionAVtoAf = CAN_FIRE_RL_mkConnectionAVtoAf ;

  // inputs to muxes for submodule ports
  assign MUX_rg_prv_write_1__VAL_1 =
	     (mav_upd_on_ret_prv == 2'd1) ?
	       { 1'b0, mk_grp1_mv_spp } :
	       mk_grp1_mv_mpp ;
  assign MUX_rg_prv_write_1__VAL_2 =
	     (!mav_upd_on_trap_c_ULT_49___d90 &&
	      mav_upd_on_trap_c_ULE_53___d92 ||
	      mav_upd_on_trap_c == 6'd54) ?
	       ((!mav_upd_on_trap_c_ULT_49___d90 &&
		 mav_upd_on_trap_c_ULE_53___d92) ?
		  2'd3 :
		  mk_grp3_mav_upd_on_debugger[65:64]) :
	       ((mk_grp1_mv_mideleg__9_SRL_mav_upd_on_trap_c_BI_ETC___d112 &&
		 mk_grp2_mv_csr_misa[18]) ?
		  2'd1 :
		  2'd3) ;

  // register rg_prv
  assign rg_prv_D_IN =
	     EN_mav_upd_on_ret ?
	       MUX_rg_prv_write_1__VAL_1 :
	       MUX_rg_prv_write_1__VAL_2 ;
  assign rg_prv_EN = EN_mav_upd_on_ret || EN_mav_upd_on_trap ;

  // submodule mk_grp1
  assign mk_grp1_ma_clint_msip_intrpt = ma_clint_msip_intrpt ;
  assign mk_grp1_ma_clint_mtip_intrpt = ma_clint_mtip_intrpt ;
  assign mk_grp1_ma_core_halted_core_halted_val = mk_grp3_mv_core_halted ;
  assign mk_grp1_ma_core_req_req = ma_core_req_req ;
  assign mk_grp1_ma_counter_interrupts_i =
	     { mk_grp7_mv_counter_interrupt,
	       mk_grp6_mv_counter_interrupt,
	       mk_grp5_mv_counter_interrupt,
	       mk_grp4_mv_counter_interrupt } ;
  assign mk_grp1_ma_csr_dcsr_dcsr_val = mk_grp3_mv_csr_dcsr ;
  assign mk_grp1_ma_csr_misa_m = mk_grp2_mv_csr_misa ;
  assign mk_grp1_ma_frm_frm_val = mk_grp2_mv_frm ;
  assign mk_grp1_ma_halt_int_halt_int_val = mk_grp3_mv_halt_int ;
  assign mk_grp1_ma_resume_int_resume_int_val = mk_grp3_mv_resume_int ;
  assign mk_grp1_ma_set_external_interrupt_ex_i =
	     ma_set_external_interrupt_ex_i ;
  assign mk_grp1_ma_upd_privilege_prv = rg_prv ;
  assign mk_grp1_mav_upd_on_ret_prv = mav_upd_on_ret_prv ;
  assign mk_grp1_mav_upd_on_trap_c = mav_upd_on_trap_c ;
  assign mk_grp1_mav_upd_on_trap_pc = mav_upd_on_trap_pc ;
  assign mk_grp1_mav_upd_on_trap_prv =
	     (mk_grp1_mv_mideleg__9_SRL_mav_upd_on_trap_c_BI_ETC___d112 &&
	      mk_grp2_mv_csr_misa[18]) ?
	       2'd1 :
	       2'd3 ;
  assign mk_grp1_mav_upd_on_trap_tval = mav_upd_on_trap_tval ;
  assign mk_grp1_EN_ma_core_req = EN_ma_core_req ;
  assign mk_grp1_EN_mav_fwd_req = CAN_FIRE_RL_mkConnectionAVtoAf ;
  assign mk_grp1_EN_ma_counter_interrupts =
	     CAN_FIRE_RL_rl_send_counter_interrupts ;
  assign mk_grp1_EN_ma_clint_msip = EN_ma_clint_msip ;
  assign mk_grp1_EN_ma_clint_mtip = EN_ma_clint_mtip ;
  assign mk_grp1_EN_ma_set_external_interrupt = EN_ma_set_external_interrupt ;
  assign mk_grp1_EN_mav_upd_on_ret = EN_mav_upd_on_ret ;
  assign mk_grp1_EN_mav_upd_on_trap =
	     EN_mav_upd_on_trap &&
	     (mav_upd_on_trap_c_ULT_49___d90 ||
	      !mav_upd_on_trap_c_ULE_53___d92) &&
	     mav_upd_on_trap_c != 6'd54 ;

  // submodule mk_grp2
  assign mk_grp2_ma_core_req_req = mk_grp1_mav_fwd_req ;
  assign mk_grp2_ma_update_fflags_flags = ma_update_fflags_flags ;
  assign mk_grp2_EN_ma_core_req = CAN_FIRE_RL_mkConnectionAVtoAf ;
  assign mk_grp2_EN_mav_fwd_req = CAN_FIRE_RL_mkConnectionAVtoAf_1 ;
  assign mk_grp2_EN_ma_update_fflags = EN_ma_update_fflags ;

  // submodule mk_grp3
  assign mk_grp3_ma_clint_mtime_c_mtime = ma_clint_mtime_c_mtime ;
  assign mk_grp3_ma_core_req_req = mk_grp2_mav_fwd_req ;
  assign mk_grp3_ma_debug_halt_request_ip = ma_debug_halt_request_ip ;
  assign mk_grp3_ma_debug_resume_request_ip = ma_debug_resume_request_ip ;
  assign mk_grp3_ma_upd_privilege_prv = rg_prv ;
  assign mk_grp3_mav_upd_on_debugger_c = mav_upd_on_trap_c ;
  assign mk_grp3_mav_upd_on_debugger_pc = mav_upd_on_trap_pc ;
  assign mk_grp3_mav_upd_on_debugger_tval = mav_upd_on_trap_tval ;
  assign mk_grp3_EN_ma_core_req = CAN_FIRE_RL_mkConnectionAVtoAf_1 ;
  assign mk_grp3_EN_mav_fwd_req = CAN_FIRE_RL_mkConnectionAVtoAf_2 ;
  assign mk_grp3_EN_ma_debug_halt_request = EN_ma_debug_halt_request ;
  assign mk_grp3_EN_ma_debug_resume_request = EN_ma_debug_resume_request ;
  assign mk_grp3_EN_mav_upd_on_debugger =
	     EN_mav_upd_on_trap &&
	     (!mav_upd_on_trap_c_ULT_49___d90 &&
	      mav_upd_on_trap_c_ULE_53___d92 ||
	      mav_upd_on_trap_c == 6'd54) ;
  assign mk_grp3_EN_ma_clint_mtime = EN_ma_clint_mtime ;
  assign mk_grp3_EN_ma_incr_minstret = EN_ma_incr_minstret ;

  // submodule mk_grp4
  assign mk_grp4_ma_core_req_req = mk_grp3_mav_fwd_req ;
  assign mk_grp4_ma_dcsr_stopcount_dcsr_stopcount_val =
	     mk_grp3_mv_dcsr_stopcount ;
  assign mk_grp4_ma_events_e = ma_events_grp4_e ;
  assign mk_grp4_ma_mcountinhibit_mcountinhibit_val =
	     mk_grp3_mv_mcountinhibit_grp4 ;
  assign mk_grp4_ma_mhpminterrupten_v = mk_grp3_mv_mhpminterrupten_grp4 ;
  assign mk_grp4_EN_ma_core_req = CAN_FIRE_RL_mkConnectionAVtoAf_2 ;
  assign mk_grp4_EN_mav_fwd_req = CAN_FIRE_RL_mkConnectionAVtoAf_3 ;
  assign mk_grp4_EN_ma_events = EN_ma_events_grp4 ;

  // submodule mk_grp5
  assign mk_grp5_ma_core_req_req = mk_grp4_mav_fwd_req ;
  assign mk_grp5_ma_dcsr_stopcount_dcsr_stopcount_val =
	     mk_grp3_mv_dcsr_stopcount ;
  assign mk_grp5_ma_events_e = ma_events_grp5_e ;
  assign mk_grp5_ma_mcountinhibit_mcountinhibit_val =
	     mk_grp3_mv_mcountinhibit_grp5 ;
  assign mk_grp5_ma_mhpminterrupten_v = mk_grp3_mv_mhpminterrupten_grp5 ;
  assign mk_grp5_EN_ma_core_req = CAN_FIRE_RL_mkConnectionAVtoAf_3 ;
  assign mk_grp5_EN_mav_fwd_req = CAN_FIRE_RL_mkConnectionAVtoAf_4 ;
  assign mk_grp5_EN_ma_events = EN_ma_events_grp5 ;

  // submodule mk_grp6
  assign mk_grp6_ma_core_req_req = mk_grp5_mav_fwd_req ;
  assign mk_grp6_ma_dcsr_stopcount_dcsr_stopcount_val =
	     mk_grp3_mv_dcsr_stopcount ;
  assign mk_grp6_ma_events_e = ma_events_grp6_e ;
  assign mk_grp6_ma_mcountinhibit_mcountinhibit_val =
	     mk_grp3_mv_mcountinhibit_grp6 ;
  assign mk_grp6_ma_mhpminterrupten_v = mk_grp3_mv_mhpminterrupten_grp6 ;
  assign mk_grp6_EN_ma_core_req = CAN_FIRE_RL_mkConnectionAVtoAf_4 ;
  assign mk_grp6_EN_mav_fwd_req = mk_grp6_RDY_mav_fwd_req ;
  assign mk_grp6_EN_ma_events = EN_ma_events_grp6 ;

  // submodule mk_grp7
  assign mk_grp7_ma_core_req_req = mk_grp6_mav_fwd_req ;
  assign mk_grp7_ma_dcsr_stopcount_dcsr_stopcount_val =
	     mk_grp3_mv_dcsr_stopcount ;
  assign mk_grp7_ma_events_e = ma_events_grp7_e ;
  assign mk_grp7_ma_mcountinhibit_mcountinhibit_val =
	     mk_grp3_mv_mcountinhibit_grp7 ;
  assign mk_grp7_ma_mhpminterrupten_v = mk_grp3_mv_mhpminterrupten_grp7 ;
  assign mk_grp7_EN_ma_core_req = mk_grp6_RDY_mav_fwd_req ;
  assign mk_grp7_EN_ma_events = EN_ma_events_grp7 ;

  // remaining internal signals
  assign anydata__h1210 = x__h2737 | mk_grp7_mv_core_resp[63:0] ;
  assign mav_upd_on_trap_c_ULE_53___d92 = mav_upd_on_trap_c <= 6'd53 ;
  assign mav_upd_on_trap_c_ULT_49___d90 = mav_upd_on_trap_c < 6'd49 ;
  assign mk_grp1_mv_core_resp__2_BIT_64_3_OR_mk_grp2_mv_ETC___d71 =
	     mk_grp1_mv_core_resp[64] || mk_grp2_mv_core_resp[64] ||
	     mk_grp3_mv_core_resp[64] ||
	     mk_grp4_mv_core_resp[64] ||
	     mk_grp5_mv_core_resp[64] ||
	     mk_grp6_mv_core_resp[64] ||
	     mk_grp7_mv_core_resp[64] ;
  assign mk_grp1_mv_mideleg__9_SRL_mav_upd_on_trap_c_BI_ETC___d112 =
	     (x__h3009[0] & mav_upd_on_trap_c[5] || x__h3049[0] & y__h3046) &&
	     rg_prv <= 2'd1 ;
  assign x__h2737 = x__h2739 | mk_grp6_mv_core_resp[63:0] ;
  assign x__h2739 = x__h2741 | mk_grp5_mv_core_resp[63:0] ;
  assign x__h2741 = x__h2743 | mk_grp4_mv_core_resp[63:0] ;
  assign x__h2743 = x__h2745 | mk_grp3_mv_core_resp[63:0] ;
  assign x__h2745 = mk_grp1_mv_core_resp[63:0] | mk_grp2_mv_core_resp[63:0] ;
  assign x__h3009 = mk_grp1_mv_mideleg >> mav_upd_on_trap_c[4:0] ;
  assign x__h3049 = mk_grp1_mv_medeleg >> mav_upd_on_trap_c[4:0] ;
  assign y__h3046 = ~mav_upd_on_trap_c[5] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_prv <= `BSV_ASSIGNMENT_DELAY 2'd3;
      end
    else
      begin
        if (rg_prv_EN) rg_prv <= `BSV_ASSIGNMENT_DELAY rg_prv_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_prv = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mk_csr_daisy

