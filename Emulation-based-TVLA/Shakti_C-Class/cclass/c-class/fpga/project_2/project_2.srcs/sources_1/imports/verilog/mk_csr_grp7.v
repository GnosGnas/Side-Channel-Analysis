//
// Generated by Bluespec Compiler, version 2021.07-1-gaf77efcd (build af77efcd)
//
// On Mon Dec  6 11:51:25 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_ma_core_req                O     1 const
// mv_core_resp                   O    65
// RDY_mv_core_resp               O     1 const
// mv_counter_interrupt           O     8
// RDY_mv_counter_interrupt       O     1 const
// RDY_ma_events                  O     1 const
// mv_counter_values_fst          O   512 reg
// RDY_mv_counter_values_fst      O     1 const
// mv_counter_values_snd          O   512 reg
// RDY_mv_counter_values_snd      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_core_req_req                I    80
// ma_dcsr_stopcount_dcsr_stopcount_val  I     1
// ma_mcountinhibit_mcountinhibit_val  I     8
// ma_mhpminterrupten_v           I     8
// ma_events_e                    I    30
// EN_ma_core_req                 I     1
// EN_ma_events                   I     1
//
// Combinational paths from inputs to outputs:
//   (ma_core_req_req, EN_ma_core_req) -> mv_core_resp
//   (ma_mcountinhibit_mcountinhibit_val,
//    ma_mhpminterrupten_v) -> mv_counter_interrupt
//
//
// module : implementing read and write methods for group - 5 csrs and related side band            access
//
// Comments on the inlined module `wr_events':
//   wire : whenever an event described in the Events_grp4 occurs, the corresponding bit in             this wire is set for the corresponding counter assigned to be incremented
//
// Comments on the inlined module `wr_mcountinhibit':
//   wire : to hold the current derived value of mcountinhibit
//
// Comments on the inlined module `wr_dcsr_stopcount':
//   wire: to hold the current derived value of dcsr_stopcount
//
// Comments on the inlined module `rg_resp_to_core':
//   wire : holds the response of this group for a csr operation request,   					  for one cycle, wire is used for low latency
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_csr_grp7(CLK,
		   RST_N,

		   ma_core_req_req,
		   EN_ma_core_req,
		   RDY_ma_core_req,

		   mv_core_resp,
		   RDY_mv_core_resp,

		   ma_dcsr_stopcount_dcsr_stopcount_val,

		   ma_mcountinhibit_mcountinhibit_val,

		   ma_mhpminterrupten_v,

		   mv_counter_interrupt,
		   RDY_mv_counter_interrupt,

		   ma_events_e,
		   EN_ma_events,
		   RDY_ma_events,

		   mv_counter_values_fst,
		   RDY_mv_counter_values_fst,

		   mv_counter_values_snd,
		   RDY_mv_counter_values_snd);
  input  CLK;
  input  RST_N;

  // action method ma_core_req
  input  [79 : 0] ma_core_req_req;
  input  EN_ma_core_req;
  output RDY_ma_core_req;

  // value method mv_core_resp
  output [64 : 0] mv_core_resp;
  output RDY_mv_core_resp;

  // action method ma_dcsr_stopcount
  input  ma_dcsr_stopcount_dcsr_stopcount_val;

  // action method ma_mcountinhibit
  input  [7 : 0] ma_mcountinhibit_mcountinhibit_val;

  // action method ma_mhpminterrupten
  input  [7 : 0] ma_mhpminterrupten_v;

  // value method mv_counter_interrupt
  output [7 : 0] mv_counter_interrupt;
  output RDY_mv_counter_interrupt;

  // action method ma_events
  input  [29 : 0] ma_events_e;
  input  EN_ma_events;
  output RDY_ma_events;

  // value method mv_counter_values_fst
  output [511 : 0] mv_counter_values_fst;
  output RDY_mv_counter_values_fst;

  // value method mv_counter_values_snd
  output [511 : 0] mv_counter_values_snd;
  output RDY_mv_counter_values_snd;

  // signals for module outputs
  wire [511 : 0] mv_counter_values_fst, mv_counter_values_snd;
  wire [64 : 0] mv_core_resp;
  wire [7 : 0] mv_counter_interrupt;
  wire RDY_ma_core_req,
       RDY_ma_events,
       RDY_mv_core_resp,
       RDY_mv_counter_interrupt,
       RDY_mv_counter_values_fst,
       RDY_mv_counter_values_snd;

  // inlined wires
  reg [64 : 0] rg_resp_to_core_wget;
  reg [63 : 0] csr_op_res_wget;
  wire [129 : 0] csr_op_arg_wget;
  wire [30 : 0] wr_events_wget;

  // register mhpmcounter_0
  reg [63 : 0] mhpmcounter_0;
  wire [63 : 0] mhpmcounter_0_D_IN;
  wire mhpmcounter_0_EN;

  // register mhpmcounter_1
  reg [63 : 0] mhpmcounter_1;
  wire [63 : 0] mhpmcounter_1_D_IN;
  wire mhpmcounter_1_EN;

  // register mhpmcounter_2
  reg [63 : 0] mhpmcounter_2;
  wire [63 : 0] mhpmcounter_2_D_IN;
  wire mhpmcounter_2_EN;

  // register mhpmcounter_3
  reg [63 : 0] mhpmcounter_3;
  wire [63 : 0] mhpmcounter_3_D_IN;
  wire mhpmcounter_3_EN;

  // register mhpmcounter_4
  reg [63 : 0] mhpmcounter_4;
  wire [63 : 0] mhpmcounter_4_D_IN;
  wire mhpmcounter_4_EN;

  // register mhpmcounter_5
  reg [63 : 0] mhpmcounter_5;
  wire [63 : 0] mhpmcounter_5_D_IN;
  wire mhpmcounter_5_EN;

  // register mhpmcounter_6
  reg [63 : 0] mhpmcounter_6;
  wire [63 : 0] mhpmcounter_6_D_IN;
  wire mhpmcounter_6_EN;

  // register mhpmcounter_7
  reg [63 : 0] mhpmcounter_7;
  wire [63 : 0] mhpmcounter_7_D_IN;
  wire mhpmcounter_7_EN;

  // register mhpmevent_0
  reg [63 : 0] mhpmevent_0;
  wire [63 : 0] mhpmevent_0_D_IN;
  wire mhpmevent_0_EN;

  // register mhpmevent_1
  reg [63 : 0] mhpmevent_1;
  wire [63 : 0] mhpmevent_1_D_IN;
  wire mhpmevent_1_EN;

  // register mhpmevent_2
  reg [63 : 0] mhpmevent_2;
  wire [63 : 0] mhpmevent_2_D_IN;
  wire mhpmevent_2_EN;

  // register mhpmevent_3
  reg [63 : 0] mhpmevent_3;
  wire [63 : 0] mhpmevent_3_D_IN;
  wire mhpmevent_3_EN;

  // register mhpmevent_4
  reg [63 : 0] mhpmevent_4;
  wire [63 : 0] mhpmevent_4_D_IN;
  wire mhpmevent_4_EN;

  // register mhpmevent_5
  reg [63 : 0] mhpmevent_5;
  wire [63 : 0] mhpmevent_5_D_IN;
  wire mhpmevent_5_EN;

  // register mhpmevent_6
  reg [63 : 0] mhpmevent_6;
  wire [63 : 0] mhpmevent_6_D_IN;
  wire mhpmevent_6_EN;

  // register mhpmevent_7
  reg [63 : 0] mhpmevent_7;
  wire [63 : 0] mhpmevent_7_D_IN;
  wire mhpmevent_7_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_increment_perfmonitors,
       CAN_FIRE_ma_core_req,
       CAN_FIRE_ma_dcsr_stopcount,
       CAN_FIRE_ma_events,
       CAN_FIRE_ma_mcountinhibit,
       CAN_FIRE_ma_mhpminterrupten,
       WILL_FIRE_RL_increment_perfmonitors,
       WILL_FIRE_ma_core_req,
       WILL_FIRE_ma_dcsr_stopcount,
       WILL_FIRE_ma_events,
       WILL_FIRE_ma_mcountinhibit,
       WILL_FIRE_ma_mhpminterrupten;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_mhpmcounter_0_write_1__VAL_1,
		MUX_mhpmcounter_1_write_1__VAL_1,
		MUX_mhpmcounter_2_write_1__VAL_1,
		MUX_mhpmcounter_3_write_1__VAL_1,
		MUX_mhpmcounter_4_write_1__VAL_1,
		MUX_mhpmcounter_5_write_1__VAL_1,
		MUX_mhpmcounter_6_write_1__VAL_1,
		MUX_mhpmcounter_7_write_1__VAL_2;
  wire MUX_mhpmcounter_0_write_1__SEL_1,
       MUX_mhpmcounter_1_write_1__SEL_1,
       MUX_mhpmcounter_2_write_1__SEL_1,
       MUX_mhpmcounter_3_write_1__SEL_1,
       MUX_mhpmcounter_4_write_1__SEL_1,
       MUX_mhpmcounter_5_write_1__SEL_1,
       MUX_mhpmcounter_6_write_1__SEL_1,
       MUX_mhpmcounter_7_write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235;
  wire [63 : 0] x__h9551,
		x__read_data__h9937,
		x_wget_fst__h5352,
		x_wget_snd_fst__h5437;
  wire [30 : 0] bs__h3375;
  wire [7 : 0] IF_NOT_mhpmevent_0_1_EQ_0_2_3_AND_mhpmcounter__ETC__q1;
  wire [1 : 0] x_wget_snd_snd__h5438;
  wire NOT_mhpmevent_0_1_EQ_0_2_3_AND_mhpmcounter_0_4_ETC___d25,
       mhpmevent_1_5_EQ_0_6_OR_NOT_mhpmcounter_1_7_EQ_ETC___d45,
       mhpmevent_2_0_EQ_0_1_OR_NOT_mhpmcounter_2_2_EQ_ETC___d60,
       mhpmevent_3_5_EQ_0_6_OR_NOT_mhpmcounter_3_7_EQ_ETC___d75,
       mhpmevent_4_0_EQ_0_1_OR_NOT_mhpmcounter_4_2_EQ_ETC___d90,
       mhpmevent_5_5_EQ_0_6_OR_NOT_mhpmcounter_5_7_EQ_ETC___d105,
       mhpmevent_6_10_EQ_0_11_OR_NOT_mhpmcounter_6_12_ETC___d120,
       mhpmevent_7_25_EQ_0_26_OR_NOT_mhpmcounter_7_27_ETC___d135,
       x__h3372,
       x__h3515,
       x__h3651,
       x__h3787,
       x__h3923,
       x__h4059,
       x__h4195,
       x__h4330;

  // action method ma_core_req
  assign RDY_ma_core_req = 1'd1 ;
  assign CAN_FIRE_ma_core_req = 1'd1 ;
  assign WILL_FIRE_ma_core_req = EN_ma_core_req ;

  // value method mv_core_resp
  assign mv_core_resp =
	     { EN_ma_core_req && rg_resp_to_core_wget[64],
	       x__read_data__h9937 } ;
  assign RDY_mv_core_resp = 1'd1 ;

  // action method ma_dcsr_stopcount
  assign CAN_FIRE_ma_dcsr_stopcount = 1'd1 ;
  assign WILL_FIRE_ma_dcsr_stopcount = 1'd1 ;

  // action method ma_mcountinhibit
  assign CAN_FIRE_ma_mcountinhibit = 1'd1 ;
  assign WILL_FIRE_ma_mcountinhibit = 1'd1 ;

  // action method ma_mhpminterrupten
  assign CAN_FIRE_ma_mhpminterrupten = 1'd1 ;
  assign WILL_FIRE_ma_mhpminterrupten = 1'd1 ;

  // value method mv_counter_interrupt
  assign mv_counter_interrupt =
	     { mhpmevent_7 != 64'd0 && mhpmcounter_7 == 64'd0 &&
	       !ma_mcountinhibit_mcountinhibit_val[7] &&
	       ma_mhpminterrupten_v[7],
	       mhpmevent_6 != 64'd0 && mhpmcounter_6 == 64'd0 &&
	       !ma_mcountinhibit_mcountinhibit_val[6] &&
	       ma_mhpminterrupten_v[6],
	       mhpmevent_5 != 64'd0 && mhpmcounter_5 == 64'd0 &&
	       !ma_mcountinhibit_mcountinhibit_val[5] &&
	       ma_mhpminterrupten_v[5],
	       mhpmevent_4 != 64'd0 && mhpmcounter_4 == 64'd0 &&
	       !ma_mcountinhibit_mcountinhibit_val[4] &&
	       ma_mhpminterrupten_v[4],
	       mhpmevent_3 != 64'd0 && mhpmcounter_3 == 64'd0 &&
	       !ma_mcountinhibit_mcountinhibit_val[3] &&
	       ma_mhpminterrupten_v[3],
	       mhpmevent_2 != 64'd0 && mhpmcounter_2 == 64'd0 &&
	       !ma_mcountinhibit_mcountinhibit_val[2] &&
	       ma_mhpminterrupten_v[2],
	       mhpmevent_1 != 64'd0 && mhpmcounter_1 == 64'd0 &&
	       !ma_mcountinhibit_mcountinhibit_val[1] &&
	       ma_mhpminterrupten_v[1],
	       IF_NOT_mhpmevent_0_1_EQ_0_2_3_AND_mhpmcounter__ETC__q1[0] } ;
  assign RDY_mv_counter_interrupt = 1'b1 ;

  // action method ma_events
  assign RDY_ma_events = 1'd1 ;
  assign CAN_FIRE_ma_events = 1'd1 ;
  assign WILL_FIRE_ma_events = EN_ma_events ;

  // value method mv_counter_values_fst
  assign mv_counter_values_fst =
	     { mhpmevent_7,
	       mhpmevent_6,
	       mhpmevent_5,
	       mhpmevent_4,
	       mhpmevent_3,
	       mhpmevent_2,
	       mhpmevent_1,
	       mhpmevent_0 } ;
  assign RDY_mv_counter_values_fst = 1'd1 ;

  // value method mv_counter_values_snd
  assign mv_counter_values_snd =
	     { mhpmcounter_7,
	       mhpmcounter_6,
	       mhpmcounter_5,
	       mhpmcounter_4,
	       mhpmcounter_3,
	       mhpmcounter_2,
	       mhpmcounter_1,
	       mhpmcounter_0 } ;
  assign RDY_mv_counter_values_snd = 1'd1 ;

  // rule RL_increment_perfmonitors
  //   rule : the rule increments the performance monitoring counters
  assign CAN_FIRE_RL_increment_perfmonitors =
	     EN_ma_events && !ma_dcsr_stopcount_dcsr_stopcount_val ;
  assign WILL_FIRE_RL_increment_perfmonitors =
	     CAN_FIRE_RL_increment_perfmonitors && !EN_ma_core_req ;

  // inputs to muxes for submodule ports
  assign MUX_mhpmcounter_0_write_1__SEL_1 =
	     WILL_FIRE_RL_increment_perfmonitors &&
	     !IF_NOT_mhpmevent_0_1_EQ_0_2_3_AND_mhpmcounter__ETC__q1[0] ;
  assign MUX_mhpmcounter_1_write_1__SEL_1 =
	     WILL_FIRE_RL_increment_perfmonitors &&
	     mhpmevent_1_5_EQ_0_6_OR_NOT_mhpmcounter_1_7_EQ_ETC___d45 ;
  assign MUX_mhpmcounter_2_write_1__SEL_1 =
	     WILL_FIRE_RL_increment_perfmonitors &&
	     mhpmevent_2_0_EQ_0_1_OR_NOT_mhpmcounter_2_2_EQ_ETC___d60 ;
  assign MUX_mhpmcounter_3_write_1__SEL_1 =
	     WILL_FIRE_RL_increment_perfmonitors &&
	     mhpmevent_3_5_EQ_0_6_OR_NOT_mhpmcounter_3_7_EQ_ETC___d75 ;
  assign MUX_mhpmcounter_4_write_1__SEL_1 =
	     WILL_FIRE_RL_increment_perfmonitors &&
	     mhpmevent_4_0_EQ_0_1_OR_NOT_mhpmcounter_4_2_EQ_ETC___d90 ;
  assign MUX_mhpmcounter_5_write_1__SEL_1 =
	     WILL_FIRE_RL_increment_perfmonitors &&
	     mhpmevent_5_5_EQ_0_6_OR_NOT_mhpmcounter_5_7_EQ_ETC___d105 ;
  assign MUX_mhpmcounter_6_write_1__SEL_1 =
	     WILL_FIRE_RL_increment_perfmonitors &&
	     mhpmevent_6_10_EQ_0_11_OR_NOT_mhpmcounter_6_12_ETC___d120 ;
  assign MUX_mhpmcounter_7_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'hB1F ;
  assign MUX_mhpmcounter_0_write_1__VAL_1 =
	     mhpmcounter_0 + { 63'd0, x__h3372 } ;
  assign MUX_mhpmcounter_1_write_1__VAL_1 =
	     mhpmcounter_1 + { 63'd0, x__h3515 } ;
  assign MUX_mhpmcounter_2_write_1__VAL_1 =
	     mhpmcounter_2 + { 63'd0, x__h3651 } ;
  assign MUX_mhpmcounter_3_write_1__VAL_1 =
	     mhpmcounter_3 + { 63'd0, x__h3787 } ;
  assign MUX_mhpmcounter_4_write_1__VAL_1 =
	     mhpmcounter_4 + { 63'd0, x__h3923 } ;
  assign MUX_mhpmcounter_5_write_1__VAL_1 =
	     mhpmcounter_5 + { 63'd0, x__h4059 } ;
  assign MUX_mhpmcounter_6_write_1__VAL_1 =
	     mhpmcounter_6 + { 63'd0, x__h4195 } ;
  assign MUX_mhpmcounter_7_write_1__VAL_2 =
	     mhpmcounter_7 + { 63'd0, x__h4330 } ;

  // inlined wires
  always@(ma_core_req_req or
	  mhpmevent_0 or
	  mhpmevent_1 or
	  mhpmevent_2 or
	  mhpmevent_3 or
	  mhpmevent_4 or
	  mhpmevent_5 or
	  mhpmevent_6 or
	  mhpmevent_7 or
	  mhpmcounter_0 or
	  mhpmcounter_1 or
	  mhpmcounter_2 or
	  mhpmcounter_3 or
	  mhpmcounter_4 or mhpmcounter_5 or mhpmcounter_6 or mhpmcounter_7)
  begin
    case (ma_core_req_req[79:68])
      12'h338: rg_resp_to_core_wget = { 1'd1, mhpmevent_0 };
      12'h339: rg_resp_to_core_wget = { 1'd1, mhpmevent_1 };
      12'h33A: rg_resp_to_core_wget = { 1'd1, mhpmevent_2 };
      12'h33B: rg_resp_to_core_wget = { 1'd1, mhpmevent_3 };
      12'h33C: rg_resp_to_core_wget = { 1'd1, mhpmevent_4 };
      12'h33D: rg_resp_to_core_wget = { 1'd1, mhpmevent_5 };
      12'h33E: rg_resp_to_core_wget = { 1'd1, mhpmevent_6 };
      12'h33F: rg_resp_to_core_wget = { 1'd1, mhpmevent_7 };
      12'hB18, 12'hC18: rg_resp_to_core_wget = { 1'd1, mhpmcounter_0 };
      12'hB19, 12'hC19: rg_resp_to_core_wget = { 1'd1, mhpmcounter_1 };
      12'hB1A, 12'hC1A: rg_resp_to_core_wget = { 1'd1, mhpmcounter_2 };
      12'hB1B, 12'hC1B: rg_resp_to_core_wget = { 1'd1, mhpmcounter_3 };
      12'hB1C, 12'hC1C: rg_resp_to_core_wget = { 1'd1, mhpmcounter_4 };
      12'hB1D, 12'hC1D: rg_resp_to_core_wget = { 1'd1, mhpmcounter_5 };
      12'hB1E, 12'hC1E: rg_resp_to_core_wget = { 1'd1, mhpmcounter_6 };
      12'hB1F, 12'hC1F: rg_resp_to_core_wget = { 1'd1, mhpmcounter_7 };
      default: rg_resp_to_core_wget = 65'h10000000000000000;
    endcase
  end
  assign csr_op_arg_wget =
	     { ma_core_req_req[67:4],
	       IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235,
	       ma_core_req_req[3:2] } ;
  always@(ma_core_req_req or x__h9551)
  begin
    case (ma_core_req_req[79:68])
      12'h338,
      12'h339,
      12'h33A,
      12'h33B,
      12'h33C,
      12'h33D,
      12'hB18,
      12'hB19,
      12'hB1A,
      12'hB1B,
      12'hB1C,
      12'hB1D,
      12'hB1E,
      12'hB1F:
	  csr_op_res_wget = x__h9551;
      default: csr_op_res_wget = x__h9551;
    endcase
  end
  assign wr_events_wget = { ma_events_e, 1'b0 } ;

  // register mhpmcounter_0
  assign mhpmcounter_0_D_IN =
	     MUX_mhpmcounter_0_write_1__SEL_1 ?
	       MUX_mhpmcounter_0_write_1__VAL_1 :
	       csr_op_res_wget ;
  assign mhpmcounter_0_EN =
	     WILL_FIRE_RL_increment_perfmonitors &&
	     !IF_NOT_mhpmevent_0_1_EQ_0_2_3_AND_mhpmcounter__ETC__q1[0] ||
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'hB18 ;

  // register mhpmcounter_1
  assign mhpmcounter_1_D_IN =
	     MUX_mhpmcounter_1_write_1__SEL_1 ?
	       MUX_mhpmcounter_1_write_1__VAL_1 :
	       csr_op_res_wget ;
  assign mhpmcounter_1_EN =
	     WILL_FIRE_RL_increment_perfmonitors &&
	     mhpmevent_1_5_EQ_0_6_OR_NOT_mhpmcounter_1_7_EQ_ETC___d45 ||
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'hB19 ;

  // register mhpmcounter_2
  assign mhpmcounter_2_D_IN =
	     MUX_mhpmcounter_2_write_1__SEL_1 ?
	       MUX_mhpmcounter_2_write_1__VAL_1 :
	       csr_op_res_wget ;
  assign mhpmcounter_2_EN =
	     WILL_FIRE_RL_increment_perfmonitors &&
	     mhpmevent_2_0_EQ_0_1_OR_NOT_mhpmcounter_2_2_EQ_ETC___d60 ||
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'hB1A ;

  // register mhpmcounter_3
  assign mhpmcounter_3_D_IN =
	     MUX_mhpmcounter_3_write_1__SEL_1 ?
	       MUX_mhpmcounter_3_write_1__VAL_1 :
	       csr_op_res_wget ;
  assign mhpmcounter_3_EN =
	     WILL_FIRE_RL_increment_perfmonitors &&
	     mhpmevent_3_5_EQ_0_6_OR_NOT_mhpmcounter_3_7_EQ_ETC___d75 ||
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'hB1B ;

  // register mhpmcounter_4
  assign mhpmcounter_4_D_IN =
	     MUX_mhpmcounter_4_write_1__SEL_1 ?
	       MUX_mhpmcounter_4_write_1__VAL_1 :
	       csr_op_res_wget ;
  assign mhpmcounter_4_EN =
	     WILL_FIRE_RL_increment_perfmonitors &&
	     mhpmevent_4_0_EQ_0_1_OR_NOT_mhpmcounter_4_2_EQ_ETC___d90 ||
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'hB1C ;

  // register mhpmcounter_5
  assign mhpmcounter_5_D_IN =
	     MUX_mhpmcounter_5_write_1__SEL_1 ?
	       MUX_mhpmcounter_5_write_1__VAL_1 :
	       csr_op_res_wget ;
  assign mhpmcounter_5_EN =
	     WILL_FIRE_RL_increment_perfmonitors &&
	     mhpmevent_5_5_EQ_0_6_OR_NOT_mhpmcounter_5_7_EQ_ETC___d105 ||
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'hB1D ;

  // register mhpmcounter_6
  assign mhpmcounter_6_D_IN =
	     MUX_mhpmcounter_6_write_1__SEL_1 ?
	       MUX_mhpmcounter_6_write_1__VAL_1 :
	       csr_op_res_wget ;
  assign mhpmcounter_6_EN =
	     WILL_FIRE_RL_increment_perfmonitors &&
	     mhpmevent_6_10_EQ_0_11_OR_NOT_mhpmcounter_6_12_ETC___d120 ||
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'hB1E ;

  // register mhpmcounter_7
  assign mhpmcounter_7_D_IN =
	     MUX_mhpmcounter_7_write_1__SEL_1 ?
	       csr_op_res_wget :
	       MUX_mhpmcounter_7_write_1__VAL_2 ;
  assign mhpmcounter_7_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'hB1F ||
	     WILL_FIRE_RL_increment_perfmonitors &&
	     mhpmevent_7_25_EQ_0_26_OR_NOT_mhpmcounter_7_27_ETC___d135 ;

  // register mhpmevent_0
  assign mhpmevent_0_D_IN = csr_op_res_wget ;
  assign mhpmevent_0_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h338 ;

  // register mhpmevent_1
  assign mhpmevent_1_D_IN = csr_op_res_wget ;
  assign mhpmevent_1_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h339 ;

  // register mhpmevent_2
  assign mhpmevent_2_D_IN = csr_op_res_wget ;
  assign mhpmevent_2_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h33A ;

  // register mhpmevent_3
  assign mhpmevent_3_D_IN = csr_op_res_wget ;
  assign mhpmevent_3_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h33B ;

  // register mhpmevent_4
  assign mhpmevent_4_D_IN = csr_op_res_wget ;
  assign mhpmevent_4_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h33C ;

  // register mhpmevent_5
  assign mhpmevent_5_D_IN = csr_op_res_wget ;
  assign mhpmevent_5_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h33D ;

  // register mhpmevent_6
  assign mhpmevent_6_D_IN = csr_op_res_wget ;
  assign mhpmevent_6_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h33E ;

  // register mhpmevent_7
  assign mhpmevent_7_D_IN = csr_op_res_wget ;
  assign mhpmevent_7_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h33F ;

  // remaining internal signals
  module_fn_csr_op instance_fn_csr_op_0(.fn_csr_op_writedata(x_wget_fst__h5352),
					.fn_csr_op_readdata(x_wget_snd_fst__h5437),
					.fn_csr_op_op(x_wget_snd_snd__h5438),
					.fn_csr_op(x__h9551));
  assign IF_NOT_mhpmevent_0_1_EQ_0_2_3_AND_mhpmcounter__ETC__q1 =
	     NOT_mhpmevent_0_1_EQ_0_2_3_AND_mhpmcounter_0_4_ETC___d25 ?
	       8'd1 :
	       8'd0 ;
  assign NOT_mhpmevent_0_1_EQ_0_2_3_AND_mhpmcounter_0_4_ETC___d25 =
	     mhpmevent_0 != 64'd0 && mhpmcounter_0 == 64'd0 &&
	     !ma_mcountinhibit_mcountinhibit_val[0] &&
	     ma_mhpminterrupten_v[0] ;
  assign bs__h3375 = wr_events_wget ;
  assign mhpmevent_1_5_EQ_0_6_OR_NOT_mhpmcounter_1_7_EQ_ETC___d45 =
	     mhpmevent_1 == 64'd0 || mhpmcounter_1 != 64'd0 ||
	     ma_mcountinhibit_mcountinhibit_val[1] ||
	     !ma_mhpminterrupten_v[1] ;
  assign mhpmevent_2_0_EQ_0_1_OR_NOT_mhpmcounter_2_2_EQ_ETC___d60 =
	     mhpmevent_2 == 64'd0 || mhpmcounter_2 != 64'd0 ||
	     ma_mcountinhibit_mcountinhibit_val[2] ||
	     !ma_mhpminterrupten_v[2] ;
  assign mhpmevent_3_5_EQ_0_6_OR_NOT_mhpmcounter_3_7_EQ_ETC___d75 =
	     mhpmevent_3 == 64'd0 || mhpmcounter_3 != 64'd0 ||
	     ma_mcountinhibit_mcountinhibit_val[3] ||
	     !ma_mhpminterrupten_v[3] ;
  assign mhpmevent_4_0_EQ_0_1_OR_NOT_mhpmcounter_4_2_EQ_ETC___d90 =
	     mhpmevent_4 == 64'd0 || mhpmcounter_4 != 64'd0 ||
	     ma_mcountinhibit_mcountinhibit_val[4] ||
	     !ma_mhpminterrupten_v[4] ;
  assign mhpmevent_5_5_EQ_0_6_OR_NOT_mhpmcounter_5_7_EQ_ETC___d105 =
	     mhpmevent_5 == 64'd0 || mhpmcounter_5 != 64'd0 ||
	     ma_mcountinhibit_mcountinhibit_val[5] ||
	     !ma_mhpminterrupten_v[5] ;
  assign mhpmevent_6_10_EQ_0_11_OR_NOT_mhpmcounter_6_12_ETC___d120 =
	     mhpmevent_6 == 64'd0 || mhpmcounter_6 != 64'd0 ||
	     ma_mcountinhibit_mcountinhibit_val[6] ||
	     !ma_mhpminterrupten_v[6] ;
  assign mhpmevent_7_25_EQ_0_26_OR_NOT_mhpmcounter_7_27_ETC___d135 =
	     mhpmevent_7 == 64'd0 || mhpmcounter_7 != 64'd0 ||
	     ma_mcountinhibit_mcountinhibit_val[7] ||
	     !ma_mhpminterrupten_v[7] ;
  assign x__h3372 = bs__h3375[mhpmevent_0[4:0]] ;
  assign x__h3515 = bs__h3375[mhpmevent_1[4:0]] ;
  assign x__h3651 = bs__h3375[mhpmevent_2[4:0]] ;
  assign x__h3787 = bs__h3375[mhpmevent_3[4:0]] ;
  assign x__h3923 = bs__h3375[mhpmevent_4[4:0]] ;
  assign x__h4059 = bs__h3375[mhpmevent_5[4:0]] ;
  assign x__h4195 = bs__h3375[mhpmevent_6[4:0]] ;
  assign x__h4330 = bs__h3375[mhpmevent_7[4:0]] ;
  assign x__read_data__h9937 =
	     EN_ma_core_req ? rg_resp_to_core_wget[63:0] : 64'd0 ;
  assign x_wget_fst__h5352 = csr_op_arg_wget[129:66] ;
  assign x_wget_snd_fst__h5437 = csr_op_arg_wget[65:2] ;
  assign x_wget_snd_snd__h5438 = csr_op_arg_wget[1:0] ;
  always@(ma_core_req_req or
	  mhpmevent_7 or
	  mhpmevent_0 or
	  mhpmevent_1 or
	  mhpmevent_2 or
	  mhpmevent_3 or
	  mhpmevent_4 or
	  mhpmevent_5 or
	  mhpmevent_6 or
	  mhpmcounter_0 or
	  mhpmcounter_1 or
	  mhpmcounter_2 or
	  mhpmcounter_3 or
	  mhpmcounter_4 or mhpmcounter_5 or mhpmcounter_6 or mhpmcounter_7)
  begin
    case (ma_core_req_req[79:68])
      12'h338:
	  IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235 =
	      mhpmevent_0;
      12'h339:
	  IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235 =
	      mhpmevent_1;
      12'h33A:
	  IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235 =
	      mhpmevent_2;
      12'h33B:
	  IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235 =
	      mhpmevent_3;
      12'h33C:
	  IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235 =
	      mhpmevent_4;
      12'h33D:
	  IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235 =
	      mhpmevent_5;
      12'h33E:
	  IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235 =
	      mhpmevent_6;
      12'hB18:
	  IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235 =
	      mhpmcounter_0;
      12'hB19:
	  IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235 =
	      mhpmcounter_1;
      12'hB1A:
	  IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235 =
	      mhpmcounter_2;
      12'hB1B:
	  IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235 =
	      mhpmcounter_3;
      12'hB1C:
	  IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235 =
	      mhpmcounter_4;
      12'hB1D:
	  IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235 =
	      mhpmcounter_5;
      12'hB1E:
	  IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235 =
	      mhpmcounter_6;
      12'hB1F:
	  IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235 =
	      mhpmcounter_7;
      default: IF_ma_core_req_req_BITS_79_TO_68_40_EQ_0xB18_4_ETC___d235 =
		   mhpmevent_7;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        mhpmcounter_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	mhpmcounter_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	mhpmcounter_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	mhpmcounter_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	mhpmcounter_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	mhpmcounter_5 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	mhpmcounter_6 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	mhpmcounter_7 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	mhpmevent_0 <= `BSV_ASSIGNMENT_DELAY 64'd1;
	mhpmevent_1 <= `BSV_ASSIGNMENT_DELAY 64'd2;
	mhpmevent_2 <= `BSV_ASSIGNMENT_DELAY 64'd3;
	mhpmevent_3 <= `BSV_ASSIGNMENT_DELAY 64'd4;
	mhpmevent_4 <= `BSV_ASSIGNMENT_DELAY 64'd5;
	mhpmevent_5 <= `BSV_ASSIGNMENT_DELAY 64'd6;
	mhpmevent_6 <= `BSV_ASSIGNMENT_DELAY 64'd7;
	mhpmevent_7 <= `BSV_ASSIGNMENT_DELAY 64'd8;
      end
    else
      begin
        if (mhpmcounter_0_EN)
	  mhpmcounter_0 <= `BSV_ASSIGNMENT_DELAY mhpmcounter_0_D_IN;
	if (mhpmcounter_1_EN)
	  mhpmcounter_1 <= `BSV_ASSIGNMENT_DELAY mhpmcounter_1_D_IN;
	if (mhpmcounter_2_EN)
	  mhpmcounter_2 <= `BSV_ASSIGNMENT_DELAY mhpmcounter_2_D_IN;
	if (mhpmcounter_3_EN)
	  mhpmcounter_3 <= `BSV_ASSIGNMENT_DELAY mhpmcounter_3_D_IN;
	if (mhpmcounter_4_EN)
	  mhpmcounter_4 <= `BSV_ASSIGNMENT_DELAY mhpmcounter_4_D_IN;
	if (mhpmcounter_5_EN)
	  mhpmcounter_5 <= `BSV_ASSIGNMENT_DELAY mhpmcounter_5_D_IN;
	if (mhpmcounter_6_EN)
	  mhpmcounter_6 <= `BSV_ASSIGNMENT_DELAY mhpmcounter_6_D_IN;
	if (mhpmcounter_7_EN)
	  mhpmcounter_7 <= `BSV_ASSIGNMENT_DELAY mhpmcounter_7_D_IN;
	if (mhpmevent_0_EN)
	  mhpmevent_0 <= `BSV_ASSIGNMENT_DELAY mhpmevent_0_D_IN;
	if (mhpmevent_1_EN)
	  mhpmevent_1 <= `BSV_ASSIGNMENT_DELAY mhpmevent_1_D_IN;
	if (mhpmevent_2_EN)
	  mhpmevent_2 <= `BSV_ASSIGNMENT_DELAY mhpmevent_2_D_IN;
	if (mhpmevent_3_EN)
	  mhpmevent_3 <= `BSV_ASSIGNMENT_DELAY mhpmevent_3_D_IN;
	if (mhpmevent_4_EN)
	  mhpmevent_4 <= `BSV_ASSIGNMENT_DELAY mhpmevent_4_D_IN;
	if (mhpmevent_5_EN)
	  mhpmevent_5 <= `BSV_ASSIGNMENT_DELAY mhpmevent_5_D_IN;
	if (mhpmevent_6_EN)
	  mhpmevent_6 <= `BSV_ASSIGNMENT_DELAY mhpmevent_6_D_IN;
	if (mhpmevent_7_EN)
	  mhpmevent_7 <= `BSV_ASSIGNMENT_DELAY mhpmevent_7_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    mhpmcounter_0 = 64'hAAAAAAAAAAAAAAAA;
    mhpmcounter_1 = 64'hAAAAAAAAAAAAAAAA;
    mhpmcounter_2 = 64'hAAAAAAAAAAAAAAAA;
    mhpmcounter_3 = 64'hAAAAAAAAAAAAAAAA;
    mhpmcounter_4 = 64'hAAAAAAAAAAAAAAAA;
    mhpmcounter_5 = 64'hAAAAAAAAAAAAAAAA;
    mhpmcounter_6 = 64'hAAAAAAAAAAAAAAAA;
    mhpmcounter_7 = 64'hAAAAAAAAAAAAAAAA;
    mhpmevent_0 = 64'hAAAAAAAAAAAAAAAA;
    mhpmevent_1 = 64'hAAAAAAAAAAAAAAAA;
    mhpmevent_2 = 64'hAAAAAAAAAAAAAAAA;
    mhpmevent_3 = 64'hAAAAAAAAAAAAAAAA;
    mhpmevent_4 = 64'hAAAAAAAAAAAAAAAA;
    mhpmevent_5 = 64'hAAAAAAAAAAAAAAAA;
    mhpmevent_6 = 64'hAAAAAAAAAAAAAAAA;
    mhpmevent_7 = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mk_csr_grp7

