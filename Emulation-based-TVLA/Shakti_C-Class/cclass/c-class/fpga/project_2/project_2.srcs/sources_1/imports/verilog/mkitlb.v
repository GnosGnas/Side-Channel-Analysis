//
// Generated by Bluespec Compiler, version 2021.07-1-gaf77efcd (build af77efcd)
//
// On Mon Dec  6 11:49:05 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_core_request_put           O     1
// core_response_get              O    39 reg
// RDY_core_response_get          O     1 reg
// request_to_ptw_get             O    66 reg
// RDY_request_to_ptw_get         O     1 reg
// RDY_response_frm_ptw_put       O     1
// RDY_ma_satp_from_csr           O     1 const
// RDY_ma_curr_priv               O     1 const
// mv_perf_counters               O     1
// RDY_mv_perf_counters           O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// core_request_put               I    65
// response_frm_ptw_put           I    63
// ma_satp_from_csr_s             I    64
// ma_curr_priv_c                 I     2
// EN_core_request_put            I     1
// EN_response_frm_ptw_put        I     1
// EN_ma_satp_from_csr            I     1
// EN_ma_curr_priv                I     1
// EN_core_response_get           I     1
// EN_request_to_ptw_get          I     1
//
// Combinational paths from inputs to outputs:
//   (core_request_put,
//    ma_satp_from_csr_s,
//    ma_curr_priv_c,
//    EN_core_request_put,
//    EN_ma_satp_from_csr,
//    EN_ma_curr_priv) -> mv_perf_counters
//   (EN_ma_satp_from_csr, EN_ma_curr_priv) -> RDY_core_request_put
//   EN_ma_satp_from_csr -> RDY_response_frm_ptw_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkitlb(CLK,
	      RST_N,

	      core_request_put,
	      EN_core_request_put,
	      RDY_core_request_put,

	      EN_core_response_get,
	      core_response_get,
	      RDY_core_response_get,

	      EN_request_to_ptw_get,
	      request_to_ptw_get,
	      RDY_request_to_ptw_get,

	      response_frm_ptw_put,
	      EN_response_frm_ptw_put,
	      RDY_response_frm_ptw_put,

	      ma_satp_from_csr_s,
	      EN_ma_satp_from_csr,
	      RDY_ma_satp_from_csr,

	      ma_curr_priv_c,
	      EN_ma_curr_priv,
	      RDY_ma_curr_priv,

	      mv_perf_counters,
	      RDY_mv_perf_counters);
  input  CLK;
  input  RST_N;

  // action method core_request_put
  input  [64 : 0] core_request_put;
  input  EN_core_request_put;
  output RDY_core_request_put;

  // actionvalue method core_response_get
  input  EN_core_response_get;
  output [38 : 0] core_response_get;
  output RDY_core_response_get;

  // actionvalue method request_to_ptw_get
  input  EN_request_to_ptw_get;
  output [65 : 0] request_to_ptw_get;
  output RDY_request_to_ptw_get;

  // action method response_frm_ptw_put
  input  [62 : 0] response_frm_ptw_put;
  input  EN_response_frm_ptw_put;
  output RDY_response_frm_ptw_put;

  // action method ma_satp_from_csr
  input  [63 : 0] ma_satp_from_csr_s;
  input  EN_ma_satp_from_csr;
  output RDY_ma_satp_from_csr;

  // action method ma_curr_priv
  input  [1 : 0] ma_curr_priv_c;
  input  EN_ma_curr_priv;
  output RDY_ma_curr_priv;

  // value method mv_perf_counters
  output mv_perf_counters;
  output RDY_mv_perf_counters;

  // signals for module outputs
  wire [65 : 0] request_to_ptw_get;
  wire [38 : 0] core_response_get;
  wire RDY_core_request_put,
       RDY_core_response_get,
       RDY_ma_curr_priv,
       RDY_ma_satp_from_csr,
       RDY_mv_perf_counters,
       RDY_request_to_ptw_get,
       RDY_response_frm_ptw_put,
       mv_perf_counters;

  // ports of submodule _unnamed_
  wire [65 : 0] _unnamed__request_to_ptw_get;
  wire [64 : 0] _unnamed__core_request_put;
  wire [63 : 0] _unnamed__ma_satp_from_csr_s;
  wire [62 : 0] _unnamed__response_frm_ptw_put;
  wire [38 : 0] _unnamed__core_response_get;
  wire [1 : 0] _unnamed__ma_curr_priv_c;
  wire _unnamed__EN_core_request_put,
       _unnamed__EN_core_response_get,
       _unnamed__EN_ma_curr_priv,
       _unnamed__EN_ma_satp_from_csr,
       _unnamed__EN_request_to_ptw_get,
       _unnamed__EN_response_frm_ptw_put,
       _unnamed__RDY_core_request_put,
       _unnamed__RDY_core_response_get,
       _unnamed__RDY_request_to_ptw_get,
       _unnamed__RDY_response_frm_ptw_put,
       _unnamed__mv_perf_counters;

  // rule scheduling signals
  wire CAN_FIRE_core_request_put,
       CAN_FIRE_core_response_get,
       CAN_FIRE_ma_curr_priv,
       CAN_FIRE_ma_satp_from_csr,
       CAN_FIRE_request_to_ptw_get,
       CAN_FIRE_response_frm_ptw_put,
       WILL_FIRE_core_request_put,
       WILL_FIRE_core_response_get,
       WILL_FIRE_ma_curr_priv,
       WILL_FIRE_ma_satp_from_csr,
       WILL_FIRE_request_to_ptw_get,
       WILL_FIRE_response_frm_ptw_put;

  // action method core_request_put
  assign RDY_core_request_put = _unnamed__RDY_core_request_put ;
  assign CAN_FIRE_core_request_put = _unnamed__RDY_core_request_put ;
  assign WILL_FIRE_core_request_put = EN_core_request_put ;

  // actionvalue method core_response_get
  assign core_response_get = _unnamed__core_response_get ;
  assign RDY_core_response_get = _unnamed__RDY_core_response_get ;
  assign CAN_FIRE_core_response_get = _unnamed__RDY_core_response_get ;
  assign WILL_FIRE_core_response_get = EN_core_response_get ;

  // actionvalue method request_to_ptw_get
  assign request_to_ptw_get = _unnamed__request_to_ptw_get ;
  assign RDY_request_to_ptw_get = _unnamed__RDY_request_to_ptw_get ;
  assign CAN_FIRE_request_to_ptw_get = _unnamed__RDY_request_to_ptw_get ;
  assign WILL_FIRE_request_to_ptw_get = EN_request_to_ptw_get ;

  // action method response_frm_ptw_put
  assign RDY_response_frm_ptw_put = _unnamed__RDY_response_frm_ptw_put ;
  assign CAN_FIRE_response_frm_ptw_put = _unnamed__RDY_response_frm_ptw_put ;
  assign WILL_FIRE_response_frm_ptw_put = EN_response_frm_ptw_put ;

  // action method ma_satp_from_csr
  assign RDY_ma_satp_from_csr = 1'd1 ;
  assign CAN_FIRE_ma_satp_from_csr = 1'd1 ;
  assign WILL_FIRE_ma_satp_from_csr = EN_ma_satp_from_csr ;

  // action method ma_curr_priv
  assign RDY_ma_curr_priv = 1'd1 ;
  assign CAN_FIRE_ma_curr_priv = 1'd1 ;
  assign WILL_FIRE_ma_curr_priv = EN_ma_curr_priv ;

  // value method mv_perf_counters
  assign mv_perf_counters = _unnamed__mv_perf_counters ;
  assign RDY_mv_perf_counters = 1'd1 ;

  // submodule _unnamed_
  mkfa_itlb #(.hartid(64'd0)) _unnamed_(.CLK(CLK),
					.RST_N(RST_N),
					.core_request_put(_unnamed__core_request_put),
					.ma_curr_priv_c(_unnamed__ma_curr_priv_c),
					.ma_satp_from_csr_s(_unnamed__ma_satp_from_csr_s),
					.response_frm_ptw_put(_unnamed__response_frm_ptw_put),
					.EN_core_request_put(_unnamed__EN_core_request_put),
					.EN_core_response_get(_unnamed__EN_core_response_get),
					.EN_request_to_ptw_get(_unnamed__EN_request_to_ptw_get),
					.EN_response_frm_ptw_put(_unnamed__EN_response_frm_ptw_put),
					.EN_ma_satp_from_csr(_unnamed__EN_ma_satp_from_csr),
					.EN_ma_curr_priv(_unnamed__EN_ma_curr_priv),
					.RDY_core_request_put(_unnamed__RDY_core_request_put),
					.core_response_get(_unnamed__core_response_get),
					.RDY_core_response_get(_unnamed__RDY_core_response_get),
					.request_to_ptw_get(_unnamed__request_to_ptw_get),
					.RDY_request_to_ptw_get(_unnamed__RDY_request_to_ptw_get),
					.RDY_response_frm_ptw_put(_unnamed__RDY_response_frm_ptw_put),
					.RDY_ma_satp_from_csr(),
					.RDY_ma_curr_priv(),
					.mv_perf_counters(_unnamed__mv_perf_counters),
					.RDY_mv_perf_counters());

  // submodule _unnamed_
  assign _unnamed__core_request_put = core_request_put ;
  assign _unnamed__ma_curr_priv_c = ma_curr_priv_c ;
  assign _unnamed__ma_satp_from_csr_s = ma_satp_from_csr_s ;
  assign _unnamed__response_frm_ptw_put = response_frm_ptw_put ;
  assign _unnamed__EN_core_request_put = EN_core_request_put ;
  assign _unnamed__EN_core_response_get = EN_core_response_get ;
  assign _unnamed__EN_request_to_ptw_get = EN_request_to_ptw_get ;
  assign _unnamed__EN_response_frm_ptw_put = EN_response_frm_ptw_put ;
  assign _unnamed__EN_ma_satp_from_csr = EN_ma_satp_from_csr ;
  assign _unnamed__EN_ma_curr_priv = EN_ma_curr_priv ;
endmodule  // mkitlb

