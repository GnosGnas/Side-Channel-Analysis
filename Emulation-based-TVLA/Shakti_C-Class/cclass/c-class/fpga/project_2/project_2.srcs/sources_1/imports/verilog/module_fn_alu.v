//
// Generated by Bluespec Compiler, version 2021.07-1-gaf77efcd (build af77efcd)
//
// On Mon Dec  6 11:52:32 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// fn_alu                         O   131
// fn_alu_fn                      I     4
// fn_alu_op1                     I    64
// fn_alu_op2                     I    64
// fn_alu_op3                     I    64
// fn_alu_effective_address       I    64
// fn_alu_inst_type               I     4
// fn_alu_funct3                  I     2 unused
// fn_alu_word32                  I     1
// fn_alu_misa_c                  I     1
// fn_alu_nextpc                  I    64
// fn_alu_prediction              I     1
// fn_alu_comp                    I     1
//
// Combinational paths from inputs to outputs:
//   (fn_alu_fn,
//    fn_alu_op1,
//    fn_alu_op2,
//    fn_alu_op3,
//    fn_alu_effective_address,
//    fn_alu_inst_type,
//    fn_alu_word32,
//    fn_alu_misa_c,
//    fn_alu_nextpc,
//    fn_alu_prediction,
//    fn_alu_comp) -> fn_alu
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module module_fn_alu(fn_alu_fn,
		     fn_alu_op1,
		     fn_alu_op2,
		     fn_alu_op3,
		     fn_alu_effective_address,
		     fn_alu_inst_type,
		     fn_alu_funct3,
		     fn_alu_word32,
		     fn_alu_misa_c,
		     fn_alu_nextpc,
		     fn_alu_prediction,
		     fn_alu_comp,
		     fn_alu);
  // value method fn_alu
  input  [3 : 0] fn_alu_fn;
  input  [63 : 0] fn_alu_op1;
  input  [63 : 0] fn_alu_op2;
  input  [63 : 0] fn_alu_op3;
  input  [63 : 0] fn_alu_effective_address;
  input  [3 : 0] fn_alu_inst_type;
  input  [1 : 0] fn_alu_funct3;
  input  fn_alu_word32;
  input  fn_alu_misa_c;
  input  [63 : 0] fn_alu_nextpc;
  input  fn_alu_prediction;
  input  fn_alu_comp;
  output [130 : 0] fn_alu;

  // signals for module outputs
  wire [130 : 0] fn_alu;

  // remaining internal signals
  reg [63 : 0] final_output__h56, shin__h52;
  reg IF_fn_alu_fn_EQ_2_THEN_NOT_INV_NOT_fn_alu_op1__ETC___d309,
      branch_taken__h48;
  wire [64 : 0] fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194,
		fn_alu_fn_BIT_3_AND_shin2_BIT_63_CONCAT_shin2__q1,
		inv_op2__h40,
		x__h295;
  wire [63 : 0] final_output___1__h255,
		incr_value__h59,
		op1_xor_op2__h41,
		redirect_pc___1__h17761,
		shift_inright__h51,
		shift_l__h55,
		x__h17754,
		x__h251;
  wire [31 : 0] final_output6_BITS_31_TO_0__q2, upper_bits__h50;
  wire [5 : 0] shift_amt__h49;
  wire INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_63__ETC___d25,
       NOT_fn_alu_effective_address_BIT_1_21_OR_fn_al_ETC___d329,
       adder_z_flag__h43,
       fn_alu_effective_address_BIT_1_AND_NOT_fn_alu__ETC___d32,
       fn_alu_inst_type_EQ_2_AND_NOT_IF_fn_alu_fn_EQ__ETC___d320,
       sign__h44,
       x__h8222;

  // value method fn_alu
  assign fn_alu =
	     { fn_alu_effective_address_BIT_1_AND_NOT_fn_alu__ETC___d32,
	       x__h251,
	       x__h17754,
	       fn_alu_inst_type_EQ_2_AND_NOT_IF_fn_alu_fn_EQ__ETC___d320 &&
	       NOT_fn_alu_effective_address_BIT_1_21_OR_fn_al_ETC___d329,
	       branch_taken__h48 } ;

  // remaining internal signals
  assign INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_63__ETC___d25 =
	     ({ sign__h44 & fn_alu_op1[63], fn_alu_op1 } ^
	      65'h10000000000000000) <
	     ({ sign__h44 & fn_alu_op2[63], fn_alu_op2 } ^
	      65'h10000000000000000) ;
  assign NOT_fn_alu_effective_address_BIT_1_21_OR_fn_al_ETC___d329 =
	     !fn_alu_effective_address[1] || fn_alu_misa_c ||
	     fn_alu_inst_type != 4'd4 && fn_alu_inst_type != 4'd3 &&
	     (fn_alu_inst_type != 4'd2 ||
	      IF_fn_alu_fn_EQ_2_THEN_NOT_INV_NOT_fn_alu_op1__ETC___d309) ;
  assign adder_z_flag__h43 = ~(op1_xor_op2__h41 != 64'd0) ;
  assign final_output6_BITS_31_TO_0__q2 = final_output__h56[31:0] ;
  assign final_output___1__h255 =
	     { {32{final_output6_BITS_31_TO_0__q2[31]}},
	       final_output6_BITS_31_TO_0__q2 } ;
  assign fn_alu_effective_address_BIT_1_AND_NOT_fn_alu__ETC___d32 =
	     fn_alu_effective_address[1] && !fn_alu_misa_c &&
	     (fn_alu_inst_type == 4'd4 || fn_alu_inst_type == 4'd3 ||
	      fn_alu_inst_type == 4'd2 && branch_taken__h48) ;
  assign fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194 =
	     { fn_alu_fn[3] & shin__h52[63], shin__h52 } >> shift_amt__h49 |
	     ~(65'h1FFFFFFFFFFFFFFFF >> shift_amt__h49) &
	     {65{fn_alu_fn_BIT_3_AND_shin2_BIT_63_CONCAT_shin2__q1[64]}} ;
  assign fn_alu_fn_BIT_3_AND_shin2_BIT_63_CONCAT_shin2__q1 =
	     { fn_alu_fn[3] & shin__h52[63], shin__h52 } ;
  assign fn_alu_inst_type_EQ_2_AND_NOT_IF_fn_alu_fn_EQ__ETC___d320 =
	     fn_alu_inst_type == 4'd2 &&
	     branch_taken__h48 != fn_alu_prediction ||
	     (fn_alu_inst_type == 4'd4 || fn_alu_inst_type == 4'd3) &&
	     fn_alu_nextpc != fn_alu_effective_address ;
  assign incr_value__h59 = fn_alu_comp ? 64'd2 : 64'd4 ;
  assign inv_op2__h40 = { fn_alu_op2 ^ {64{fn_alu_fn[1]}}, fn_alu_fn[1] } ;
  assign op1_xor_op2__h41 = fn_alu_op1 ^ fn_alu_op2 ;
  assign redirect_pc___1__h17761 = fn_alu_op3 + incr_value__h59 ;
  assign shift_amt__h49 =
	     { !fn_alu_word32 && fn_alu_op2[5], fn_alu_op2[4:0] } ;
  assign shift_inright__h51 = { upper_bits__h50, fn_alu_op1[31:0] } ;
  assign shift_l__h55 =
	     { fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[0],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[1],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[2],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[3],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[4],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[5],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[6],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[7],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[8],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[9],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[10],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[11],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[12],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[13],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[14],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[15],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[16],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[17],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[18],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[19],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[20],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[21],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[22],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[23],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[24],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[25],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[26],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[27],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[28],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[29],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[30],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[31],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[32],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[33],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[34],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[35],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[36],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[37],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[38],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[39],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[40],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[41],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[42],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[43],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[44],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[45],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[46],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[47],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[48],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[49],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[50],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[51],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[52],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[53],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[54],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[55],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[56],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[57],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[58],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[59],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[60],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[61],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[62],
	       fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[63] } ;
  assign sign__h44 = ~fn_alu_fn[1] ;
  assign upper_bits__h50 =
	     fn_alu_word32 ? {32{x__h8222}} : fn_alu_op1[63:32] ;
  assign x__h17754 =
	     (fn_alu_inst_type == 4'd2 &&
	      IF_fn_alu_fn_EQ_2_THEN_NOT_INV_NOT_fn_alu_op1__ETC___d309) ?
	       redirect_pc___1__h17761 :
	       fn_alu_effective_address ;
  assign x__h251 =
	     fn_alu_word32 ? final_output___1__h255 : final_output__h56 ;
  assign x__h295 = { fn_alu_op1, 1'b1 } + inv_op2__h40 ;
  assign x__h8222 = fn_alu_fn[3] & fn_alu_op1[31] ;
  always@(fn_alu_fn or fn_alu_op1 or upper_bits__h50 or shift_inright__h51)
  begin
    case (fn_alu_fn)
      4'd5, 4'd11: shin__h52 = shift_inright__h51;
      default: shin__h52 =
		   { fn_alu_op1[0],
		     fn_alu_op1[1],
		     fn_alu_op1[2],
		     fn_alu_op1[3],
		     fn_alu_op1[4],
		     fn_alu_op1[5],
		     fn_alu_op1[6],
		     fn_alu_op1[7],
		     fn_alu_op1[8],
		     fn_alu_op1[9],
		     fn_alu_op1[10],
		     fn_alu_op1[11],
		     fn_alu_op1[12],
		     fn_alu_op1[13],
		     fn_alu_op1[14],
		     fn_alu_op1[15],
		     fn_alu_op1[16],
		     fn_alu_op1[17],
		     fn_alu_op1[18],
		     fn_alu_op1[19],
		     fn_alu_op1[20],
		     fn_alu_op1[21],
		     fn_alu_op1[22],
		     fn_alu_op1[23],
		     fn_alu_op1[24],
		     fn_alu_op1[25],
		     fn_alu_op1[26],
		     fn_alu_op1[27],
		     fn_alu_op1[28],
		     fn_alu_op1[29],
		     fn_alu_op1[30],
		     fn_alu_op1[31],
		     upper_bits__h50[0],
		     upper_bits__h50[1],
		     upper_bits__h50[2],
		     upper_bits__h50[3],
		     upper_bits__h50[4],
		     upper_bits__h50[5],
		     upper_bits__h50[6],
		     upper_bits__h50[7],
		     upper_bits__h50[8],
		     upper_bits__h50[9],
		     upper_bits__h50[10],
		     upper_bits__h50[11],
		     upper_bits__h50[12],
		     upper_bits__h50[13],
		     upper_bits__h50[14],
		     upper_bits__h50[15],
		     upper_bits__h50[16],
		     upper_bits__h50[17],
		     upper_bits__h50[18],
		     upper_bits__h50[19],
		     upper_bits__h50[20],
		     upper_bits__h50[21],
		     upper_bits__h50[22],
		     upper_bits__h50[23],
		     upper_bits__h50[24],
		     upper_bits__h50[25],
		     upper_bits__h50[26],
		     upper_bits__h50[27],
		     upper_bits__h50[28],
		     upper_bits__h50[29],
		     upper_bits__h50[30],
		     upper_bits__h50[31] };
    endcase
  end
  always@(fn_alu_fn or
	  INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_63__ETC___d25 or
	  adder_z_flag__h43 or op1_xor_op2__h41)
  begin
    case (fn_alu_fn)
      4'd2: branch_taken__h48 = adder_z_flag__h43;
      4'd3: branch_taken__h48 = op1_xor_op2__h41 != 64'd0;
      4'd12, 4'd14:
	  branch_taken__h48 =
	      INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_63__ETC___d25;
      default: branch_taken__h48 =
		   !INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_63__ETC___d25;
    endcase
  end
  always@(fn_alu_fn or
	  op1_xor_op2__h41 or
	  x__h295 or
	  shift_l__h55 or
	  fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194 or
	  fn_alu_op1 or
	  fn_alu_op2 or
	  INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_63__ETC___d25)
  begin
    case (fn_alu_fn)
      4'd0, 4'd10: final_output__h56 = x__h295[64:1];
      4'd1: final_output__h56 = shift_l__h55;
      4'd5, 4'd11:
	  final_output__h56 =
	      fn_alu_fn_BIT_3_2_AND_IF_fn_alu_fn_EQ_5_9_OR_f_ETC___d194[63:0];
      4'd6: final_output__h56 = fn_alu_op1 | fn_alu_op2;
      4'd7: final_output__h56 = fn_alu_op1 & fn_alu_op2;
      4'd12, 4'd13, 4'd14, 4'd15:
	  final_output__h56 =
	      { 63'd0,
		INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_63__ETC___d25 };
      default: final_output__h56 = op1_xor_op2__h41;
    endcase
  end
  always@(fn_alu_fn or
	  INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_63__ETC___d25 or
	  adder_z_flag__h43 or op1_xor_op2__h41)
  begin
    case (fn_alu_fn)
      4'd2:
	  IF_fn_alu_fn_EQ_2_THEN_NOT_INV_NOT_fn_alu_op1__ETC___d309 =
	      !adder_z_flag__h43;
      4'd3:
	  IF_fn_alu_fn_EQ_2_THEN_NOT_INV_NOT_fn_alu_op1__ETC___d309 =
	      op1_xor_op2__h41 == 64'd0;
      4'd12, 4'd14:
	  IF_fn_alu_fn_EQ_2_THEN_NOT_INV_NOT_fn_alu_op1__ETC___d309 =
	      !INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_63__ETC___d25;
      default: IF_fn_alu_fn_EQ_2_THEN_NOT_INV_NOT_fn_alu_op1__ETC___d309 =
		   INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_63__ETC___d25;
    endcase
  end
endmodule  // module_fn_alu

