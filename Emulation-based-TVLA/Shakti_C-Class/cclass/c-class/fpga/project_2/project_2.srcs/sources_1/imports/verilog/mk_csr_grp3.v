//
// Generated by Bluespec Compiler, version 2021.07-1-gaf77efcd (build af77efcd)
//
// On Mon Dec  6 11:51:13 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_ma_core_req                O     1
// mv_core_resp                   O    65
// RDY_mv_core_resp               O     1 const
// mav_fwd_req                    O    80 reg
// RDY_mav_fwd_req                O     1 reg
// mv_csr_dcsr                    O    32
// mv_resume_int                  O     1 reg
// mv_core_halted                 O     1 reg
// mv_halt_int                    O     1 reg
// mv_dcsr_stopcount              O     1 reg
// RDY_ma_debug_halt_request      O     1 const
// RDY_ma_debug_resume_request    O     1 const
// mv_core_is_halted              O     1 reg
// RDY_mv_core_is_halted          O     1 const
// mv_step_is_set                 O     1 reg
// RDY_mv_step_is_set             O     1 const
// mv_step_ie                     O     1 reg
// RDY_mv_step_ie                 O     1 const
// mv_core_debugenable            O     1 reg
// RDY_mv_core_debugenable        O     1 const
// mav_upd_on_debugger            O    66
// RDY_mav_upd_on_debugger        O     1 const
// mv_mcounteren                  O    32 reg
// mv_mcountinhibit_grp4          O     7 reg
// mv_mhpminterrupten_grp4        O     7 reg
// mv_mcountinhibit_grp5          O     7 reg
// mv_mhpminterrupten_grp5        O     7 reg
// mv_mcountinhibit_grp6          O     7 reg
// mv_mhpminterrupten_grp6        O     7 reg
// mv_mcountinhibit_grp7          O     8 reg
// mv_mhpminterrupten_grp7        O     8 reg
// RDY_ma_clint_mtime             O     1 const
// RDY_ma_incr_minstret           O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_core_req_req                I    80
// ma_debug_halt_request_ip       I     1 reg
// ma_debug_resume_request_ip     I     1 reg
// mav_upd_on_debugger_c          I     6
// mav_upd_on_debugger_pc         I    64
// mav_upd_on_debugger_tval       I    64 unused
// ma_clint_mtime_c_mtime         I    64 reg
// ma_upd_privilege_prv           I     2
// EN_ma_core_req                 I     1
// EN_ma_debug_halt_request       I     1
// EN_ma_debug_resume_request     I     1
// EN_ma_clint_mtime              I     1
// EN_ma_incr_minstret            I     1
// EN_mav_fwd_req                 I     1
// EN_mav_upd_on_debugger         I     1
//
// Combinational paths from inputs to outputs:
//   (ma_core_req_req, EN_ma_core_req, EN_mav_fwd_req) -> mv_core_resp
//   mav_upd_on_debugger_c -> mav_upd_on_debugger
//   EN_mav_fwd_req -> RDY_ma_core_req
//
//
// module : implementing read and write methods for group - 3 csrs and related side band            access
//
// Comments on the inlined module `wr_prv':
//   reg : store the information on curent privilege level
//
// Comments on the inlined module `rg_resp_to_core':
//   wire : holds the response of this group for a csr operation request,   					  for one cycle, wire is used for low latency
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_csr_grp3(CLK,
		   RST_N,

		   ma_core_req_req,
		   EN_ma_core_req,
		   RDY_ma_core_req,

		   mv_core_resp,
		   RDY_mv_core_resp,

		   EN_mav_fwd_req,
		   mav_fwd_req,
		   RDY_mav_fwd_req,

		   mv_csr_dcsr,

		   mv_resume_int,

		   mv_core_halted,

		   mv_halt_int,

		   mv_dcsr_stopcount,

		   ma_debug_halt_request_ip,
		   EN_ma_debug_halt_request,
		   RDY_ma_debug_halt_request,

		   ma_debug_resume_request_ip,
		   EN_ma_debug_resume_request,
		   RDY_ma_debug_resume_request,

		   mv_core_is_halted,
		   RDY_mv_core_is_halted,

		   mv_step_is_set,
		   RDY_mv_step_is_set,

		   mv_step_ie,
		   RDY_mv_step_ie,

		   mv_core_debugenable,
		   RDY_mv_core_debugenable,

		   mav_upd_on_debugger_c,
		   mav_upd_on_debugger_pc,
		   mav_upd_on_debugger_tval,
		   EN_mav_upd_on_debugger,
		   mav_upd_on_debugger,
		   RDY_mav_upd_on_debugger,

		   mv_mcounteren,

		   mv_mcountinhibit_grp4,

		   mv_mhpminterrupten_grp4,

		   mv_mcountinhibit_grp5,

		   mv_mhpminterrupten_grp5,

		   mv_mcountinhibit_grp6,

		   mv_mhpminterrupten_grp6,

		   mv_mcountinhibit_grp7,

		   mv_mhpminterrupten_grp7,

		   ma_clint_mtime_c_mtime,
		   EN_ma_clint_mtime,
		   RDY_ma_clint_mtime,

		   EN_ma_incr_minstret,
		   RDY_ma_incr_minstret,

		   ma_upd_privilege_prv);
  input  CLK;
  input  RST_N;

  // action method ma_core_req
  input  [79 : 0] ma_core_req_req;
  input  EN_ma_core_req;
  output RDY_ma_core_req;

  // value method mv_core_resp
  output [64 : 0] mv_core_resp;
  output RDY_mv_core_resp;

  // actionvalue method mav_fwd_req
  input  EN_mav_fwd_req;
  output [79 : 0] mav_fwd_req;
  output RDY_mav_fwd_req;

  // value method mv_csr_dcsr
  output [31 : 0] mv_csr_dcsr;

  // value method mv_resume_int
  output mv_resume_int;

  // value method mv_core_halted
  output mv_core_halted;

  // value method mv_halt_int
  output mv_halt_int;

  // value method mv_dcsr_stopcount
  output mv_dcsr_stopcount;

  // action method ma_debug_halt_request
  input  ma_debug_halt_request_ip;
  input  EN_ma_debug_halt_request;
  output RDY_ma_debug_halt_request;

  // action method ma_debug_resume_request
  input  ma_debug_resume_request_ip;
  input  EN_ma_debug_resume_request;
  output RDY_ma_debug_resume_request;

  // value method mv_core_is_halted
  output mv_core_is_halted;
  output RDY_mv_core_is_halted;

  // value method mv_step_is_set
  output mv_step_is_set;
  output RDY_mv_step_is_set;

  // value method mv_step_ie
  output mv_step_ie;
  output RDY_mv_step_ie;

  // value method mv_core_debugenable
  output mv_core_debugenable;
  output RDY_mv_core_debugenable;

  // actionvalue method mav_upd_on_debugger
  input  [5 : 0] mav_upd_on_debugger_c;
  input  [63 : 0] mav_upd_on_debugger_pc;
  input  [63 : 0] mav_upd_on_debugger_tval;
  input  EN_mav_upd_on_debugger;
  output [65 : 0] mav_upd_on_debugger;
  output RDY_mav_upd_on_debugger;

  // value method mv_mcounteren
  output [31 : 0] mv_mcounteren;

  // value method mv_mcountinhibit_grp4
  output [6 : 0] mv_mcountinhibit_grp4;

  // value method mv_mhpminterrupten_grp4
  output [6 : 0] mv_mhpminterrupten_grp4;

  // value method mv_mcountinhibit_grp5
  output [6 : 0] mv_mcountinhibit_grp5;

  // value method mv_mhpminterrupten_grp5
  output [6 : 0] mv_mhpminterrupten_grp5;

  // value method mv_mcountinhibit_grp6
  output [6 : 0] mv_mcountinhibit_grp6;

  // value method mv_mhpminterrupten_grp6
  output [6 : 0] mv_mhpminterrupten_grp6;

  // value method mv_mcountinhibit_grp7
  output [7 : 0] mv_mcountinhibit_grp7;

  // value method mv_mhpminterrupten_grp7
  output [7 : 0] mv_mhpminterrupten_grp7;

  // action method ma_clint_mtime
  input  [63 : 0] ma_clint_mtime_c_mtime;
  input  EN_ma_clint_mtime;
  output RDY_ma_clint_mtime;

  // action method ma_incr_minstret
  input  EN_ma_incr_minstret;
  output RDY_ma_incr_minstret;

  // action method ma_upd_privilege
  input  [1 : 0] ma_upd_privilege_prv;

  // signals for module outputs
  wire [79 : 0] mav_fwd_req;
  wire [65 : 0] mav_upd_on_debugger;
  wire [64 : 0] mv_core_resp;
  wire [31 : 0] mv_csr_dcsr, mv_mcounteren;
  wire [7 : 0] mv_mcountinhibit_grp7, mv_mhpminterrupten_grp7;
  wire [6 : 0] mv_mcountinhibit_grp4,
	       mv_mcountinhibit_grp5,
	       mv_mcountinhibit_grp6,
	       mv_mhpminterrupten_grp4,
	       mv_mhpminterrupten_grp5,
	       mv_mhpminterrupten_grp6;
  wire RDY_ma_clint_mtime,
       RDY_ma_core_req,
       RDY_ma_debug_halt_request,
       RDY_ma_debug_resume_request,
       RDY_ma_incr_minstret,
       RDY_mav_fwd_req,
       RDY_mav_upd_on_debugger,
       RDY_mv_core_debugenable,
       RDY_mv_core_is_halted,
       RDY_mv_core_resp,
       RDY_mv_step_ie,
       RDY_mv_step_is_set,
       mv_core_debugenable,
       mv_core_halted,
       mv_core_is_halted,
       mv_dcsr_stopcount,
       mv_halt_int,
       mv_resume_int,
       mv_step_ie,
       mv_step_is_set;

  // inlined wires
  reg [64 : 0] rg_resp_to_core_wget;
  reg [63 : 0] csr_op_res_wget;
  wire [129 : 0] csr_op_arg_wget;
  wire rg_resp_to_core_whas;

  // register rg_clint_mtime
  // reg : regsiter to store the timer value, updated by the core on sideband access
  reg [63 : 0] rg_clint_mtime;
  wire [63 : 0] rg_clint_mtime_D_IN;
  wire rg_clint_mtime_EN;

  // register rg_core_halted
  reg rg_core_halted;
  wire rg_core_halted_D_IN, rg_core_halted_EN;

  // register rg_csr_denable
  // reg : Debug Enable register
  reg rg_csr_denable;
  wire rg_csr_denable_D_IN, rg_csr_denable_EN;

  // register rg_csr_dpc
  // reg : updated by the virtual address of next instruction upon entry to debug mode
  reg [62 : 0] rg_csr_dpc;
  wire [62 : 0] rg_csr_dpc_D_IN;
  wire rg_csr_dpc_EN;

  // register rg_csr_dscratch
  // reg : scratch register for usage in debug mode
  reg [63 : 0] rg_csr_dscratch;
  wire [63 : 0] rg_csr_dscratch_D_IN;
  wire rg_csr_dscratch_EN;

  // register rg_csr_dtvec
  // reg : contains debug trap vector configuration, part of dtvec register
  reg [62 : 0] rg_csr_dtvec;
  wire [62 : 0] rg_csr_dtvec_D_IN;
  wire rg_csr_dtvec_EN;

  // register rg_cy
  // reg : this register controls wether cycle-counters should increment or not,	           part of mcountinhibit register
  reg rg_cy;
  wire rg_cy_D_IN, rg_cy_EN;

  // register rg_dcsr_cause
  // reg : encodes the cause of entry into debug mode, part of dcsr
  reg [2 : 0] rg_dcsr_cause;
  wire [2 : 0] rg_dcsr_cause_D_IN;
  wire rg_dcsr_cause_EN;

  // register rg_dcsr_ebreakm
  // reg : ebreakm decides if ebreak instruction in m-mode, should cause entry in debug              mode or behave normally, part of dcsr
  reg rg_dcsr_ebreakm;
  wire rg_dcsr_ebreakm_D_IN, rg_dcsr_ebreakm_EN;

  // register rg_dcsr_ebreaks
  // reg : ebreaks decides if ebreak instruction in s-mode, should cause entry in debug              mode or behave normally, part of dcsr
  reg rg_dcsr_ebreaks;
  wire rg_dcsr_ebreaks_D_IN, rg_dcsr_ebreaks_EN;

  // register rg_dcsr_ebreaku
  // reg : ebreaku decides if ebreak instruction in u-mode, should cause entry in debug              mode or normally, part of dcsr
  reg rg_dcsr_ebreaku;
  wire rg_dcsr_ebreaku_D_IN, rg_dcsr_ebreaku_EN;

  // register rg_dcsr_mprven
  // reg : decides wether mprv bits in mstatus register should be ignored/not,              part of dcsr
  reg rg_dcsr_mprven;
  wire rg_dcsr_mprven_D_IN, rg_dcsr_mprven_EN;

  // register rg_dcsr_nmip
  // reg : when set, shows a Non Maskable Interrupt is Pending (nmip), part of dcsr
  reg rg_dcsr_nmip;
  wire rg_dcsr_nmip_D_IN, rg_dcsr_nmip_EN;

  // register rg_dcsr_prv
  // reg : contains the privilege level existing upon entry to debug mode, part of dcsr
  reg [1 : 0] rg_dcsr_prv;
  wire [1 : 0] rg_dcsr_prv_D_IN;
  wire rg_dcsr_prv_EN;

  // register rg_dcsr_step
  // reg : causes a single instruction to be executed followed by entry to debug mode,              when set, part of dcsr
  reg rg_dcsr_step;
  wire rg_dcsr_step_D_IN, rg_dcsr_step_EN;

  // register rg_dcsr_stepie
  // reg : Step Interrupt Enable, is an enable bit to allow interrupts during single              stepping, part of dcsr
  reg rg_dcsr_stepie;
  wire rg_dcsr_stepie_D_IN, rg_dcsr_stepie_EN;

  // register rg_dcsr_stopcount
  // reg : disable bit to prevent counters from incrementing during debug mode,              part of dcsr
  reg rg_dcsr_stopcount;
  wire rg_dcsr_stopcount_D_IN, rg_dcsr_stopcount_EN;

  // register rg_dcsr_stoptime
  // reg : disable bit to prevent timers from incrementing during debug mode, part of dcsr
  reg rg_dcsr_stoptime;
  wire rg_dcsr_stoptime_D_IN, rg_dcsr_stoptime_EN;

  // register rg_halt_int
  // reg : internal register specific to this implementation
  reg rg_halt_int;
  wire rg_halt_int_D_IN, rg_halt_int_EN;

  // register rg_hpm_enabler
  // reg : hpm_enabler controls which registers should increment, part of mcountinhibit 	           register
  reg [28 : 0] rg_hpm_enabler;
  wire [28 : 0] rg_hpm_enabler_D_IN;
  wire rg_hpm_enabler_EN;

  // register rg_ir
  // reg : this register control wether the instruction counter should increment or not,	           part of mcountinhibit register
  reg rg_ir;
  wire rg_ir_D_IN, rg_ir_EN;

  // register rg_mcounteren
  // reg : Machine COUNTER ENable, controls availibility of performance monitors to next 		         lowest privilege level
  reg [31 : 0] rg_mcounteren;
  wire [31 : 0] rg_mcounteren_D_IN;
  wire rg_mcounteren_EN;

  // register rg_mcycle
  // reg : Macine Cycle, increments its value every cycle
  reg [63 : 0] rg_mcycle;
  wire [63 : 0] rg_mcycle_D_IN;
  wire rg_mcycle_EN;

  // register rg_mhpminterrupten
  reg [31 : 0] rg_mhpminterrupten;
  wire [31 : 0] rg_mhpminterrupten_D_IN;
  wire rg_mhpminterrupten_EN;

  // register rg_minstret
  // reg : Macine INSTruction RETired, counts the total number of instructions retired by 	           hart
  reg [63 : 0] rg_minstret;
  wire [63 : 0] rg_minstret_D_IN;
  wire rg_minstret_EN;

  // register rg_resume_int
  // reg : internal register specific to this implementation
  reg rg_resume_int;
  wire rg_resume_int_D_IN, rg_resume_int_EN;

  // ports of submodule ff_fwd_request
  wire [79 : 0] ff_fwd_request_D_IN, ff_fwd_request_D_OUT;
  wire ff_fwd_request_CLR,
       ff_fwd_request_DEQ,
       ff_fwd_request_EMPTY_N,
       ff_fwd_request_ENQ,
       ff_fwd_request_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_increment_cycle_counter,
       CAN_FIRE_ma_clint_mtime,
       CAN_FIRE_ma_core_req,
       CAN_FIRE_ma_debug_halt_request,
       CAN_FIRE_ma_debug_resume_request,
       CAN_FIRE_ma_incr_minstret,
       CAN_FIRE_ma_upd_privilege,
       CAN_FIRE_mav_fwd_req,
       CAN_FIRE_mav_upd_on_debugger,
       WILL_FIRE_RL_increment_cycle_counter,
       WILL_FIRE_ma_clint_mtime,
       WILL_FIRE_ma_core_req,
       WILL_FIRE_ma_debug_halt_request,
       WILL_FIRE_ma_debug_resume_request,
       WILL_FIRE_ma_incr_minstret,
       WILL_FIRE_ma_upd_privilege,
       WILL_FIRE_mav_fwd_req,
       WILL_FIRE_mav_upd_on_debugger;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_rg_mcycle_write_1__VAL_2, MUX_rg_minstret_write_1__VAL_1;
  wire MUX_rg_csr_dpc_write_1__SEL_1,
       MUX_rg_dcsr_prv_write_1__SEL_2,
       MUX_rg_mcycle_write_1__SEL_1,
       MUX_rg_minstret_write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] CASE_ma_core_req_req_BITS_79_TO_68_0xC00_rg_mc_ETC__q1,
	       IF_ma_core_req_req_BITS_79_TO_68_EQ_0x7B0_THEN_ETC___d137;
  reg [31 : 0] CASE_ma_core_req_req_BITS_79_TO_68_0x306_rg_mc_ETC__q2;
  wire [63 : 0] new_value_data__h1768,
		new_value_data__h1805,
		v__h1997,
		x__h2034,
		x__h3658,
		x__h5126,
		x__h5751,
		x__read_data__h5396,
		x_wget_fst__h2114,
		x_wget_snd_fst__h2199;
  wire [62 : 0] IF_NOT_mav_upd_on_debugger_c_ULT_49_08_09_AND__ETC___d215;
  wire [31 : 0] x__h1653, x__h1925;
  wire [30 : 0] r1__read__h1938;
  wire [29 : 0] r1__read__h1705, r1__read__h1940;
  wire [28 : 0] r1__read__h1707;
  wire [27 : 0] r1__read__h1709;
  wire [26 : 0] r1__read__h1711;
  wire [25 : 0] r1__read__h1713;
  wire [22 : 0] r1__read__h1715;
  wire [21 : 0] r1__read__h1717;
  wire [20 : 0] r1__read__h1719;
  wire [19 : 0] r1__read__h1721;
  wire [18 : 0] r1__read__h1723;
  wire [17 : 0] r1__read__h1725;
  wire [16 : 0] r1__read__h1727;
  wire [1 : 0] x_wget_snd_snd__h2200;

  // action method ma_core_req
  assign RDY_ma_core_req = ff_fwd_request_FULL_N ;
  assign CAN_FIRE_ma_core_req = ff_fwd_request_FULL_N ;
  assign WILL_FIRE_ma_core_req = EN_ma_core_req ;

  // value method mv_core_resp
  assign mv_core_resp =
	     { rg_resp_to_core_whas && rg_resp_to_core_wget[64],
	       x__read_data__h5396 } ;
  assign RDY_mv_core_resp = 1'd1 ;

  // actionvalue method mav_fwd_req
  assign mav_fwd_req = ff_fwd_request_D_OUT ;
  assign RDY_mav_fwd_req = ff_fwd_request_EMPTY_N ;
  assign CAN_FIRE_mav_fwd_req = ff_fwd_request_EMPTY_N ;
  assign WILL_FIRE_mav_fwd_req = EN_mav_fwd_req ;

  // value method mv_csr_dcsr
  assign mv_csr_dcsr = { r1__read__h1705, rg_dcsr_prv } ;

  // value method mv_resume_int
  assign mv_resume_int = rg_resume_int ;

  // value method mv_core_halted
  assign mv_core_halted = rg_core_halted ;

  // value method mv_halt_int
  assign mv_halt_int = rg_halt_int ;

  // value method mv_dcsr_stopcount
  assign mv_dcsr_stopcount = rg_dcsr_stopcount ;

  // action method ma_debug_halt_request
  assign RDY_ma_debug_halt_request = 1'd1 ;
  assign CAN_FIRE_ma_debug_halt_request = 1'd1 ;
  assign WILL_FIRE_ma_debug_halt_request = EN_ma_debug_halt_request ;

  // action method ma_debug_resume_request
  assign RDY_ma_debug_resume_request = 1'd1 ;
  assign CAN_FIRE_ma_debug_resume_request = 1'd1 ;
  assign WILL_FIRE_ma_debug_resume_request = EN_ma_debug_resume_request ;

  // value method mv_core_is_halted
  assign mv_core_is_halted = rg_core_halted ;
  assign RDY_mv_core_is_halted = 1'd1 ;

  // value method mv_step_is_set
  assign mv_step_is_set = rg_dcsr_step ;
  assign RDY_mv_step_is_set = 1'd1 ;

  // value method mv_step_ie
  assign mv_step_ie = rg_dcsr_stepie ;
  assign RDY_mv_step_ie = 1'd1 ;

  // value method mv_core_debugenable
  assign mv_core_debugenable = rg_csr_denable ;
  assign RDY_mv_core_debugenable = 1'd1 ;

  // actionvalue method mav_upd_on_debugger
  assign mav_upd_on_debugger = { rg_dcsr_prv, x__h5751 } ;
  assign RDY_mav_upd_on_debugger = 1'd1 ;
  assign CAN_FIRE_mav_upd_on_debugger = 1'd1 ;
  assign WILL_FIRE_mav_upd_on_debugger = EN_mav_upd_on_debugger ;

  // value method mv_mcounteren
  assign mv_mcounteren = rg_mcounteren ;

  // value method mv_mcountinhibit_grp4
  assign mv_mcountinhibit_grp4 = rg_hpm_enabler[6:0] ;

  // value method mv_mhpminterrupten_grp4
  assign mv_mhpminterrupten_grp4 = rg_mhpminterrupten[9:3] ;

  // value method mv_mcountinhibit_grp5
  assign mv_mcountinhibit_grp5 = rg_hpm_enabler[13:7] ;

  // value method mv_mhpminterrupten_grp5
  assign mv_mhpminterrupten_grp5 = rg_mhpminterrupten[16:10] ;

  // value method mv_mcountinhibit_grp6
  assign mv_mcountinhibit_grp6 = rg_hpm_enabler[20:14] ;

  // value method mv_mhpminterrupten_grp6
  assign mv_mhpminterrupten_grp6 = rg_mhpminterrupten[23:17] ;

  // value method mv_mcountinhibit_grp7
  assign mv_mcountinhibit_grp7 = rg_hpm_enabler[28:21] ;

  // value method mv_mhpminterrupten_grp7
  assign mv_mhpminterrupten_grp7 = rg_mhpminterrupten[31:24] ;

  // action method ma_clint_mtime
  assign RDY_ma_clint_mtime = 1'd1 ;
  assign CAN_FIRE_ma_clint_mtime = 1'd1 ;
  assign WILL_FIRE_ma_clint_mtime = EN_ma_clint_mtime ;

  // action method ma_incr_minstret
  assign RDY_ma_incr_minstret = 1'd1 ;
  assign CAN_FIRE_ma_incr_minstret = 1'd1 ;
  assign WILL_FIRE_ma_incr_minstret = EN_ma_incr_minstret ;

  // action method ma_upd_privilege
  assign CAN_FIRE_ma_upd_privilege = 1'd1 ;
  assign WILL_FIRE_ma_upd_privilege = 1'd1 ;

  // submodule ff_fwd_request
  // fifo : fifo to forward the core - request to the next group on a miss in the                      current group
  FIFOL1 #(.width(32'd80)) ff_fwd_request(.RST(RST_N),
					  .CLK(CLK),
					  .D_IN(ff_fwd_request_D_IN),
					  .ENQ(ff_fwd_request_ENQ),
					  .DEQ(ff_fwd_request_DEQ),
					  .CLR(ff_fwd_request_CLR),
					  .D_OUT(ff_fwd_request_D_OUT),
					  .FULL_N(ff_fwd_request_FULL_N),
					  .EMPTY_N(ff_fwd_request_EMPTY_N));

  // rule RL_increment_cycle_counter
  //   rule : the rule increments the cycle counter
  assign CAN_FIRE_RL_increment_cycle_counter = 1'd1 ;
  assign WILL_FIRE_RL_increment_cycle_counter = !EN_ma_core_req ;

  // inputs to muxes for submodule ports
  assign MUX_rg_csr_dpc_write_1__SEL_1 =
	     EN_mav_upd_on_debugger && mav_upd_on_debugger_c >= 6'd49 &&
	     mav_upd_on_debugger_c <= 6'd53 ;
  assign MUX_rg_dcsr_prv_write_1__SEL_2 =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h7B0 ;
  assign MUX_rg_mcycle_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'hB00 ;
  assign MUX_rg_minstret_write_1__SEL_1 = EN_ma_incr_minstret && !rg_ir ;
  assign MUX_rg_mcycle_write_1__VAL_2 = rg_mcycle + 64'd1 ;
  assign MUX_rg_minstret_write_1__VAL_1 = rg_minstret + 64'd1 ;

  // inlined wires
  always@(ma_core_req_req or
	  CASE_ma_core_req_req_BITS_79_TO_68_0xC00_rg_mc_ETC__q1 or
	  rg_mcounteren or
	  x__h1925 or
	  x__h1653 or
	  new_value_data__h1768 or
	  rg_csr_dscratch or
	  new_value_data__h1805 or
	  rg_csr_denable or
	  rg_mhpminterrupten or rg_mcycle or rg_clint_mtime or rg_minstret)
  begin
    case (ma_core_req_req[79:68])
      12'h306: rg_resp_to_core_wget = { 33'h100000000, rg_mcounteren };
      12'h320: rg_resp_to_core_wget = { 33'h100000000, x__h1925 };
      12'h7B0: rg_resp_to_core_wget = { 33'h100000000, x__h1653 };
      12'h7B1: rg_resp_to_core_wget = { 1'd1, new_value_data__h1768 };
      12'h7B2: rg_resp_to_core_wget = { 1'd1, rg_csr_dscratch };
      12'h7C0: rg_resp_to_core_wget = { 1'd1, new_value_data__h1805 };
      12'h7C1:
	  rg_resp_to_core_wget = { 64'h8000000000000000, rg_csr_denable };
      12'h7C2: rg_resp_to_core_wget = { 33'h100000000, rg_mhpminterrupten };
      12'hB00: rg_resp_to_core_wget = { 1'd1, rg_mcycle };
      12'hB01: rg_resp_to_core_wget = { 1'd1, rg_clint_mtime };
      12'hB02: rg_resp_to_core_wget = { 1'd1, rg_minstret };
      12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  rg_resp_to_core_wget = 65'h10000000000000000;
      default: rg_resp_to_core_wget =
		   { 1'd1,
		     CASE_ma_core_req_req_BITS_79_TO_68_0xC00_rg_mc_ETC__q1 };
    endcase
  end
  assign rg_resp_to_core_whas =
	     EN_ma_core_req &&
	     (ma_core_req_req[79:68] == 12'h7B0 ||
	      ma_core_req_req[79:68] == 12'h7B1 ||
	      ma_core_req_req[79:68] == 12'h7B2 ||
	      ma_core_req_req[79:68] == 12'h7C0 ||
	      ma_core_req_req[79:68] == 12'h7C1 ||
	      ma_core_req_req[79:68] == 12'hF11 ||
	      ma_core_req_req[79:68] == 12'hF12 ||
	      ma_core_req_req[79:68] == 12'hF13 ||
	      ma_core_req_req[79:68] == 12'hF14 ||
	      ma_core_req_req[79:68] == 12'hB00 ||
	      ma_core_req_req[79:68] == 12'hB02 ||
	      ma_core_req_req[79:68] == 12'hB01 ||
	      ma_core_req_req[79:68] == 12'h306 ||
	      ma_core_req_req[79:68] == 12'h320 ||
	      ma_core_req_req[79:68] == 12'h7C2 ||
	      ma_core_req_req[79:68] == 12'hC00 ||
	      ma_core_req_req[79:68] == 12'hC01 ||
	      ma_core_req_req[79:68] == 12'hC02) ;
  assign csr_op_arg_wget =
	     { ma_core_req_req[67:4],
	       IF_ma_core_req_req_BITS_79_TO_68_EQ_0x7B0_THEN_ETC___d137,
	       ma_core_req_req[3:2] } ;
  always@(ma_core_req_req or x__h5126)
  begin
    case (ma_core_req_req[79:68])
      12'h306, 12'h7B0, 12'h7B1, 12'h7B2, 12'h7C0, 12'h7C1, 12'hB00, 12'hB02:
	  csr_op_res_wget = x__h5126;
      default: csr_op_res_wget = x__h5126;
    endcase
  end

  // register rg_clint_mtime
  assign rg_clint_mtime_D_IN = ma_clint_mtime_c_mtime ;
  assign rg_clint_mtime_EN = EN_ma_clint_mtime ;

  // register rg_core_halted
  assign rg_core_halted_D_IN =
	     mav_upd_on_debugger_c >= 6'd49 &&
	     mav_upd_on_debugger_c <= 6'd53 ;
  assign rg_core_halted_EN = EN_mav_upd_on_debugger ;

  // register rg_csr_denable
  assign rg_csr_denable_D_IN = v__h1997[0] ;
  assign rg_csr_denable_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h7C1 ;

  // register rg_csr_dpc
  assign rg_csr_dpc_D_IN =
	     MUX_rg_csr_dpc_write_1__SEL_1 ?
	       mav_upd_on_debugger_pc[63:1] :
	       v__h1997[63:1] ;
  assign rg_csr_dpc_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h7B1 ||
	     EN_mav_upd_on_debugger && mav_upd_on_debugger_c >= 6'd49 &&
	     mav_upd_on_debugger_c <= 6'd53 ;

  // register rg_csr_dscratch
  assign rg_csr_dscratch_D_IN = csr_op_res_wget ;
  assign rg_csr_dscratch_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h7B2 ;

  // register rg_csr_dtvec
  assign rg_csr_dtvec_D_IN = v__h1997[63:1] ;
  assign rg_csr_dtvec_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h7C0 ;

  // register rg_cy
  assign rg_cy_D_IN = v__h1997[0] ;
  assign rg_cy_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h320 ;

  // register rg_dcsr_cause
  assign rg_dcsr_cause_D_IN = mav_upd_on_debugger_c[2:0] ;
  assign rg_dcsr_cause_EN = MUX_rg_csr_dpc_write_1__SEL_1 ;

  // register rg_dcsr_ebreakm
  assign rg_dcsr_ebreakm_D_IN = v__h1997[15] ;
  assign rg_dcsr_ebreakm_EN = MUX_rg_dcsr_prv_write_1__SEL_2 ;

  // register rg_dcsr_ebreaks
  assign rg_dcsr_ebreaks_D_IN = v__h1997[13] ;
  assign rg_dcsr_ebreaks_EN = MUX_rg_dcsr_prv_write_1__SEL_2 ;

  // register rg_dcsr_ebreaku
  assign rg_dcsr_ebreaku_D_IN = v__h1997[12] ;
  assign rg_dcsr_ebreaku_EN = MUX_rg_dcsr_prv_write_1__SEL_2 ;

  // register rg_dcsr_mprven
  assign rg_dcsr_mprven_D_IN = v__h1997[4] ;
  assign rg_dcsr_mprven_EN = MUX_rg_dcsr_prv_write_1__SEL_2 ;

  // register rg_dcsr_nmip
  assign rg_dcsr_nmip_D_IN = 1'b0 ;
  assign rg_dcsr_nmip_EN = 1'b0 ;

  // register rg_dcsr_prv
  assign rg_dcsr_prv_D_IN =
	     MUX_rg_csr_dpc_write_1__SEL_1 ?
	       ma_upd_privilege_prv :
	       v__h1997[1:0] ;
  assign rg_dcsr_prv_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h7B0 ||
	     EN_mav_upd_on_debugger && mav_upd_on_debugger_c >= 6'd49 &&
	     mav_upd_on_debugger_c <= 6'd53 ;

  // register rg_dcsr_step
  assign rg_dcsr_step_D_IN = v__h1997[2] ;
  assign rg_dcsr_step_EN = MUX_rg_dcsr_prv_write_1__SEL_2 ;

  // register rg_dcsr_stepie
  assign rg_dcsr_stepie_D_IN = v__h1997[11] ;
  assign rg_dcsr_stepie_EN = MUX_rg_dcsr_prv_write_1__SEL_2 ;

  // register rg_dcsr_stopcount
  assign rg_dcsr_stopcount_D_IN = v__h1997[10] ;
  assign rg_dcsr_stopcount_EN = MUX_rg_dcsr_prv_write_1__SEL_2 ;

  // register rg_dcsr_stoptime
  assign rg_dcsr_stoptime_D_IN = v__h1997[9] ;
  assign rg_dcsr_stoptime_EN = MUX_rg_dcsr_prv_write_1__SEL_2 ;

  // register rg_halt_int
  assign rg_halt_int_D_IN = ma_debug_halt_request_ip ;
  assign rg_halt_int_EN = EN_ma_debug_halt_request ;

  // register rg_hpm_enabler
  assign rg_hpm_enabler_D_IN = v__h1997[31:3] ;
  assign rg_hpm_enabler_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h320 ;

  // register rg_ir
  assign rg_ir_D_IN = v__h1997[2] ;
  assign rg_ir_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h320 ;

  // register rg_mcounteren
  assign rg_mcounteren_D_IN = v__h1997[31:0] ;
  assign rg_mcounteren_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h306 ;

  // register rg_mcycle
  assign rg_mcycle_D_IN =
	     MUX_rg_mcycle_write_1__SEL_1 ?
	       csr_op_res_wget :
	       MUX_rg_mcycle_write_1__VAL_2 ;
  assign rg_mcycle_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'hB00 ||
	     WILL_FIRE_RL_increment_cycle_counter && !rg_cy ;

  // register rg_mhpminterrupten
  assign rg_mhpminterrupten_D_IN = v__h1997[31:0] ;
  assign rg_mhpminterrupten_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h7C2 ;

  // register rg_minstret
  assign rg_minstret_D_IN =
	     MUX_rg_minstret_write_1__SEL_1 ?
	       MUX_rg_minstret_write_1__VAL_1 :
	       csr_op_res_wget ;
  assign rg_minstret_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'hB02 ||
	     EN_ma_incr_minstret && !rg_ir ;

  // register rg_resume_int
  assign rg_resume_int_D_IN = ma_debug_resume_request_ip ;
  assign rg_resume_int_EN = EN_ma_debug_resume_request ;

  // submodule ff_fwd_request
  assign ff_fwd_request_D_IN = ma_core_req_req ;
  assign ff_fwd_request_ENQ =
	     EN_ma_core_req && ma_core_req_req[79:68] != 12'h7B0 &&
	     ma_core_req_req[79:68] != 12'h7B1 &&
	     ma_core_req_req[79:68] != 12'h7B2 &&
	     ma_core_req_req[79:68] != 12'h7C0 &&
	     ma_core_req_req[79:68] != 12'h7C1 &&
	     ma_core_req_req[79:68] != 12'hF11 &&
	     ma_core_req_req[79:68] != 12'hF12 &&
	     ma_core_req_req[79:68] != 12'hF13 &&
	     ma_core_req_req[79:68] != 12'hF14 &&
	     ma_core_req_req[79:68] != 12'hB00 &&
	     ma_core_req_req[79:68] != 12'hB02 &&
	     ma_core_req_req[79:68] != 12'hB01 &&
	     ma_core_req_req[79:68] != 12'h306 &&
	     ma_core_req_req[79:68] != 12'h320 &&
	     ma_core_req_req[79:68] != 12'h7C2 &&
	     ma_core_req_req[79:68] != 12'hC00 &&
	     ma_core_req_req[79:68] != 12'hC01 &&
	     ma_core_req_req[79:68] != 12'hC02 ;
  assign ff_fwd_request_DEQ = EN_mav_fwd_req ;
  assign ff_fwd_request_CLR = 1'b0 ;

  // remaining internal signals
  module_fn_csr_op instance_fn_csr_op_0(.fn_csr_op_writedata(x_wget_fst__h2114),
					.fn_csr_op_readdata(x_wget_snd_fst__h2199),
					.fn_csr_op_op(x_wget_snd_snd__h2200),
					.fn_csr_op(x__h5126));
  assign IF_NOT_mav_upd_on_debugger_c_ULT_49_08_09_AND__ETC___d215 =
	     (mav_upd_on_debugger_c >= 6'd49 &&
	      mav_upd_on_debugger_c <= 6'd53) ?
	       rg_csr_dtvec :
	       rg_csr_dpc ;
  assign new_value_data__h1768 = { rg_csr_dpc, 1'd0 } ;
  assign new_value_data__h1805 = { rg_csr_dtvec, 1'd0 } ;
  assign r1__read__h1705 = { r1__read__h1707, rg_dcsr_step } ;
  assign r1__read__h1707 = { r1__read__h1709, rg_dcsr_nmip } ;
  assign r1__read__h1709 = { r1__read__h1711, rg_dcsr_mprven } ;
  assign r1__read__h1711 = { r1__read__h1713, 1'd0 } ;
  assign r1__read__h1713 = { r1__read__h1715, rg_dcsr_cause } ;
  assign r1__read__h1715 = { r1__read__h1717, rg_dcsr_stoptime } ;
  assign r1__read__h1717 = { r1__read__h1719, rg_dcsr_stopcount } ;
  assign r1__read__h1719 = { r1__read__h1721, rg_dcsr_stepie } ;
  assign r1__read__h1721 = { r1__read__h1723, rg_dcsr_ebreaku } ;
  assign r1__read__h1723 = { r1__read__h1725, rg_dcsr_ebreaks } ;
  assign r1__read__h1725 = { r1__read__h1727, 1'd0 } ;
  assign r1__read__h1727 = { 16'd16384, rg_dcsr_ebreakm } ;
  assign r1__read__h1938 = { r1__read__h1940, 1'd0 } ;
  assign r1__read__h1940 = { rg_hpm_enabler, rg_ir } ;
  assign v__h1997 = csr_op_res_wget ;
  assign x__h1653 = { r1__read__h1705, rg_dcsr_prv } ;
  assign x__h1925 = { r1__read__h1938, rg_cy } ;
  assign x__h2034 = { 32'd0, x__h1653 } ;
  assign x__h3658 = { 63'd0, rg_csr_denable } ;
  assign x__h5751 =
	     { IF_NOT_mav_upd_on_debugger_c_ULT_49_08_09_AND__ETC___d215,
	       1'd0 } ;
  assign x__read_data__h5396 =
	     rg_resp_to_core_whas ? rg_resp_to_core_wget[63:0] : 64'd0 ;
  assign x_wget_fst__h2114 = csr_op_arg_wget[129:66] ;
  assign x_wget_snd_fst__h2199 = csr_op_arg_wget[65:2] ;
  assign x_wget_snd_snd__h2200 = csr_op_arg_wget[1:0] ;
  always@(ma_core_req_req or rg_minstret or rg_mcycle or rg_clint_mtime)
  begin
    case (ma_core_req_req[79:68])
      12'hC00:
	  CASE_ma_core_req_req_BITS_79_TO_68_0xC00_rg_mc_ETC__q1 = rg_mcycle;
      12'hC01:
	  CASE_ma_core_req_req_BITS_79_TO_68_0xC00_rg_mc_ETC__q1 =
	      rg_clint_mtime;
      default: CASE_ma_core_req_req_BITS_79_TO_68_0xC00_rg_mc_ETC__q1 =
		   rg_minstret;
    endcase
  end
  always@(ma_core_req_req or rg_mhpminterrupten or rg_mcounteren or x__h1925)
  begin
    case (ma_core_req_req[79:68])
      12'h306:
	  CASE_ma_core_req_req_BITS_79_TO_68_0x306_rg_mc_ETC__q2 =
	      rg_mcounteren;
      12'h320:
	  CASE_ma_core_req_req_BITS_79_TO_68_0x306_rg_mc_ETC__q2 = x__h1925;
      default: CASE_ma_core_req_req_BITS_79_TO_68_0x306_rg_mc_ETC__q2 =
		   rg_mhpminterrupten;
    endcase
  end
  always@(ma_core_req_req or
	  CASE_ma_core_req_req_BITS_79_TO_68_0x306_rg_mc_ETC__q2 or
	  x__h2034 or
	  new_value_data__h1768 or
	  rg_csr_dscratch or
	  new_value_data__h1805 or x__h3658 or rg_mcycle or rg_minstret)
  begin
    case (ma_core_req_req[79:68])
      12'h7B0:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x7B0_THEN_ETC___d137 =
	      x__h2034;
      12'h7B1:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x7B0_THEN_ETC___d137 =
	      new_value_data__h1768;
      12'h7B2:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x7B0_THEN_ETC___d137 =
	      rg_csr_dscratch;
      12'h7C0:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x7B0_THEN_ETC___d137 =
	      new_value_data__h1805;
      12'h7C1:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x7B0_THEN_ETC___d137 =
	      x__h3658;
      12'hB00:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x7B0_THEN_ETC___d137 =
	      rg_mcycle;
      12'hB02:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x7B0_THEN_ETC___d137 =
	      rg_minstret;
      default: IF_ma_core_req_req_BITS_79_TO_68_EQ_0x7B0_THEN_ETC___d137 =
		   { 32'd0,
		     CASE_ma_core_req_req_BITS_79_TO_68_0x306_rg_mc_ETC__q2 };
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_clint_mtime <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_core_halted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_csr_denable <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_csr_dpc <= `BSV_ASSIGNMENT_DELAY 63'd0;
	rg_csr_dscratch <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_csr_dtvec <= `BSV_ASSIGNMENT_DELAY 63'd0;
	rg_cy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dcsr_cause <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_dcsr_ebreakm <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_dcsr_ebreaks <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dcsr_ebreaku <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dcsr_mprven <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dcsr_nmip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dcsr_prv <= `BSV_ASSIGNMENT_DELAY 2'd3;
	rg_dcsr_step <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dcsr_stepie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dcsr_stopcount <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dcsr_stoptime <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_halt_int <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_hpm_enabler <= `BSV_ASSIGNMENT_DELAY 29'd0;
	rg_ir <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mcounteren <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_mcycle <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mhpminterrupten <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_minstret <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_resume_int <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_clint_mtime_EN)
	  rg_clint_mtime <= `BSV_ASSIGNMENT_DELAY rg_clint_mtime_D_IN;
	if (rg_core_halted_EN)
	  rg_core_halted <= `BSV_ASSIGNMENT_DELAY rg_core_halted_D_IN;
	if (rg_csr_denable_EN)
	  rg_csr_denable <= `BSV_ASSIGNMENT_DELAY rg_csr_denable_D_IN;
	if (rg_csr_dpc_EN)
	  rg_csr_dpc <= `BSV_ASSIGNMENT_DELAY rg_csr_dpc_D_IN;
	if (rg_csr_dscratch_EN)
	  rg_csr_dscratch <= `BSV_ASSIGNMENT_DELAY rg_csr_dscratch_D_IN;
	if (rg_csr_dtvec_EN)
	  rg_csr_dtvec <= `BSV_ASSIGNMENT_DELAY rg_csr_dtvec_D_IN;
	if (rg_cy_EN) rg_cy <= `BSV_ASSIGNMENT_DELAY rg_cy_D_IN;
	if (rg_dcsr_cause_EN)
	  rg_dcsr_cause <= `BSV_ASSIGNMENT_DELAY rg_dcsr_cause_D_IN;
	if (rg_dcsr_ebreakm_EN)
	  rg_dcsr_ebreakm <= `BSV_ASSIGNMENT_DELAY rg_dcsr_ebreakm_D_IN;
	if (rg_dcsr_ebreaks_EN)
	  rg_dcsr_ebreaks <= `BSV_ASSIGNMENT_DELAY rg_dcsr_ebreaks_D_IN;
	if (rg_dcsr_ebreaku_EN)
	  rg_dcsr_ebreaku <= `BSV_ASSIGNMENT_DELAY rg_dcsr_ebreaku_D_IN;
	if (rg_dcsr_mprven_EN)
	  rg_dcsr_mprven <= `BSV_ASSIGNMENT_DELAY rg_dcsr_mprven_D_IN;
	if (rg_dcsr_nmip_EN)
	  rg_dcsr_nmip <= `BSV_ASSIGNMENT_DELAY rg_dcsr_nmip_D_IN;
	if (rg_dcsr_prv_EN)
	  rg_dcsr_prv <= `BSV_ASSIGNMENT_DELAY rg_dcsr_prv_D_IN;
	if (rg_dcsr_step_EN)
	  rg_dcsr_step <= `BSV_ASSIGNMENT_DELAY rg_dcsr_step_D_IN;
	if (rg_dcsr_stepie_EN)
	  rg_dcsr_stepie <= `BSV_ASSIGNMENT_DELAY rg_dcsr_stepie_D_IN;
	if (rg_dcsr_stopcount_EN)
	  rg_dcsr_stopcount <= `BSV_ASSIGNMENT_DELAY rg_dcsr_stopcount_D_IN;
	if (rg_dcsr_stoptime_EN)
	  rg_dcsr_stoptime <= `BSV_ASSIGNMENT_DELAY rg_dcsr_stoptime_D_IN;
	if (rg_halt_int_EN)
	  rg_halt_int <= `BSV_ASSIGNMENT_DELAY rg_halt_int_D_IN;
	if (rg_hpm_enabler_EN)
	  rg_hpm_enabler <= `BSV_ASSIGNMENT_DELAY rg_hpm_enabler_D_IN;
	if (rg_ir_EN) rg_ir <= `BSV_ASSIGNMENT_DELAY rg_ir_D_IN;
	if (rg_mcounteren_EN)
	  rg_mcounteren <= `BSV_ASSIGNMENT_DELAY rg_mcounteren_D_IN;
	if (rg_mcycle_EN) rg_mcycle <= `BSV_ASSIGNMENT_DELAY rg_mcycle_D_IN;
	if (rg_mhpminterrupten_EN)
	  rg_mhpminterrupten <= `BSV_ASSIGNMENT_DELAY rg_mhpminterrupten_D_IN;
	if (rg_minstret_EN)
	  rg_minstret <= `BSV_ASSIGNMENT_DELAY rg_minstret_D_IN;
	if (rg_resume_int_EN)
	  rg_resume_int <= `BSV_ASSIGNMENT_DELAY rg_resume_int_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_clint_mtime = 64'hAAAAAAAAAAAAAAAA;
    rg_core_halted = 1'h0;
    rg_csr_denable = 1'h0;
    rg_csr_dpc = 63'h2AAAAAAAAAAAAAAA;
    rg_csr_dscratch = 64'hAAAAAAAAAAAAAAAA;
    rg_csr_dtvec = 63'h2AAAAAAAAAAAAAAA;
    rg_cy = 1'h0;
    rg_dcsr_cause = 3'h2;
    rg_dcsr_ebreakm = 1'h0;
    rg_dcsr_ebreaks = 1'h0;
    rg_dcsr_ebreaku = 1'h0;
    rg_dcsr_mprven = 1'h0;
    rg_dcsr_nmip = 1'h0;
    rg_dcsr_prv = 2'h2;
    rg_dcsr_step = 1'h0;
    rg_dcsr_stepie = 1'h0;
    rg_dcsr_stopcount = 1'h0;
    rg_dcsr_stoptime = 1'h0;
    rg_halt_int = 1'h0;
    rg_hpm_enabler = 29'h0AAAAAAA;
    rg_ir = 1'h0;
    rg_mcounteren = 32'hAAAAAAAA;
    rg_mcycle = 64'hAAAAAAAAAAAAAAAA;
    rg_mhpminterrupten = 32'hAAAAAAAA;
    rg_minstret = 64'hAAAAAAAAAAAAAAAA;
    rg_resume_int = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mk_csr_grp3

