//
// Generated by Bluespec Compiler, version 2021.07-1-gaf77efcd (build af77efcd)
//
// On Sat Dec  4 13:10:35 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_reset                      O     1 const
// ready                          O     1
// RDY_ready                      O     1 const
// RDY_input_engine               O     1
// output_engine_get              O   256 reg
// RDY_output_engine_get          O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// input_engine_pre_hash          I   256
// input_engine_input_val         I   512
// EN_reset                       I     1
// EN_input_engine                I     1
// EN_output_engine_get           I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mksequential_sha_engine(CLK,
			       RST_N,

			       EN_reset,
			       RDY_reset,

			       ready,
			       RDY_ready,

			       input_engine_pre_hash,
			       input_engine_input_val,
			       EN_input_engine,
			       RDY_input_engine,

			       EN_output_engine_get,
			       output_engine_get,
			       RDY_output_engine_get);
  input  CLK;
  input  RST_N;

  // action method reset
  input  EN_reset;
  output RDY_reset;

  // value method ready
  output ready;
  output RDY_ready;

  // action method input_engine
  input  [255 : 0] input_engine_pre_hash;
  input  [511 : 0] input_engine_input_val;
  input  EN_input_engine;
  output RDY_input_engine;

  // actionvalue method output_engine_get
  input  EN_output_engine_get;
  output [255 : 0] output_engine_get;
  output RDY_output_engine_get;

  // signals for module outputs
  wire [255 : 0] output_engine_get;
  wire RDY_input_engine, RDY_output_engine_get, RDY_ready, RDY_reset, ready;

  // register i
  reg [5 : 0] i;
  reg [5 : 0] i_D_IN;
  wire i_EN;

  // register i_h_0
  reg [31 : 0] i_h_0;
  wire [31 : 0] i_h_0_D_IN;
  wire i_h_0_EN;

  // register i_h_1
  reg [31 : 0] i_h_1;
  wire [31 : 0] i_h_1_D_IN;
  wire i_h_1_EN;

  // register i_h_2
  reg [31 : 0] i_h_2;
  wire [31 : 0] i_h_2_D_IN;
  wire i_h_2_EN;

  // register i_h_3
  reg [31 : 0] i_h_3;
  wire [31 : 0] i_h_3_D_IN;
  wire i_h_3_EN;

  // register i_h_4
  reg [31 : 0] i_h_4;
  wire [31 : 0] i_h_4_D_IN;
  wire i_h_4_EN;

  // register i_h_5
  reg [31 : 0] i_h_5;
  wire [31 : 0] i_h_5_D_IN;
  wire i_h_5_EN;

  // register i_h_6
  reg [31 : 0] i_h_6;
  wire [31 : 0] i_h_6_D_IN;
  wire i_h_6_EN;

  // register i_h_7
  reg [31 : 0] i_h_7;
  wire [31 : 0] i_h_7_D_IN;
  wire i_h_7_EN;

  // register initial_val_0
  reg [31 : 0] initial_val_0;
  wire [31 : 0] initial_val_0_D_IN;
  wire initial_val_0_EN;

  // register initial_val_1
  reg [31 : 0] initial_val_1;
  wire [31 : 0] initial_val_1_D_IN;
  wire initial_val_1_EN;

  // register initial_val_2
  reg [31 : 0] initial_val_2;
  wire [31 : 0] initial_val_2_D_IN;
  wire initial_val_2_EN;

  // register initial_val_3
  reg [31 : 0] initial_val_3;
  wire [31 : 0] initial_val_3_D_IN;
  wire initial_val_3_EN;

  // register initial_val_4
  reg [31 : 0] initial_val_4;
  wire [31 : 0] initial_val_4_D_IN;
  wire initial_val_4_EN;

  // register initial_val_5
  reg [31 : 0] initial_val_5;
  wire [31 : 0] initial_val_5_D_IN;
  wire initial_val_5_EN;

  // register initial_val_6
  reg [31 : 0] initial_val_6;
  wire [31 : 0] initial_val_6_D_IN;
  wire initial_val_6_EN;

  // register initial_val_7
  reg [31 : 0] initial_val_7;
  wire [31 : 0] initial_val_7_D_IN;
  wire initial_val_7_EN;

  // register pre_comp
  reg [31 : 0] pre_comp;
  wire [31 : 0] pre_comp_D_IN;
  wire pre_comp_EN;

  // register state
  reg [1 : 0] state;
  reg [1 : 0] state_D_IN;
  wire state_EN;

  // register w_0
  reg [31 : 0] w_0;
  wire [31 : 0] w_0_D_IN;
  wire w_0_EN;

  // register w_1
  reg [31 : 0] w_1;
  wire [31 : 0] w_1_D_IN;
  wire w_1_EN;

  // register w_10
  reg [31 : 0] w_10;
  wire [31 : 0] w_10_D_IN;
  wire w_10_EN;

  // register w_11
  reg [31 : 0] w_11;
  wire [31 : 0] w_11_D_IN;
  wire w_11_EN;

  // register w_12
  reg [31 : 0] w_12;
  wire [31 : 0] w_12_D_IN;
  wire w_12_EN;

  // register w_13
  reg [31 : 0] w_13;
  wire [31 : 0] w_13_D_IN;
  wire w_13_EN;

  // register w_14
  reg [31 : 0] w_14;
  wire [31 : 0] w_14_D_IN;
  wire w_14_EN;

  // register w_15
  reg [31 : 0] w_15;
  wire [31 : 0] w_15_D_IN;
  wire w_15_EN;

  // register w_2
  reg [31 : 0] w_2;
  wire [31 : 0] w_2_D_IN;
  wire w_2_EN;

  // register w_3
  reg [31 : 0] w_3;
  wire [31 : 0] w_3_D_IN;
  wire w_3_EN;

  // register w_4
  reg [31 : 0] w_4;
  wire [31 : 0] w_4_D_IN;
  wire w_4_EN;

  // register w_5
  reg [31 : 0] w_5;
  wire [31 : 0] w_5_D_IN;
  wire w_5_EN;

  // register w_6
  reg [31 : 0] w_6;
  wire [31 : 0] w_6_D_IN;
  wire w_6_EN;

  // register w_7
  reg [31 : 0] w_7;
  wire [31 : 0] w_7_D_IN;
  wire w_7_EN;

  // register w_8
  reg [31 : 0] w_8;
  wire [31 : 0] w_8_D_IN;
  wire w_8_EN;

  // register w_9
  reg [31 : 0] w_9;
  wire [31 : 0] w_9_D_IN;
  wire w_9_EN;

  // ports of submodule result_fifo
  wire [255 : 0] result_fifo_D_IN, result_fifo_D_OUT;
  wire result_fifo_CLR,
       result_fifo_DEQ,
       result_fifo_EMPTY_N,
       result_fifo_ENQ,
       result_fifo_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_hash,
       CAN_FIRE_RL_routput,
       CAN_FIRE___me_check_0,
       CAN_FIRE_input_engine,
       CAN_FIRE_output_engine_get,
       CAN_FIRE_reset,
       WILL_FIRE_RL_hash,
       WILL_FIRE_RL_routput,
       WILL_FIRE___me_check_0,
       WILL_FIRE_input_engine,
       WILL_FIRE_output_engine_get,
       WILL_FIRE_reset;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_i_h_0_write_1__VAL_1,
		MUX_i_h_4_write_1__VAL_1,
		MUX_pre_comp_write_1__VAL_1,
		MUX_pre_comp_write_1__VAL_2,
		MUX_w_15_write_1__VAL_1;
  wire MUX_i_write_1__SEL_2, MUX_state_write_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h1688;
  reg [31 : 0] v__h5171;
  reg [31 : 0] v__h1682;
  reg [31 : 0] v__h5165;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] y__h1807;
  wire [255 : 0] res__h4829;
  wire [191 : 0] i_h_2_9_PLUS_initial_val_2_03_04_CONCAT_i_h_3__ETC___d118;
  wire [127 : 0] i_h_4_5_PLUS_initial_val_4_07_08_CONCAT_i_h_5__ETC___d117;
  wire [31 : 0] tmp1__h1730,
		tmp2__h1731,
		x__h1806,
		x__h2826,
		x__h2828,
		x__h2842,
		x__h2844,
		x__h3033,
		x__h3052,
		x__h3074,
		x__h3076,
		x__h3261,
		x__h3263,
		x__h4526,
		x__h4528,
		x__h4559,
		x__h4561,
		x__h4691,
		x__h4693,
		x__h6429,
		y__h2829,
		y__h2843,
		y__h2845,
		y__h3034,
		y__h3075,
		y__h3077,
		y__h3262,
		y__h3264,
		y__h4527,
		y__h4529,
		y__h4560,
		y__h4562,
		y__h4692,
		y__h4694;
  wire [5 : 0] x__h4815;

  // action method reset
  assign RDY_reset = 1'd1 ;
  assign CAN_FIRE_reset = 1'd1 ;
  assign WILL_FIRE_reset = EN_reset ;

  // value method ready
  assign ready = state == 2'd0 ;
  assign RDY_ready = 1'd1 ;

  // action method input_engine
  assign RDY_input_engine = state == 2'd0 ;
  assign CAN_FIRE_input_engine = state == 2'd0 ;
  assign WILL_FIRE_input_engine = EN_input_engine ;

  // actionvalue method output_engine_get
  assign output_engine_get = result_fifo_D_OUT ;
  assign RDY_output_engine_get = result_fifo_EMPTY_N ;
  assign CAN_FIRE_output_engine_get = result_fifo_EMPTY_N ;
  assign WILL_FIRE_output_engine_get = EN_output_engine_get ;

  // submodule result_fifo
  FIFO2 #(.width(32'd256), .guarded(1'd1)) result_fifo(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(result_fifo_D_IN),
						       .ENQ(result_fifo_ENQ),
						       .DEQ(result_fifo_DEQ),
						       .CLR(result_fifo_CLR),
						       .D_OUT(result_fifo_D_OUT),
						       .FULL_N(result_fifo_FULL_N),
						       .EMPTY_N(result_fifo_EMPTY_N));

  // rule RL_hash
  assign CAN_FIRE_RL_hash = state == 2'd1 ;
  assign WILL_FIRE_RL_hash = CAN_FIRE_RL_hash ;

  // rule RL_routput
  assign CAN_FIRE_RL_routput = result_fifo_FULL_N && state == 2'd2 ;
  assign WILL_FIRE_RL_routput = CAN_FIRE_RL_routput ;

  // rule __me_check_0
  assign CAN_FIRE___me_check_0 = 1'b1 ;
  assign WILL_FIRE___me_check_0 = 1'b1 ;

  // inputs to muxes for submodule ports
  assign MUX_i_write_1__SEL_2 = WILL_FIRE_RL_hash && i != 6'd63 ;
  assign MUX_state_write_1__SEL_3 = WILL_FIRE_RL_hash && i == 6'd63 ;
  assign MUX_i_h_0_write_1__VAL_1 = tmp1__h1730 + tmp2__h1731 ;
  assign MUX_i_h_4_write_1__VAL_1 = i_h_3 + tmp1__h1730 ;
  assign MUX_pre_comp_write_1__VAL_1 = x__h1806 + y__h1807 ;
  assign MUX_pre_comp_write_1__VAL_2 =
	     x__h6429 + input_engine_pre_hash[31:0] ;
  assign MUX_w_15_write_1__VAL_1 = x__h4526 + y__h4527 ;

  // register i
  always@(EN_reset or MUX_i_write_1__SEL_2 or x__h4815 or EN_input_engine)
  case (1'b1)
    EN_reset: i_D_IN = 6'd0;
    MUX_i_write_1__SEL_2: i_D_IN = x__h4815;
    EN_input_engine: i_D_IN = 6'd0;
    default: i_D_IN = 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign i_EN =
	     WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine || EN_reset ;

  // register i_h_0
  assign i_h_0_D_IN =
	     WILL_FIRE_RL_hash ?
	       MUX_i_h_0_write_1__VAL_1 :
	       input_engine_pre_hash[255:224] ;
  assign i_h_0_EN = WILL_FIRE_RL_hash || EN_input_engine ;

  // register i_h_1
  assign i_h_1_D_IN =
	     WILL_FIRE_RL_hash ? i_h_0 : input_engine_pre_hash[223:192] ;
  assign i_h_1_EN = WILL_FIRE_RL_hash || EN_input_engine ;

  // register i_h_2
  assign i_h_2_D_IN =
	     WILL_FIRE_RL_hash ? i_h_1 : input_engine_pre_hash[191:160] ;
  assign i_h_2_EN = WILL_FIRE_RL_hash || EN_input_engine ;

  // register i_h_3
  assign i_h_3_D_IN =
	     WILL_FIRE_RL_hash ? i_h_2 : input_engine_pre_hash[159:128] ;
  assign i_h_3_EN = WILL_FIRE_RL_hash || EN_input_engine ;

  // register i_h_4
  assign i_h_4_D_IN =
	     WILL_FIRE_RL_hash ?
	       MUX_i_h_4_write_1__VAL_1 :
	       input_engine_pre_hash[127:96] ;
  assign i_h_4_EN = WILL_FIRE_RL_hash || EN_input_engine ;

  // register i_h_5
  assign i_h_5_D_IN =
	     WILL_FIRE_RL_hash ? i_h_4 : input_engine_pre_hash[95:64] ;
  assign i_h_5_EN = WILL_FIRE_RL_hash || EN_input_engine ;

  // register i_h_6
  assign i_h_6_D_IN =
	     WILL_FIRE_RL_hash ? i_h_5 : input_engine_pre_hash[63:32] ;
  assign i_h_6_EN = WILL_FIRE_RL_hash || EN_input_engine ;

  // register i_h_7
  assign i_h_7_D_IN =
	     WILL_FIRE_RL_hash ? i_h_6 : input_engine_pre_hash[31:0] ;
  assign i_h_7_EN = WILL_FIRE_RL_hash || EN_input_engine ;

  // register initial_val_0
  assign initial_val_0_D_IN = input_engine_pre_hash[255:224] ;
  assign initial_val_0_EN = EN_input_engine ;

  // register initial_val_1
  assign initial_val_1_D_IN = input_engine_pre_hash[223:192] ;
  assign initial_val_1_EN = EN_input_engine ;

  // register initial_val_2
  assign initial_val_2_D_IN = input_engine_pre_hash[191:160] ;
  assign initial_val_2_EN = EN_input_engine ;

  // register initial_val_3
  assign initial_val_3_D_IN = input_engine_pre_hash[159:128] ;
  assign initial_val_3_EN = EN_input_engine ;

  // register initial_val_4
  assign initial_val_4_D_IN = input_engine_pre_hash[127:96] ;
  assign initial_val_4_EN = EN_input_engine ;

  // register initial_val_5
  assign initial_val_5_D_IN = input_engine_pre_hash[95:64] ;
  assign initial_val_5_EN = EN_input_engine ;

  // register initial_val_6
  assign initial_val_6_D_IN = input_engine_pre_hash[63:32] ;
  assign initial_val_6_EN = EN_input_engine ;

  // register initial_val_7
  assign initial_val_7_D_IN = input_engine_pre_hash[31:0] ;
  assign initial_val_7_EN = EN_input_engine ;

  // register pre_comp
  assign pre_comp_D_IN =
	     MUX_i_write_1__SEL_2 ?
	       MUX_pre_comp_write_1__VAL_1 :
	       MUX_pre_comp_write_1__VAL_2 ;
  assign pre_comp_EN = WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine ;

  // register state
  always@(EN_reset or
	  WILL_FIRE_RL_routput or MUX_state_write_1__SEL_3 or EN_input_engine)
  case (1'b1)
    EN_reset || WILL_FIRE_RL_routput: state_D_IN = 2'd0;
    MUX_state_write_1__SEL_3: state_D_IN = 2'd2;
    EN_input_engine: state_D_IN = 2'd1;
    default: state_D_IN = 2'bxx /* unspecified value */ ;
  endcase
  assign state_EN =
	     WILL_FIRE_RL_hash && i == 6'd63 || WILL_FIRE_RL_routput ||
	     EN_reset ||
	     EN_input_engine ;

  // register w_0
  assign w_0_D_IN =
	     MUX_i_write_1__SEL_2 ? w_1 : input_engine_input_val[511:480] ;
  assign w_0_EN = WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine ;

  // register w_1
  assign w_1_D_IN =
	     MUX_i_write_1__SEL_2 ? w_2 : input_engine_input_val[479:448] ;
  assign w_1_EN = WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine ;

  // register w_10
  assign w_10_D_IN =
	     MUX_i_write_1__SEL_2 ? w_11 : input_engine_input_val[191:160] ;
  assign w_10_EN = WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine ;

  // register w_11
  assign w_11_D_IN =
	     MUX_i_write_1__SEL_2 ? w_12 : input_engine_input_val[159:128] ;
  assign w_11_EN = WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine ;

  // register w_12
  assign w_12_D_IN =
	     MUX_i_write_1__SEL_2 ? w_13 : input_engine_input_val[127:96] ;
  assign w_12_EN = WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine ;

  // register w_13
  assign w_13_D_IN =
	     MUX_i_write_1__SEL_2 ? w_14 : input_engine_input_val[95:64] ;
  assign w_13_EN = WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine ;

  // register w_14
  assign w_14_D_IN =
	     MUX_i_write_1__SEL_2 ? w_15 : input_engine_input_val[63:32] ;
  assign w_14_EN = WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine ;

  // register w_15
  assign w_15_D_IN =
	     MUX_i_write_1__SEL_2 ?
	       MUX_w_15_write_1__VAL_1 :
	       input_engine_input_val[31:0] ;
  assign w_15_EN = WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine ;

  // register w_2
  assign w_2_D_IN =
	     MUX_i_write_1__SEL_2 ? w_3 : input_engine_input_val[447:416] ;
  assign w_2_EN = WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine ;

  // register w_3
  assign w_3_D_IN =
	     MUX_i_write_1__SEL_2 ? w_4 : input_engine_input_val[415:384] ;
  assign w_3_EN = WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine ;

  // register w_4
  assign w_4_D_IN =
	     MUX_i_write_1__SEL_2 ? w_5 : input_engine_input_val[383:352] ;
  assign w_4_EN = WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine ;

  // register w_5
  assign w_5_D_IN =
	     MUX_i_write_1__SEL_2 ? w_6 : input_engine_input_val[351:320] ;
  assign w_5_EN = WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine ;

  // register w_6
  assign w_6_D_IN =
	     MUX_i_write_1__SEL_2 ? w_7 : input_engine_input_val[319:288] ;
  assign w_6_EN = WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine ;

  // register w_7
  assign w_7_D_IN =
	     MUX_i_write_1__SEL_2 ? w_8 : input_engine_input_val[287:256] ;
  assign w_7_EN = WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine ;

  // register w_8
  assign w_8_D_IN =
	     MUX_i_write_1__SEL_2 ? w_9 : input_engine_input_val[255:224] ;
  assign w_8_EN = WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine ;

  // register w_9
  assign w_9_D_IN =
	     MUX_i_write_1__SEL_2 ? w_10 : input_engine_input_val[223:192] ;
  assign w_9_EN = WILL_FIRE_RL_hash && i != 6'd63 || EN_input_engine ;

  // submodule result_fifo
  assign result_fifo_D_IN = res__h4829 ;
  assign result_fifo_ENQ = CAN_FIRE_RL_routput ;
  assign result_fifo_DEQ = EN_output_engine_get ;
  assign result_fifo_CLR = EN_reset ;

  // remaining internal signals
  assign i_h_2_9_PLUS_initial_val_2_03_04_CONCAT_i_h_3__ETC___d118 =
	     { i_h_2 + initial_val_2,
	       i_h_3 + initial_val_3,
	       i_h_4_5_PLUS_initial_val_4_07_08_CONCAT_i_h_5__ETC___d117 } ;
  assign i_h_4_5_PLUS_initial_val_4_07_08_CONCAT_i_h_5__ETC___d117 =
	     { i_h_4 + initial_val_4,
	       i_h_5 + initial_val_5,
	       i_h_6 + initial_val_6,
	       initial_val_7 + i_h_7 } ;
  assign res__h4829 =
	     { i_h_0 + initial_val_0,
	       i_h_1 + initial_val_1,
	       i_h_2_9_PLUS_initial_val_2_03_04_CONCAT_i_h_3__ETC___d118 } ;
  assign tmp1__h1730 = x__h2826 + pre_comp ;
  assign tmp2__h1731 = (x__h3074 ^ y__h3075) + (x__h3261 ^ y__h3262) ;
  assign x__h1806 = i_h_6 + w_1 ;
  assign x__h2826 = x__h2828 + y__h2829 ;
  assign x__h2828 = x__h2842 ^ y__h2843 ;
  assign x__h2842 = x__h2844 ^ y__h2845 ;
  assign x__h2844 = { i_h_4[5:0], i_h_4[31:6] } ;
  assign x__h3033 = i_h_4 & i_h_5 ;
  assign x__h3052 = ~i_h_4 ;
  assign x__h3074 = x__h3076 ^ y__h3077 ;
  assign x__h3076 = { i_h_0[1:0], i_h_0[31:2] } ;
  assign x__h3261 = x__h3263 ^ y__h3264 ;
  assign x__h3263 = i_h_0 & i_h_1 ;
  assign x__h4526 = x__h4528 + y__h4529 ;
  assign x__h4528 = w_0 + w_9 ;
  assign x__h4559 = x__h4561 ^ y__h4562 ;
  assign x__h4561 = { w_1[6:0], w_1[31:7] } ;
  assign x__h4691 = x__h4693 ^ y__h4694 ;
  assign x__h4693 = { w_14[16:0], w_14[31:17] } ;
  assign x__h4815 = i + 6'd1 ;
  assign x__h6429 = input_engine_input_val[511:480] + 32'h428A2F98 ;
  assign y__h2829 = x__h3033 ^ y__h3034 ;
  assign y__h2843 = { i_h_4[24:0], i_h_4[31:25] } ;
  assign y__h2845 = { i_h_4[10:0], i_h_4[31:11] } ;
  assign y__h3034 = x__h3052 & i_h_6 ;
  assign y__h3075 = { i_h_0[21:0], i_h_0[31:22] } ;
  assign y__h3077 = { i_h_0[12:0], i_h_0[31:13] } ;
  assign y__h3262 = i_h_1 & i_h_2 ;
  assign y__h3264 = i_h_0 & i_h_2 ;
  assign y__h4527 = x__h4691 ^ y__h4692 ;
  assign y__h4529 = x__h4559 ^ y__h4560 ;
  assign y__h4560 = { 3'd0, w_1[31:3] } ;
  assign y__h4562 = { w_1[17:0], w_1[31:18] } ;
  assign y__h4692 = { 10'd0, w_14[31:10] } ;
  assign y__h4694 = { w_14[18:0], w_14[31:19] } ;
  always@(x__h4815)
  begin
    case (x__h4815)
      6'd0: y__h1807 = 32'h428A2F98;
      6'd1: y__h1807 = 32'h71374491;
      6'd2: y__h1807 = 32'hB5C0FBCF;
      6'd3: y__h1807 = 32'hE9B5DBA5;
      6'd4: y__h1807 = 32'h3956C25B;
      6'd5: y__h1807 = 32'h59F111F1;
      6'd6: y__h1807 = 32'h923F82A4;
      6'd7: y__h1807 = 32'hAB1C5ED5;
      6'd8: y__h1807 = 32'hD807AA98;
      6'd9: y__h1807 = 32'h12835B01;
      6'd10: y__h1807 = 32'h243185BE;
      6'd11: y__h1807 = 32'h550C7DC3;
      6'd12: y__h1807 = 32'h72BE5D74;
      6'd13: y__h1807 = 32'h80DEB1FE;
      6'd14: y__h1807 = 32'h9BDC06A7;
      6'd15: y__h1807 = 32'hC19BF174;
      6'd16: y__h1807 = 32'hE49B69C1;
      6'd17: y__h1807 = 32'hEFBE4786;
      6'd18: y__h1807 = 32'h0FC19DC6;
      6'd19: y__h1807 = 32'h240CA1CC;
      6'd20: y__h1807 = 32'h2DE92C6F;
      6'd21: y__h1807 = 32'h4A7484AA;
      6'd22: y__h1807 = 32'h5CB0A9DC;
      6'd23: y__h1807 = 32'h76F988DA;
      6'd24: y__h1807 = 32'h983E5152;
      6'd25: y__h1807 = 32'hA831C66D;
      6'd26: y__h1807 = 32'hB00327C8;
      6'd27: y__h1807 = 32'hBF597FC7;
      6'd28: y__h1807 = 32'hC6E00BF3;
      6'd29: y__h1807 = 32'hD5A79147;
      6'd30: y__h1807 = 32'h06CA6351;
      6'd31: y__h1807 = 32'h14292967;
      6'd32: y__h1807 = 32'h27B70A85;
      6'd33: y__h1807 = 32'h2E1B2138;
      6'd34: y__h1807 = 32'h4D2C6DFC;
      6'd35: y__h1807 = 32'h53380D13;
      6'd36: y__h1807 = 32'h650A7354;
      6'd37: y__h1807 = 32'h766A0ABB;
      6'd38: y__h1807 = 32'h81C2C92E;
      6'd39: y__h1807 = 32'h92722C85;
      6'd40: y__h1807 = 32'hA2BFE8A1;
      6'd41: y__h1807 = 32'hA81A664B;
      6'd42: y__h1807 = 32'hC24B8B70;
      6'd43: y__h1807 = 32'hC76C51A3;
      6'd44: y__h1807 = 32'hD192E819;
      6'd45: y__h1807 = 32'hD6990624;
      6'd46: y__h1807 = 32'hF40E3585;
      6'd47: y__h1807 = 32'h106AA070;
      6'd48: y__h1807 = 32'h19A4C116;
      6'd49: y__h1807 = 32'h1E376C08;
      6'd50: y__h1807 = 32'h2748774C;
      6'd51: y__h1807 = 32'h34B0BCB5;
      6'd52: y__h1807 = 32'h391C0CB3;
      6'd53: y__h1807 = 32'h4ED8AA4A;
      6'd54: y__h1807 = 32'h5B9CCA4F;
      6'd55: y__h1807 = 32'h682E6FF3;
      6'd56: y__h1807 = 32'h748F82EE;
      6'd57: y__h1807 = 32'h78A5636F;
      6'd58: y__h1807 = 32'h84C87814;
      6'd59: y__h1807 = 32'h8CC70208;
      6'd60: y__h1807 = 32'h90BEFFFA;
      6'd61: y__h1807 = 32'hA4506CEB;
      6'd62: y__h1807 = 32'hBEF9A3F7;
      6'd63: y__h1807 = 32'hC67178F2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        i <= `BSV_ASSIGNMENT_DELAY 6'd0;
	state <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (i_EN) i <= `BSV_ASSIGNMENT_DELAY i_D_IN;
	if (state_EN) state <= `BSV_ASSIGNMENT_DELAY state_D_IN;
      end
    if (i_h_0_EN) i_h_0 <= `BSV_ASSIGNMENT_DELAY i_h_0_D_IN;
    if (i_h_1_EN) i_h_1 <= `BSV_ASSIGNMENT_DELAY i_h_1_D_IN;
    if (i_h_2_EN) i_h_2 <= `BSV_ASSIGNMENT_DELAY i_h_2_D_IN;
    if (i_h_3_EN) i_h_3 <= `BSV_ASSIGNMENT_DELAY i_h_3_D_IN;
    if (i_h_4_EN) i_h_4 <= `BSV_ASSIGNMENT_DELAY i_h_4_D_IN;
    if (i_h_5_EN) i_h_5 <= `BSV_ASSIGNMENT_DELAY i_h_5_D_IN;
    if (i_h_6_EN) i_h_6 <= `BSV_ASSIGNMENT_DELAY i_h_6_D_IN;
    if (i_h_7_EN) i_h_7 <= `BSV_ASSIGNMENT_DELAY i_h_7_D_IN;
    if (initial_val_0_EN)
      initial_val_0 <= `BSV_ASSIGNMENT_DELAY initial_val_0_D_IN;
    if (initial_val_1_EN)
      initial_val_1 <= `BSV_ASSIGNMENT_DELAY initial_val_1_D_IN;
    if (initial_val_2_EN)
      initial_val_2 <= `BSV_ASSIGNMENT_DELAY initial_val_2_D_IN;
    if (initial_val_3_EN)
      initial_val_3 <= `BSV_ASSIGNMENT_DELAY initial_val_3_D_IN;
    if (initial_val_4_EN)
      initial_val_4 <= `BSV_ASSIGNMENT_DELAY initial_val_4_D_IN;
    if (initial_val_5_EN)
      initial_val_5 <= `BSV_ASSIGNMENT_DELAY initial_val_5_D_IN;
    if (initial_val_6_EN)
      initial_val_6 <= `BSV_ASSIGNMENT_DELAY initial_val_6_D_IN;
    if (initial_val_7_EN)
      initial_val_7 <= `BSV_ASSIGNMENT_DELAY initial_val_7_D_IN;
    if (pre_comp_EN) pre_comp <= `BSV_ASSIGNMENT_DELAY pre_comp_D_IN;
    if (w_0_EN) w_0 <= `BSV_ASSIGNMENT_DELAY w_0_D_IN;
    if (w_1_EN) w_1 <= `BSV_ASSIGNMENT_DELAY w_1_D_IN;
    if (w_10_EN) w_10 <= `BSV_ASSIGNMENT_DELAY w_10_D_IN;
    if (w_11_EN) w_11 <= `BSV_ASSIGNMENT_DELAY w_11_D_IN;
    if (w_12_EN) w_12 <= `BSV_ASSIGNMENT_DELAY w_12_D_IN;
    if (w_13_EN) w_13 <= `BSV_ASSIGNMENT_DELAY w_13_D_IN;
    if (w_14_EN) w_14 <= `BSV_ASSIGNMENT_DELAY w_14_D_IN;
    if (w_15_EN) w_15 <= `BSV_ASSIGNMENT_DELAY w_15_D_IN;
    if (w_2_EN) w_2 <= `BSV_ASSIGNMENT_DELAY w_2_D_IN;
    if (w_3_EN) w_3 <= `BSV_ASSIGNMENT_DELAY w_3_D_IN;
    if (w_4_EN) w_4 <= `BSV_ASSIGNMENT_DELAY w_4_D_IN;
    if (w_5_EN) w_5 <= `BSV_ASSIGNMENT_DELAY w_5_D_IN;
    if (w_6_EN) w_6 <= `BSV_ASSIGNMENT_DELAY w_6_D_IN;
    if (w_7_EN) w_7 <= `BSV_ASSIGNMENT_DELAY w_7_D_IN;
    if (w_8_EN) w_8 <= `BSV_ASSIGNMENT_DELAY w_8_D_IN;
    if (w_9_EN) w_9 <= `BSV_ASSIGNMENT_DELAY w_9_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    i = 6'h2A;
    i_h_0 = 32'hAAAAAAAA;
    i_h_1 = 32'hAAAAAAAA;
    i_h_2 = 32'hAAAAAAAA;
    i_h_3 = 32'hAAAAAAAA;
    i_h_4 = 32'hAAAAAAAA;
    i_h_5 = 32'hAAAAAAAA;
    i_h_6 = 32'hAAAAAAAA;
    i_h_7 = 32'hAAAAAAAA;
    initial_val_0 = 32'hAAAAAAAA;
    initial_val_1 = 32'hAAAAAAAA;
    initial_val_2 = 32'hAAAAAAAA;
    initial_val_3 = 32'hAAAAAAAA;
    initial_val_4 = 32'hAAAAAAAA;
    initial_val_5 = 32'hAAAAAAAA;
    initial_val_6 = 32'hAAAAAAAA;
    initial_val_7 = 32'hAAAAAAAA;
    pre_comp = 32'hAAAAAAAA;
    state = 2'h2;
    w_0 = 32'hAAAAAAAA;
    w_1 = 32'hAAAAAAAA;
    w_10 = 32'hAAAAAAAA;
    w_11 = 32'hAAAAAAAA;
    w_12 = 32'hAAAAAAAA;
    w_13 = 32'hAAAAAAAA;
    w_14 = 32'hAAAAAAAA;
    w_15 = 32'hAAAAAAAA;
    w_2 = 32'hAAAAAAAA;
    w_3 = 32'hAAAAAAAA;
    w_4 = 32'hAAAAAAAA;
    w_5 = 32'hAAAAAAAA;
    w_6 = 32'hAAAAAAAA;
    w_7 = 32'hAAAAAAAA;
    w_8 = 32'hAAAAAAAA;
    w_9 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_input_engine)
	$display("SHA: Engine input value %h", input_engine_input_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_output_engine_get)
	$display("SHA: Engine output value %h", result_fifo_D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_hash)
	begin
	  v__h1688 = $stime;
	  #0;
	end
    v__h1682 = v__h1688 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_hash)
	$display("SHA:%8h State:Hash Action:Hash cycle-%8h", v__h1682, i);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_routput)
	begin
	  v__h5171 = $stime;
	  #0;
	end
    v__h5165 = v__h5171 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_routput)
	$display("SHA:%8h State:Output Action:Output Digest:%64h",
		 v__h5165,
		 res__h4829);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_hash && WILL_FIRE_RL_routput)
	$display("Error: \"../base-sim/devices/sha_256/sequential_sha_engine.bsv\", line 61, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_hash] and [RL_routput] )\n  fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mksequential_sha_engine

