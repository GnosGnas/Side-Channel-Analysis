//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Wed Jul  3 23:26:30 IST 2019
//
//
// Ports:
// Name                         I/O  size props
// imem_master_awvalid            O     1 reg
// imem_master_awaddr             O    32 reg
// imem_master_awprot             O     3 reg
// imem_master_awuser             O    10 reg
// imem_master_awlen              O     8 reg
// imem_master_awsize             O     3 reg
// imem_master_awburst            O     2 reg
// imem_master_awlock             O     1 reg
// imem_master_awcache            O     4 reg
// imem_master_awqos              O     4 reg
// imem_master_awregion           O     4 reg
// imem_master_awid               O     4 reg
// imem_master_wvalid             O     1 reg
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_wlast              O     1 reg
// imem_master_wid                O     4 reg
// imem_master_bready             O     1
// imem_master_arvalid            O     1 reg
// imem_master_araddr             O    32 reg
// imem_master_arprot             O     3 reg
// imem_master_aruser             O    10 reg
// imem_master_arlen              O     8 reg
// imem_master_arsize             O     3 reg
// imem_master_arburst            O     2 reg
// imem_master_arlock             O     1 reg
// imem_master_arcache            O     4 reg
// imem_master_arqos              O     4 reg
// imem_master_arregion           O     4 reg
// imem_master_arid               O     4 reg
// imem_master_rready             O     1
// dmem_master_awvalid            O     1 reg
// dmem_master_awaddr             O    32 reg
// dmem_master_awprot             O     3 reg
// dmem_master_awuser             O    10 reg
// dmem_master_awlen              O     8 reg
// dmem_master_awsize             O     3 reg
// dmem_master_awburst            O     2 reg
// dmem_master_awlock             O     1 reg
// dmem_master_awcache            O     4 reg
// dmem_master_awqos              O     4 reg
// dmem_master_awregion           O     4 reg
// dmem_master_awid               O     4 reg
// dmem_master_wvalid             O     1 reg
// dmem_master_wdata              O    64 reg
// dmem_master_wstrb              O     8 reg
// dmem_master_wlast              O     1 reg
// dmem_master_wid                O     4 reg
// dmem_master_bready             O     1
// dmem_master_arvalid            O     1 reg
// dmem_master_araddr             O    32 reg
// dmem_master_arprot             O     3 reg
// dmem_master_aruser             O    10 reg
// dmem_master_arlen              O     8 reg
// dmem_master_arsize             O     3 reg
// dmem_master_arburst            O     2 reg
// dmem_master_arlock             O     1 reg
// dmem_master_arcache            O     4 reg
// dmem_master_arqos              O     4 reg
// dmem_master_arregion           O     4 reg
// dmem_master_arid               O     4 reg
// dmem_master_rready             O     1
// RDY_set_external_interrupt     O     1
// RDY_boot_sequence              O     1 const
// RDY_reset                      O     1 const
// RDY_run_continue               O     1 const
// reset_complete                 O     1
// RDY_reset_complete             O     1 const
// RDY_stop                       O     1 const
// halted                         O     1
// RDY_halted                     O     1 const
// read_igpr                      O    64
// RDY_read_igpr                  O     1 const
// RDY_write_igpr                 O     1
// read_fgpr                      O    64
// RDY_read_fgpr                  O     1 const
// RDY_write_fgpr                 O     1
// rw_csr                         O    64
// RDY_rw_csr                     O     1
// RDY_clint_msip                 O     1 const
// RDY_clint_mtip                 O     1 const
// RDY_clint_mtime                O     1 const
// reset_vector                   I    39
// CLK                            I     1 clock
// RST_N                          I     1 reset
// imem_master_m_awready_awready  I     1
// imem_master_m_wready_wready    I     1
// imem_master_m_bvalid_bvalid    I     1
// imem_master_m_bvalid_bresp     I     2 reg
// imem_master_m_bvalid_buser     I    10 reg
// imem_master_m_bvalid_bid       I     4 reg
// imem_master_m_arready_arready  I     1
// imem_master_m_rvalid_rvalid    I     1
// imem_master_m_rvalid_rresp     I     2 reg
// imem_master_m_rvalid_rdata     I    64 reg
// imem_master_m_rvalid_rlast     I     1 reg
// imem_master_m_rvalid_ruser     I    10 reg
// imem_master_m_rvalid_rid       I     4 reg
// dmem_master_m_awready_awready  I     1
// dmem_master_m_wready_wready    I     1
// dmem_master_m_bvalid_bvalid    I     1
// dmem_master_m_bvalid_bresp     I     2 reg
// dmem_master_m_bvalid_buser     I    10 reg
// dmem_master_m_bvalid_bid       I     4 reg
// dmem_master_m_arready_arready  I     1
// dmem_master_m_rvalid_rvalid    I     1
// dmem_master_m_rvalid_rresp     I     2 reg
// dmem_master_m_rvalid_rdata     I    64 reg
// dmem_master_m_rvalid_rlast     I     1 reg
// dmem_master_m_rvalid_ruser     I    10 reg
// dmem_master_m_rvalid_rid       I     4 reg
// set_external_interrupt_i       I     2 reg
// boot_sequence_bootseq          I     1 reg
// read_igpr_r                    I     5
// write_igpr_r                   I     5
// write_igpr_d                   I    64
// read_fgpr_r                    I     5
// write_fgpr_r                   I     5
// write_fgpr_d                   I    64
// rw_csr_r                       I    12
// rw_csr_write                   I     1
// rw_csr_data                    I    64
// clint_msip_intrpt              I     1 reg
// clint_mtip_intrpt              I     1 reg
// clint_mtime_c_mtime            I    64 reg
// EN_set_external_interrupt      I     1
// EN_boot_sequence               I     1 inhigh
// EN_reset                       I     1
// EN_run_continue                I     1
// EN_stop                        I     1
// EN_write_igpr                  I     1
// EN_write_fgpr                  I     1
// EN_clint_msip                  I     1
// EN_clint_mtip                  I     1
// EN_clint_mtime                 I     1
// EN_rw_csr                      I     1
//
// Combinational paths from inputs to outputs:
//   (rw_csr_r, EN_write_igpr, EN_write_fgpr, EN_rw_csr, reset_vector) -> rw_csr
//   (EN_write_igpr, EN_write_fgpr, EN_rw_csr, reset_vector) -> reset_complete
//   (EN_write_igpr, EN_write_fgpr, EN_rw_csr, reset_vector) -> halted
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkcore_AXI4(reset_vector,
		   CLK,
		   RST_N,

		   imem_master_awvalid,

		   imem_master_awaddr,

		   imem_master_awprot,

		   imem_master_awuser,

		   imem_master_awlen,

		   imem_master_awsize,

		   imem_master_awburst,

		   imem_master_awlock,

		   imem_master_awcache,

		   imem_master_awqos,

		   imem_master_awregion,

		   imem_master_awid,

		   imem_master_m_awready_awready,

		   imem_master_wvalid,

		   imem_master_wdata,

		   imem_master_wstrb,

		   imem_master_wlast,

		   imem_master_wid,

		   imem_master_m_wready_wready,

		   imem_master_m_bvalid_bvalid,
		   imem_master_m_bvalid_bresp,
		   imem_master_m_bvalid_buser,
		   imem_master_m_bvalid_bid,

		   imem_master_bready,

		   imem_master_arvalid,

		   imem_master_araddr,

		   imem_master_arprot,

		   imem_master_aruser,

		   imem_master_arlen,

		   imem_master_arsize,

		   imem_master_arburst,

		   imem_master_arlock,

		   imem_master_arcache,

		   imem_master_arqos,

		   imem_master_arregion,

		   imem_master_arid,

		   imem_master_m_arready_arready,

		   imem_master_m_rvalid_rvalid,
		   imem_master_m_rvalid_rresp,
		   imem_master_m_rvalid_rdata,
		   imem_master_m_rvalid_rlast,
		   imem_master_m_rvalid_ruser,
		   imem_master_m_rvalid_rid,

		   imem_master_rready,

		   dmem_master_awvalid,

		   dmem_master_awaddr,

		   dmem_master_awprot,

		   dmem_master_awuser,

		   dmem_master_awlen,

		   dmem_master_awsize,

		   dmem_master_awburst,

		   dmem_master_awlock,

		   dmem_master_awcache,

		   dmem_master_awqos,

		   dmem_master_awregion,

		   dmem_master_awid,

		   dmem_master_m_awready_awready,

		   dmem_master_wvalid,

		   dmem_master_wdata,

		   dmem_master_wstrb,

		   dmem_master_wlast,

		   dmem_master_wid,

		   dmem_master_m_wready_wready,

		   dmem_master_m_bvalid_bvalid,
		   dmem_master_m_bvalid_bresp,
		   dmem_master_m_bvalid_buser,
		   dmem_master_m_bvalid_bid,

		   dmem_master_bready,

		   dmem_master_arvalid,

		   dmem_master_araddr,

		   dmem_master_arprot,

		   dmem_master_aruser,

		   dmem_master_arlen,

		   dmem_master_arsize,

		   dmem_master_arburst,

		   dmem_master_arlock,

		   dmem_master_arcache,

		   dmem_master_arqos,

		   dmem_master_arregion,

		   dmem_master_arid,

		   dmem_master_m_arready_arready,

		   dmem_master_m_rvalid_rvalid,
		   dmem_master_m_rvalid_rresp,
		   dmem_master_m_rvalid_rdata,
		   dmem_master_m_rvalid_rlast,
		   dmem_master_m_rvalid_ruser,
		   dmem_master_m_rvalid_rid,

		   dmem_master_rready,

		   set_external_interrupt_i,
		   EN_set_external_interrupt,
		   RDY_set_external_interrupt,

		   boot_sequence_bootseq,
		   EN_boot_sequence,
		   RDY_boot_sequence,

		   EN_reset,
		   RDY_reset,

		   EN_run_continue,
		   RDY_run_continue,

		   reset_complete,
		   RDY_reset_complete,

		   EN_stop,
		   RDY_stop,

		   halted,
		   RDY_halted,

		   read_igpr_r,
		   read_igpr,
		   RDY_read_igpr,

		   write_igpr_r,
		   write_igpr_d,
		   EN_write_igpr,
		   RDY_write_igpr,

		   read_fgpr_r,
		   read_fgpr,
		   RDY_read_fgpr,

		   write_fgpr_r,
		   write_fgpr_d,
		   EN_write_fgpr,
		   RDY_write_fgpr,

		   rw_csr_r,
		   rw_csr_write,
		   rw_csr_data,
		   EN_rw_csr,
		   rw_csr,
		   RDY_rw_csr,

		   clint_msip_intrpt,
		   EN_clint_msip,
		   RDY_clint_msip,

		   clint_mtip_intrpt,
		   EN_clint_mtip,
		   RDY_clint_mtip,

		   clint_mtime_c_mtime,
		   EN_clint_mtime,
		   RDY_clint_mtime);
  input  [38 : 0] reset_vector;
  input  CLK;
  input  RST_N;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awaddr
  output [31 : 0] imem_master_awaddr;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awuser
  output [9 : 0] imem_master_awuser;

  // value method imem_master_m_awlen
  output [7 : 0] imem_master_awlen;

  // value method imem_master_m_awsize
  output [2 : 0] imem_master_awsize;

  // value method imem_master_m_awburst
  output [1 : 0] imem_master_awburst;

  // value method imem_master_m_awlock
  output imem_master_awlock;

  // value method imem_master_m_awcache
  output [3 : 0] imem_master_awcache;

  // value method imem_master_m_awqos
  output [3 : 0] imem_master_awqos;

  // value method imem_master_m_awregion
  output [3 : 0] imem_master_awregion;

  // value method imem_master_m_awid
  output [3 : 0] imem_master_awid;

  // action method imem_master_m_awready
  input  imem_master_m_awready_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // value method imem_master_m_wlast
  output imem_master_wlast;

  // value method imem_master_m_wid
  output [3 : 0] imem_master_wid;

  // action method imem_master_m_wready
  input  imem_master_m_wready_wready;

  // action method imem_master_m_bvalid
  input  imem_master_m_bvalid_bvalid;
  input  [1 : 0] imem_master_m_bvalid_bresp;
  input  [9 : 0] imem_master_m_bvalid_buser;
  input  [3 : 0] imem_master_m_bvalid_bid;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_araddr
  output [31 : 0] imem_master_araddr;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_aruser
  output [9 : 0] imem_master_aruser;

  // value method imem_master_m_arlen
  output [7 : 0] imem_master_arlen;

  // value method imem_master_m_arsize
  output [2 : 0] imem_master_arsize;

  // value method imem_master_m_arburst
  output [1 : 0] imem_master_arburst;

  // value method imem_master_m_arlock
  output imem_master_arlock;

  // value method imem_master_m_arcache
  output [3 : 0] imem_master_arcache;

  // value method imem_master_m_arqos
  output [3 : 0] imem_master_arqos;

  // value method imem_master_m_arregion
  output [3 : 0] imem_master_arregion;

  // value method imem_master_m_arid
  output [3 : 0] imem_master_arid;

  // action method imem_master_m_arready
  input  imem_master_m_arready_arready;

  // action method imem_master_m_rvalid
  input  imem_master_m_rvalid_rvalid;
  input  [1 : 0] imem_master_m_rvalid_rresp;
  input  [63 : 0] imem_master_m_rvalid_rdata;
  input  imem_master_m_rvalid_rlast;
  input  [9 : 0] imem_master_m_rvalid_ruser;
  input  [3 : 0] imem_master_m_rvalid_rid;

  // value method imem_master_m_rready
  output imem_master_rready;

  // value method dmem_master_m_awvalid
  output dmem_master_awvalid;

  // value method dmem_master_m_awaddr
  output [31 : 0] dmem_master_awaddr;

  // value method dmem_master_m_awprot
  output [2 : 0] dmem_master_awprot;

  // value method dmem_master_m_awuser
  output [9 : 0] dmem_master_awuser;

  // value method dmem_master_m_awlen
  output [7 : 0] dmem_master_awlen;

  // value method dmem_master_m_awsize
  output [2 : 0] dmem_master_awsize;

  // value method dmem_master_m_awburst
  output [1 : 0] dmem_master_awburst;

  // value method dmem_master_m_awlock
  output dmem_master_awlock;

  // value method dmem_master_m_awcache
  output [3 : 0] dmem_master_awcache;

  // value method dmem_master_m_awqos
  output [3 : 0] dmem_master_awqos;

  // value method dmem_master_m_awregion
  output [3 : 0] dmem_master_awregion;

  // value method dmem_master_m_awid
  output [3 : 0] dmem_master_awid;

  // action method dmem_master_m_awready
  input  dmem_master_m_awready_awready;

  // value method dmem_master_m_wvalid
  output dmem_master_wvalid;

  // value method dmem_master_m_wdata
  output [63 : 0] dmem_master_wdata;

  // value method dmem_master_m_wstrb
  output [7 : 0] dmem_master_wstrb;

  // value method dmem_master_m_wlast
  output dmem_master_wlast;

  // value method dmem_master_m_wid
  output [3 : 0] dmem_master_wid;

  // action method dmem_master_m_wready
  input  dmem_master_m_wready_wready;

  // action method dmem_master_m_bvalid
  input  dmem_master_m_bvalid_bvalid;
  input  [1 : 0] dmem_master_m_bvalid_bresp;
  input  [9 : 0] dmem_master_m_bvalid_buser;
  input  [3 : 0] dmem_master_m_bvalid_bid;

  // value method dmem_master_m_bready
  output dmem_master_bready;

  // value method dmem_master_m_arvalid
  output dmem_master_arvalid;

  // value method dmem_master_m_araddr
  output [31 : 0] dmem_master_araddr;

  // value method dmem_master_m_arprot
  output [2 : 0] dmem_master_arprot;

  // value method dmem_master_m_aruser
  output [9 : 0] dmem_master_aruser;

  // value method dmem_master_m_arlen
  output [7 : 0] dmem_master_arlen;

  // value method dmem_master_m_arsize
  output [2 : 0] dmem_master_arsize;

  // value method dmem_master_m_arburst
  output [1 : 0] dmem_master_arburst;

  // value method dmem_master_m_arlock
  output dmem_master_arlock;

  // value method dmem_master_m_arcache
  output [3 : 0] dmem_master_arcache;

  // value method dmem_master_m_arqos
  output [3 : 0] dmem_master_arqos;

  // value method dmem_master_m_arregion
  output [3 : 0] dmem_master_arregion;

  // value method dmem_master_m_arid
  output [3 : 0] dmem_master_arid;

  // action method dmem_master_m_arready
  input  dmem_master_m_arready_arready;

  // action method dmem_master_m_rvalid
  input  dmem_master_m_rvalid_rvalid;
  input  [1 : 0] dmem_master_m_rvalid_rresp;
  input  [63 : 0] dmem_master_m_rvalid_rdata;
  input  dmem_master_m_rvalid_rlast;
  input  [9 : 0] dmem_master_m_rvalid_ruser;
  input  [3 : 0] dmem_master_m_rvalid_rid;

  // value method dmem_master_m_rready
  output dmem_master_rready;

  // action method set_external_interrupt
  input  [1 : 0] set_external_interrupt_i;
  input  EN_set_external_interrupt;
  output RDY_set_external_interrupt;

  // action method boot_sequence
  input  boot_sequence_bootseq;
  input  EN_boot_sequence;
  output RDY_boot_sequence;

  // action method reset
  input  EN_reset;
  output RDY_reset;

  // action method run_continue
  input  EN_run_continue;
  output RDY_run_continue;

  // value method reset_complete
  output reset_complete;
  output RDY_reset_complete;

  // action method stop
  input  EN_stop;
  output RDY_stop;

  // value method halted
  output halted;
  output RDY_halted;

  // value method read_igpr
  input  [4 : 0] read_igpr_r;
  output [63 : 0] read_igpr;
  output RDY_read_igpr;

  // action method write_igpr
  input  [4 : 0] write_igpr_r;
  input  [63 : 0] write_igpr_d;
  input  EN_write_igpr;
  output RDY_write_igpr;

  // value method read_fgpr
  input  [4 : 0] read_fgpr_r;
  output [63 : 0] read_fgpr;
  output RDY_read_fgpr;

  // action method write_fgpr
  input  [4 : 0] write_fgpr_r;
  input  [63 : 0] write_fgpr_d;
  input  EN_write_fgpr;
  output RDY_write_fgpr;

  // actionvalue method rw_csr
  input  [11 : 0] rw_csr_r;
  input  rw_csr_write;
  input  [63 : 0] rw_csr_data;
  input  EN_rw_csr;
  output [63 : 0] rw_csr;
  output RDY_rw_csr;

  // action method clint_msip
  input  clint_msip_intrpt;
  input  EN_clint_msip;
  output RDY_clint_msip;

  // action method clint_mtip
  input  clint_mtip_intrpt;
  input  EN_clint_mtip;
  output RDY_clint_mtip;

  // action method clint_mtime
  input  [63 : 0] clint_mtime_c_mtime;
  input  EN_clint_mtime;
  output RDY_clint_mtime;

  // signals for module outputs
  wire [63 : 0] dmem_master_wdata,
		imem_master_wdata,
		read_fgpr,
		read_igpr,
		rw_csr;
  wire [31 : 0] dmem_master_araddr,
		dmem_master_awaddr,
		imem_master_araddr,
		imem_master_awaddr;
  wire [9 : 0] dmem_master_aruser,
	       dmem_master_awuser,
	       imem_master_aruser,
	       imem_master_awuser;
  wire [7 : 0] dmem_master_arlen,
	       dmem_master_awlen,
	       dmem_master_wstrb,
	       imem_master_arlen,
	       imem_master_awlen,
	       imem_master_wstrb;
  wire [3 : 0] dmem_master_arcache,
	       dmem_master_arid,
	       dmem_master_arqos,
	       dmem_master_arregion,
	       dmem_master_awcache,
	       dmem_master_awid,
	       dmem_master_awqos,
	       dmem_master_awregion,
	       dmem_master_wid,
	       imem_master_arcache,
	       imem_master_arid,
	       imem_master_arqos,
	       imem_master_arregion,
	       imem_master_awcache,
	       imem_master_awid,
	       imem_master_awqos,
	       imem_master_awregion,
	       imem_master_wid;
  wire [2 : 0] dmem_master_arprot,
	       dmem_master_arsize,
	       dmem_master_awprot,
	       dmem_master_awsize,
	       imem_master_arprot,
	       imem_master_arsize,
	       imem_master_awprot,
	       imem_master_awsize;
  wire [1 : 0] dmem_master_arburst,
	       dmem_master_awburst,
	       imem_master_arburst,
	       imem_master_awburst;
  wire RDY_boot_sequence,
       RDY_clint_msip,
       RDY_clint_mtime,
       RDY_clint_mtip,
       RDY_halted,
       RDY_read_fgpr,
       RDY_read_igpr,
       RDY_reset,
       RDY_reset_complete,
       RDY_run_continue,
       RDY_rw_csr,
       RDY_set_external_interrupt,
       RDY_stop,
       RDY_write_fgpr,
       RDY_write_igpr,
       dmem_master_arlock,
       dmem_master_arvalid,
       dmem_master_awlock,
       dmem_master_awvalid,
       dmem_master_bready,
       dmem_master_rready,
       dmem_master_wlast,
       dmem_master_wvalid,
       halted,
       imem_master_arlock,
       imem_master_arvalid,
       imem_master_awlock,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wlast,
       imem_master_wvalid,
       reset_complete;

  // inlined wires
  reg [2 : 0] ptw_rg_ptw_state$port1__write_1;
  wire [7 : 0] ptw_rg_asid$port1__read;
  wire [2 : 0] ptw_rg_ptw_state$port2__read;
  wire ptw_rg_ptw_state$EN_port1__write,
       rg_wait_for_response$port1__read,
       rg_wait_for_response$port2__read;

  // register ptw_rg_asid
  reg [7 : 0] ptw_rg_asid;
  wire [7 : 0] ptw_rg_asid$D_IN;
  wire ptw_rg_asid$EN;

  // register ptw_rg_levels
  reg [31 : 0] ptw_rg_levels;
  wire [31 : 0] ptw_rg_levels$D_IN;
  wire ptw_rg_levels$EN;

  // register ptw_rg_page_fault
  reg ptw_rg_page_fault;
  wire ptw_rg_page_fault$D_IN, ptw_rg_page_fault$EN;

  // register ptw_rg_page_type
  reg [1 : 0] ptw_rg_page_type;
  wire [1 : 0] ptw_rg_page_type$D_IN;
  wire ptw_rg_page_type$EN;

  // register ptw_rg_permission_bits
  reg [9 : 0] ptw_rg_permission_bits;
  wire [9 : 0] ptw_rg_permission_bits$D_IN;
  wire ptw_rg_permission_bits$EN;

  // register ptw_rg_ppn
  reg [63 : 0] ptw_rg_ppn;
  wire [63 : 0] ptw_rg_ppn$D_IN;
  wire ptw_rg_ppn$EN;

  // register ptw_rg_pte
  reg [63 : 0] ptw_rg_pte;
  reg [63 : 0] ptw_rg_pte$D_IN;
  wire ptw_rg_pte$EN;

  // register ptw_rg_pte_pointer
  reg [63 : 0] ptw_rg_pte_pointer;
  wire [63 : 0] ptw_rg_pte_pointer$D_IN;
  wire ptw_rg_pte_pointer$EN;

  // register ptw_rg_ptw_state
  reg [2 : 0] ptw_rg_ptw_state;
  wire [2 : 0] ptw_rg_ptw_state$D_IN;
  wire ptw_rg_ptw_state$EN;

  // register ptw_rg_satp
  reg [63 : 0] ptw_rg_satp;
  wire [63 : 0] ptw_rg_satp$D_IN;
  wire ptw_rg_satp$EN;

  // register ptw_rg_vpn
  reg [26 : 0] ptw_rg_vpn;
  wire [26 : 0] ptw_rg_vpn$D_IN;
  wire ptw_rg_vpn$EN;

  // register rg_burst_count
  reg [7 : 0] rg_burst_count;
  wire [7 : 0] rg_burst_count$D_IN;
  wire rg_burst_count$EN;

  // register rg_data_line
  reg [256 : 0] rg_data_line;
  wire [256 : 0] rg_data_line$D_IN;
  wire rg_data_line$EN;

  // register rg_serve_dTLB
  reg rg_serve_dTLB;
  wire rg_serve_dTLB$D_IN, rg_serve_dTLB$EN;

  // register rg_update_a_bit
  reg rg_update_a_bit;
  wire rg_update_a_bit$D_IN, rg_update_a_bit$EN;

  // register rg_update_b_bit
  reg rg_update_b_bit;
  wire rg_update_b_bit$D_IN, rg_update_b_bit$EN;

  // register rg_wait_for_response
  reg rg_wait_for_response;
  wire rg_wait_for_response$D_IN, rg_wait_for_response$EN;

  // ports of submodule dmem
  wire [300 : 0] dmem$request_to_memory_write;
  wire [140 : 0] dmem$request_from_cpu_put;
  wire [135 : 0] dmem$response_to_cpu_get;
  wire [77 : 0] dmem$fence_dtlb_rsdata;
  wire [66 : 0] dmem$get_pte_pointer_pte;
  wire [65 : 0] dmem$response_from_memory_read_resp,
		dmem$response_from_memory_write_resp;
  wire [63 : 0] dmem$data_keys_keys, dmem$send_pte;
  wire [44 : 0] dmem$request_to_memory_read;
  wire [38 : 0] dmem$refill_TLB_put;
  wire [28 : 0] dmem$to_PTW_get;
  wire [15 : 0] dmem$address_keys_addr_keys;
  wire [11 : 0] dmem$translation_protection_frm_csr_asid;
  wire [6 : 0] dmem$translation_protection_frm_csr_per_bits;
  wire dmem$EN_address_keys,
       dmem$EN_change_keys,
       dmem$EN_data_keys,
       dmem$EN_fence_dtlb,
       dmem$EN_flush,
       dmem$EN_get_pte_pointer,
       dmem$EN_refill_TLB_put,
       dmem$EN_remap_start,
       dmem$EN_request_from_cpu_put,
       dmem$EN_request_to_memory_read,
       dmem$EN_request_to_memory_write,
       dmem$EN_response_from_memory_read,
       dmem$EN_response_from_memory_write,
       dmem$EN_response_to_cpu_get,
       dmem$EN_send_pte,
       dmem$EN_to_PTW_get,
       dmem$EN_translation_protection_frm_csr,
       dmem$RDY_refill_TLB_put,
       dmem$RDY_request_from_cpu_put,
       dmem$RDY_request_to_memory_read,
       dmem$RDY_request_to_memory_write,
       dmem$RDY_response_from_memory_read,
       dmem$RDY_response_from_memory_write,
       dmem$RDY_response_to_cpu_get,
       dmem$RDY_send_pte,
       dmem$RDY_to_PTW_get,
       dmem$change_keys,
       dmem$remap_start,
       dmem$stall_fetch,
       dmem$translation_protection_frm_csr_tlb_disable;

  // ports of submodule dmem_xactor_f_rd_addr
  wire [74 : 0] dmem_xactor_f_rd_addr$D_IN, dmem_xactor_f_rd_addr$D_OUT;
  wire dmem_xactor_f_rd_addr$CLR,
       dmem_xactor_f_rd_addr$DEQ,
       dmem_xactor_f_rd_addr$EMPTY_N,
       dmem_xactor_f_rd_addr$ENQ,
       dmem_xactor_f_rd_addr$FULL_N;

  // ports of submodule dmem_xactor_f_rd_data
  wire [80 : 0] dmem_xactor_f_rd_data$D_IN, dmem_xactor_f_rd_data$D_OUT;
  wire dmem_xactor_f_rd_data$CLR,
       dmem_xactor_f_rd_data$DEQ,
       dmem_xactor_f_rd_data$EMPTY_N,
       dmem_xactor_f_rd_data$ENQ,
       dmem_xactor_f_rd_data$FULL_N;

  // ports of submodule dmem_xactor_f_wr_addr
  wire [74 : 0] dmem_xactor_f_wr_addr$D_IN, dmem_xactor_f_wr_addr$D_OUT;
  wire dmem_xactor_f_wr_addr$CLR,
       dmem_xactor_f_wr_addr$DEQ,
       dmem_xactor_f_wr_addr$EMPTY_N,
       dmem_xactor_f_wr_addr$ENQ,
       dmem_xactor_f_wr_addr$FULL_N;

  // ports of submodule dmem_xactor_f_wr_data
  wire [76 : 0] dmem_xactor_f_wr_data$D_IN, dmem_xactor_f_wr_data$D_OUT;
  wire dmem_xactor_f_wr_data$CLR,
       dmem_xactor_f_wr_data$DEQ,
       dmem_xactor_f_wr_data$EMPTY_N,
       dmem_xactor_f_wr_data$ENQ,
       dmem_xactor_f_wr_data$FULL_N;

  // ports of submodule dmem_xactor_f_wr_resp
  wire [15 : 0] dmem_xactor_f_wr_resp$D_IN, dmem_xactor_f_wr_resp$D_OUT;
  wire dmem_xactor_f_wr_resp$CLR,
       dmem_xactor_f_wr_resp$DEQ,
       dmem_xactor_f_wr_resp$EMPTY_N,
       dmem_xactor_f_wr_resp$ENQ,
       dmem_xactor_f_wr_resp$FULL_N;

  // ports of submodule imem
  wire [185 : 0] imem$instruction_response_to_core;
  wire [83 : 0] imem$request_from_core_put;
  wire [82 : 0] imem$prediction_response_get;
  wire [80 : 0] imem$training_training_data;
  wire [77 : 0] imem$fence_itlb_rsdata;
  wire [65 : 0] imem$response_from_memory_mem_data;
  wire [44 : 0] imem$request_to_memory;
  wire [41 : 0] imem$send_prediction_request_put;
  wire [38 : 0] imem$refill_TLB_put;
  wire [28 : 0] imem$to_PTW_get;
  wire [11 : 0] imem$translation_protection_frm_csr_asid;
  wire [6 : 0] imem$translation_protection_frm_csr_per_bits;
  wire [1 : 0] imem$flush__flush;
  wire imem$EN_fence_itlb,
       imem$EN_flush,
       imem$EN_prediction_response_get,
       imem$EN_prefetch,
       imem$EN_refill_TLB_put,
       imem$EN_request_from_core_put,
       imem$EN_request_to_memory,
       imem$EN_response_from_memory,
       imem$EN_send_prediction_request_put,
       imem$EN_stall_fetch,
       imem$EN_to_PTW_get,
       imem$EN_training,
       imem$EN_translation_protection_frm_csr,
       imem$RDY_prediction_response_get,
       imem$RDY_refill_TLB_put,
       imem$RDY_request_from_core_put,
       imem$RDY_request_to_memory,
       imem$RDY_response_from_memory,
       imem$RDY_send_prediction_request_put,
       imem$RDY_to_PTW_get,
       imem$RDY_training,
       imem$stall_fetch_stall,
       imem$translation_protection_frm_csr_tlb_disable;

  // ports of submodule imem_xactor_f_rd_addr
  wire [74 : 0] imem_xactor_f_rd_addr$D_IN, imem_xactor_f_rd_addr$D_OUT;
  wire imem_xactor_f_rd_addr$CLR,
       imem_xactor_f_rd_addr$DEQ,
       imem_xactor_f_rd_addr$EMPTY_N,
       imem_xactor_f_rd_addr$ENQ,
       imem_xactor_f_rd_addr$FULL_N;

  // ports of submodule imem_xactor_f_rd_data
  wire [80 : 0] imem_xactor_f_rd_data$D_IN, imem_xactor_f_rd_data$D_OUT;
  wire imem_xactor_f_rd_data$CLR,
       imem_xactor_f_rd_data$DEQ,
       imem_xactor_f_rd_data$EMPTY_N,
       imem_xactor_f_rd_data$ENQ,
       imem_xactor_f_rd_data$FULL_N;

  // ports of submodule imem_xactor_f_wr_addr
  wire [74 : 0] imem_xactor_f_wr_addr$D_IN, imem_xactor_f_wr_addr$D_OUT;
  wire imem_xactor_f_wr_addr$CLR,
       imem_xactor_f_wr_addr$DEQ,
       imem_xactor_f_wr_addr$EMPTY_N,
       imem_xactor_f_wr_addr$ENQ;

  // ports of submodule imem_xactor_f_wr_data
  wire [76 : 0] imem_xactor_f_wr_data$D_IN, imem_xactor_f_wr_data$D_OUT;
  wire imem_xactor_f_wr_data$CLR,
       imem_xactor_f_wr_data$DEQ,
       imem_xactor_f_wr_data$EMPTY_N,
       imem_xactor_f_wr_data$ENQ;

  // ports of submodule imem_xactor_f_wr_resp
  wire [15 : 0] imem_xactor_f_wr_resp$D_IN;
  wire imem_xactor_f_wr_resp$CLR,
       imem_xactor_f_wr_resp$DEQ,
       imem_xactor_f_wr_resp$ENQ,
       imem_xactor_f_wr_resp$FULL_N;

  // ports of submodule riscv
  wire [185 : 0] riscv$instruction_response_from_imem_x;
  wire [140 : 0] riscv$request_to_dmem_get;
  wire [135 : 0] riscv$response_from_dmem_put;
  wire [83 : 0] riscv$request_to_imem_get;
  wire [82 : 0] riscv$prediction_response_put;
  wire [80 : 0] riscv$training_data;
  wire [77 : 0] riscv$fence_tlbs;
  wire [63 : 0] riscv$clint_mtime_c_mtime,
		riscv$data_keys,
		riscv$mmu_cache_disable,
		riscv$read_debug_fgpr,
		riscv$read_debug_igpr,
		riscv$rw_csr,
		riscv$rw_csr_data,
		riscv$send_satp,
		riscv$write_debug_fgpr_d,
		riscv$write_debug_igpr_d;
  wire [41 : 0] riscv$send_prediction_request_get;
  wire [15 : 0] riscv$address_keys;
  wire [11 : 0] riscv$rw_csr_r;
  wire [6 : 0] riscv$perm_to_TLB;
  wire [4 : 0] riscv$read_debug_fgpr_r,
	       riscv$read_debug_igpr_r,
	       riscv$write_debug_fgpr_r,
	       riscv$write_debug_igpr_r;
  wire [1 : 0] riscv$set_external_interrupt_i;
  wire riscv$EN_change_keys,
       riscv$EN_clint_msip,
       riscv$EN_clint_mtime,
       riscv$EN_clint_mtip,
       riscv$EN_instruction_response_from_imem,
       riscv$EN_prediction_response_put,
       riscv$EN_remap_start,
       riscv$EN_request_to_dmem_get,
       riscv$EN_request_to_imem_get,
       riscv$EN_reset,
       riscv$EN_response_from_dmem_put,
       riscv$EN_run_continue,
       riscv$EN_rw_csr,
       riscv$EN_send_prediction_request_get,
       riscv$EN_set_external_interrupt,
       riscv$EN_stop,
       riscv$EN_write_debug_fgpr,
       riscv$EN_write_debug_igpr,
       riscv$RDY_fence_tlbs,
       riscv$RDY_instruction_response_from_imem,
       riscv$RDY_prediction_response_put,
       riscv$RDY_remap_start,
       riscv$RDY_request_to_dmem_get,
       riscv$RDY_request_to_imem_get,
       riscv$RDY_rw_csr,
       riscv$RDY_set_external_interrupt,
       riscv$RDY_write_debug_fgpr,
       riscv$RDY_write_debug_igpr,
       riscv$boot_sequence_bootseq,
       riscv$change_keys_change,
       riscv$clint_msip_intrpt,
       riscv$clint_mtip_intrpt,
       riscv$flush_dmem,
       riscv$halted,
       riscv$remap_start_rm_flag,
       riscv$reset_complete,
       riscv$rw_csr_write;

  // rule scheduling signals
  wire CAN_FIRE_RL_check_read_request_to_memory_from_dcache,
       CAN_FIRE_RL_check_read_request_to_memory_from_icache,
       CAN_FIRE_RL_check_write_request_to_memory_from_dcache,
       CAN_FIRE_RL_connect_flush_to_dmem,
       CAN_FIRE_RL_connect_training,
       CAN_FIRE_RL_dtlb_to_ptw,
       CAN_FIRE_RL_fence_stall_icache,
       CAN_FIRE_RL_fence_tlbs,
       CAN_FIRE_RL_get_pte_entry,
       CAN_FIRE_RL_itlb_to_ptw,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionGetPut_2,
       CAN_FIRE_RL_mkConnectionGetPut_3,
       CAN_FIRE_RL_mkConnectionGetPut_4,
       CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_ptw_rl_computer_next_pointer,
       CAN_FIRE_RL_ptw_rl_return_from_page_fault,
       CAN_FIRE_RL_ptw_to_dtlb,
       CAN_FIRE_RL_ptw_to_itlb,
       CAN_FIRE_RL_rl_change_keys,
       CAN_FIRE_RL_rl_remap_start,
       CAN_FIRE_RL_rl_send_keys_to_dmem,
       CAN_FIRE_RL_send_burst_write_data,
       CAN_FIRE_RL_send_permissions_to_tlb,
       CAN_FIRE_RL_send_pte_entry,
       CAN_FIRE_RL_send_pte_pointer,
       CAN_FIRE_RL_send_read_response_from_memory_to_dcache,
       CAN_FIRE_RL_send_read_response_from_memory_to_icache,
       CAN_FIRE_RL_send_write_response_to_dcache,
       CAN_FIRE_boot_sequence,
       CAN_FIRE_clint_msip,
       CAN_FIRE_clint_mtime,
       CAN_FIRE_clint_mtip,
       CAN_FIRE_dmem_master_m_arready,
       CAN_FIRE_dmem_master_m_awready,
       CAN_FIRE_dmem_master_m_bvalid,
       CAN_FIRE_dmem_master_m_rvalid,
       CAN_FIRE_dmem_master_m_wready,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_reset,
       CAN_FIRE_run_continue,
       CAN_FIRE_rw_csr,
       CAN_FIRE_set_external_interrupt,
       CAN_FIRE_stop,
       CAN_FIRE_write_fgpr,
       CAN_FIRE_write_igpr,
       WILL_FIRE_RL_check_read_request_to_memory_from_dcache,
       WILL_FIRE_RL_check_read_request_to_memory_from_icache,
       WILL_FIRE_RL_check_write_request_to_memory_from_dcache,
       WILL_FIRE_RL_connect_flush_to_dmem,
       WILL_FIRE_RL_connect_training,
       WILL_FIRE_RL_dtlb_to_ptw,
       WILL_FIRE_RL_fence_stall_icache,
       WILL_FIRE_RL_fence_tlbs,
       WILL_FIRE_RL_get_pte_entry,
       WILL_FIRE_RL_itlb_to_ptw,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_mkConnectionGetPut_3,
       WILL_FIRE_RL_mkConnectionGetPut_4,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_ptw_rl_computer_next_pointer,
       WILL_FIRE_RL_ptw_rl_return_from_page_fault,
       WILL_FIRE_RL_ptw_to_dtlb,
       WILL_FIRE_RL_ptw_to_itlb,
       WILL_FIRE_RL_rl_change_keys,
       WILL_FIRE_RL_rl_remap_start,
       WILL_FIRE_RL_rl_send_keys_to_dmem,
       WILL_FIRE_RL_send_burst_write_data,
       WILL_FIRE_RL_send_permissions_to_tlb,
       WILL_FIRE_RL_send_pte_entry,
       WILL_FIRE_RL_send_pte_pointer,
       WILL_FIRE_RL_send_read_response_from_memory_to_dcache,
       WILL_FIRE_RL_send_read_response_from_memory_to_icache,
       WILL_FIRE_RL_send_write_response_to_dcache,
       WILL_FIRE_boot_sequence,
       WILL_FIRE_clint_msip,
       WILL_FIRE_clint_mtime,
       WILL_FIRE_clint_mtip,
       WILL_FIRE_dmem_master_m_arready,
       WILL_FIRE_dmem_master_m_awready,
       WILL_FIRE_dmem_master_m_bvalid,
       WILL_FIRE_dmem_master_m_rvalid,
       WILL_FIRE_dmem_master_m_wready,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_reset,
       WILL_FIRE_run_continue,
       WILL_FIRE_rw_csr,
       WILL_FIRE_set_external_interrupt,
       WILL_FIRE_stop,
       WILL_FIRE_write_fgpr,
       WILL_FIRE_write_igpr;

  // inputs to muxes for submodule ports
  wire [256 : 0] MUX_rg_data_line$write_1__VAL_1,
		 MUX_rg_data_line$write_1__VAL_2;
  wire [76 : 0] MUX_dmem_xactor_f_wr_data$enq_1__VAL_1,
		MUX_dmem_xactor_f_wr_data$enq_1__VAL_2;
  wire [63 : 0] MUX_ptw_rg_pte$write_1__VAL_1, MUX_ptw_rg_pte$write_1__VAL_2;
  wire [31 : 0] MUX_ptw_rg_levels$write_1__VAL_1;
  wire [7 : 0] MUX_rg_burst_count$write_1__VAL_2;
  wire [2 : 0] MUX_ptw_rg_ptw_state$port1__write_1__VAL_1,
	       MUX_ptw_rg_ptw_state$port1__write_1__VAL_2;
  wire MUX_ptw_rg_levels$write_1__SEL_2,
       MUX_ptw_rg_page_fault$write_1__SEL_2,
       MUX_ptw_rg_pte$write_1__SEL_1,
       MUX_ptw_rg_ptw_state$port1__write_1__SEL_4,
       MUX_rg_burst_count$write_1__SEL_1;

  // remaining internal signals
  reg [43 : 0] _theResult___snd__h3040;
  reg [7 : 0] write_strobe__h7974;
  reg [5 : 0] CASE_dmemresponse_to_cpu_get_BITS_70_TO_69_0__ETC__q11,
	      CASE_imeminstruction_response_to_core_BITS_72_ETC__q8;
  reg [3 : 0] CASE_dmemresponse_to_cpu_get_BITS_68_TO_65_0__ETC__q10,
	      CASE_dmemresponse_to_cpu_get_BITS_68_TO_65_0__ETC__q9,
	      CASE_imeminstruction_response_to_core_BITS_70_ETC__q6,
	      CASE_imeminstruction_response_to_core_BITS_70_ETC__q7;
  reg [1 : 0] CASE_riscvperm_to_TLB_BITS_1_TO_0_0_riscvper_ETC__q5,
	      CASE_riscvperm_to_TLB_BITS_3_TO_2_0_riscvper_ETC__q4;
  reg CASE_ptw_rg_levels_1_NOT_ptw_rg_pte_BITS_27_TO_ETC__q2,
      CASE_ptw_rg_levels_1_ptw_rg_pte_BITS_27_TO_10__ETC__q3;
  wire [63 : 0] ptw_rg_levels_read__3_PLUS_1_7_MUL_9___d78;
  wire [55 : 0] lv_pte_pointer__h2814;
  wire [53 : 0] pte__h6558, x__h3204;
  wire [43 : 0] step_ppn___1__h3044, step_ppn___1__h3107, step_ppn___1__h3144;
  wire [31 : 0] x__h3004, x__h3006, x__h5701;
  wire [26 : 0] ptw_rg_vpn_AND_INV_0x7FFFFFE_SL_x004_BITS_4_TO_ETC__q1;
  wire [17 : 0] ptw_rg_pte_BIT_0_1_CONCAT_ptw_rg_pte_BIT_1_6_C_ETC___d223;
  wire [11 : 0] vpn_addr__h2615;
  wire [8 : 0] lv_vpn_split__h2613;
  wire [7 : 0] w_wstrb__h8083,
	       write_strobe___1__h8110,
	       x__h8482,
	       x_arlen__h7856,
	       x_arlen__h8543,
	       x_awlen__h8012;
  wire [1 : 0] x_arburst__h7858;
  wire NOT_ptw_rg_pte_BIT_0_1_2_OR_NOT_ptw_rg_pte_BIT_ETC___d49,
       dmem_request_to_memory_write_19_BITS_268_TO_26_ETC___d337,
       mem_data_bus_error__h8779,
       ptw_rg_pte_BIT_0_1_AND_ptw_rg_pte_BIT_1_6_OR_N_ETC___d58,
       resp_bus_error__h8670,
       resp_bus_error__h8901;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = imem_xactor_f_wr_addr$EMPTY_N ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = imem_xactor_f_wr_addr$D_OUT[74:43] ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = imem_xactor_f_wr_addr$D_OUT[42:40] ;

  // value method imem_master_m_awuser
  assign imem_master_awuser = imem_xactor_f_wr_addr$D_OUT[39:30] ;

  // value method imem_master_m_awlen
  assign imem_master_awlen = imem_xactor_f_wr_addr$D_OUT[29:22] ;

  // value method imem_master_m_awsize
  assign imem_master_awsize = imem_xactor_f_wr_addr$D_OUT[21:19] ;

  // value method imem_master_m_awburst
  assign imem_master_awburst = imem_xactor_f_wr_addr$D_OUT[18:17] ;

  // value method imem_master_m_awlock
  assign imem_master_awlock = imem_xactor_f_wr_addr$D_OUT[16] ;

  // value method imem_master_m_awcache
  assign imem_master_awcache = imem_xactor_f_wr_addr$D_OUT[15:12] ;

  // value method imem_master_m_awqos
  assign imem_master_awqos = imem_xactor_f_wr_addr$D_OUT[11:8] ;

  // value method imem_master_m_awregion
  assign imem_master_awregion = imem_xactor_f_wr_addr$D_OUT[7:4] ;

  // value method imem_master_m_awid
  assign imem_master_awid = imem_xactor_f_wr_addr$D_OUT[3:0] ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = imem_xactor_f_wr_data$EMPTY_N ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = imem_xactor_f_wr_data$D_OUT[76:13] ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = imem_xactor_f_wr_data$D_OUT[12:5] ;

  // value method imem_master_m_wlast
  assign imem_master_wlast = imem_xactor_f_wr_data$D_OUT[0] ;

  // value method imem_master_m_wid
  assign imem_master_wid = imem_xactor_f_wr_data$D_OUT[4:1] ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = imem_xactor_f_wr_resp$FULL_N ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = imem_xactor_f_rd_addr$EMPTY_N ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = imem_xactor_f_rd_addr$D_OUT[74:43] ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = imem_xactor_f_rd_addr$D_OUT[42:40] ;

  // value method imem_master_m_aruser
  assign imem_master_aruser = imem_xactor_f_rd_addr$D_OUT[39:30] ;

  // value method imem_master_m_arlen
  assign imem_master_arlen = imem_xactor_f_rd_addr$D_OUT[29:22] ;

  // value method imem_master_m_arsize
  assign imem_master_arsize = imem_xactor_f_rd_addr$D_OUT[21:19] ;

  // value method imem_master_m_arburst
  assign imem_master_arburst = imem_xactor_f_rd_addr$D_OUT[18:17] ;

  // value method imem_master_m_arlock
  assign imem_master_arlock = imem_xactor_f_rd_addr$D_OUT[16] ;

  // value method imem_master_m_arcache
  assign imem_master_arcache = imem_xactor_f_rd_addr$D_OUT[15:12] ;

  // value method imem_master_m_arqos
  assign imem_master_arqos = imem_xactor_f_rd_addr$D_OUT[11:8] ;

  // value method imem_master_m_arregion
  assign imem_master_arregion = imem_xactor_f_rd_addr$D_OUT[7:4] ;

  // value method imem_master_m_arid
  assign imem_master_arid = imem_xactor_f_rd_addr$D_OUT[3:0] ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = imem_xactor_f_rd_data$FULL_N ;

  // value method dmem_master_m_awvalid
  assign dmem_master_awvalid = dmem_xactor_f_wr_addr$EMPTY_N ;

  // value method dmem_master_m_awaddr
  assign dmem_master_awaddr = dmem_xactor_f_wr_addr$D_OUT[74:43] ;

  // value method dmem_master_m_awprot
  assign dmem_master_awprot = dmem_xactor_f_wr_addr$D_OUT[42:40] ;

  // value method dmem_master_m_awuser
  assign dmem_master_awuser = dmem_xactor_f_wr_addr$D_OUT[39:30] ;

  // value method dmem_master_m_awlen
  assign dmem_master_awlen = dmem_xactor_f_wr_addr$D_OUT[29:22] ;

  // value method dmem_master_m_awsize
  assign dmem_master_awsize = dmem_xactor_f_wr_addr$D_OUT[21:19] ;

  // value method dmem_master_m_awburst
  assign dmem_master_awburst = dmem_xactor_f_wr_addr$D_OUT[18:17] ;

  // value method dmem_master_m_awlock
  assign dmem_master_awlock = dmem_xactor_f_wr_addr$D_OUT[16] ;

  // value method dmem_master_m_awcache
  assign dmem_master_awcache = dmem_xactor_f_wr_addr$D_OUT[15:12] ;

  // value method dmem_master_m_awqos
  assign dmem_master_awqos = dmem_xactor_f_wr_addr$D_OUT[11:8] ;

  // value method dmem_master_m_awregion
  assign dmem_master_awregion = dmem_xactor_f_wr_addr$D_OUT[7:4] ;

  // value method dmem_master_m_awid
  assign dmem_master_awid = dmem_xactor_f_wr_addr$D_OUT[3:0] ;

  // action method dmem_master_m_awready
  assign CAN_FIRE_dmem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_awready = 1'd1 ;

  // value method dmem_master_m_wvalid
  assign dmem_master_wvalid = dmem_xactor_f_wr_data$EMPTY_N ;

  // value method dmem_master_m_wdata
  assign dmem_master_wdata = dmem_xactor_f_wr_data$D_OUT[76:13] ;

  // value method dmem_master_m_wstrb
  assign dmem_master_wstrb = dmem_xactor_f_wr_data$D_OUT[12:5] ;

  // value method dmem_master_m_wlast
  assign dmem_master_wlast = dmem_xactor_f_wr_data$D_OUT[0] ;

  // value method dmem_master_m_wid
  assign dmem_master_wid = dmem_xactor_f_wr_data$D_OUT[4:1] ;

  // action method dmem_master_m_wready
  assign CAN_FIRE_dmem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_wready = 1'd1 ;

  // action method dmem_master_m_bvalid
  assign CAN_FIRE_dmem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_bvalid = 1'd1 ;

  // value method dmem_master_m_bready
  assign dmem_master_bready = dmem_xactor_f_wr_resp$FULL_N ;

  // value method dmem_master_m_arvalid
  assign dmem_master_arvalid = dmem_xactor_f_rd_addr$EMPTY_N ;

  // value method dmem_master_m_araddr
  assign dmem_master_araddr = dmem_xactor_f_rd_addr$D_OUT[74:43] ;

  // value method dmem_master_m_arprot
  assign dmem_master_arprot = dmem_xactor_f_rd_addr$D_OUT[42:40] ;

  // value method dmem_master_m_aruser
  assign dmem_master_aruser = dmem_xactor_f_rd_addr$D_OUT[39:30] ;

  // value method dmem_master_m_arlen
  assign dmem_master_arlen = dmem_xactor_f_rd_addr$D_OUT[29:22] ;

  // value method dmem_master_m_arsize
  assign dmem_master_arsize = dmem_xactor_f_rd_addr$D_OUT[21:19] ;

  // value method dmem_master_m_arburst
  assign dmem_master_arburst = dmem_xactor_f_rd_addr$D_OUT[18:17] ;

  // value method dmem_master_m_arlock
  assign dmem_master_arlock = dmem_xactor_f_rd_addr$D_OUT[16] ;

  // value method dmem_master_m_arcache
  assign dmem_master_arcache = dmem_xactor_f_rd_addr$D_OUT[15:12] ;

  // value method dmem_master_m_arqos
  assign dmem_master_arqos = dmem_xactor_f_rd_addr$D_OUT[11:8] ;

  // value method dmem_master_m_arregion
  assign dmem_master_arregion = dmem_xactor_f_rd_addr$D_OUT[7:4] ;

  // value method dmem_master_m_arid
  assign dmem_master_arid = dmem_xactor_f_rd_addr$D_OUT[3:0] ;

  // action method dmem_master_m_arready
  assign CAN_FIRE_dmem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_arready = 1'd1 ;

  // action method dmem_master_m_rvalid
  assign CAN_FIRE_dmem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_rvalid = 1'd1 ;

  // value method dmem_master_m_rready
  assign dmem_master_rready = dmem_xactor_f_rd_data$FULL_N ;

  // action method set_external_interrupt
  assign RDY_set_external_interrupt = riscv$RDY_set_external_interrupt ;
  assign CAN_FIRE_set_external_interrupt = riscv$RDY_set_external_interrupt ;
  assign WILL_FIRE_set_external_interrupt = EN_set_external_interrupt ;

  // action method boot_sequence
  assign RDY_boot_sequence = 1'd1 ;
  assign CAN_FIRE_boot_sequence = 1'd1 ;
  assign WILL_FIRE_boot_sequence = EN_boot_sequence ;

  // action method reset
  assign RDY_reset = 1'd1 ;
  assign CAN_FIRE_reset = 1'd1 ;
  assign WILL_FIRE_reset = EN_reset ;

  // action method run_continue
  assign RDY_run_continue = 1'd1 ;
  assign CAN_FIRE_run_continue = 1'd1 ;
  assign WILL_FIRE_run_continue = EN_run_continue ;

  // value method reset_complete
  assign reset_complete = riscv$reset_complete ;
  assign RDY_reset_complete = 1'd1 ;

  // action method stop
  assign RDY_stop = 1'd1 ;
  assign CAN_FIRE_stop = 1'd1 ;
  assign WILL_FIRE_stop = EN_stop ;

  // value method halted
  assign halted = riscv$halted ;
  assign RDY_halted = 1'd1 ;

  // value method read_igpr
  assign read_igpr = riscv$read_debug_igpr ;
  assign RDY_read_igpr = 1'd1 ;

  // action method write_igpr
  assign RDY_write_igpr = riscv$RDY_write_debug_igpr ;
  assign CAN_FIRE_write_igpr = riscv$RDY_write_debug_igpr ;
  assign WILL_FIRE_write_igpr = EN_write_igpr ;

  // value method read_fgpr
  assign read_fgpr = riscv$read_debug_fgpr ;
  assign RDY_read_fgpr = 1'd1 ;

  // action method write_fgpr
  assign RDY_write_fgpr = riscv$RDY_write_debug_fgpr ;
  assign CAN_FIRE_write_fgpr = riscv$RDY_write_debug_fgpr ;
  assign WILL_FIRE_write_fgpr = EN_write_fgpr ;

  // actionvalue method rw_csr
  assign rw_csr = riscv$rw_csr ;
  assign RDY_rw_csr = riscv$RDY_rw_csr ;
  assign CAN_FIRE_rw_csr = riscv$RDY_rw_csr ;
  assign WILL_FIRE_rw_csr = EN_rw_csr ;

  // action method clint_msip
  assign RDY_clint_msip = 1'd1 ;
  assign CAN_FIRE_clint_msip = 1'd1 ;
  assign WILL_FIRE_clint_msip = EN_clint_msip ;

  // action method clint_mtip
  assign RDY_clint_mtip = 1'd1 ;
  assign CAN_FIRE_clint_mtip = 1'd1 ;
  assign WILL_FIRE_clint_mtip = EN_clint_mtip ;

  // action method clint_mtime
  assign RDY_clint_mtime = 1'd1 ;
  assign CAN_FIRE_clint_mtime = 1'd1 ;
  assign WILL_FIRE_clint_mtime = EN_clint_mtime ;

  // submodule dmem
  mkdmem dmem(.CLK(CLK),
	      .RST_N(RST_N),
	      .address_keys_addr_keys(dmem$address_keys_addr_keys),
	      .data_keys_keys(dmem$data_keys_keys),
	      .fence_dtlb_rsdata(dmem$fence_dtlb_rsdata),
	      .get_pte_pointer_pte(dmem$get_pte_pointer_pte),
	      .refill_TLB_put(dmem$refill_TLB_put),
	      .request_from_cpu_put(dmem$request_from_cpu_put),
	      .response_from_memory_read_resp(dmem$response_from_memory_read_resp),
	      .response_from_memory_write_resp(dmem$response_from_memory_write_resp),
	      .translation_protection_frm_csr_asid(dmem$translation_protection_frm_csr_asid),
	      .translation_protection_frm_csr_per_bits(dmem$translation_protection_frm_csr_per_bits),
	      .translation_protection_frm_csr_tlb_disable(dmem$translation_protection_frm_csr_tlb_disable),
	      .EN_request_from_cpu_put(dmem$EN_request_from_cpu_put),
	      .EN_response_to_cpu_get(dmem$EN_response_to_cpu_get),
	      .EN_flush(dmem$EN_flush),
	      .EN_request_to_memory_read(dmem$EN_request_to_memory_read),
	      .EN_request_to_memory_write(dmem$EN_request_to_memory_write),
	      .EN_response_from_memory_read(dmem$EN_response_from_memory_read),
	      .EN_response_from_memory_write(dmem$EN_response_from_memory_write),
	      .EN_translation_protection_frm_csr(dmem$EN_translation_protection_frm_csr),
	      .EN_to_PTW_get(dmem$EN_to_PTW_get),
	      .EN_refill_TLB_put(dmem$EN_refill_TLB_put),
	      .EN_get_pte_pointer(dmem$EN_get_pte_pointer),
	      .EN_fence_dtlb(dmem$EN_fence_dtlb),
	      .EN_send_pte(dmem$EN_send_pte),
	      .EN_address_keys(dmem$EN_address_keys),
	      .EN_data_keys(dmem$EN_data_keys),
	      .EN_change_keys(dmem$EN_change_keys),
	      .EN_remap_start(dmem$EN_remap_start),
	      .RDY_request_from_cpu_put(dmem$RDY_request_from_cpu_put),
	      .response_to_cpu_get(dmem$response_to_cpu_get),
	      .RDY_response_to_cpu_get(dmem$RDY_response_to_cpu_get),
	      .RDY_flush(),
	      .stall_fetch(dmem$stall_fetch),
	      .RDY_stall_fetch(),
	      .request_to_memory_read(dmem$request_to_memory_read),
	      .RDY_request_to_memory_read(dmem$RDY_request_to_memory_read),
	      .request_to_memory_write(dmem$request_to_memory_write),
	      .RDY_request_to_memory_write(dmem$RDY_request_to_memory_write),
	      .RDY_response_from_memory_read(dmem$RDY_response_from_memory_read),
	      .RDY_response_from_memory_write(dmem$RDY_response_from_memory_write),
	      .RDY_translation_protection_frm_csr(),
	      .to_PTW_get(dmem$to_PTW_get),
	      .RDY_to_PTW_get(dmem$RDY_to_PTW_get),
	      .RDY_refill_TLB_put(dmem$RDY_refill_TLB_put),
	      .RDY_get_pte_pointer(),
	      .RDY_fence_dtlb(),
	      .send_pte(dmem$send_pte),
	      .RDY_send_pte(dmem$RDY_send_pte),
	      .RDY_address_keys(),
	      .RDY_data_keys(),
	      .change_keys(dmem$change_keys),
	      .RDY_change_keys(),
	      .remap_start(dmem$remap_start),
	      .RDY_remap_start());

  // submodule dmem_xactor_f_rd_addr
  FIFOL1 #(.width(32'd75)) dmem_xactor_f_rd_addr(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(dmem_xactor_f_rd_addr$D_IN),
						 .ENQ(dmem_xactor_f_rd_addr$ENQ),
						 .DEQ(dmem_xactor_f_rd_addr$DEQ),
						 .CLR(dmem_xactor_f_rd_addr$CLR),
						 .D_OUT(dmem_xactor_f_rd_addr$D_OUT),
						 .FULL_N(dmem_xactor_f_rd_addr$FULL_N),
						 .EMPTY_N(dmem_xactor_f_rd_addr$EMPTY_N));

  // submodule dmem_xactor_f_rd_data
  FIFOL1 #(.width(32'd81)) dmem_xactor_f_rd_data(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(dmem_xactor_f_rd_data$D_IN),
						 .ENQ(dmem_xactor_f_rd_data$ENQ),
						 .DEQ(dmem_xactor_f_rd_data$DEQ),
						 .CLR(dmem_xactor_f_rd_data$CLR),
						 .D_OUT(dmem_xactor_f_rd_data$D_OUT),
						 .FULL_N(dmem_xactor_f_rd_data$FULL_N),
						 .EMPTY_N(dmem_xactor_f_rd_data$EMPTY_N));

  // submodule dmem_xactor_f_wr_addr
  FIFOL1 #(.width(32'd75)) dmem_xactor_f_wr_addr(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(dmem_xactor_f_wr_addr$D_IN),
						 .ENQ(dmem_xactor_f_wr_addr$ENQ),
						 .DEQ(dmem_xactor_f_wr_addr$DEQ),
						 .CLR(dmem_xactor_f_wr_addr$CLR),
						 .D_OUT(dmem_xactor_f_wr_addr$D_OUT),
						 .FULL_N(dmem_xactor_f_wr_addr$FULL_N),
						 .EMPTY_N(dmem_xactor_f_wr_addr$EMPTY_N));

  // submodule dmem_xactor_f_wr_data
  FIFOL1 #(.width(32'd77)) dmem_xactor_f_wr_data(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(dmem_xactor_f_wr_data$D_IN),
						 .ENQ(dmem_xactor_f_wr_data$ENQ),
						 .DEQ(dmem_xactor_f_wr_data$DEQ),
						 .CLR(dmem_xactor_f_wr_data$CLR),
						 .D_OUT(dmem_xactor_f_wr_data$D_OUT),
						 .FULL_N(dmem_xactor_f_wr_data$FULL_N),
						 .EMPTY_N(dmem_xactor_f_wr_data$EMPTY_N));

  // submodule dmem_xactor_f_wr_resp
  FIFOL1 #(.width(32'd16)) dmem_xactor_f_wr_resp(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(dmem_xactor_f_wr_resp$D_IN),
						 .ENQ(dmem_xactor_f_wr_resp$ENQ),
						 .DEQ(dmem_xactor_f_wr_resp$DEQ),
						 .CLR(dmem_xactor_f_wr_resp$CLR),
						 .D_OUT(dmem_xactor_f_wr_resp$D_OUT),
						 .FULL_N(dmem_xactor_f_wr_resp$FULL_N),
						 .EMPTY_N(dmem_xactor_f_wr_resp$EMPTY_N));

  // submodule imem
  mkimem imem(.CLK(CLK),
	      .RST_N(RST_N),
	      .fence_itlb_rsdata(imem$fence_itlb_rsdata),
	      .flush__flush(imem$flush__flush),
	      .refill_TLB_put(imem$refill_TLB_put),
	      .request_from_core_put(imem$request_from_core_put),
	      .response_from_memory_mem_data(imem$response_from_memory_mem_data),
	      .send_prediction_request_put(imem$send_prediction_request_put),
	      .stall_fetch_stall(imem$stall_fetch_stall),
	      .training_training_data(imem$training_training_data),
	      .translation_protection_frm_csr_asid(imem$translation_protection_frm_csr_asid),
	      .translation_protection_frm_csr_per_bits(imem$translation_protection_frm_csr_per_bits),
	      .translation_protection_frm_csr_tlb_disable(imem$translation_protection_frm_csr_tlb_disable),
	      .EN_request_from_core_put(imem$EN_request_from_core_put),
	      .EN_flush(imem$EN_flush),
	      .EN_stall_fetch(imem$EN_stall_fetch),
	      .EN_response_from_memory(imem$EN_response_from_memory),
	      .EN_request_to_memory(imem$EN_request_to_memory),
	      .EN_prediction_response_get(imem$EN_prediction_response_get),
	      .EN_training(imem$EN_training),
	      .EN_send_prediction_request_put(imem$EN_send_prediction_request_put),
	      .EN_translation_protection_frm_csr(imem$EN_translation_protection_frm_csr),
	      .EN_to_PTW_get(imem$EN_to_PTW_get),
	      .EN_refill_TLB_put(imem$EN_refill_TLB_put),
	      .EN_fence_itlb(imem$EN_fence_itlb),
	      .EN_prefetch(imem$EN_prefetch),
	      .RDY_request_from_core_put(imem$RDY_request_from_core_put),
	      .instruction_response_to_core(imem$instruction_response_to_core),
	      .RDY_instruction_response_to_core(),
	      .RDY_flush(),
	      .imem_perfmon(),
	      .RDY_imem_perfmon(),
	      .RDY_stall_fetch(),
	      .RDY_response_from_memory(imem$RDY_response_from_memory),
	      .request_to_memory(imem$request_to_memory),
	      .RDY_request_to_memory(imem$RDY_request_to_memory),
	      .prediction_response_get(imem$prediction_response_get),
	      .RDY_prediction_response_get(imem$RDY_prediction_response_get),
	      .RDY_training(imem$RDY_training),
	      .RDY_send_prediction_request_put(imem$RDY_send_prediction_request_put),
	      .RDY_translation_protection_frm_csr(),
	      .to_PTW_get(imem$to_PTW_get),
	      .RDY_to_PTW_get(imem$RDY_to_PTW_get),
	      .RDY_refill_TLB_put(imem$RDY_refill_TLB_put),
	      .RDY_fence_itlb(),
	      .RDY_prefetch());

  // submodule imem_xactor_f_rd_addr
  FIFOL1 #(.width(32'd75)) imem_xactor_f_rd_addr(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(imem_xactor_f_rd_addr$D_IN),
						 .ENQ(imem_xactor_f_rd_addr$ENQ),
						 .DEQ(imem_xactor_f_rd_addr$DEQ),
						 .CLR(imem_xactor_f_rd_addr$CLR),
						 .D_OUT(imem_xactor_f_rd_addr$D_OUT),
						 .FULL_N(imem_xactor_f_rd_addr$FULL_N),
						 .EMPTY_N(imem_xactor_f_rd_addr$EMPTY_N));

  // submodule imem_xactor_f_rd_data
  FIFOL1 #(.width(32'd81)) imem_xactor_f_rd_data(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(imem_xactor_f_rd_data$D_IN),
						 .ENQ(imem_xactor_f_rd_data$ENQ),
						 .DEQ(imem_xactor_f_rd_data$DEQ),
						 .CLR(imem_xactor_f_rd_data$CLR),
						 .D_OUT(imem_xactor_f_rd_data$D_OUT),
						 .FULL_N(imem_xactor_f_rd_data$FULL_N),
						 .EMPTY_N(imem_xactor_f_rd_data$EMPTY_N));

  // submodule imem_xactor_f_wr_addr
  FIFOL1 #(.width(32'd75)) imem_xactor_f_wr_addr(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(imem_xactor_f_wr_addr$D_IN),
						 .ENQ(imem_xactor_f_wr_addr$ENQ),
						 .DEQ(imem_xactor_f_wr_addr$DEQ),
						 .CLR(imem_xactor_f_wr_addr$CLR),
						 .D_OUT(imem_xactor_f_wr_addr$D_OUT),
						 .FULL_N(),
						 .EMPTY_N(imem_xactor_f_wr_addr$EMPTY_N));

  // submodule imem_xactor_f_wr_data
  FIFOL1 #(.width(32'd77)) imem_xactor_f_wr_data(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(imem_xactor_f_wr_data$D_IN),
						 .ENQ(imem_xactor_f_wr_data$ENQ),
						 .DEQ(imem_xactor_f_wr_data$DEQ),
						 .CLR(imem_xactor_f_wr_data$CLR),
						 .D_OUT(imem_xactor_f_wr_data$D_OUT),
						 .FULL_N(),
						 .EMPTY_N(imem_xactor_f_wr_data$EMPTY_N));

  // submodule imem_xactor_f_wr_resp
  FIFOL1 #(.width(32'd16)) imem_xactor_f_wr_resp(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(imem_xactor_f_wr_resp$D_IN),
						 .ENQ(imem_xactor_f_wr_resp$ENQ),
						 .DEQ(imem_xactor_f_wr_resp$DEQ),
						 .CLR(imem_xactor_f_wr_resp$CLR),
						 .D_OUT(),
						 .FULL_N(imem_xactor_f_wr_resp$FULL_N),
						 .EMPTY_N());

  // submodule riscv
  mkriscv riscv(.reset_vector(reset_vector),
		.CLK(CLK),
		.RST_N(RST_N),
		.boot_sequence_bootseq(riscv$boot_sequence_bootseq),
		.change_keys_change(riscv$change_keys_change),
		.clint_msip_intrpt(riscv$clint_msip_intrpt),
		.clint_mtime_c_mtime(riscv$clint_mtime_c_mtime),
		.clint_mtip_intrpt(riscv$clint_mtip_intrpt),
		.instruction_response_from_imem_x(riscv$instruction_response_from_imem_x),
		.prediction_response_put(riscv$prediction_response_put),
		.read_debug_fgpr_r(riscv$read_debug_fgpr_r),
		.read_debug_igpr_r(riscv$read_debug_igpr_r),
		.remap_start_rm_flag(riscv$remap_start_rm_flag),
		.response_from_dmem_put(riscv$response_from_dmem_put),
		.rw_csr_data(riscv$rw_csr_data),
		.rw_csr_r(riscv$rw_csr_r),
		.rw_csr_write(riscv$rw_csr_write),
		.set_external_interrupt_i(riscv$set_external_interrupt_i),
		.write_debug_fgpr_d(riscv$write_debug_fgpr_d),
		.write_debug_fgpr_r(riscv$write_debug_fgpr_r),
		.write_debug_igpr_d(riscv$write_debug_igpr_d),
		.write_debug_igpr_r(riscv$write_debug_igpr_r),
		.EN_request_to_imem_get(riscv$EN_request_to_imem_get),
		.EN_instruction_response_from_imem(riscv$EN_instruction_response_from_imem),
		.EN_prediction_response_put(riscv$EN_prediction_response_put),
		.EN_send_prediction_request_get(riscv$EN_send_prediction_request_get),
		.EN_request_to_dmem_get(riscv$EN_request_to_dmem_get),
		.EN_response_from_dmem_put(riscv$EN_response_from_dmem_put),
		.EN_set_external_interrupt(riscv$EN_set_external_interrupt),
		.EN_change_keys(riscv$EN_change_keys),
		.EN_remap_start(riscv$EN_remap_start),
		.EN_write_debug_igpr(riscv$EN_write_debug_igpr),
		.EN_write_debug_fgpr(riscv$EN_write_debug_fgpr),
		.EN_reset(riscv$EN_reset),
		.EN_run_continue(riscv$EN_run_continue),
		.EN_stop(riscv$EN_stop),
		.EN_rw_csr(riscv$EN_rw_csr),
		.EN_clint_msip(riscv$EN_clint_msip),
		.EN_clint_mtip(riscv$EN_clint_mtip),
		.EN_clint_mtime(riscv$EN_clint_mtime),
		.request_to_imem_get(riscv$request_to_imem_get),
		.RDY_request_to_imem_get(riscv$RDY_request_to_imem_get),
		.RDY_instruction_response_from_imem(riscv$RDY_instruction_response_from_imem),
		.RDY_prediction_response_put(riscv$RDY_prediction_response_put),
		.send_prediction_request_get(riscv$send_prediction_request_get),
		.RDY_send_prediction_request_get(),
		.training_data(riscv$training_data),
		.RDY_training_data(),
		.request_to_dmem_get(riscv$request_to_dmem_get),
		.RDY_request_to_dmem_get(riscv$RDY_request_to_dmem_get),
		.RDY_response_from_dmem_put(),
		.flush_dmem(riscv$flush_dmem),
		.RDY_flush_dmem(),
		.RDY_set_external_interrupt(riscv$RDY_set_external_interrupt),
		.address_keys(riscv$address_keys),
		.RDY_address_keys(),
		.data_keys(riscv$data_keys),
		.RDY_data_keys(),
		.RDY_change_keys(),
		.RDY_remap_start(riscv$RDY_remap_start),
		.send_satp(riscv$send_satp),
		.RDY_send_satp(),
		.perm_to_TLB(riscv$perm_to_TLB),
		.RDY_perm_to_TLB(),
		.mmu_cache_disable(riscv$mmu_cache_disable),
		.RDY_mmu_cache_disable(),
		.fence_tlbs(riscv$fence_tlbs),
		.RDY_fence_tlbs(riscv$RDY_fence_tlbs),
		.read_debug_igpr(riscv$read_debug_igpr),
		.RDY_read_debug_igpr(),
		.RDY_write_debug_igpr(riscv$RDY_write_debug_igpr),
		.read_debug_fgpr(riscv$read_debug_fgpr),
		.RDY_read_debug_fgpr(),
		.RDY_write_debug_fgpr(riscv$RDY_write_debug_fgpr),
		.RDY_reset(),
		.RDY_run_continue(),
		.reset_complete(riscv$reset_complete),
		.RDY_reset_complete(),
		.RDY_stop(),
		.halted(riscv$halted),
		.RDY_halted(),
		.rw_csr(riscv$rw_csr),
		.RDY_rw_csr(riscv$RDY_rw_csr),
		.RDY_clint_msip(),
		.RDY_clint_mtip(),
		.RDY_clint_mtime());

  // rule RL_connect_training
  assign CAN_FIRE_RL_connect_training = imem$RDY_training ;
  assign WILL_FIRE_RL_connect_training = imem$RDY_training ;

  // rule RL_send_permissions_to_tlb
  assign CAN_FIRE_RL_send_permissions_to_tlb = ptw_rg_ptw_state == 3'd0 ;
  assign WILL_FIRE_RL_send_permissions_to_tlb =
	     CAN_FIRE_RL_send_permissions_to_tlb ;

  // rule RL_rl_remap_start
  assign CAN_FIRE_RL_rl_remap_start = riscv$RDY_remap_start ;
  assign WILL_FIRE_RL_rl_remap_start = riscv$RDY_remap_start ;

  // rule RL_send_pte_pointer
  assign CAN_FIRE_RL_send_pte_pointer = ptw_rg_ptw_state == 3'd4 ;
  assign WILL_FIRE_RL_send_pte_pointer = CAN_FIRE_RL_send_pte_pointer ;

  // rule RL_fence_stall_icache
  assign CAN_FIRE_RL_fence_stall_icache = 1'd1 ;
  assign WILL_FIRE_RL_fence_stall_icache = 1'd1 ;

  // rule RL_check_read_request_to_memory_from_dcache
  assign CAN_FIRE_RL_check_read_request_to_memory_from_dcache =
	     dmem$RDY_request_to_memory_read && dmem_xactor_f_rd_addr$FULL_N ;
  assign WILL_FIRE_RL_check_read_request_to_memory_from_dcache =
	     CAN_FIRE_RL_check_read_request_to_memory_from_dcache ;

  // rule RL_send_burst_write_data
  assign CAN_FIRE_RL_send_burst_write_data =
	     dmem_xactor_f_wr_data$FULL_N && rg_data_line[256] ;
  assign WILL_FIRE_RL_send_burst_write_data =
	     CAN_FIRE_RL_send_burst_write_data ;

  // rule RL_check_read_request_to_memory_from_icache
  assign CAN_FIRE_RL_check_read_request_to_memory_from_icache =
	     imem$RDY_request_to_memory && imem_xactor_f_rd_addr$FULL_N ;
  assign WILL_FIRE_RL_check_read_request_to_memory_from_icache =
	     CAN_FIRE_RL_check_read_request_to_memory_from_icache ;

  // rule RL_send_read_response_from_memory_to_dcache
  assign CAN_FIRE_RL_send_read_response_from_memory_to_dcache =
	     dmem$RDY_response_from_memory_read &&
	     dmem_xactor_f_rd_data$EMPTY_N &&
	     dmem_xactor_f_rd_data$D_OUT[3:0] == 4'd0 ;
  assign WILL_FIRE_RL_send_read_response_from_memory_to_dcache =
	     CAN_FIRE_RL_send_read_response_from_memory_to_dcache ;

  // rule RL_send_read_response_from_memory_to_icache
  assign CAN_FIRE_RL_send_read_response_from_memory_to_icache =
	     imem$RDY_response_from_memory && imem_xactor_f_rd_data$EMPTY_N &&
	     imem_xactor_f_rd_data$D_OUT[3:0] == 4'd1 ;
  assign WILL_FIRE_RL_send_read_response_from_memory_to_icache =
	     CAN_FIRE_RL_send_read_response_from_memory_to_icache ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     imem$RDY_request_from_core_put && riscv$RDY_request_to_imem_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf =
	     riscv$RDY_instruction_response_from_imem ;
  assign WILL_FIRE_RL_mkConnectionVtoAf =
	     riscv$RDY_instruction_response_from_imem ;

  // rule RL_mkConnectionGetPut_3
  assign CAN_FIRE_RL_mkConnectionGetPut_3 =
	     imem$RDY_prediction_response_get &&
	     riscv$RDY_prediction_response_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_3 =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // rule RL_mkConnectionGetPut_4
  assign CAN_FIRE_RL_mkConnectionGetPut_4 =
	     imem$RDY_send_prediction_request_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_4 =
	     imem$RDY_send_prediction_request_put ;

  // rule RL_send_write_response_to_dcache
  assign CAN_FIRE_RL_send_write_response_to_dcache =
	     dmem$RDY_response_from_memory_write &&
	     dmem_xactor_f_wr_resp$EMPTY_N &&
	     rg_wait_for_response &&
	     dmem_xactor_f_wr_resp$D_OUT[3:0] == 4'd0 ;
  assign WILL_FIRE_RL_send_write_response_to_dcache =
	     CAN_FIRE_RL_send_write_response_to_dcache ;

  // rule RL_check_write_request_to_memory_from_dcache
  assign CAN_FIRE_RL_check_write_request_to_memory_from_dcache =
	     dmem$RDY_request_to_memory_write &&
	     dmem_xactor_f_wr_addr$FULL_N &&
	     dmem_xactor_f_wr_data$FULL_N &&
	     !rg_data_line[256] &&
	     !rg_wait_for_response$port1__read ;
  assign WILL_FIRE_RL_check_write_request_to_memory_from_dcache =
	     CAN_FIRE_RL_check_write_request_to_memory_from_dcache ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     dmem$RDY_request_from_cpu_put && riscv$RDY_request_to_dmem_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_mkConnectionGetPut_2
  assign CAN_FIRE_RL_mkConnectionGetPut_2 = dmem$RDY_response_to_cpu_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_2 = dmem$RDY_response_to_cpu_get ;

  // rule RL_get_pte_entry
  assign CAN_FIRE_RL_get_pte_entry = dmem$RDY_send_pte ;
  assign WILL_FIRE_RL_get_pte_entry = dmem$RDY_send_pte ;

  // rule RL_send_pte_entry
  assign CAN_FIRE_RL_send_pte_entry =
	     ptw_rg_ptw_state == 3'd2 && dmem$RDY_send_pte ;
  assign WILL_FIRE_RL_send_pte_entry = CAN_FIRE_RL_send_pte_entry ;

  // rule RL_fence_tlbs
  assign CAN_FIRE_RL_fence_tlbs = riscv$RDY_fence_tlbs ;
  assign WILL_FIRE_RL_fence_tlbs = riscv$RDY_fence_tlbs ;

  // rule RL_ptw_to_itlb
  assign CAN_FIRE_RL_ptw_to_itlb =
	     ptw_rg_ptw_state == 3'd3 && imem$RDY_refill_TLB_put &&
	     !rg_serve_dTLB ;
  assign WILL_FIRE_RL_ptw_to_itlb = CAN_FIRE_RL_ptw_to_itlb ;

  // rule RL_ptw_to_dtlb
  assign CAN_FIRE_RL_ptw_to_dtlb =
	     ptw_rg_ptw_state == 3'd3 && dmem$RDY_refill_TLB_put &&
	     rg_serve_dTLB ;
  assign WILL_FIRE_RL_ptw_to_dtlb = CAN_FIRE_RL_ptw_to_dtlb ;

  // rule RL_itlb_to_ptw
  assign CAN_FIRE_RL_itlb_to_ptw =
	     ptw_rg_ptw_state == 3'd0 && imem$RDY_to_PTW_get ;
  assign WILL_FIRE_RL_itlb_to_ptw =
	     CAN_FIRE_RL_itlb_to_ptw && !WILL_FIRE_RL_dtlb_to_ptw ;

  // rule RL_dtlb_to_ptw
  assign CAN_FIRE_RL_dtlb_to_ptw =
	     ptw_rg_ptw_state == 3'd0 && dmem$RDY_to_PTW_get ;
  assign WILL_FIRE_RL_dtlb_to_ptw = CAN_FIRE_RL_dtlb_to_ptw ;

  // rule RL_connect_flush_to_dmem
  assign CAN_FIRE_RL_connect_flush_to_dmem = 1'd1 ;
  assign WILL_FIRE_RL_connect_flush_to_dmem = 1'd1 ;

  // rule RL_rl_send_keys_to_dmem
  assign CAN_FIRE_RL_rl_send_keys_to_dmem = 1'd1 ;
  assign WILL_FIRE_RL_rl_send_keys_to_dmem = 1'd1 ;

  // rule RL_rl_change_keys
  assign CAN_FIRE_RL_rl_change_keys = 1'd1 ;
  assign WILL_FIRE_RL_rl_change_keys = 1'd1 ;

  // rule RL_ptw_rl_computer_next_pointer
  assign CAN_FIRE_RL_ptw_rl_computer_next_pointer = ptw_rg_ptw_state == 3'd1 ;
  assign WILL_FIRE_RL_ptw_rl_computer_next_pointer =
	     CAN_FIRE_RL_ptw_rl_computer_next_pointer ;

  // rule RL_ptw_rl_return_from_page_fault
  assign CAN_FIRE_RL_ptw_rl_return_from_page_fault = 1'b0 ;
  assign WILL_FIRE_RL_ptw_rl_return_from_page_fault = 1'b0 ;

  // inputs to muxes for submodule ports
  assign MUX_ptw_rg_levels$write_1__SEL_2 =
	     WILL_FIRE_RL_ptw_to_dtlb || WILL_FIRE_RL_ptw_to_itlb ;
  assign MUX_ptw_rg_page_fault$write_1__SEL_2 =
	     WILL_FIRE_RL_send_pte_entry && ptw_rg_levels == 32'd0 &&
	     (!dmem$send_pte[0] || !dmem$send_pte[6] ||
	      ptw_rg_page_type == 2'd1 && !dmem$send_pte[7]) ;
  assign MUX_ptw_rg_pte$write_1__SEL_1 =
	     WILL_FIRE_RL_ptw_rl_computer_next_pointer &&
	     ptw_rg_pte_BIT_0_1_AND_ptw_rg_pte_BIT_1_6_OR_N_ETC___d58 ;
  assign MUX_ptw_rg_ptw_state$port1__write_1__SEL_4 =
	     WILL_FIRE_RL_itlb_to_ptw || WILL_FIRE_RL_dtlb_to_ptw ;
  assign MUX_rg_burst_count$write_1__SEL_1 =
	     WILL_FIRE_RL_check_write_request_to_memory_from_dcache &&
	     !dmem_request_to_memory_write_19_BITS_268_TO_26_ETC___d337 ;
  assign MUX_dmem_xactor_f_wr_data$enq_1__VAL_1 =
	     { dmem$request_to_memory_write[63:0],
	       w_wstrb__h8083,
	       4'd0,
	       dmem_request_to_memory_write_19_BITS_268_TO_26_ETC___d337 } ;
  assign MUX_dmem_xactor_f_wr_data$enq_1__VAL_2 =
	     { rg_data_line[63:0], 12'd4080, rg_burst_count == 8'd3 } ;
  assign MUX_ptw_rg_levels$write_1__VAL_1 =
	     (ptw_rg_levels == 32'd0) ? 32'd2 : ptw_rg_levels - 32'd1 ;
  assign MUX_ptw_rg_pte$write_1__VAL_1 = { 10'd0, x__h3204 } ;
  assign MUX_ptw_rg_pte$write_1__VAL_2 = { 10'd0, pte__h6558 } ;
  assign MUX_ptw_rg_ptw_state$port1__write_1__VAL_1 =
	     (!ptw_rg_pte[0] || ptw_rg_pte[2] || ptw_rg_pte[3] ||
	      ptw_rg_pte[1]) ?
	       3'd3 :
	       3'd4 ;
  assign MUX_ptw_rg_ptw_state$port1__write_1__VAL_2 =
	     (ptw_rg_levels == 32'd0) ? 3'd3 : 3'd1 ;
  assign MUX_rg_burst_count$write_1__VAL_2 =
	     (rg_burst_count == 8'd3) ? 8'd0 : x__h8482 ;
  assign MUX_rg_data_line$write_1__VAL_1 =
	     { 65'h10000000000000000, dmem$request_to_memory_write[255:64] } ;
  assign MUX_rg_data_line$write_1__VAL_2 =
	     (rg_burst_count == 8'd3) ?
	       { 1'd0,
		 256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  } :
	       { 65'h10000000000000000, rg_data_line[255:64] } ;

  // inlined wires
  assign ptw_rg_asid$port1__read =
	     (ptw_rg_ptw_state == 3'd0) ?
	       riscv$send_satp[51:44] :
	       ptw_rg_asid ;
  assign ptw_rg_ptw_state$EN_port1__write =
	     WILL_FIRE_RL_ptw_rl_computer_next_pointer ||
	     WILL_FIRE_RL_send_pte_entry ||
	     WILL_FIRE_RL_ptw_to_dtlb ||
	     WILL_FIRE_RL_ptw_to_itlb ||
	     WILL_FIRE_RL_itlb_to_ptw ||
	     WILL_FIRE_RL_dtlb_to_ptw ||
	     WILL_FIRE_RL_send_pte_pointer ;
  always@(WILL_FIRE_RL_ptw_rl_computer_next_pointer or
	  MUX_ptw_rg_ptw_state$port1__write_1__VAL_1 or
	  WILL_FIRE_RL_send_pte_entry or
	  MUX_ptw_rg_ptw_state$port1__write_1__VAL_2 or
	  MUX_ptw_rg_levels$write_1__SEL_2 or
	  MUX_ptw_rg_ptw_state$port1__write_1__SEL_4 or
	  WILL_FIRE_RL_send_pte_pointer)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ptw_rl_computer_next_pointer:
	  ptw_rg_ptw_state$port1__write_1 =
	      MUX_ptw_rg_ptw_state$port1__write_1__VAL_1;
      WILL_FIRE_RL_send_pte_entry:
	  ptw_rg_ptw_state$port1__write_1 =
	      MUX_ptw_rg_ptw_state$port1__write_1__VAL_2;
      MUX_ptw_rg_levels$write_1__SEL_2:
	  ptw_rg_ptw_state$port1__write_1 = 3'd0;
      MUX_ptw_rg_ptw_state$port1__write_1__SEL_4:
	  ptw_rg_ptw_state$port1__write_1 = 3'd1;
      WILL_FIRE_RL_send_pte_pointer: ptw_rg_ptw_state$port1__write_1 = 3'd2;
      default: ptw_rg_ptw_state$port1__write_1 =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign ptw_rg_ptw_state$port2__read =
	     ptw_rg_ptw_state$EN_port1__write ?
	       ptw_rg_ptw_state$port1__write_1 :
	       ptw_rg_ptw_state ;
  assign rg_wait_for_response$port1__read =
	     !CAN_FIRE_RL_send_write_response_to_dcache &&
	     rg_wait_for_response ;
  assign rg_wait_for_response$port2__read =
	     CAN_FIRE_RL_check_write_request_to_memory_from_dcache ||
	     rg_wait_for_response$port1__read ;

  // register ptw_rg_asid
  assign ptw_rg_asid$D_IN = ptw_rg_asid$port1__read ;
  assign ptw_rg_asid$EN = 1'b1 ;

  // register ptw_rg_levels
  assign ptw_rg_levels$D_IN =
	     WILL_FIRE_RL_send_pte_entry ?
	       MUX_ptw_rg_levels$write_1__VAL_1 :
	       32'd2 ;
  assign ptw_rg_levels$EN =
	     WILL_FIRE_RL_send_pte_entry || WILL_FIRE_RL_ptw_to_dtlb ||
	     WILL_FIRE_RL_ptw_to_itlb ;

  // register ptw_rg_page_fault
  assign ptw_rg_page_fault$D_IN = !MUX_ptw_rg_levels$write_1__SEL_2 ;
  assign ptw_rg_page_fault$EN =
	     WILL_FIRE_RL_ptw_rl_computer_next_pointer &&
	     NOT_ptw_rg_pte_BIT_0_1_2_OR_NOT_ptw_rg_pte_BIT_ETC___d49 ||
	     MUX_ptw_rg_page_fault$write_1__SEL_2 ||
	     WILL_FIRE_RL_ptw_to_dtlb ||
	     WILL_FIRE_RL_ptw_to_itlb ;

  // register ptw_rg_page_type
  assign ptw_rg_page_type$D_IN =
	     WILL_FIRE_RL_itlb_to_ptw ?
	       imem$to_PTW_get[28:27] :
	       dmem$to_PTW_get[28:27] ;
  assign ptw_rg_page_type$EN = MUX_ptw_rg_ptw_state$port1__write_1__SEL_4 ;

  // register ptw_rg_permission_bits
  assign ptw_rg_permission_bits$D_IN = ptw_rg_pte[9:0] ;
  assign ptw_rg_permission_bits$EN =
	     CAN_FIRE_RL_ptw_rl_computer_next_pointer ;

  // register ptw_rg_ppn
  assign ptw_rg_ppn$D_IN = ptw_rg_ppn ;
  assign ptw_rg_ppn$EN = 1'b1 ;

  // register ptw_rg_pte
  always@(MUX_ptw_rg_pte$write_1__SEL_1 or
	  MUX_ptw_rg_pte$write_1__VAL_1 or
	  WILL_FIRE_RL_send_permissions_to_tlb or
	  MUX_ptw_rg_pte$write_1__VAL_2 or
	  WILL_FIRE_RL_send_pte_entry or dmem$send_pte)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ptw_rg_pte$write_1__SEL_1:
	  ptw_rg_pte$D_IN = MUX_ptw_rg_pte$write_1__VAL_1;
      WILL_FIRE_RL_send_permissions_to_tlb:
	  ptw_rg_pte$D_IN = MUX_ptw_rg_pte$write_1__VAL_2;
      WILL_FIRE_RL_send_pte_entry: ptw_rg_pte$D_IN = dmem$send_pte;
      default: ptw_rg_pte$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ptw_rg_pte$EN =
	     WILL_FIRE_RL_ptw_rl_computer_next_pointer &&
	     ptw_rg_pte_BIT_0_1_AND_ptw_rg_pte_BIT_1_6_OR_N_ETC___d58 ||
	     WILL_FIRE_RL_send_permissions_to_tlb ||
	     WILL_FIRE_RL_send_pte_entry ;

  // register ptw_rg_pte_pointer
  assign ptw_rg_pte_pointer$D_IN = { 8'd0, lv_pte_pointer__h2814 } ;
  assign ptw_rg_pte_pointer$EN =
	     WILL_FIRE_RL_ptw_rl_computer_next_pointer && ptw_rg_pte[0] &&
	     !ptw_rg_pte[2] &&
	     !ptw_rg_pte[3] &&
	     !ptw_rg_pte[1] ;

  // register ptw_rg_ptw_state
  assign ptw_rg_ptw_state$D_IN = ptw_rg_ptw_state$port2__read ;
  assign ptw_rg_ptw_state$EN = 1'b1 ;

  // register ptw_rg_satp
  assign ptw_rg_satp$D_IN = 64'h0 ;
  assign ptw_rg_satp$EN = 1'b0 ;

  // register ptw_rg_vpn
  assign ptw_rg_vpn$D_IN =
	     WILL_FIRE_RL_itlb_to_ptw ?
	       imem$to_PTW_get[26:0] :
	       dmem$to_PTW_get[26:0] ;
  assign ptw_rg_vpn$EN = MUX_ptw_rg_ptw_state$port1__write_1__SEL_4 ;

  // register rg_burst_count
  assign rg_burst_count$D_IN =
	     MUX_rg_burst_count$write_1__SEL_1 ?
	       x__h8482 :
	       MUX_rg_burst_count$write_1__VAL_2 ;
  assign rg_burst_count$EN =
	     WILL_FIRE_RL_check_write_request_to_memory_from_dcache &&
	     !dmem_request_to_memory_write_19_BITS_268_TO_26_ETC___d337 ||
	     WILL_FIRE_RL_send_burst_write_data ;

  // register rg_data_line
  assign rg_data_line$D_IN =
	     MUX_rg_burst_count$write_1__SEL_1 ?
	       MUX_rg_data_line$write_1__VAL_1 :
	       MUX_rg_data_line$write_1__VAL_2 ;
  assign rg_data_line$EN =
	     WILL_FIRE_RL_check_write_request_to_memory_from_dcache &&
	     !dmem_request_to_memory_write_19_BITS_268_TO_26_ETC___d337 ||
	     WILL_FIRE_RL_send_burst_write_data ;

  // register rg_serve_dTLB
  assign rg_serve_dTLB$D_IN = !WILL_FIRE_RL_itlb_to_ptw ;
  assign rg_serve_dTLB$EN = MUX_ptw_rg_ptw_state$port1__write_1__SEL_4 ;

  // register rg_update_a_bit
  assign rg_update_a_bit$D_IN = 1'b0 ;
  assign rg_update_a_bit$EN = 1'b0 ;

  // register rg_update_b_bit
  assign rg_update_b_bit$D_IN = 1'b0 ;
  assign rg_update_b_bit$EN = 1'b0 ;

  // register rg_wait_for_response
  assign rg_wait_for_response$D_IN = rg_wait_for_response$port2__read ;
  assign rg_wait_for_response$EN = 1'b1 ;

  // submodule dmem
  assign dmem$address_keys_addr_keys = riscv$address_keys ;
  assign dmem$data_keys_keys = riscv$data_keys ;
  assign dmem$fence_dtlb_rsdata = riscv$fence_tlbs ;
  assign dmem$get_pte_pointer_pte =
	     { 1'd0, ptw_rg_page_type, ptw_rg_pte_pointer } ;
  assign dmem$refill_TLB_put =
	     { ptw_rg_page_fault,
	       ptw_rg_pte[29:10],
	       ptw_rg_pte_BIT_0_1_CONCAT_ptw_rg_pte_BIT_1_6_C_ETC___d223 } ;
  assign dmem$request_from_cpu_put = riscv$request_to_dmem_get ;
  assign dmem$response_from_memory_read_resp =
	     { dmem_xactor_f_rd_data$D_OUT[78:15],
	       resp_bus_error__h8670,
	       dmem_xactor_f_rd_data$D_OUT[14] } ;
  assign dmem$response_from_memory_write_resp =
	     { 64'd0, resp_bus_error__h8901, 1'd1 } ;
  assign dmem$translation_protection_frm_csr_asid = riscv$send_satp[63:52] ;
  assign dmem$translation_protection_frm_csr_per_bits =
	     { riscv$perm_to_TLB[6:4],
	       CASE_riscvperm_to_TLB_BITS_3_TO_2_0_riscvper_ETC__q4,
	       CASE_riscvperm_to_TLB_BITS_1_TO_0_0_riscvper_ETC__q5 } ;
  assign dmem$translation_protection_frm_csr_tlb_disable =
	     riscv$mmu_cache_disable[0] ;
  assign dmem$EN_request_from_cpu_put = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign dmem$EN_response_to_cpu_get = dmem$RDY_response_to_cpu_get ;
  assign dmem$EN_flush = riscv$flush_dmem ;
  assign dmem$EN_request_to_memory_read =
	     CAN_FIRE_RL_check_read_request_to_memory_from_dcache ;
  assign dmem$EN_request_to_memory_write =
	     CAN_FIRE_RL_check_write_request_to_memory_from_dcache ;
  assign dmem$EN_response_from_memory_read =
	     CAN_FIRE_RL_send_read_response_from_memory_to_dcache ;
  assign dmem$EN_response_from_memory_write =
	     CAN_FIRE_RL_send_write_response_to_dcache ;
  assign dmem$EN_translation_protection_frm_csr =
	     CAN_FIRE_RL_send_permissions_to_tlb ;
  assign dmem$EN_to_PTW_get = CAN_FIRE_RL_dtlb_to_ptw ;
  assign dmem$EN_refill_TLB_put = CAN_FIRE_RL_ptw_to_dtlb ;
  assign dmem$EN_get_pte_pointer = CAN_FIRE_RL_send_pte_pointer ;
  assign dmem$EN_fence_dtlb = riscv$RDY_fence_tlbs ;
  assign dmem$EN_send_pte = dmem$RDY_send_pte ;
  assign dmem$EN_address_keys = 1'd1 ;
  assign dmem$EN_data_keys = 1'd1 ;
  assign dmem$EN_change_keys = 1'd1 ;
  assign dmem$EN_remap_start = riscv$RDY_remap_start ;

  // submodule dmem_xactor_f_rd_addr
  assign dmem_xactor_f_rd_addr$D_IN =
	     { dmem$request_to_memory_read[44:13],
	       13'd0,
	       x_arlen__h7856,
	       dmem$request_to_memory_read[2:0],
	       x_arburst__h7858,
	       17'd0 } ;
  assign dmem_xactor_f_rd_addr$ENQ =
	     CAN_FIRE_RL_check_read_request_to_memory_from_dcache ;
  assign dmem_xactor_f_rd_addr$DEQ =
	     dmem_xactor_f_rd_addr$EMPTY_N && dmem_master_m_arready_arready ;
  assign dmem_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule dmem_xactor_f_rd_data
  assign dmem_xactor_f_rd_data$D_IN =
	     { dmem_master_m_rvalid_rresp,
	       dmem_master_m_rvalid_rdata,
	       dmem_master_m_rvalid_rlast,
	       dmem_master_m_rvalid_ruser,
	       dmem_master_m_rvalid_rid } ;
  assign dmem_xactor_f_rd_data$ENQ =
	     dmem_master_m_rvalid_rvalid && dmem_xactor_f_rd_data$FULL_N ;
  assign dmem_xactor_f_rd_data$DEQ =
	     CAN_FIRE_RL_send_read_response_from_memory_to_dcache ;
  assign dmem_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule dmem_xactor_f_wr_addr
  assign dmem_xactor_f_wr_addr$D_IN =
	     { dmem$request_to_memory_write[300:269],
	       13'd0,
	       x_awlen__h8012,
	       dmem$request_to_memory_write[258:256],
	       19'd131072 } ;
  assign dmem_xactor_f_wr_addr$ENQ =
	     CAN_FIRE_RL_check_write_request_to_memory_from_dcache ;
  assign dmem_xactor_f_wr_addr$DEQ =
	     dmem_xactor_f_wr_addr$EMPTY_N && dmem_master_m_awready_awready ;
  assign dmem_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule dmem_xactor_f_wr_data
  assign dmem_xactor_f_wr_data$D_IN =
	     WILL_FIRE_RL_check_write_request_to_memory_from_dcache ?
	       MUX_dmem_xactor_f_wr_data$enq_1__VAL_1 :
	       MUX_dmem_xactor_f_wr_data$enq_1__VAL_2 ;
  assign dmem_xactor_f_wr_data$ENQ =
	     WILL_FIRE_RL_check_write_request_to_memory_from_dcache ||
	     WILL_FIRE_RL_send_burst_write_data ;
  assign dmem_xactor_f_wr_data$DEQ =
	     dmem_xactor_f_wr_data$EMPTY_N && dmem_master_m_wready_wready ;
  assign dmem_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule dmem_xactor_f_wr_resp
  assign dmem_xactor_f_wr_resp$D_IN =
	     { dmem_master_m_bvalid_bresp,
	       dmem_master_m_bvalid_buser,
	       dmem_master_m_bvalid_bid } ;
  assign dmem_xactor_f_wr_resp$ENQ =
	     dmem_master_m_bvalid_bvalid && dmem_xactor_f_wr_resp$FULL_N ;
  assign dmem_xactor_f_wr_resp$DEQ =
	     CAN_FIRE_RL_send_write_response_to_dcache ;
  assign dmem_xactor_f_wr_resp$CLR = 1'b0 ;

  // submodule imem
  assign imem$fence_itlb_rsdata = riscv$fence_tlbs ;
  assign imem$flush__flush = 2'h0 ;
  assign imem$refill_TLB_put =
	     { ptw_rg_page_fault,
	       ptw_rg_pte[29:10],
	       ptw_rg_pte_BIT_0_1_CONCAT_ptw_rg_pte_BIT_1_6_C_ETC___d223 } ;
  assign imem$request_from_core_put = riscv$request_to_imem_get ;
  assign imem$response_from_memory_mem_data =
	     { imem_xactor_f_rd_data$D_OUT[78:15],
	       mem_data_bus_error__h8779,
	       imem_xactor_f_rd_data$D_OUT[14] } ;
  assign imem$send_prediction_request_put =
	     riscv$send_prediction_request_get ;
  assign imem$stall_fetch_stall = dmem$stall_fetch ;
  assign imem$training_training_data = riscv$training_data ;
  assign imem$translation_protection_frm_csr_asid = riscv$send_satp[63:52] ;
  assign imem$translation_protection_frm_csr_per_bits =
	     { riscv$perm_to_TLB[6:4],
	       CASE_riscvperm_to_TLB_BITS_3_TO_2_0_riscvper_ETC__q4,
	       CASE_riscvperm_to_TLB_BITS_1_TO_0_0_riscvper_ETC__q5 } ;
  assign imem$translation_protection_frm_csr_tlb_disable =
	     riscv$mmu_cache_disable[0] ;
  assign imem$EN_request_from_core_put = CAN_FIRE_RL_mkConnectionGetPut ;
  assign imem$EN_flush = 1'b0 ;
  assign imem$EN_stall_fetch = 1'd1 ;
  assign imem$EN_response_from_memory =
	     CAN_FIRE_RL_send_read_response_from_memory_to_icache ;
  assign imem$EN_request_to_memory =
	     CAN_FIRE_RL_check_read_request_to_memory_from_icache ;
  assign imem$EN_prediction_response_get = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign imem$EN_training = imem$RDY_training ;
  assign imem$EN_send_prediction_request_put =
	     imem$RDY_send_prediction_request_put ;
  assign imem$EN_translation_protection_frm_csr =
	     CAN_FIRE_RL_send_permissions_to_tlb ;
  assign imem$EN_to_PTW_get = WILL_FIRE_RL_itlb_to_ptw ;
  assign imem$EN_refill_TLB_put = CAN_FIRE_RL_ptw_to_itlb ;
  assign imem$EN_fence_itlb = riscv$RDY_fence_tlbs ;
  assign imem$EN_prefetch = 1'b0 ;

  // submodule imem_xactor_f_rd_addr
  assign imem_xactor_f_rd_addr$D_IN =
	     { imem$request_to_memory[44:13],
	       13'd0,
	       x_arlen__h8543,
	       imem$request_to_memory[2:0],
	       19'd262145 } ;
  assign imem_xactor_f_rd_addr$ENQ =
	     CAN_FIRE_RL_check_read_request_to_memory_from_icache ;
  assign imem_xactor_f_rd_addr$DEQ =
	     imem_xactor_f_rd_addr$EMPTY_N && imem_master_m_arready_arready ;
  assign imem_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule imem_xactor_f_rd_data
  assign imem_xactor_f_rd_data$D_IN =
	     { imem_master_m_rvalid_rresp,
	       imem_master_m_rvalid_rdata,
	       imem_master_m_rvalid_rlast,
	       imem_master_m_rvalid_ruser,
	       imem_master_m_rvalid_rid } ;
  assign imem_xactor_f_rd_data$ENQ =
	     imem_master_m_rvalid_rvalid && imem_xactor_f_rd_data$FULL_N ;
  assign imem_xactor_f_rd_data$DEQ =
	     CAN_FIRE_RL_send_read_response_from_memory_to_icache ;
  assign imem_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule imem_xactor_f_wr_addr
  assign imem_xactor_f_wr_addr$D_IN = 75'h0 ;
  assign imem_xactor_f_wr_addr$ENQ = 1'b0 ;
  assign imem_xactor_f_wr_addr$DEQ =
	     imem_xactor_f_wr_addr$EMPTY_N && imem_master_m_awready_awready ;
  assign imem_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule imem_xactor_f_wr_data
  assign imem_xactor_f_wr_data$D_IN = 77'h0 ;
  assign imem_xactor_f_wr_data$ENQ = 1'b0 ;
  assign imem_xactor_f_wr_data$DEQ =
	     imem_xactor_f_wr_data$EMPTY_N && imem_master_m_wready_wready ;
  assign imem_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule imem_xactor_f_wr_resp
  assign imem_xactor_f_wr_resp$D_IN =
	     { imem_master_m_bvalid_bresp,
	       imem_master_m_bvalid_buser,
	       imem_master_m_bvalid_bid } ;
  assign imem_xactor_f_wr_resp$ENQ =
	     imem_master_m_bvalid_bvalid && imem_xactor_f_wr_resp$FULL_N ;
  assign imem_xactor_f_wr_resp$DEQ = 1'b0 ;
  assign imem_xactor_f_wr_resp$CLR = 1'b0 ;

  // submodule riscv
  assign riscv$boot_sequence_bootseq = boot_sequence_bootseq ;
  assign riscv$change_keys_change = dmem$change_keys ;
  assign riscv$clint_msip_intrpt = clint_msip_intrpt ;
  assign riscv$clint_mtime_c_mtime = clint_mtime_c_mtime ;
  assign riscv$clint_mtip_intrpt = clint_mtip_intrpt ;
  assign riscv$instruction_response_from_imem_x =
	     { imem$instruction_response_to_core[185:73],
	       CASE_imeminstruction_response_to_core_BITS_72_ETC__q8,
	       imem$instruction_response_to_core[66:0] } ;
  assign riscv$prediction_response_put = imem$prediction_response_get ;
  assign riscv$read_debug_fgpr_r = read_fgpr_r ;
  assign riscv$read_debug_igpr_r = read_igpr_r ;
  assign riscv$remap_start_rm_flag = dmem$remap_start ;
  assign riscv$response_from_dmem_put =
	     { dmem$response_to_cpu_get[135:71],
	       CASE_dmemresponse_to_cpu_get_BITS_70_TO_69_0__ETC__q11,
	       dmem$response_to_cpu_get[64:0] } ;
  assign riscv$rw_csr_data = rw_csr_data ;
  assign riscv$rw_csr_r = rw_csr_r ;
  assign riscv$rw_csr_write = rw_csr_write ;
  assign riscv$set_external_interrupt_i = set_external_interrupt_i ;
  assign riscv$write_debug_fgpr_d = write_fgpr_d ;
  assign riscv$write_debug_fgpr_r = write_fgpr_r ;
  assign riscv$write_debug_igpr_d = write_igpr_d ;
  assign riscv$write_debug_igpr_r = write_igpr_r ;
  assign riscv$EN_request_to_imem_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign riscv$EN_instruction_response_from_imem =
	     riscv$RDY_instruction_response_from_imem ;
  assign riscv$EN_prediction_response_put = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign riscv$EN_send_prediction_request_get =
	     imem$RDY_send_prediction_request_put ;
  assign riscv$EN_request_to_dmem_get = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign riscv$EN_response_from_dmem_put = dmem$RDY_response_to_cpu_get ;
  assign riscv$EN_set_external_interrupt = EN_set_external_interrupt ;
  assign riscv$EN_change_keys = 1'd1 ;
  assign riscv$EN_remap_start = riscv$RDY_remap_start ;
  assign riscv$EN_write_debug_igpr = EN_write_igpr ;
  assign riscv$EN_write_debug_fgpr = EN_write_fgpr ;
  assign riscv$EN_reset = EN_reset ;
  assign riscv$EN_run_continue = EN_run_continue ;
  assign riscv$EN_stop = EN_stop ;
  assign riscv$EN_rw_csr = EN_rw_csr ;
  assign riscv$EN_clint_msip = EN_clint_msip ;
  assign riscv$EN_clint_mtip = EN_clint_mtip ;
  assign riscv$EN_clint_mtime = EN_clint_mtime ;

  // remaining internal signals
  assign NOT_ptw_rg_pte_BIT_0_1_2_OR_NOT_ptw_rg_pte_BIT_ETC___d49 =
	     !ptw_rg_pte[0] || !ptw_rg_pte[1] && ptw_rg_pte[2] ||
	     (ptw_rg_pte[3] || ptw_rg_pte[1]) &&
	     (CASE_ptw_rg_levels_1_NOT_ptw_rg_pte_BITS_27_TO_ETC__q2 ||
	      !ptw_rg_pte[6] ||
	      ptw_rg_page_type == 2'd1 && !ptw_rg_pte[7]) ;
  assign dmem_request_to_memory_write_19_BITS_268_TO_26_ETC___d337 =
	     dmem$request_to_memory_write[268:261] <= 8'd1 ;
  assign lv_pte_pointer__h2814 = { ptw_rg_pte[53:10], vpn_addr__h2615 } ;
  assign lv_vpn_split__h2613 =
	     ptw_rg_vpn_AND_INV_0x7FFFFFE_SL_x004_BITS_4_TO_ETC__q1[8:0] ;
  assign mem_data_bus_error__h8779 =
	     imem_xactor_f_rd_data$D_OUT[80:79] != 2'd0 ;
  assign pte__h6558 = { riscv$send_satp[43:0], 10'b0000000001 } ;
  assign ptw_rg_levels_read__3_PLUS_1_7_MUL_9___d78 = x__h5701 * 32'd9 ;
  assign ptw_rg_pte_BIT_0_1_AND_ptw_rg_pte_BIT_1_6_OR_N_ETC___d58 =
	     ptw_rg_pte[0] && (ptw_rg_pte[1] || !ptw_rg_pte[2]) &&
	     (ptw_rg_pte[3] || ptw_rg_pte[1]) &&
	     CASE_ptw_rg_levels_1_ptw_rg_pte_BITS_27_TO_10__ETC__q3 ;
  assign ptw_rg_pte_BIT_0_1_CONCAT_ptw_rg_pte_BIT_1_6_C_ETC___d223 =
	     { ptw_rg_pte[0],
	       ptw_rg_pte[1],
	       ptw_rg_pte[2],
	       ptw_rg_pte[3],
	       ptw_rg_pte[4],
	       ptw_rg_pte[5],
	       ptw_rg_pte[6],
	       ptw_rg_pte[7],
	       ptw_rg_asid$port1__read,
	       (ptw_rg_levels == 32'd2) ? 2'd0 : x__h5701[1:0] } ;
  assign ptw_rg_vpn_AND_INV_0x7FFFFFE_SL_x004_BITS_4_TO_ETC__q1 =
	     (ptw_rg_vpn & ~(27'h7FFFFFE << x__h3004[4:0])) >> x__h3006[4:0] ;
  assign resp_bus_error__h8670 = dmem_xactor_f_rd_data$D_OUT[80:79] != 2'd0 ;
  assign resp_bus_error__h8901 = dmem_xactor_f_wr_resp$D_OUT[15:14] != 2'd0 ;
  assign step_ppn___1__h3044 = { ptw_rg_pte[53:37], ptw_rg_vpn } ;
  assign step_ppn___1__h3107 = { ptw_rg_pte[53:28], ptw_rg_vpn[17:0] } ;
  assign step_ppn___1__h3144 = { ptw_rg_pte[53:19], ptw_rg_vpn[8:0] } ;
  assign vpn_addr__h2615 = { lv_vpn_split__h2613, 3'd0 } ;
  assign w_wstrb__h8083 =
	     (dmem$request_to_memory_write[258:256] == 3'd3) ?
	       write_strobe__h7974 :
	       write_strobe___1__h8110 ;
  assign write_strobe___1__h8110 =
	     write_strobe__h7974 << dmem$request_to_memory_write[271:269] ;
  assign x__h3004 = ptw_rg_levels_read__3_PLUS_1_7_MUL_9___d78[31:0] - 32'd1 ;
  assign x__h3006 = ptw_rg_levels_read__3_PLUS_1_7_MUL_9___d78[31:0] - 32'd9 ;
  assign x__h3204 = { _theResult___snd__h3040, ptw_rg_pte[9:0] } ;
  assign x__h5701 = ptw_rg_levels + 32'd1 ;
  assign x__h8482 = rg_burst_count + 8'd1 ;
  assign x_arburst__h7858 =
	     (dmem$request_to_memory_read[12:5] == 8'd1) ? 2'd1 : 2'd2 ;
  assign x_arlen__h7856 = dmem$request_to_memory_read[12:5] - 8'd1 ;
  assign x_arlen__h8543 = imem$request_to_memory[12:5] - 8'd1 ;
  assign x_awlen__h8012 = dmem$request_to_memory_write[268:261] - 8'd1 ;
  always@(dmem$request_to_memory_write)
  begin
    case (dmem$request_to_memory_write[258:256])
      3'd0: write_strobe__h7974 = 8'b00000001;
      3'd1: write_strobe__h7974 = 8'b00000011;
      3'd2: write_strobe__h7974 = 8'h0F;
      default: write_strobe__h7974 = 8'hFF;
    endcase
  end
  always@(ptw_rg_levels or
	  step_ppn___1__h3144 or step_ppn___1__h3107 or step_ppn___1__h3044)
  begin
    case (ptw_rg_levels)
      32'd0: _theResult___snd__h3040 = step_ppn___1__h3144;
      32'd1: _theResult___snd__h3040 = step_ppn___1__h3107;
      32'd2: _theResult___snd__h3040 = step_ppn___1__h3044;
      default: _theResult___snd__h3040 = 44'd0;
    endcase
  end
  always@(ptw_rg_levels or ptw_rg_pte)
  begin
    case (ptw_rg_levels)
      32'd1:
	  CASE_ptw_rg_levels_1_NOT_ptw_rg_pte_BITS_27_TO_ETC__q2 =
	      ptw_rg_pte[27:10] != 18'd0;
      32'd2:
	  CASE_ptw_rg_levels_1_NOT_ptw_rg_pte_BITS_27_TO_ETC__q2 =
	      ptw_rg_pte[36:10] != 27'd0;
      default: CASE_ptw_rg_levels_1_NOT_ptw_rg_pte_BITS_27_TO_ETC__q2 =
		   ptw_rg_levels == 32'd0 && ptw_rg_pte[18:10] != 9'd0;
    endcase
  end
  always@(ptw_rg_levels or ptw_rg_pte)
  begin
    case (ptw_rg_levels)
      32'd1:
	  CASE_ptw_rg_levels_1_ptw_rg_pte_BITS_27_TO_10__ETC__q3 =
	      ptw_rg_pte[27:10] == 18'd0;
      32'd2:
	  CASE_ptw_rg_levels_1_ptw_rg_pte_BITS_27_TO_10__ETC__q3 =
	      ptw_rg_pte[36:10] == 27'd0;
      default: CASE_ptw_rg_levels_1_ptw_rg_pte_BITS_27_TO_10__ETC__q3 =
		   ptw_rg_levels != 32'd0 || ptw_rg_pte[18:10] == 9'd0;
    endcase
  end
  always@(riscv$perm_to_TLB)
  begin
    case (riscv$perm_to_TLB[3:2])
      2'd0, 2'd1:
	  CASE_riscvperm_to_TLB_BITS_3_TO_2_0_riscvper_ETC__q4 =
	      riscv$perm_to_TLB[3:2];
      default: CASE_riscvperm_to_TLB_BITS_3_TO_2_0_riscvper_ETC__q4 = 2'd3;
    endcase
  end
  always@(riscv$perm_to_TLB)
  begin
    case (riscv$perm_to_TLB[1:0])
      2'd0, 2'd1:
	  CASE_riscvperm_to_TLB_BITS_1_TO_0_0_riscvper_ETC__q5 =
	      riscv$perm_to_TLB[1:0];
      default: CASE_riscvperm_to_TLB_BITS_1_TO_0_0_riscvper_ETC__q5 = 2'd3;
    endcase
  end
  always@(imem$instruction_response_to_core)
  begin
    case (imem$instruction_response_to_core[70:67])
      4'd0,
      4'd1,
      4'd2,
      4'd3,
      4'd4,
      4'd5,
      4'd6,
      4'd7,
      4'd8,
      4'd9,
      4'd11,
      4'd12,
      4'd13:
	  CASE_imeminstruction_response_to_core_BITS_70_ETC__q6 =
	      imem$instruction_response_to_core[70:67];
      default: CASE_imeminstruction_response_to_core_BITS_70_ETC__q6 = 4'd15;
    endcase
  end
  always@(imem$instruction_response_to_core)
  begin
    case (imem$instruction_response_to_core[70:67])
      4'd0, 4'd1, 4'd3, 4'd4, 4'd5, 4'd7, 4'd8, 4'd9, 4'd11, 4'd12, 4'd13:
	  CASE_imeminstruction_response_to_core_BITS_70_ETC__q7 =
	      imem$instruction_response_to_core[70:67];
      default: CASE_imeminstruction_response_to_core_BITS_70_ETC__q7 = 4'd14;
    endcase
  end
  always@(imem$instruction_response_to_core or
	  CASE_imeminstruction_response_to_core_BITS_70_ETC__q6 or
	  CASE_imeminstruction_response_to_core_BITS_70_ETC__q7)
  begin
    case (imem$instruction_response_to_core[72:71])
      2'd0:
	  CASE_imeminstruction_response_to_core_BITS_72_ETC__q8 =
	      { 2'd0, CASE_imeminstruction_response_to_core_BITS_70_ETC__q6 };
      2'd1:
	  CASE_imeminstruction_response_to_core_BITS_72_ETC__q8 =
	      { imem$instruction_response_to_core[72:71],
		CASE_imeminstruction_response_to_core_BITS_70_ETC__q7 };
      default: CASE_imeminstruction_response_to_core_BITS_72_ETC__q8 =
		   { 2'd2, 4'b1010 /* unspecified value */  };
    endcase
  end
  always@(dmem$response_to_cpu_get)
  begin
    case (dmem$response_to_cpu_get[68:65])
      4'd0,
      4'd1,
      4'd2,
      4'd3,
      4'd4,
      4'd5,
      4'd6,
      4'd7,
      4'd8,
      4'd9,
      4'd11,
      4'd12,
      4'd13:
	  CASE_dmemresponse_to_cpu_get_BITS_68_TO_65_0__ETC__q9 =
	      dmem$response_to_cpu_get[68:65];
      default: CASE_dmemresponse_to_cpu_get_BITS_68_TO_65_0__ETC__q9 = 4'd15;
    endcase
  end
  always@(dmem$response_to_cpu_get)
  begin
    case (dmem$response_to_cpu_get[68:65])
      4'd0, 4'd1, 4'd3, 4'd4, 4'd5, 4'd7, 4'd8, 4'd9, 4'd11, 4'd12, 4'd13:
	  CASE_dmemresponse_to_cpu_get_BITS_68_TO_65_0__ETC__q10 =
	      dmem$response_to_cpu_get[68:65];
      default: CASE_dmemresponse_to_cpu_get_BITS_68_TO_65_0__ETC__q10 = 4'd14;
    endcase
  end
  always@(dmem$response_to_cpu_get or
	  CASE_dmemresponse_to_cpu_get_BITS_68_TO_65_0__ETC__q9 or
	  CASE_dmemresponse_to_cpu_get_BITS_68_TO_65_0__ETC__q10)
  begin
    case (dmem$response_to_cpu_get[70:69])
      2'd0:
	  CASE_dmemresponse_to_cpu_get_BITS_70_TO_69_0__ETC__q11 =
	      { 2'd0, CASE_dmemresponse_to_cpu_get_BITS_68_TO_65_0__ETC__q9 };
      2'd1:
	  CASE_dmemresponse_to_cpu_get_BITS_70_TO_69_0__ETC__q11 =
	      { dmem$response_to_cpu_get[70:69],
		CASE_dmemresponse_to_cpu_get_BITS_68_TO_65_0__ETC__q10 };
      default: CASE_dmemresponse_to_cpu_get_BITS_70_TO_69_0__ETC__q11 =
		   { 2'd2, 4'b1010 /* unspecified value */  };
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ptw_rg_asid <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ptw_rg_levels <= `BSV_ASSIGNMENT_DELAY 32'd2;
	ptw_rg_page_fault <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ptw_rg_page_type <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ptw_rg_permission_bits <= `BSV_ASSIGNMENT_DELAY 10'd0;
	ptw_rg_ppn <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ptw_rg_pte <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ptw_rg_pte_pointer <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ptw_rg_ptw_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ptw_rg_satp <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ptw_rg_vpn <= `BSV_ASSIGNMENT_DELAY 27'd0;
	rg_burst_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_data_line <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	rg_serve_dTLB <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_update_a_bit <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_update_b_bit <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_wait_for_response <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (ptw_rg_asid$EN)
	  ptw_rg_asid <= `BSV_ASSIGNMENT_DELAY ptw_rg_asid$D_IN;
	if (ptw_rg_levels$EN)
	  ptw_rg_levels <= `BSV_ASSIGNMENT_DELAY ptw_rg_levels$D_IN;
	if (ptw_rg_page_fault$EN)
	  ptw_rg_page_fault <= `BSV_ASSIGNMENT_DELAY ptw_rg_page_fault$D_IN;
	if (ptw_rg_page_type$EN)
	  ptw_rg_page_type <= `BSV_ASSIGNMENT_DELAY ptw_rg_page_type$D_IN;
	if (ptw_rg_permission_bits$EN)
	  ptw_rg_permission_bits <= `BSV_ASSIGNMENT_DELAY
	      ptw_rg_permission_bits$D_IN;
	if (ptw_rg_ppn$EN)
	  ptw_rg_ppn <= `BSV_ASSIGNMENT_DELAY ptw_rg_ppn$D_IN;
	if (ptw_rg_pte$EN)
	  ptw_rg_pte <= `BSV_ASSIGNMENT_DELAY ptw_rg_pte$D_IN;
	if (ptw_rg_pte_pointer$EN)
	  ptw_rg_pte_pointer <= `BSV_ASSIGNMENT_DELAY ptw_rg_pte_pointer$D_IN;
	if (ptw_rg_ptw_state$EN)
	  ptw_rg_ptw_state <= `BSV_ASSIGNMENT_DELAY ptw_rg_ptw_state$D_IN;
	if (ptw_rg_satp$EN)
	  ptw_rg_satp <= `BSV_ASSIGNMENT_DELAY ptw_rg_satp$D_IN;
	if (ptw_rg_vpn$EN)
	  ptw_rg_vpn <= `BSV_ASSIGNMENT_DELAY ptw_rg_vpn$D_IN;
	if (rg_burst_count$EN)
	  rg_burst_count <= `BSV_ASSIGNMENT_DELAY rg_burst_count$D_IN;
	if (rg_data_line$EN)
	  rg_data_line <= `BSV_ASSIGNMENT_DELAY rg_data_line$D_IN;
	if (rg_serve_dTLB$EN)
	  rg_serve_dTLB <= `BSV_ASSIGNMENT_DELAY rg_serve_dTLB$D_IN;
	if (rg_update_a_bit$EN)
	  rg_update_a_bit <= `BSV_ASSIGNMENT_DELAY rg_update_a_bit$D_IN;
	if (rg_update_b_bit$EN)
	  rg_update_b_bit <= `BSV_ASSIGNMENT_DELAY rg_update_b_bit$D_IN;
	if (rg_wait_for_response$EN)
	  rg_wait_for_response <= `BSV_ASSIGNMENT_DELAY
	      rg_wait_for_response$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ptw_rg_asid = 8'hAA;
    ptw_rg_levels = 32'hAAAAAAAA;
    ptw_rg_page_fault = 1'h0;
    ptw_rg_page_type = 2'h2;
    ptw_rg_permission_bits = 10'h2AA;
    ptw_rg_ppn = 64'hAAAAAAAAAAAAAAAA;
    ptw_rg_pte = 64'hAAAAAAAAAAAAAAAA;
    ptw_rg_pte_pointer = 64'hAAAAAAAAAAAAAAAA;
    ptw_rg_ptw_state = 3'h2;
    ptw_rg_satp = 64'hAAAAAAAAAAAAAAAA;
    ptw_rg_vpn = 27'h2AAAAAA;
    rg_burst_count = 8'hAA;
    rg_data_line =
	257'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_serve_dTLB = 1'h0;
    rg_update_a_bit = 1'h0;
    rg_update_b_bit = 1'h0;
    rg_wait_for_response = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkcore_AXI4

