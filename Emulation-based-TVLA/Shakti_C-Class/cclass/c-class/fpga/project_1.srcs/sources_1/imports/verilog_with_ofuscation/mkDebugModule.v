//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Wed Jul  3 23:26:35 IST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_external_interrupt     O     1
// RDY_request_from_dtm           O     1 reg
// response_to_dtm                O    34 reg
// RDY_response_to_dtm            O     1 reg
// debug_master_awvalid           O     1 reg
// debug_master_awaddr            O    32 reg
// debug_master_awprot            O     3 reg
// debug_master_awuser            O    10 reg
// debug_master_awlen             O     8 reg
// debug_master_awsize            O     3 reg
// debug_master_awburst           O     2 reg
// debug_master_awlock            O     1 reg
// debug_master_awcache           O     4 reg
// debug_master_awqos             O     4 reg
// debug_master_awregion          O     4 reg
// debug_master_awid              O     4 reg
// debug_master_wvalid            O     1 reg
// debug_master_wdata             O    64 reg
// debug_master_wstrb             O     8 reg
// debug_master_wlast             O     1 reg
// debug_master_wid               O     4 reg
// debug_master_bready            O     1
// debug_master_arvalid           O     1 reg
// debug_master_araddr            O    32 reg
// debug_master_arprot            O     3 reg
// debug_master_aruser            O    10 reg
// debug_master_arlen             O     8 reg
// debug_master_arsize            O     3 reg
// debug_master_arburst           O     2 reg
// debug_master_arlock            O     1 reg
// debug_master_arcache           O     4 reg
// debug_master_arqos             O     4 reg
// debug_master_arregion          O     4 reg
// debug_master_arid              O     4 reg
// debug_master_rready            O     1
// RDY_debug_slave_m_awvalid      O     1
// debug_slave_awready            O     1
// RDY_debug_slave_m_wvalid       O     1
// debug_slave_wready             O     1
// debug_slave_bvalid             O     1 reg
// debug_slave_bresp              O     2 reg
// debug_slave_buser              O    10 reg
// debug_slave_bid                O     4 reg
// debug_slave_arready            O     1
// debug_slave_rvalid             O     1 reg
// debug_slave_rresp              O     2 reg
// debug_slave_rdata              O    64 reg
// debug_slave_rlast              O     1 reg
// debug_slave_ruser              O    10 reg
// debug_slave_rid                O     4 reg
// imem_master_awvalid            O     1 reg
// imem_master_awaddr             O    32 reg
// imem_master_awprot             O     3 reg
// imem_master_awuser             O    10 reg
// imem_master_awlen              O     8 reg
// imem_master_awsize             O     3 reg
// imem_master_awburst            O     2 reg
// imem_master_awlock             O     1 reg
// imem_master_awcache            O     4 reg
// imem_master_awqos              O     4 reg
// imem_master_awregion           O     4 reg
// imem_master_awid               O     4 reg
// imem_master_wvalid             O     1 reg
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_wlast              O     1 reg
// imem_master_wid                O     4 reg
// imem_master_bready             O     1
// imem_master_arvalid            O     1 reg
// imem_master_araddr             O    32 reg
// imem_master_arprot             O     3 reg
// imem_master_aruser             O    10 reg
// imem_master_arlen              O     8 reg
// imem_master_arsize             O     3 reg
// imem_master_arburst            O     2 reg
// imem_master_arlock             O     1 reg
// imem_master_arcache            O     4 reg
// imem_master_arqos              O     4 reg
// imem_master_arregion           O     4 reg
// imem_master_arid               O     4 reg
// imem_master_rready             O     1
// dmem_master_awvalid            O     1 reg
// dmem_master_awaddr             O    32 reg
// dmem_master_awprot             O     3 reg
// dmem_master_awuser             O    10 reg
// dmem_master_awlen              O     8 reg
// dmem_master_awsize             O     3 reg
// dmem_master_awburst            O     2 reg
// dmem_master_awlock             O     1 reg
// dmem_master_awcache            O     4 reg
// dmem_master_awqos              O     4 reg
// dmem_master_awregion           O     4 reg
// dmem_master_awid               O     4 reg
// dmem_master_wvalid             O     1 reg
// dmem_master_wdata              O    64 reg
// dmem_master_wstrb              O     8 reg
// dmem_master_wlast              O     1 reg
// dmem_master_wid                O     4 reg
// dmem_master_bready             O     1
// dmem_master_arvalid            O     1 reg
// dmem_master_araddr             O    32 reg
// dmem_master_arprot             O     3 reg
// dmem_master_aruser             O    10 reg
// dmem_master_arlen              O     8 reg
// dmem_master_arsize             O     3 reg
// dmem_master_arburst            O     2 reg
// dmem_master_arlock             O     1 reg
// dmem_master_arcache            O     4 reg
// dmem_master_arqos              O     4 reg
// dmem_master_arregion           O     4 reg
// dmem_master_arid               O     4 reg
// dmem_master_rready             O     1
// RDY_clint_msip                 O     1 const
// RDY_clint_mtip                 O     1 const
// RDY_clint_mtime                O     1 const
// reset_vector                   I    39
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_external_interrupt_i       I     2 reg
// request_from_dtm_requestfrmDTM  I    40
// debug_master_m_awready_awready  I     1
// debug_master_m_wready_wready   I     1
// debug_master_m_bvalid_bvalid   I     1
// debug_master_m_bvalid_bresp    I     2 reg
// debug_master_m_bvalid_buser    I    10 reg
// debug_master_m_bvalid_bid      I     4 reg
// debug_master_m_arready_arready  I     1
// debug_master_m_rvalid_rvalid   I     1
// debug_master_m_rvalid_rresp    I     2 reg
// debug_master_m_rvalid_rdata    I    64 reg
// debug_master_m_rvalid_rlast    I     1 reg
// debug_master_m_rvalid_ruser    I    10 reg
// debug_master_m_rvalid_rid      I     4 reg
// debug_slave_m_awvalid_awvalid  I     1
// debug_slave_m_awvalid_awaddr   I    32 reg
// debug_slave_m_awvalid_awprot   I     3 reg
// debug_slave_m_awvalid_awuser   I    10 reg
// debug_slave_m_awvalid_awlen    I     8 reg
// debug_slave_m_awvalid_awsize   I     3 reg
// debug_slave_m_awvalid_awburst  I     2 reg
// debug_slave_m_awvalid_awlock   I     1 reg
// debug_slave_m_awvalid_awcache  I     4 reg
// debug_slave_m_awvalid_awqos    I     4 reg
// debug_slave_m_awvalid_awregion  I     4 reg
// debug_slave_m_awvalid_awid     I     4 reg
// debug_slave_m_wvalid_wvalid    I     1
// debug_slave_m_wvalid_wdata     I    64 reg
// debug_slave_m_wvalid_wstrb     I     8 reg
// debug_slave_m_wvalid_wlast     I     1 reg
// debug_slave_m_wvalid_wid       I     4 reg
// debug_slave_m_bready_bready    I     1
// debug_slave_m_arvalid_arvalid  I     1
// debug_slave_m_arvalid_araddr   I    32 reg
// debug_slave_m_arvalid_arprot   I     3 reg
// debug_slave_m_arvalid_aruser   I    10 reg
// debug_slave_m_arvalid_arlen    I     8 reg
// debug_slave_m_arvalid_arsize   I     3 reg
// debug_slave_m_arvalid_arburst  I     2 reg
// debug_slave_m_arvalid_arlock   I     1 reg
// debug_slave_m_arvalid_arcache  I     4 reg
// debug_slave_m_arvalid_arqos    I     4 reg
// debug_slave_m_arvalid_arregion  I     4 reg
// debug_slave_m_arvalid_arid     I     4 reg
// debug_slave_m_rready_rready    I     1
// imem_master_m_awready_awready  I     1
// imem_master_m_wready_wready    I     1
// imem_master_m_bvalid_bvalid    I     1
// imem_master_m_bvalid_bresp     I     2 reg
// imem_master_m_bvalid_buser     I    10 reg
// imem_master_m_bvalid_bid       I     4 reg
// imem_master_m_arready_arready  I     1
// imem_master_m_rvalid_rvalid    I     1
// imem_master_m_rvalid_rresp     I     2 reg
// imem_master_m_rvalid_rdata     I    64 reg
// imem_master_m_rvalid_rlast     I     1 reg
// imem_master_m_rvalid_ruser     I    10 reg
// imem_master_m_rvalid_rid       I     4 reg
// dmem_master_m_awready_awready  I     1
// dmem_master_m_wready_wready    I     1
// dmem_master_m_bvalid_bvalid    I     1
// dmem_master_m_bvalid_bresp     I     2 reg
// dmem_master_m_bvalid_buser     I    10 reg
// dmem_master_m_bvalid_bid       I     4 reg
// dmem_master_m_arready_arready  I     1
// dmem_master_m_rvalid_rvalid    I     1
// dmem_master_m_rvalid_rresp     I     2 reg
// dmem_master_m_rvalid_rdata     I    64 reg
// dmem_master_m_rvalid_rlast     I     1 reg
// dmem_master_m_rvalid_ruser     I    10 reg
// dmem_master_m_rvalid_rid       I     4 reg
// boot_sequence_bootseq          I     1 reg
// clint_msip_intrpt              I     1 reg
// clint_mtip_intrpt              I     1 reg
// clint_mtime_c_mtime            I    64 reg
// EN_set_external_interrupt      I     1
// EN_request_from_dtm            I     1
// EN_debug_slave_m_awvalid       I     1
// EN_debug_slave_m_wvalid        I     1
// EN_clint_msip                  I     1
// EN_clint_mtip                  I     1
// EN_clint_mtime                 I     1
// EN_response_to_dtm             I     1
//
// Combinational paths from inputs to outputs:
//   debug_slave_m_bready_bready -> RDY_debug_slave_m_awvalid
//   debug_slave_m_bready_bready -> debug_slave_awready
//   debug_slave_m_bready_bready -> RDY_debug_slave_m_wvalid
//   debug_slave_m_bready_bready -> debug_slave_wready
//   debug_slave_m_rready_rready -> debug_slave_arready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDebugModule(reset_vector,
		     CLK,
		     RST_N,

		     set_external_interrupt_i,
		     EN_set_external_interrupt,
		     RDY_set_external_interrupt,

		     request_from_dtm_requestfrmDTM,
		     EN_request_from_dtm,
		     RDY_request_from_dtm,

		     EN_response_to_dtm,
		     response_to_dtm,
		     RDY_response_to_dtm,

		     debug_master_awvalid,

		     debug_master_awaddr,

		     debug_master_awprot,

		     debug_master_awuser,

		     debug_master_awlen,

		     debug_master_awsize,

		     debug_master_awburst,

		     debug_master_awlock,

		     debug_master_awcache,

		     debug_master_awqos,

		     debug_master_awregion,

		     debug_master_awid,

		     debug_master_m_awready_awready,

		     debug_master_wvalid,

		     debug_master_wdata,

		     debug_master_wstrb,

		     debug_master_wlast,

		     debug_master_wid,

		     debug_master_m_wready_wready,

		     debug_master_m_bvalid_bvalid,
		     debug_master_m_bvalid_bresp,
		     debug_master_m_bvalid_buser,
		     debug_master_m_bvalid_bid,

		     debug_master_bready,

		     debug_master_arvalid,

		     debug_master_araddr,

		     debug_master_arprot,

		     debug_master_aruser,

		     debug_master_arlen,

		     debug_master_arsize,

		     debug_master_arburst,

		     debug_master_arlock,

		     debug_master_arcache,

		     debug_master_arqos,

		     debug_master_arregion,

		     debug_master_arid,

		     debug_master_m_arready_arready,

		     debug_master_m_rvalid_rvalid,
		     debug_master_m_rvalid_rresp,
		     debug_master_m_rvalid_rdata,
		     debug_master_m_rvalid_rlast,
		     debug_master_m_rvalid_ruser,
		     debug_master_m_rvalid_rid,

		     debug_master_rready,

		     debug_slave_m_awvalid_awvalid,
		     debug_slave_m_awvalid_awaddr,
		     debug_slave_m_awvalid_awprot,
		     debug_slave_m_awvalid_awuser,
		     debug_slave_m_awvalid_awlen,
		     debug_slave_m_awvalid_awsize,
		     debug_slave_m_awvalid_awburst,
		     debug_slave_m_awvalid_awlock,
		     debug_slave_m_awvalid_awcache,
		     debug_slave_m_awvalid_awqos,
		     debug_slave_m_awvalid_awregion,
		     debug_slave_m_awvalid_awid,
		     EN_debug_slave_m_awvalid,
		     RDY_debug_slave_m_awvalid,

		     debug_slave_awready,

		     debug_slave_m_wvalid_wvalid,
		     debug_slave_m_wvalid_wdata,
		     debug_slave_m_wvalid_wstrb,
		     debug_slave_m_wvalid_wlast,
		     debug_slave_m_wvalid_wid,
		     EN_debug_slave_m_wvalid,
		     RDY_debug_slave_m_wvalid,

		     debug_slave_wready,

		     debug_slave_bvalid,

		     debug_slave_bresp,

		     debug_slave_buser,

		     debug_slave_bid,

		     debug_slave_m_bready_bready,

		     debug_slave_m_arvalid_arvalid,
		     debug_slave_m_arvalid_araddr,
		     debug_slave_m_arvalid_arprot,
		     debug_slave_m_arvalid_aruser,
		     debug_slave_m_arvalid_arlen,
		     debug_slave_m_arvalid_arsize,
		     debug_slave_m_arvalid_arburst,
		     debug_slave_m_arvalid_arlock,
		     debug_slave_m_arvalid_arcache,
		     debug_slave_m_arvalid_arqos,
		     debug_slave_m_arvalid_arregion,
		     debug_slave_m_arvalid_arid,

		     debug_slave_arready,

		     debug_slave_rvalid,

		     debug_slave_rresp,

		     debug_slave_rdata,

		     debug_slave_rlast,

		     debug_slave_ruser,

		     debug_slave_rid,

		     debug_slave_m_rready_rready,

		     imem_master_awvalid,

		     imem_master_awaddr,

		     imem_master_awprot,

		     imem_master_awuser,

		     imem_master_awlen,

		     imem_master_awsize,

		     imem_master_awburst,

		     imem_master_awlock,

		     imem_master_awcache,

		     imem_master_awqos,

		     imem_master_awregion,

		     imem_master_awid,

		     imem_master_m_awready_awready,

		     imem_master_wvalid,

		     imem_master_wdata,

		     imem_master_wstrb,

		     imem_master_wlast,

		     imem_master_wid,

		     imem_master_m_wready_wready,

		     imem_master_m_bvalid_bvalid,
		     imem_master_m_bvalid_bresp,
		     imem_master_m_bvalid_buser,
		     imem_master_m_bvalid_bid,

		     imem_master_bready,

		     imem_master_arvalid,

		     imem_master_araddr,

		     imem_master_arprot,

		     imem_master_aruser,

		     imem_master_arlen,

		     imem_master_arsize,

		     imem_master_arburst,

		     imem_master_arlock,

		     imem_master_arcache,

		     imem_master_arqos,

		     imem_master_arregion,

		     imem_master_arid,

		     imem_master_m_arready_arready,

		     imem_master_m_rvalid_rvalid,
		     imem_master_m_rvalid_rresp,
		     imem_master_m_rvalid_rdata,
		     imem_master_m_rvalid_rlast,
		     imem_master_m_rvalid_ruser,
		     imem_master_m_rvalid_rid,

		     imem_master_rready,

		     dmem_master_awvalid,

		     dmem_master_awaddr,

		     dmem_master_awprot,

		     dmem_master_awuser,

		     dmem_master_awlen,

		     dmem_master_awsize,

		     dmem_master_awburst,

		     dmem_master_awlock,

		     dmem_master_awcache,

		     dmem_master_awqos,

		     dmem_master_awregion,

		     dmem_master_awid,

		     dmem_master_m_awready_awready,

		     dmem_master_wvalid,

		     dmem_master_wdata,

		     dmem_master_wstrb,

		     dmem_master_wlast,

		     dmem_master_wid,

		     dmem_master_m_wready_wready,

		     dmem_master_m_bvalid_bvalid,
		     dmem_master_m_bvalid_bresp,
		     dmem_master_m_bvalid_buser,
		     dmem_master_m_bvalid_bid,

		     dmem_master_bready,

		     dmem_master_arvalid,

		     dmem_master_araddr,

		     dmem_master_arprot,

		     dmem_master_aruser,

		     dmem_master_arlen,

		     dmem_master_arsize,

		     dmem_master_arburst,

		     dmem_master_arlock,

		     dmem_master_arcache,

		     dmem_master_arqos,

		     dmem_master_arregion,

		     dmem_master_arid,

		     dmem_master_m_arready_arready,

		     dmem_master_m_rvalid_rvalid,
		     dmem_master_m_rvalid_rresp,
		     dmem_master_m_rvalid_rdata,
		     dmem_master_m_rvalid_rlast,
		     dmem_master_m_rvalid_ruser,
		     dmem_master_m_rvalid_rid,

		     dmem_master_rready,

		     boot_sequence_bootseq,

		     clint_msip_intrpt,
		     EN_clint_msip,
		     RDY_clint_msip,

		     clint_mtip_intrpt,
		     EN_clint_mtip,
		     RDY_clint_mtip,

		     clint_mtime_c_mtime,
		     EN_clint_mtime,
		     RDY_clint_mtime);
  input  [38 : 0] reset_vector;
  input  CLK;
  input  RST_N;

  // action method set_external_interrupt
  input  [1 : 0] set_external_interrupt_i;
  input  EN_set_external_interrupt;
  output RDY_set_external_interrupt;

  // action method request_from_dtm
  input  [39 : 0] request_from_dtm_requestfrmDTM;
  input  EN_request_from_dtm;
  output RDY_request_from_dtm;

  // actionvalue method response_to_dtm
  input  EN_response_to_dtm;
  output [33 : 0] response_to_dtm;
  output RDY_response_to_dtm;

  // value method debug_master_m_awvalid
  output debug_master_awvalid;

  // value method debug_master_m_awaddr
  output [31 : 0] debug_master_awaddr;

  // value method debug_master_m_awprot
  output [2 : 0] debug_master_awprot;

  // value method debug_master_m_awuser
  output [9 : 0] debug_master_awuser;

  // value method debug_master_m_awlen
  output [7 : 0] debug_master_awlen;

  // value method debug_master_m_awsize
  output [2 : 0] debug_master_awsize;

  // value method debug_master_m_awburst
  output [1 : 0] debug_master_awburst;

  // value method debug_master_m_awlock
  output debug_master_awlock;

  // value method debug_master_m_awcache
  output [3 : 0] debug_master_awcache;

  // value method debug_master_m_awqos
  output [3 : 0] debug_master_awqos;

  // value method debug_master_m_awregion
  output [3 : 0] debug_master_awregion;

  // value method debug_master_m_awid
  output [3 : 0] debug_master_awid;

  // action method debug_master_m_awready
  input  debug_master_m_awready_awready;

  // value method debug_master_m_wvalid
  output debug_master_wvalid;

  // value method debug_master_m_wdata
  output [63 : 0] debug_master_wdata;

  // value method debug_master_m_wstrb
  output [7 : 0] debug_master_wstrb;

  // value method debug_master_m_wlast
  output debug_master_wlast;

  // value method debug_master_m_wid
  output [3 : 0] debug_master_wid;

  // action method debug_master_m_wready
  input  debug_master_m_wready_wready;

  // action method debug_master_m_bvalid
  input  debug_master_m_bvalid_bvalid;
  input  [1 : 0] debug_master_m_bvalid_bresp;
  input  [9 : 0] debug_master_m_bvalid_buser;
  input  [3 : 0] debug_master_m_bvalid_bid;

  // value method debug_master_m_bready
  output debug_master_bready;

  // value method debug_master_m_arvalid
  output debug_master_arvalid;

  // value method debug_master_m_araddr
  output [31 : 0] debug_master_araddr;

  // value method debug_master_m_arprot
  output [2 : 0] debug_master_arprot;

  // value method debug_master_m_aruser
  output [9 : 0] debug_master_aruser;

  // value method debug_master_m_arlen
  output [7 : 0] debug_master_arlen;

  // value method debug_master_m_arsize
  output [2 : 0] debug_master_arsize;

  // value method debug_master_m_arburst
  output [1 : 0] debug_master_arburst;

  // value method debug_master_m_arlock
  output debug_master_arlock;

  // value method debug_master_m_arcache
  output [3 : 0] debug_master_arcache;

  // value method debug_master_m_arqos
  output [3 : 0] debug_master_arqos;

  // value method debug_master_m_arregion
  output [3 : 0] debug_master_arregion;

  // value method debug_master_m_arid
  output [3 : 0] debug_master_arid;

  // action method debug_master_m_arready
  input  debug_master_m_arready_arready;

  // action method debug_master_m_rvalid
  input  debug_master_m_rvalid_rvalid;
  input  [1 : 0] debug_master_m_rvalid_rresp;
  input  [63 : 0] debug_master_m_rvalid_rdata;
  input  debug_master_m_rvalid_rlast;
  input  [9 : 0] debug_master_m_rvalid_ruser;
  input  [3 : 0] debug_master_m_rvalid_rid;

  // value method debug_master_m_rready
  output debug_master_rready;

  // action method debug_slave_m_awvalid
  input  debug_slave_m_awvalid_awvalid;
  input  [31 : 0] debug_slave_m_awvalid_awaddr;
  input  [2 : 0] debug_slave_m_awvalid_awprot;
  input  [9 : 0] debug_slave_m_awvalid_awuser;
  input  [7 : 0] debug_slave_m_awvalid_awlen;
  input  [2 : 0] debug_slave_m_awvalid_awsize;
  input  [1 : 0] debug_slave_m_awvalid_awburst;
  input  debug_slave_m_awvalid_awlock;
  input  [3 : 0] debug_slave_m_awvalid_awcache;
  input  [3 : 0] debug_slave_m_awvalid_awqos;
  input  [3 : 0] debug_slave_m_awvalid_awregion;
  input  [3 : 0] debug_slave_m_awvalid_awid;
  input  EN_debug_slave_m_awvalid;
  output RDY_debug_slave_m_awvalid;

  // value method debug_slave_m_awready
  output debug_slave_awready;

  // action method debug_slave_m_wvalid
  input  debug_slave_m_wvalid_wvalid;
  input  [63 : 0] debug_slave_m_wvalid_wdata;
  input  [7 : 0] debug_slave_m_wvalid_wstrb;
  input  debug_slave_m_wvalid_wlast;
  input  [3 : 0] debug_slave_m_wvalid_wid;
  input  EN_debug_slave_m_wvalid;
  output RDY_debug_slave_m_wvalid;

  // value method debug_slave_m_wready
  output debug_slave_wready;

  // value method debug_slave_m_bvalid
  output debug_slave_bvalid;

  // value method debug_slave_m_bresp
  output [1 : 0] debug_slave_bresp;

  // value method debug_slave_m_buser
  output [9 : 0] debug_slave_buser;

  // value method debug_slave_m_bid
  output [3 : 0] debug_slave_bid;

  // action method debug_slave_m_bready
  input  debug_slave_m_bready_bready;

  // action method debug_slave_m_arvalid
  input  debug_slave_m_arvalid_arvalid;
  input  [31 : 0] debug_slave_m_arvalid_araddr;
  input  [2 : 0] debug_slave_m_arvalid_arprot;
  input  [9 : 0] debug_slave_m_arvalid_aruser;
  input  [7 : 0] debug_slave_m_arvalid_arlen;
  input  [2 : 0] debug_slave_m_arvalid_arsize;
  input  [1 : 0] debug_slave_m_arvalid_arburst;
  input  debug_slave_m_arvalid_arlock;
  input  [3 : 0] debug_slave_m_arvalid_arcache;
  input  [3 : 0] debug_slave_m_arvalid_arqos;
  input  [3 : 0] debug_slave_m_arvalid_arregion;
  input  [3 : 0] debug_slave_m_arvalid_arid;

  // value method debug_slave_m_arready
  output debug_slave_arready;

  // value method debug_slave_m_rvalid
  output debug_slave_rvalid;

  // value method debug_slave_m_rresp
  output [1 : 0] debug_slave_rresp;

  // value method debug_slave_m_rdata
  output [63 : 0] debug_slave_rdata;

  // value method debug_slave_m_rlast
  output debug_slave_rlast;

  // value method debug_slave_m_ruser
  output [9 : 0] debug_slave_ruser;

  // value method debug_slave_m_rid
  output [3 : 0] debug_slave_rid;

  // action method debug_slave_m_rready
  input  debug_slave_m_rready_rready;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awaddr
  output [31 : 0] imem_master_awaddr;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awuser
  output [9 : 0] imem_master_awuser;

  // value method imem_master_m_awlen
  output [7 : 0] imem_master_awlen;

  // value method imem_master_m_awsize
  output [2 : 0] imem_master_awsize;

  // value method imem_master_m_awburst
  output [1 : 0] imem_master_awburst;

  // value method imem_master_m_awlock
  output imem_master_awlock;

  // value method imem_master_m_awcache
  output [3 : 0] imem_master_awcache;

  // value method imem_master_m_awqos
  output [3 : 0] imem_master_awqos;

  // value method imem_master_m_awregion
  output [3 : 0] imem_master_awregion;

  // value method imem_master_m_awid
  output [3 : 0] imem_master_awid;

  // action method imem_master_m_awready
  input  imem_master_m_awready_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // value method imem_master_m_wlast
  output imem_master_wlast;

  // value method imem_master_m_wid
  output [3 : 0] imem_master_wid;

  // action method imem_master_m_wready
  input  imem_master_m_wready_wready;

  // action method imem_master_m_bvalid
  input  imem_master_m_bvalid_bvalid;
  input  [1 : 0] imem_master_m_bvalid_bresp;
  input  [9 : 0] imem_master_m_bvalid_buser;
  input  [3 : 0] imem_master_m_bvalid_bid;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_araddr
  output [31 : 0] imem_master_araddr;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_aruser
  output [9 : 0] imem_master_aruser;

  // value method imem_master_m_arlen
  output [7 : 0] imem_master_arlen;

  // value method imem_master_m_arsize
  output [2 : 0] imem_master_arsize;

  // value method imem_master_m_arburst
  output [1 : 0] imem_master_arburst;

  // value method imem_master_m_arlock
  output imem_master_arlock;

  // value method imem_master_m_arcache
  output [3 : 0] imem_master_arcache;

  // value method imem_master_m_arqos
  output [3 : 0] imem_master_arqos;

  // value method imem_master_m_arregion
  output [3 : 0] imem_master_arregion;

  // value method imem_master_m_arid
  output [3 : 0] imem_master_arid;

  // action method imem_master_m_arready
  input  imem_master_m_arready_arready;

  // action method imem_master_m_rvalid
  input  imem_master_m_rvalid_rvalid;
  input  [1 : 0] imem_master_m_rvalid_rresp;
  input  [63 : 0] imem_master_m_rvalid_rdata;
  input  imem_master_m_rvalid_rlast;
  input  [9 : 0] imem_master_m_rvalid_ruser;
  input  [3 : 0] imem_master_m_rvalid_rid;

  // value method imem_master_m_rready
  output imem_master_rready;

  // value method dmem_master_m_awvalid
  output dmem_master_awvalid;

  // value method dmem_master_m_awaddr
  output [31 : 0] dmem_master_awaddr;

  // value method dmem_master_m_awprot
  output [2 : 0] dmem_master_awprot;

  // value method dmem_master_m_awuser
  output [9 : 0] dmem_master_awuser;

  // value method dmem_master_m_awlen
  output [7 : 0] dmem_master_awlen;

  // value method dmem_master_m_awsize
  output [2 : 0] dmem_master_awsize;

  // value method dmem_master_m_awburst
  output [1 : 0] dmem_master_awburst;

  // value method dmem_master_m_awlock
  output dmem_master_awlock;

  // value method dmem_master_m_awcache
  output [3 : 0] dmem_master_awcache;

  // value method dmem_master_m_awqos
  output [3 : 0] dmem_master_awqos;

  // value method dmem_master_m_awregion
  output [3 : 0] dmem_master_awregion;

  // value method dmem_master_m_awid
  output [3 : 0] dmem_master_awid;

  // action method dmem_master_m_awready
  input  dmem_master_m_awready_awready;

  // value method dmem_master_m_wvalid
  output dmem_master_wvalid;

  // value method dmem_master_m_wdata
  output [63 : 0] dmem_master_wdata;

  // value method dmem_master_m_wstrb
  output [7 : 0] dmem_master_wstrb;

  // value method dmem_master_m_wlast
  output dmem_master_wlast;

  // value method dmem_master_m_wid
  output [3 : 0] dmem_master_wid;

  // action method dmem_master_m_wready
  input  dmem_master_m_wready_wready;

  // action method dmem_master_m_bvalid
  input  dmem_master_m_bvalid_bvalid;
  input  [1 : 0] dmem_master_m_bvalid_bresp;
  input  [9 : 0] dmem_master_m_bvalid_buser;
  input  [3 : 0] dmem_master_m_bvalid_bid;

  // value method dmem_master_m_bready
  output dmem_master_bready;

  // value method dmem_master_m_arvalid
  output dmem_master_arvalid;

  // value method dmem_master_m_araddr
  output [31 : 0] dmem_master_araddr;

  // value method dmem_master_m_arprot
  output [2 : 0] dmem_master_arprot;

  // value method dmem_master_m_aruser
  output [9 : 0] dmem_master_aruser;

  // value method dmem_master_m_arlen
  output [7 : 0] dmem_master_arlen;

  // value method dmem_master_m_arsize
  output [2 : 0] dmem_master_arsize;

  // value method dmem_master_m_arburst
  output [1 : 0] dmem_master_arburst;

  // value method dmem_master_m_arlock
  output dmem_master_arlock;

  // value method dmem_master_m_arcache
  output [3 : 0] dmem_master_arcache;

  // value method dmem_master_m_arqos
  output [3 : 0] dmem_master_arqos;

  // value method dmem_master_m_arregion
  output [3 : 0] dmem_master_arregion;

  // value method dmem_master_m_arid
  output [3 : 0] dmem_master_arid;

  // action method dmem_master_m_arready
  input  dmem_master_m_arready_arready;

  // action method dmem_master_m_rvalid
  input  dmem_master_m_rvalid_rvalid;
  input  [1 : 0] dmem_master_m_rvalid_rresp;
  input  [63 : 0] dmem_master_m_rvalid_rdata;
  input  dmem_master_m_rvalid_rlast;
  input  [9 : 0] dmem_master_m_rvalid_ruser;
  input  [3 : 0] dmem_master_m_rvalid_rid;

  // value method dmem_master_m_rready
  output dmem_master_rready;

  // action method boot_sequence
  input  boot_sequence_bootseq;

  // action method clint_msip
  input  clint_msip_intrpt;
  input  EN_clint_msip;
  output RDY_clint_msip;

  // action method clint_mtip
  input  clint_mtip_intrpt;
  input  EN_clint_mtip;
  output RDY_clint_mtip;

  // action method clint_mtime
  input  [63 : 0] clint_mtime_c_mtime;
  input  EN_clint_mtime;
  output RDY_clint_mtime;

  // signals for module outputs
  wire [63 : 0] debug_master_wdata,
		debug_slave_rdata,
		dmem_master_wdata,
		imem_master_wdata;
  wire [33 : 0] response_to_dtm;
  wire [31 : 0] debug_master_araddr,
		debug_master_awaddr,
		dmem_master_araddr,
		dmem_master_awaddr,
		imem_master_araddr,
		imem_master_awaddr;
  wire [9 : 0] debug_master_aruser,
	       debug_master_awuser,
	       debug_slave_buser,
	       debug_slave_ruser,
	       dmem_master_aruser,
	       dmem_master_awuser,
	       imem_master_aruser,
	       imem_master_awuser;
  wire [7 : 0] debug_master_arlen,
	       debug_master_awlen,
	       debug_master_wstrb,
	       dmem_master_arlen,
	       dmem_master_awlen,
	       dmem_master_wstrb,
	       imem_master_arlen,
	       imem_master_awlen,
	       imem_master_wstrb;
  wire [3 : 0] debug_master_arcache,
	       debug_master_arid,
	       debug_master_arqos,
	       debug_master_arregion,
	       debug_master_awcache,
	       debug_master_awid,
	       debug_master_awqos,
	       debug_master_awregion,
	       debug_master_wid,
	       debug_slave_bid,
	       debug_slave_rid,
	       dmem_master_arcache,
	       dmem_master_arid,
	       dmem_master_arqos,
	       dmem_master_arregion,
	       dmem_master_awcache,
	       dmem_master_awid,
	       dmem_master_awqos,
	       dmem_master_awregion,
	       dmem_master_wid,
	       imem_master_arcache,
	       imem_master_arid,
	       imem_master_arqos,
	       imem_master_arregion,
	       imem_master_awcache,
	       imem_master_awid,
	       imem_master_awqos,
	       imem_master_awregion,
	       imem_master_wid;
  wire [2 : 0] debug_master_arprot,
	       debug_master_arsize,
	       debug_master_awprot,
	       debug_master_awsize,
	       dmem_master_arprot,
	       dmem_master_arsize,
	       dmem_master_awprot,
	       dmem_master_awsize,
	       imem_master_arprot,
	       imem_master_arsize,
	       imem_master_awprot,
	       imem_master_awsize;
  wire [1 : 0] debug_master_arburst,
	       debug_master_awburst,
	       debug_slave_bresp,
	       debug_slave_rresp,
	       dmem_master_arburst,
	       dmem_master_awburst,
	       imem_master_arburst,
	       imem_master_awburst;
  wire RDY_clint_msip,
       RDY_clint_mtime,
       RDY_clint_mtip,
       RDY_debug_slave_m_awvalid,
       RDY_debug_slave_m_wvalid,
       RDY_request_from_dtm,
       RDY_response_to_dtm,
       RDY_set_external_interrupt,
       debug_master_arlock,
       debug_master_arvalid,
       debug_master_awlock,
       debug_master_awvalid,
       debug_master_bready,
       debug_master_rready,
       debug_master_wlast,
       debug_master_wvalid,
       debug_slave_arready,
       debug_slave_awready,
       debug_slave_bvalid,
       debug_slave_rlast,
       debug_slave_rvalid,
       debug_slave_wready,
       dmem_master_arlock,
       dmem_master_arvalid,
       dmem_master_awlock,
       dmem_master_awvalid,
       dmem_master_bready,
       dmem_master_rready,
       dmem_master_wlast,
       dmem_master_wvalid,
       imem_master_arlock,
       imem_master_arvalid,
       imem_master_awlock,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wlast,
       imem_master_wvalid;

  // inlined wires
  reg [31 : 0] abstract_Data_0$port0__write_1, abstract_Data_1$port0__write_1;
  wire [31 : 0] abstract_Data_0$port2__read,
		abstract_Data_1$port2__read,
		abstract_Data_10$port0__write_1,
		abstract_Data_10$port2__read,
		abstract_Data_11$port0__write_1,
		abstract_Data_11$port2__read,
		abstract_Data_2$port0__write_1,
		abstract_Data_2$port2__read,
		abstract_Data_3$port0__write_1,
		abstract_Data_3$port2__read,
		abstract_Data_4$port0__write_1,
		abstract_Data_4$port2__read,
		abstract_Data_5$port0__write_1,
		abstract_Data_5$port2__read,
		abstract_Data_6$port0__write_1,
		abstract_Data_6$port2__read,
		abstract_Data_7$port0__write_1,
		abstract_Data_7$port2__read,
		abstract_Data_8$port0__write_1,
		abstract_Data_8$port2__read,
		abstract_Data_9$port0__write_1,
		abstract_Data_9$port2__read,
		busAddr0$port0__write_1,
		busAddr0$port2__read,
		busData0$port2__read,
		busData1$port2__read,
		program_Buffer_0$port0__write_1,
		program_Buffer_0$port2__read,
		program_Buffer_1$port0__write_1,
		program_Buffer_1$port2__read,
		program_Buffer_10$port0__write_1,
		program_Buffer_10$port2__read,
		program_Buffer_11$port0__write_1,
		program_Buffer_11$port2__read,
		program_Buffer_12$port0__write_1,
		program_Buffer_12$port2__read,
		program_Buffer_13$port0__write_1,
		program_Buffer_13$port2__read,
		program_Buffer_14$port0__write_1,
		program_Buffer_14$port2__read,
		program_Buffer_15$port0__write_1,
		program_Buffer_15$port2__read,
		program_Buffer_2$port0__write_1,
		program_Buffer_2$port2__read,
		program_Buffer_3$port0__write_1,
		program_Buffer_3$port2__read,
		program_Buffer_4$port0__write_1,
		program_Buffer_4$port2__read,
		program_Buffer_5$port0__write_1,
		program_Buffer_5$port2__read,
		program_Buffer_6$port0__write_1,
		program_Buffer_6$port2__read,
		program_Buffer_7$port0__write_1,
		program_Buffer_7$port2__read,
		program_Buffer_8$port0__write_1,
		program_Buffer_8$port2__read,
		program_Buffer_9$port0__write_1,
		program_Buffer_9$port2__read;
  wire _port0__write_RL_access_register_or_pc$EN_abstract_Data_0$wget,
       _port0__write_RL_access_register_or_pc$EN_abstract_Data_1$wget,
       abstract_Data_0$EN_port0__write,
       abstract_Data_0$EN_port1__write,
       abstract_Data_1$EN_port0__write,
       abstract_Data_1$EN_port1__write,
       abstract_Data_10$EN_port0__write,
       abstract_Data_10$EN_port1__write,
       abstract_Data_11$EN_port0__write,
       abstract_Data_11$EN_port1__write,
       abstract_Data_2$EN_port0__write,
       abstract_Data_2$EN_port1__write,
       abstract_Data_3$EN_port0__write,
       abstract_Data_3$EN_port1__write,
       abstract_Data_4$EN_port0__write,
       abstract_Data_4$EN_port1__write,
       abstract_Data_5$EN_port0__write,
       abstract_Data_5$EN_port1__write,
       abstract_Data_6$EN_port0__write,
       abstract_Data_6$EN_port1__write,
       abstract_Data_7$EN_port0__write,
       abstract_Data_7$EN_port1__write,
       abstract_Data_8$EN_port0__write,
       abstract_Data_8$EN_port1__write,
       abstract_Data_9$EN_port0__write,
       abstract_Data_9$EN_port1__write,
       busAddr0$EN_port0__write,
       busAddr0$EN_port1__write,
       busData0$EN_port0__write,
       busData0$EN_port1__write,
       busData1$EN_port0__write,
       busData1$EN_port1__write,
       perform_reg_access$EN_port0__write,
       perform_reg_access$EN_port1__write,
       perform_reg_access$port1__read,
       perform_reg_access$port2__read,
       program_Buffer_0$EN_port0__write,
       program_Buffer_0$EN_port1__write,
       program_Buffer_1$EN_port0__write,
       program_Buffer_1$EN_port1__write,
       program_Buffer_10$EN_port0__write,
       program_Buffer_10$EN_port1__write,
       program_Buffer_11$EN_port0__write,
       program_Buffer_11$EN_port1__write,
       program_Buffer_12$EN_port0__write,
       program_Buffer_12$EN_port1__write,
       program_Buffer_13$EN_port0__write,
       program_Buffer_13$EN_port1__write,
       program_Buffer_14$EN_port0__write,
       program_Buffer_14$EN_port1__write,
       program_Buffer_15$EN_port0__write,
       program_Buffer_15$EN_port1__write,
       program_Buffer_2$EN_port0__write,
       program_Buffer_2$EN_port1__write,
       program_Buffer_3$EN_port0__write,
       program_Buffer_3$EN_port1__write,
       program_Buffer_4$EN_port0__write,
       program_Buffer_4$EN_port1__write,
       program_Buffer_5$EN_port0__write,
       program_Buffer_5$EN_port1__write,
       program_Buffer_6$EN_port0__write,
       program_Buffer_6$EN_port1__write,
       program_Buffer_7$EN_port0__write,
       program_Buffer_7$EN_port1__write,
       program_Buffer_8$EN_port0__write,
       program_Buffer_8$EN_port1__write,
       program_Buffer_9$EN_port0__write,
       program_Buffer_9$EN_port1__write,
       rg_busy$EN_port1__write,
       rg_busy$EN_port2__write,
       rg_busy$port2__read,
       rg_busy$port3__read,
       rg_resumeack$EN_port0__write,
       rg_sbsingleread$EN_port0__write,
       rg_sbsingleread$EN_port1__write,
       rg_sbsingleread$port1__write_1,
       rg_sbsingleread$port2__read,
       start_program_exec$EN_port0__write,
       start_program_exec$EN_port1__write,
       start_program_exec$port1__read,
       start_program_exec$port2__read,
       wr_gen_haltreq_1$whas,
       wr_gen_resumereq_1$whas,
       write_flag$EN_port0__write,
       write_flag$EN_port1__write,
       write_flag$port1__read,
       write_flag$port2__read;

  // register abstract_Data_0
  reg [31 : 0] abstract_Data_0;
  wire [31 : 0] abstract_Data_0$D_IN;
  wire abstract_Data_0$EN;

  // register abstract_Data_1
  reg [31 : 0] abstract_Data_1;
  wire [31 : 0] abstract_Data_1$D_IN;
  wire abstract_Data_1$EN;

  // register abstract_Data_10
  reg [31 : 0] abstract_Data_10;
  wire [31 : 0] abstract_Data_10$D_IN;
  wire abstract_Data_10$EN;

  // register abstract_Data_11
  reg [31 : 0] abstract_Data_11;
  wire [31 : 0] abstract_Data_11$D_IN;
  wire abstract_Data_11$EN;

  // register abstract_Data_2
  reg [31 : 0] abstract_Data_2;
  wire [31 : 0] abstract_Data_2$D_IN;
  wire abstract_Data_2$EN;

  // register abstract_Data_3
  reg [31 : 0] abstract_Data_3;
  wire [31 : 0] abstract_Data_3$D_IN;
  wire abstract_Data_3$EN;

  // register abstract_Data_4
  reg [31 : 0] abstract_Data_4;
  wire [31 : 0] abstract_Data_4$D_IN;
  wire abstract_Data_4$EN;

  // register abstract_Data_5
  reg [31 : 0] abstract_Data_5;
  wire [31 : 0] abstract_Data_5$D_IN;
  wire abstract_Data_5$EN;

  // register abstract_Data_6
  reg [31 : 0] abstract_Data_6;
  wire [31 : 0] abstract_Data_6$D_IN;
  wire abstract_Data_6$EN;

  // register abstract_Data_7
  reg [31 : 0] abstract_Data_7;
  wire [31 : 0] abstract_Data_7$D_IN;
  wire abstract_Data_7$EN;

  // register abstract_Data_8
  reg [31 : 0] abstract_Data_8;
  wire [31 : 0] abstract_Data_8$D_IN;
  wire abstract_Data_8$EN;

  // register abstract_Data_9
  reg [31 : 0] abstract_Data_9;
  wire [31 : 0] abstract_Data_9$D_IN;
  wire abstract_Data_9$EN;

  // register busAddr0
  reg [31 : 0] busAddr0;
  wire [31 : 0] busAddr0$D_IN;
  wire busAddr0$EN;

  // register busData0
  reg [31 : 0] busData0;
  wire [31 : 0] busData0$D_IN;
  wire busData0$EN;

  // register busData1
  reg [31 : 0] busData1;
  wire [31 : 0] busData1$D_IN;
  wire busData1$EN;

  // register haltreq
  reg haltreq;
  wire haltreq$D_IN, haltreq$EN;

  // register instruction0
  reg [31 : 0] instruction0;
  wire [31 : 0] instruction0$D_IN;
  wire instruction0$EN;

  // register instruction1
  reg [31 : 0] instruction1;
  wire [31 : 0] instruction1$D_IN;
  wire instruction1$EN;

  // register instruction2
  reg [31 : 0] instruction2;
  wire [31 : 0] instruction2$D_IN;
  wire instruction2$EN;

  // register instruction3
  reg [31 : 0] instruction3;
  wire [31 : 0] instruction3$D_IN;
  wire instruction3$EN;

  // register perform_reg_access
  reg perform_reg_access;
  wire perform_reg_access$D_IN, perform_reg_access$EN;

  // register prog_ebreak_read
  reg prog_ebreak_read;
  wire prog_ebreak_read$D_IN, prog_ebreak_read$EN;

  // register program_Buffer_0
  reg [31 : 0] program_Buffer_0;
  wire [31 : 0] program_Buffer_0$D_IN;
  wire program_Buffer_0$EN;

  // register program_Buffer_1
  reg [31 : 0] program_Buffer_1;
  wire [31 : 0] program_Buffer_1$D_IN;
  wire program_Buffer_1$EN;

  // register program_Buffer_10
  reg [31 : 0] program_Buffer_10;
  wire [31 : 0] program_Buffer_10$D_IN;
  wire program_Buffer_10$EN;

  // register program_Buffer_11
  reg [31 : 0] program_Buffer_11;
  wire [31 : 0] program_Buffer_11$D_IN;
  wire program_Buffer_11$EN;

  // register program_Buffer_12
  reg [31 : 0] program_Buffer_12;
  wire [31 : 0] program_Buffer_12$D_IN;
  wire program_Buffer_12$EN;

  // register program_Buffer_13
  reg [31 : 0] program_Buffer_13;
  wire [31 : 0] program_Buffer_13$D_IN;
  wire program_Buffer_13$EN;

  // register program_Buffer_14
  reg [31 : 0] program_Buffer_14;
  wire [31 : 0] program_Buffer_14$D_IN;
  wire program_Buffer_14$EN;

  // register program_Buffer_15
  reg [31 : 0] program_Buffer_15;
  wire [31 : 0] program_Buffer_15$D_IN;
  wire program_Buffer_15$EN;

  // register program_Buffer_2
  reg [31 : 0] program_Buffer_2;
  wire [31 : 0] program_Buffer_2$D_IN;
  wire program_Buffer_2$EN;

  // register program_Buffer_3
  reg [31 : 0] program_Buffer_3;
  wire [31 : 0] program_Buffer_3$D_IN;
  wire program_Buffer_3$EN;

  // register program_Buffer_4
  reg [31 : 0] program_Buffer_4;
  wire [31 : 0] program_Buffer_4$D_IN;
  wire program_Buffer_4$EN;

  // register program_Buffer_5
  reg [31 : 0] program_Buffer_5;
  wire [31 : 0] program_Buffer_5$D_IN;
  wire program_Buffer_5$EN;

  // register program_Buffer_6
  reg [31 : 0] program_Buffer_6;
  wire [31 : 0] program_Buffer_6$D_IN;
  wire program_Buffer_6$EN;

  // register program_Buffer_7
  reg [31 : 0] program_Buffer_7;
  wire [31 : 0] program_Buffer_7$D_IN;
  wire program_Buffer_7$EN;

  // register program_Buffer_8
  reg [31 : 0] program_Buffer_8;
  wire [31 : 0] program_Buffer_8$D_IN;
  wire program_Buffer_8$EN;

  // register program_Buffer_9
  reg [31 : 0] program_Buffer_9;
  wire [31 : 0] program_Buffer_9$D_IN;
  wire program_Buffer_9$EN;

  // register reset_status
  reg reset_status;
  wire reset_status$D_IN, reset_status$EN;

  // register resume
  reg resume;
  wire resume$D_IN, resume$EN;

  // register rg_autoexecdata
  reg [11 : 0] rg_autoexecdata;
  wire [11 : 0] rg_autoexecdata$D_IN;
  wire rg_autoexecdata$EN;

  // register rg_autoexecprogbuf
  reg [15 : 0] rg_autoexecprogbuf;
  wire [15 : 0] rg_autoexecprogbuf$D_IN;
  wire rg_autoexecprogbuf$EN;

  // register rg_busy
  reg rg_busy;
  wire rg_busy$D_IN, rg_busy$EN;

  // register rg_cmderr
  reg [2 : 0] rg_cmderr;
  wire [2 : 0] rg_cmderr$D_IN;
  wire rg_cmderr$EN;

  // register rg_cmdtype
  reg [7 : 0] rg_cmdtype;
  wire [7 : 0] rg_cmdtype$D_IN;
  wire rg_cmdtype$EN;

  // register rg_control
  reg [23 : 0] rg_control;
  wire [23 : 0] rg_control$D_IN;
  wire rg_control$EN;

  // register rg_dmactive
  reg rg_dmactive;
  wire rg_dmactive$D_IN, rg_dmactive$EN;

  // register rg_halted
  reg rg_halted;
  wire rg_halted$D_IN, rg_halted$EN;

  // register rg_hartreset
  reg rg_hartreset;
  wire rg_hartreset$D_IN, rg_hartreset$EN;

  // register rg_hartsel
  reg [9 : 0] rg_hartsel;
  wire [9 : 0] rg_hartsel$D_IN;
  wire rg_hartsel$EN;

  // register rg_nonexistent
  reg rg_nonexistent;
  wire rg_nonexistent$D_IN, rg_nonexistent$EN;

  // register rg_reset
  reg rg_reset;
  wire rg_reset$D_IN, rg_reset$EN;

  // register rg_resumeack
  reg rg_resumeack;
  wire rg_resumeack$D_IN, rg_resumeack$EN;

  // register rg_running
  reg rg_running;
  wire rg_running$D_IN, rg_running$EN;

  // register rg_sbaccess
  reg [2 : 0] rg_sbaccess;
  wire [2 : 0] rg_sbaccess$D_IN;
  wire rg_sbaccess$EN;

  // register rg_sbautoincrement
  reg rg_sbautoincrement;
  wire rg_sbautoincrement$D_IN, rg_sbautoincrement$EN;

  // register rg_sbautoread
  reg rg_sbautoread;
  wire rg_sbautoread$D_IN, rg_sbautoread$EN;

  // register rg_sberror
  reg [2 : 0] rg_sberror;
  wire [2 : 0] rg_sberror$D_IN;
  wire rg_sberror$EN;

  // register rg_sbsingleread
  reg rg_sbsingleread;
  wire rg_sbsingleread$D_IN, rg_sbsingleread$EN;

  // register rg_unavailable
  reg rg_unavailable;
  wire rg_unavailable$D_IN, rg_unavailable$EN;

  // register start_program_exec
  reg start_program_exec;
  wire start_program_exec$D_IN, start_program_exec$EN;

  // register wr_gen_haltreq
  reg wr_gen_haltreq;
  wire wr_gen_haltreq$D_IN, wr_gen_haltreq$EN;

  // register wr_gen_resumereq
  reg wr_gen_resumereq;
  wire wr_gen_resumereq$D_IN, wr_gen_resumereq$EN;

  // register write_flag
  reg write_flag;
  wire write_flag$D_IN, write_flag$EN;

  // ports of submodule c64
  reg [63 : 0] c64$rw_csr_data;
  wire [63 : 0] c64$clint_mtime_c_mtime,
		c64$dmem_master_m_rvalid_rdata,
		c64$dmem_master_wdata,
		c64$imem_master_m_rvalid_rdata,
		c64$imem_master_wdata,
		c64$read_fgpr,
		c64$read_igpr,
		c64$rw_csr,
		c64$write_fgpr_d,
		c64$write_igpr_d;
  wire [31 : 0] c64$dmem_master_araddr,
		c64$dmem_master_awaddr,
		c64$imem_master_araddr,
		c64$imem_master_awaddr;
  wire [11 : 0] c64$rw_csr_r;
  wire [9 : 0] c64$dmem_master_aruser,
	       c64$dmem_master_awuser,
	       c64$dmem_master_m_bvalid_buser,
	       c64$dmem_master_m_rvalid_ruser,
	       c64$imem_master_aruser,
	       c64$imem_master_awuser,
	       c64$imem_master_m_bvalid_buser,
	       c64$imem_master_m_rvalid_ruser;
  wire [7 : 0] c64$dmem_master_arlen,
	       c64$dmem_master_awlen,
	       c64$dmem_master_wstrb,
	       c64$imem_master_arlen,
	       c64$imem_master_awlen,
	       c64$imem_master_wstrb;
  wire [4 : 0] c64$read_fgpr_r,
	       c64$read_igpr_r,
	       c64$write_fgpr_r,
	       c64$write_igpr_r;
  wire [3 : 0] c64$dmem_master_arcache,
	       c64$dmem_master_arid,
	       c64$dmem_master_arqos,
	       c64$dmem_master_arregion,
	       c64$dmem_master_awcache,
	       c64$dmem_master_awid,
	       c64$dmem_master_awqos,
	       c64$dmem_master_awregion,
	       c64$dmem_master_m_bvalid_bid,
	       c64$dmem_master_m_rvalid_rid,
	       c64$dmem_master_wid,
	       c64$imem_master_arcache,
	       c64$imem_master_arid,
	       c64$imem_master_arqos,
	       c64$imem_master_arregion,
	       c64$imem_master_awcache,
	       c64$imem_master_awid,
	       c64$imem_master_awqos,
	       c64$imem_master_awregion,
	       c64$imem_master_m_bvalid_bid,
	       c64$imem_master_m_rvalid_rid,
	       c64$imem_master_wid;
  wire [2 : 0] c64$dmem_master_arprot,
	       c64$dmem_master_arsize,
	       c64$dmem_master_awprot,
	       c64$dmem_master_awsize,
	       c64$imem_master_arprot,
	       c64$imem_master_arsize,
	       c64$imem_master_awprot,
	       c64$imem_master_awsize;
  wire [1 : 0] c64$dmem_master_arburst,
	       c64$dmem_master_awburst,
	       c64$dmem_master_m_bvalid_bresp,
	       c64$dmem_master_m_rvalid_rresp,
	       c64$imem_master_arburst,
	       c64$imem_master_awburst,
	       c64$imem_master_m_bvalid_bresp,
	       c64$imem_master_m_rvalid_rresp,
	       c64$set_external_interrupt_i;
  wire c64$EN_clint_msip,
       c64$EN_clint_mtime,
       c64$EN_clint_mtip,
       c64$EN_reset,
       c64$EN_run_continue,
       c64$EN_rw_csr,
       c64$EN_set_external_interrupt,
       c64$EN_stop,
       c64$EN_write_fgpr,
       c64$EN_write_igpr,
       c64$RDY_rw_csr,
       c64$RDY_set_external_interrupt,
       c64$RDY_write_fgpr,
       c64$RDY_write_igpr,
       c64$boot_sequence_bootseq,
       c64$clint_msip_intrpt,
       c64$clint_mtip_intrpt,
       c64$dmem_master_arlock,
       c64$dmem_master_arvalid,
       c64$dmem_master_awlock,
       c64$dmem_master_awvalid,
       c64$dmem_master_bready,
       c64$dmem_master_m_arready_arready,
       c64$dmem_master_m_awready_awready,
       c64$dmem_master_m_bvalid_bvalid,
       c64$dmem_master_m_rvalid_rlast,
       c64$dmem_master_m_rvalid_rvalid,
       c64$dmem_master_m_wready_wready,
       c64$dmem_master_rready,
       c64$dmem_master_wlast,
       c64$dmem_master_wvalid,
       c64$halted,
       c64$imem_master_arlock,
       c64$imem_master_arvalid,
       c64$imem_master_awlock,
       c64$imem_master_awvalid,
       c64$imem_master_bready,
       c64$imem_master_m_arready_arready,
       c64$imem_master_m_awready_awready,
       c64$imem_master_m_bvalid_bvalid,
       c64$imem_master_m_rvalid_rlast,
       c64$imem_master_m_rvalid_rvalid,
       c64$imem_master_m_wready_wready,
       c64$imem_master_rready,
       c64$imem_master_wlast,
       c64$imem_master_wvalid,
       c64$reset_complete,
       c64$rw_csr_write;

  // ports of submodule master_xactor_f_rd_addr
  wire [74 : 0] master_xactor_f_rd_addr$D_IN, master_xactor_f_rd_addr$D_OUT;
  wire master_xactor_f_rd_addr$CLR,
       master_xactor_f_rd_addr$DEQ,
       master_xactor_f_rd_addr$EMPTY_N,
       master_xactor_f_rd_addr$ENQ,
       master_xactor_f_rd_addr$FULL_N;

  // ports of submodule master_xactor_f_rd_data
  wire [80 : 0] master_xactor_f_rd_data$D_IN, master_xactor_f_rd_data$D_OUT;
  wire master_xactor_f_rd_data$CLR,
       master_xactor_f_rd_data$DEQ,
       master_xactor_f_rd_data$EMPTY_N,
       master_xactor_f_rd_data$ENQ,
       master_xactor_f_rd_data$FULL_N;

  // ports of submodule master_xactor_f_wr_addr
  wire [74 : 0] master_xactor_f_wr_addr$D_IN, master_xactor_f_wr_addr$D_OUT;
  wire master_xactor_f_wr_addr$CLR,
       master_xactor_f_wr_addr$DEQ,
       master_xactor_f_wr_addr$EMPTY_N,
       master_xactor_f_wr_addr$ENQ,
       master_xactor_f_wr_addr$FULL_N;

  // ports of submodule master_xactor_f_wr_data
  wire [76 : 0] master_xactor_f_wr_data$D_IN, master_xactor_f_wr_data$D_OUT;
  wire master_xactor_f_wr_data$CLR,
       master_xactor_f_wr_data$DEQ,
       master_xactor_f_wr_data$EMPTY_N,
       master_xactor_f_wr_data$ENQ,
       master_xactor_f_wr_data$FULL_N;

  // ports of submodule master_xactor_f_wr_resp
  wire [15 : 0] master_xactor_f_wr_resp$D_IN;
  wire master_xactor_f_wr_resp$CLR,
       master_xactor_f_wr_resp$DEQ,
       master_xactor_f_wr_resp$EMPTY_N,
       master_xactor_f_wr_resp$ENQ,
       master_xactor_f_wr_resp$FULL_N;

  // ports of submodule response_to_DTM
  reg [33 : 0] response_to_DTM$D_IN;
  wire [33 : 0] response_to_DTM$D_OUT;
  wire response_to_DTM$CLR,
       response_to_DTM$DEQ,
       response_to_DTM$EMPTY_N,
       response_to_DTM$ENQ,
       response_to_DTM$FULL_N;

  // ports of submodule slave_xactor_f_rd_addr
  wire [74 : 0] slave_xactor_f_rd_addr$D_IN, slave_xactor_f_rd_addr$D_OUT;
  wire slave_xactor_f_rd_addr$CLR,
       slave_xactor_f_rd_addr$DEQ,
       slave_xactor_f_rd_addr$EMPTY_N,
       slave_xactor_f_rd_addr$ENQ,
       slave_xactor_f_rd_addr$FULL_N;

  // ports of submodule slave_xactor_f_rd_data
  wire [80 : 0] slave_xactor_f_rd_data$D_IN, slave_xactor_f_rd_data$D_OUT;
  wire slave_xactor_f_rd_data$CLR,
       slave_xactor_f_rd_data$DEQ,
       slave_xactor_f_rd_data$EMPTY_N,
       slave_xactor_f_rd_data$ENQ,
       slave_xactor_f_rd_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_addr
  wire [74 : 0] slave_xactor_f_wr_addr$D_IN, slave_xactor_f_wr_addr$D_OUT;
  wire slave_xactor_f_wr_addr$CLR,
       slave_xactor_f_wr_addr$DEQ,
       slave_xactor_f_wr_addr$EMPTY_N,
       slave_xactor_f_wr_addr$ENQ,
       slave_xactor_f_wr_addr$FULL_N;

  // ports of submodule slave_xactor_f_wr_data
  wire [76 : 0] slave_xactor_f_wr_data$D_IN, slave_xactor_f_wr_data$D_OUT;
  wire slave_xactor_f_wr_data$CLR,
       slave_xactor_f_wr_data$DEQ,
       slave_xactor_f_wr_data$EMPTY_N,
       slave_xactor_f_wr_data$ENQ,
       slave_xactor_f_wr_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_resp
  wire [15 : 0] slave_xactor_f_wr_resp$D_IN, slave_xactor_f_wr_resp$D_OUT;
  wire slave_xactor_f_wr_resp$CLR,
       slave_xactor_f_wr_resp$DEQ,
       slave_xactor_f_wr_resp$EMPTY_N,
       slave_xactor_f_wr_resp$ENQ,
       slave_xactor_f_wr_resp$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_access_csrs,
       CAN_FIRE_RL_access_memory_request,
       CAN_FIRE_RL_access_register_or_pc,
       CAN_FIRE_RL_generate_nonexistent,
       CAN_FIRE_RL_halt_request,
       CAN_FIRE_RL_halt_status_of_cpu,
       CAN_FIRE_RL_read_memory_response,
       CAN_FIRE_RL_reset,
       CAN_FIRE_RL_resume_request,
       CAN_FIRE_RL_resume_status,
       CAN_FIRE_RL_rl_rd_respond,
       CAN_FIRE_RL_rl_wr_response,
       CAN_FIRE_RL_rst_status,
       CAN_FIRE_RL_wr_gen_haltreq__dreg_update,
       CAN_FIRE_RL_wr_gen_resumereq__dreg_update,
       CAN_FIRE_RL_write_memory_response,
       CAN_FIRE_boot_sequence,
       CAN_FIRE_clint_msip,
       CAN_FIRE_clint_mtime,
       CAN_FIRE_clint_mtip,
       CAN_FIRE_debug_master_m_arready,
       CAN_FIRE_debug_master_m_awready,
       CAN_FIRE_debug_master_m_bvalid,
       CAN_FIRE_debug_master_m_rvalid,
       CAN_FIRE_debug_master_m_wready,
       CAN_FIRE_debug_slave_m_arvalid,
       CAN_FIRE_debug_slave_m_awvalid,
       CAN_FIRE_debug_slave_m_bready,
       CAN_FIRE_debug_slave_m_rready,
       CAN_FIRE_debug_slave_m_wvalid,
       CAN_FIRE_dmem_master_m_arready,
       CAN_FIRE_dmem_master_m_awready,
       CAN_FIRE_dmem_master_m_bvalid,
       CAN_FIRE_dmem_master_m_rvalid,
       CAN_FIRE_dmem_master_m_wready,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_request_from_dtm,
       CAN_FIRE_response_to_dtm,
       CAN_FIRE_set_external_interrupt,
       WILL_FIRE_RL_access_csrs,
       WILL_FIRE_RL_access_memory_request,
       WILL_FIRE_RL_access_register_or_pc,
       WILL_FIRE_RL_generate_nonexistent,
       WILL_FIRE_RL_halt_request,
       WILL_FIRE_RL_halt_status_of_cpu,
       WILL_FIRE_RL_read_memory_response,
       WILL_FIRE_RL_reset,
       WILL_FIRE_RL_resume_request,
       WILL_FIRE_RL_resume_status,
       WILL_FIRE_RL_rl_rd_respond,
       WILL_FIRE_RL_rl_wr_response,
       WILL_FIRE_RL_rst_status,
       WILL_FIRE_RL_wr_gen_haltreq__dreg_update,
       WILL_FIRE_RL_wr_gen_resumereq__dreg_update,
       WILL_FIRE_RL_write_memory_response,
       WILL_FIRE_boot_sequence,
       WILL_FIRE_clint_msip,
       WILL_FIRE_clint_mtime,
       WILL_FIRE_clint_mtip,
       WILL_FIRE_debug_master_m_arready,
       WILL_FIRE_debug_master_m_awready,
       WILL_FIRE_debug_master_m_bvalid,
       WILL_FIRE_debug_master_m_rvalid,
       WILL_FIRE_debug_master_m_wready,
       WILL_FIRE_debug_slave_m_arvalid,
       WILL_FIRE_debug_slave_m_awvalid,
       WILL_FIRE_debug_slave_m_bready,
       WILL_FIRE_debug_slave_m_rready,
       WILL_FIRE_debug_slave_m_wvalid,
       WILL_FIRE_dmem_master_m_arready,
       WILL_FIRE_dmem_master_m_awready,
       WILL_FIRE_dmem_master_m_bvalid,
       WILL_FIRE_dmem_master_m_rvalid,
       WILL_FIRE_dmem_master_m_wready,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_request_from_dtm,
       WILL_FIRE_response_to_dtm,
       WILL_FIRE_set_external_interrupt;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_abstract_Data_0$port0__write_1__VAL_1,
		MUX_abstract_Data_1$port0__write_1__VAL_1;
  wire MUX_abstract_Data_0$port0__write_1__SEL_1,
       MUX_abstract_Data_0$port0__write_1__SEL_2,
       MUX_abstract_Data_0$port0__write_1__SEL_3,
       MUX_abstract_Data_1$port0__write_1__SEL_1,
       MUX_abstract_Data_1$port0__write_1__SEL_2,
       MUX_abstract_Data_1$port0__write_1__SEL_3,
       MUX_rg_resumeack$port0__write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d129,
	       IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d182,
	       request_data_wdata__h32053,
	       y_avValue_rdata__h11299;
  reg [33 : 0] v__h37237;
  reg [31 : 0] SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d98,
	       SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d99,
	       SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105,
	       SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42,
	       spliced_bits__h37628,
	       spliced_bits__h37910;
  reg [7 : 0] _theResult____h31668, write_strobe__h31911;
  reg [1 : 0] CASE_slave_xactor_f_rd_addrD_OUT_BITS_21_TO_1_ETC__q4,
	      CASE_slave_xactor_f_wr_addrD_OUT_BITS_21_TO_1_ETC__q3;
  wire [63 : 0] IF_rg_control_2_BIT_5_56_THEN_c64_read_fgpr_rg_ETC___d460,
		write_data___1__h31338,
		x1_avValue_rdata__h11483,
		x1_avValue_rdata__h11495,
		x1_avValue_rdata__h11507,
		x1_avValue_rdata__h11520,
		x1_avValue_rdata__h11534,
		x1_avValue_rdata__h11555;
  wire [33 : 0] v__h34006,
		v__h34128,
		v__h37317,
		v__h37475,
		v__h37499,
		v__h37761,
		v__h37779;
  wire [31 : 0] _dfoo122,
		_dfoo124,
		_dfoo126,
		_dfoo128,
		_dfoo130,
		_dfoo132,
		_dfoo134,
		_dfoo136,
		_dfoo138,
		_dfoo140,
		_dfoo142,
		_dfoo144,
		_dfoo34,
		_dfoo36,
		_dfoo38,
		_dfoo40,
		_dfoo42,
		_dfoo44,
		_dfoo46,
		_dfoo48,
		_dfoo50,
		_dfoo52,
		_dfoo54,
		_dfoo56,
		_dfoo58,
		_dfoo60,
		_dfoo62,
		_dfoo64,
		address___1__h31912,
		bs__h36437,
		slave_xactor_f_rd_addrD_OUT_BITS_74_TO_43_MIN_ETC__q2,
		slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1,
		spliced_bits__h37416,
		spliced_bits__h38126,
		spliced_bits__h38178,
		spliced_bits__h38295,
		spliced_bits__h38354,
		spliced_bits__h38453,
		spliced_bits__h38504,
		spliced_bits__h38563,
		x_port1__read__h36252,
		x_port1__read__h36254,
		x_port1__read__h36256,
		x_port1__read__h36258,
		x_port1__read__h36260,
		x_port1__read__h36262,
		x_port1__read__h36264,
		x_port1__read__h36266,
		x_port1__read__h36268,
		x_port1__read__h36270,
		x_port1__read__h36272,
		x_port1__read__h36274,
		x_port1__read__h36658,
		x_port1__read__h36660,
		x_port1__read__h36662,
		x_port1__read__h36664,
		x_port1__read__h36666,
		x_port1__read__h36668,
		x_port1__read__h36670,
		x_port1__read__h36672,
		x_port1__read__h36674,
		x_port1__read__h36676,
		x_port1__read__h36678,
		x_port1__read__h36680,
		x_port1__read__h36682,
		x_port1__read__h36684,
		x_port1__read__h36686,
		x_port1__read__h36688;
  wire [30 : 0] r1__read__h34270;
  wire [29 : 0] r1__read__h34282;
  wire [26 : 0] r1__read__h35203, r1__read__h35770;
  wire [23 : 0] r1__read__h34718, r1__read__h35215;
  wire [22 : 0] r1__read__h34730;
  wire [21 : 0] r1__read__h34742;
  wire [20 : 0] r1__read__h34754, r1__read__h35227;
  wire [19 : 0] r1__read__h34766,
		r1__read__h35239,
		r1__read__h35661,
		r1__read__h35782;
  wire [18 : 0] r1__read__h34778;
  wire [17 : 0] r1__read__h34790;
  wire [16 : 0] r1__read__h34802, r1__read__h35794;
  wire [15 : 0] r1__read__h34294, r1__read__h34814, r1__read__h35806;
  wire [14 : 0] r1__read__h34826, r1__read__h35818;
  wire [11 : 0] r1__read__h35830;
  wire [7 : 0] request_data_wstrb__h32054, write_strobe___1__h33287;
  wire [5 : 0] i__h37794, r1__read__h34306, x__h37799;
  wire [4 : 0] r1__read__h34318;
  wire [3 : 0] index__h10197,
	       index__h26864,
	       x__h11613,
	       x__h12464,
	       x__h24861,
	       x__h26901,
	       x__h37682;
  wire [2 : 0] r1__read__h34330;
  wire [1 : 0] IF_NOT_slave_xactor_f_rd_addr_first__3_BITS_74_ETC___d81,
	       IF_NOT_slave_xactor_f_wr_addr_first__12_BITS_7_ETC___d422,
	       r1__read__h34342;
  wire NOT_request_from_dtm_requestfrmDTM_BITS_39_TO__ETC___d598,
       NOT_request_from_dtm_requestfrmDTM_BITS_39_TO__ETC___d622,
       NOT_slave_xactor_f_rd_addr_first__3_BITS_74_TO_ETC___d79,
       _dfoo101,
       _dfoo103,
       _dfoo105,
       _dfoo107,
       _dfoo109,
       _dfoo111,
       _dfoo113,
       _dfoo115,
       _dfoo117,
       _dfoo119,
       _dfoo165,
       _dfoo167,
       _dfoo33,
       _dfoo35,
       _dfoo37,
       _dfoo39,
       _dfoo41,
       _dfoo43,
       _dfoo45,
       _dfoo47,
       _dfoo49,
       _dfoo51,
       _dfoo53,
       _dfoo55,
       _dfoo57,
       _dfoo59,
       _dfoo61,
       _dfoo63,
       _dfoo97,
       _dfoo99,
       _dor1start_program_exec$EN_port1__write,
       r__h34864,
       request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d661,
       request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d685,
       request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720,
       request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d574,
       request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d576,
       request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d597,
       request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d605,
       request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d621,
       slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d15,
       slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d16,
       slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d19,
       slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d21,
       slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d49,
       slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d63,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d225,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d229,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d231,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d233,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d235,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d237,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d239,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d241,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d243,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d245,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d247,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d249,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d251,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d254,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d256,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d258,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d260,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d262,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d264,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d266,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d268,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d270,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d272,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d274,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d280,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d281,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d282,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d283,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d284,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d285,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d286,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d287,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d288,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d289,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d290,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d291,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352,
       slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386,
       x_port1__read__h35862;

  // action method set_external_interrupt
  assign RDY_set_external_interrupt = c64$RDY_set_external_interrupt ;
  assign CAN_FIRE_set_external_interrupt = c64$RDY_set_external_interrupt ;
  assign WILL_FIRE_set_external_interrupt = EN_set_external_interrupt ;

  // action method request_from_dtm
  assign RDY_request_from_dtm = response_to_DTM$FULL_N ;
  assign CAN_FIRE_request_from_dtm = response_to_DTM$FULL_N ;
  assign WILL_FIRE_request_from_dtm = EN_request_from_dtm ;

  // actionvalue method response_to_dtm
  assign response_to_dtm = response_to_DTM$D_OUT ;
  assign RDY_response_to_dtm = response_to_DTM$EMPTY_N ;
  assign CAN_FIRE_response_to_dtm = response_to_DTM$EMPTY_N ;
  assign WILL_FIRE_response_to_dtm = EN_response_to_dtm ;

  // value method debug_master_m_awvalid
  assign debug_master_awvalid = master_xactor_f_wr_addr$EMPTY_N ;

  // value method debug_master_m_awaddr
  assign debug_master_awaddr = master_xactor_f_wr_addr$D_OUT[74:43] ;

  // value method debug_master_m_awprot
  assign debug_master_awprot = master_xactor_f_wr_addr$D_OUT[42:40] ;

  // value method debug_master_m_awuser
  assign debug_master_awuser = master_xactor_f_wr_addr$D_OUT[39:30] ;

  // value method debug_master_m_awlen
  assign debug_master_awlen = master_xactor_f_wr_addr$D_OUT[29:22] ;

  // value method debug_master_m_awsize
  assign debug_master_awsize = master_xactor_f_wr_addr$D_OUT[21:19] ;

  // value method debug_master_m_awburst
  assign debug_master_awburst = master_xactor_f_wr_addr$D_OUT[18:17] ;

  // value method debug_master_m_awlock
  assign debug_master_awlock = master_xactor_f_wr_addr$D_OUT[16] ;

  // value method debug_master_m_awcache
  assign debug_master_awcache = master_xactor_f_wr_addr$D_OUT[15:12] ;

  // value method debug_master_m_awqos
  assign debug_master_awqos = master_xactor_f_wr_addr$D_OUT[11:8] ;

  // value method debug_master_m_awregion
  assign debug_master_awregion = master_xactor_f_wr_addr$D_OUT[7:4] ;

  // value method debug_master_m_awid
  assign debug_master_awid = master_xactor_f_wr_addr$D_OUT[3:0] ;

  // action method debug_master_m_awready
  assign CAN_FIRE_debug_master_m_awready = 1'd1 ;
  assign WILL_FIRE_debug_master_m_awready = 1'd1 ;

  // value method debug_master_m_wvalid
  assign debug_master_wvalid = master_xactor_f_wr_data$EMPTY_N ;

  // value method debug_master_m_wdata
  assign debug_master_wdata = master_xactor_f_wr_data$D_OUT[76:13] ;

  // value method debug_master_m_wstrb
  assign debug_master_wstrb = master_xactor_f_wr_data$D_OUT[12:5] ;

  // value method debug_master_m_wlast
  assign debug_master_wlast = master_xactor_f_wr_data$D_OUT[0] ;

  // value method debug_master_m_wid
  assign debug_master_wid = master_xactor_f_wr_data$D_OUT[4:1] ;

  // action method debug_master_m_wready
  assign CAN_FIRE_debug_master_m_wready = 1'd1 ;
  assign WILL_FIRE_debug_master_m_wready = 1'd1 ;

  // action method debug_master_m_bvalid
  assign CAN_FIRE_debug_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_debug_master_m_bvalid = 1'd1 ;

  // value method debug_master_m_bready
  assign debug_master_bready = master_xactor_f_wr_resp$FULL_N ;

  // value method debug_master_m_arvalid
  assign debug_master_arvalid = master_xactor_f_rd_addr$EMPTY_N ;

  // value method debug_master_m_araddr
  assign debug_master_araddr = master_xactor_f_rd_addr$D_OUT[74:43] ;

  // value method debug_master_m_arprot
  assign debug_master_arprot = master_xactor_f_rd_addr$D_OUT[42:40] ;

  // value method debug_master_m_aruser
  assign debug_master_aruser = master_xactor_f_rd_addr$D_OUT[39:30] ;

  // value method debug_master_m_arlen
  assign debug_master_arlen = master_xactor_f_rd_addr$D_OUT[29:22] ;

  // value method debug_master_m_arsize
  assign debug_master_arsize = master_xactor_f_rd_addr$D_OUT[21:19] ;

  // value method debug_master_m_arburst
  assign debug_master_arburst = master_xactor_f_rd_addr$D_OUT[18:17] ;

  // value method debug_master_m_arlock
  assign debug_master_arlock = master_xactor_f_rd_addr$D_OUT[16] ;

  // value method debug_master_m_arcache
  assign debug_master_arcache = master_xactor_f_rd_addr$D_OUT[15:12] ;

  // value method debug_master_m_arqos
  assign debug_master_arqos = master_xactor_f_rd_addr$D_OUT[11:8] ;

  // value method debug_master_m_arregion
  assign debug_master_arregion = master_xactor_f_rd_addr$D_OUT[7:4] ;

  // value method debug_master_m_arid
  assign debug_master_arid = master_xactor_f_rd_addr$D_OUT[3:0] ;

  // action method debug_master_m_arready
  assign CAN_FIRE_debug_master_m_arready = 1'd1 ;
  assign WILL_FIRE_debug_master_m_arready = 1'd1 ;

  // action method debug_master_m_rvalid
  assign CAN_FIRE_debug_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_debug_master_m_rvalid = 1'd1 ;

  // value method debug_master_m_rready
  assign debug_master_rready = master_xactor_f_rd_data$FULL_N ;

  // action method debug_slave_m_awvalid
  assign RDY_debug_slave_m_awvalid = slave_xactor_f_wr_addr$FULL_N ;
  assign CAN_FIRE_debug_slave_m_awvalid = slave_xactor_f_wr_addr$FULL_N ;
  assign WILL_FIRE_debug_slave_m_awvalid = EN_debug_slave_m_awvalid ;

  // value method debug_slave_m_awready
  assign debug_slave_awready = slave_xactor_f_wr_addr$FULL_N ;

  // action method debug_slave_m_wvalid
  assign RDY_debug_slave_m_wvalid = slave_xactor_f_wr_data$FULL_N ;
  assign CAN_FIRE_debug_slave_m_wvalid = slave_xactor_f_wr_data$FULL_N ;
  assign WILL_FIRE_debug_slave_m_wvalid = EN_debug_slave_m_wvalid ;

  // value method debug_slave_m_wready
  assign debug_slave_wready = slave_xactor_f_wr_data$FULL_N ;

  // value method debug_slave_m_bvalid
  assign debug_slave_bvalid = slave_xactor_f_wr_resp$EMPTY_N ;

  // value method debug_slave_m_bresp
  assign debug_slave_bresp = slave_xactor_f_wr_resp$D_OUT[15:14] ;

  // value method debug_slave_m_buser
  assign debug_slave_buser = slave_xactor_f_wr_resp$D_OUT[13:4] ;

  // value method debug_slave_m_bid
  assign debug_slave_bid = slave_xactor_f_wr_resp$D_OUT[3:0] ;

  // action method debug_slave_m_bready
  assign CAN_FIRE_debug_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_debug_slave_m_bready = 1'd1 ;

  // action method debug_slave_m_arvalid
  assign CAN_FIRE_debug_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_debug_slave_m_arvalid = 1'd1 ;

  // value method debug_slave_m_arready
  assign debug_slave_arready = slave_xactor_f_rd_addr$FULL_N ;

  // value method debug_slave_m_rvalid
  assign debug_slave_rvalid = slave_xactor_f_rd_data$EMPTY_N ;

  // value method debug_slave_m_rresp
  assign debug_slave_rresp = slave_xactor_f_rd_data$D_OUT[80:79] ;

  // value method debug_slave_m_rdata
  assign debug_slave_rdata = slave_xactor_f_rd_data$D_OUT[78:15] ;

  // value method debug_slave_m_rlast
  assign debug_slave_rlast = slave_xactor_f_rd_data$D_OUT[14] ;

  // value method debug_slave_m_ruser
  assign debug_slave_ruser = slave_xactor_f_rd_data$D_OUT[13:4] ;

  // value method debug_slave_m_rid
  assign debug_slave_rid = slave_xactor_f_rd_data$D_OUT[3:0] ;

  // action method debug_slave_m_rready
  assign CAN_FIRE_debug_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_debug_slave_m_rready = 1'd1 ;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = c64$imem_master_awvalid ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = c64$imem_master_awaddr ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = c64$imem_master_awprot ;

  // value method imem_master_m_awuser
  assign imem_master_awuser = c64$imem_master_awuser ;

  // value method imem_master_m_awlen
  assign imem_master_awlen = c64$imem_master_awlen ;

  // value method imem_master_m_awsize
  assign imem_master_awsize = c64$imem_master_awsize ;

  // value method imem_master_m_awburst
  assign imem_master_awburst = c64$imem_master_awburst ;

  // value method imem_master_m_awlock
  assign imem_master_awlock = c64$imem_master_awlock ;

  // value method imem_master_m_awcache
  assign imem_master_awcache = c64$imem_master_awcache ;

  // value method imem_master_m_awqos
  assign imem_master_awqos = c64$imem_master_awqos ;

  // value method imem_master_m_awregion
  assign imem_master_awregion = c64$imem_master_awregion ;

  // value method imem_master_m_awid
  assign imem_master_awid = c64$imem_master_awid ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = c64$imem_master_wvalid ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = c64$imem_master_wdata ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = c64$imem_master_wstrb ;

  // value method imem_master_m_wlast
  assign imem_master_wlast = c64$imem_master_wlast ;

  // value method imem_master_m_wid
  assign imem_master_wid = c64$imem_master_wid ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = c64$imem_master_bready ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = c64$imem_master_arvalid ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = c64$imem_master_araddr ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = c64$imem_master_arprot ;

  // value method imem_master_m_aruser
  assign imem_master_aruser = c64$imem_master_aruser ;

  // value method imem_master_m_arlen
  assign imem_master_arlen = c64$imem_master_arlen ;

  // value method imem_master_m_arsize
  assign imem_master_arsize = c64$imem_master_arsize ;

  // value method imem_master_m_arburst
  assign imem_master_arburst = c64$imem_master_arburst ;

  // value method imem_master_m_arlock
  assign imem_master_arlock = c64$imem_master_arlock ;

  // value method imem_master_m_arcache
  assign imem_master_arcache = c64$imem_master_arcache ;

  // value method imem_master_m_arqos
  assign imem_master_arqos = c64$imem_master_arqos ;

  // value method imem_master_m_arregion
  assign imem_master_arregion = c64$imem_master_arregion ;

  // value method imem_master_m_arid
  assign imem_master_arid = c64$imem_master_arid ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = c64$imem_master_rready ;

  // value method dmem_master_m_awvalid
  assign dmem_master_awvalid = c64$dmem_master_awvalid ;

  // value method dmem_master_m_awaddr
  assign dmem_master_awaddr = c64$dmem_master_awaddr ;

  // value method dmem_master_m_awprot
  assign dmem_master_awprot = c64$dmem_master_awprot ;

  // value method dmem_master_m_awuser
  assign dmem_master_awuser = c64$dmem_master_awuser ;

  // value method dmem_master_m_awlen
  assign dmem_master_awlen = c64$dmem_master_awlen ;

  // value method dmem_master_m_awsize
  assign dmem_master_awsize = c64$dmem_master_awsize ;

  // value method dmem_master_m_awburst
  assign dmem_master_awburst = c64$dmem_master_awburst ;

  // value method dmem_master_m_awlock
  assign dmem_master_awlock = c64$dmem_master_awlock ;

  // value method dmem_master_m_awcache
  assign dmem_master_awcache = c64$dmem_master_awcache ;

  // value method dmem_master_m_awqos
  assign dmem_master_awqos = c64$dmem_master_awqos ;

  // value method dmem_master_m_awregion
  assign dmem_master_awregion = c64$dmem_master_awregion ;

  // value method dmem_master_m_awid
  assign dmem_master_awid = c64$dmem_master_awid ;

  // action method dmem_master_m_awready
  assign CAN_FIRE_dmem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_awready = 1'd1 ;

  // value method dmem_master_m_wvalid
  assign dmem_master_wvalid = c64$dmem_master_wvalid ;

  // value method dmem_master_m_wdata
  assign dmem_master_wdata = c64$dmem_master_wdata ;

  // value method dmem_master_m_wstrb
  assign dmem_master_wstrb = c64$dmem_master_wstrb ;

  // value method dmem_master_m_wlast
  assign dmem_master_wlast = c64$dmem_master_wlast ;

  // value method dmem_master_m_wid
  assign dmem_master_wid = c64$dmem_master_wid ;

  // action method dmem_master_m_wready
  assign CAN_FIRE_dmem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_wready = 1'd1 ;

  // action method dmem_master_m_bvalid
  assign CAN_FIRE_dmem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_bvalid = 1'd1 ;

  // value method dmem_master_m_bready
  assign dmem_master_bready = c64$dmem_master_bready ;

  // value method dmem_master_m_arvalid
  assign dmem_master_arvalid = c64$dmem_master_arvalid ;

  // value method dmem_master_m_araddr
  assign dmem_master_araddr = c64$dmem_master_araddr ;

  // value method dmem_master_m_arprot
  assign dmem_master_arprot = c64$dmem_master_arprot ;

  // value method dmem_master_m_aruser
  assign dmem_master_aruser = c64$dmem_master_aruser ;

  // value method dmem_master_m_arlen
  assign dmem_master_arlen = c64$dmem_master_arlen ;

  // value method dmem_master_m_arsize
  assign dmem_master_arsize = c64$dmem_master_arsize ;

  // value method dmem_master_m_arburst
  assign dmem_master_arburst = c64$dmem_master_arburst ;

  // value method dmem_master_m_arlock
  assign dmem_master_arlock = c64$dmem_master_arlock ;

  // value method dmem_master_m_arcache
  assign dmem_master_arcache = c64$dmem_master_arcache ;

  // value method dmem_master_m_arqos
  assign dmem_master_arqos = c64$dmem_master_arqos ;

  // value method dmem_master_m_arregion
  assign dmem_master_arregion = c64$dmem_master_arregion ;

  // value method dmem_master_m_arid
  assign dmem_master_arid = c64$dmem_master_arid ;

  // action method dmem_master_m_arready
  assign CAN_FIRE_dmem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_arready = 1'd1 ;

  // action method dmem_master_m_rvalid
  assign CAN_FIRE_dmem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_rvalid = 1'd1 ;

  // value method dmem_master_m_rready
  assign dmem_master_rready = c64$dmem_master_rready ;

  // action method boot_sequence
  assign CAN_FIRE_boot_sequence = 1'd1 ;
  assign WILL_FIRE_boot_sequence = 1'd1 ;

  // action method clint_msip
  assign RDY_clint_msip = 1'd1 ;
  assign CAN_FIRE_clint_msip = 1'd1 ;
  assign WILL_FIRE_clint_msip = EN_clint_msip ;

  // action method clint_mtip
  assign RDY_clint_mtip = 1'd1 ;
  assign CAN_FIRE_clint_mtip = 1'd1 ;
  assign WILL_FIRE_clint_mtip = EN_clint_mtip ;

  // action method clint_mtime
  assign RDY_clint_mtime = 1'd1 ;
  assign CAN_FIRE_clint_mtime = 1'd1 ;
  assign WILL_FIRE_clint_mtime = EN_clint_mtime ;

  // submodule c64
  mkcore_AXI4 c64(.reset_vector(reset_vector),
		  .CLK(CLK),
		  .RST_N(RST_N),
		  .boot_sequence_bootseq(c64$boot_sequence_bootseq),
		  .clint_msip_intrpt(c64$clint_msip_intrpt),
		  .clint_mtime_c_mtime(c64$clint_mtime_c_mtime),
		  .clint_mtip_intrpt(c64$clint_mtip_intrpt),
		  .dmem_master_m_arready_arready(c64$dmem_master_m_arready_arready),
		  .dmem_master_m_awready_awready(c64$dmem_master_m_awready_awready),
		  .dmem_master_m_bvalid_bid(c64$dmem_master_m_bvalid_bid),
		  .dmem_master_m_bvalid_bresp(c64$dmem_master_m_bvalid_bresp),
		  .dmem_master_m_bvalid_buser(c64$dmem_master_m_bvalid_buser),
		  .dmem_master_m_bvalid_bvalid(c64$dmem_master_m_bvalid_bvalid),
		  .dmem_master_m_rvalid_rdata(c64$dmem_master_m_rvalid_rdata),
		  .dmem_master_m_rvalid_rid(c64$dmem_master_m_rvalid_rid),
		  .dmem_master_m_rvalid_rlast(c64$dmem_master_m_rvalid_rlast),
		  .dmem_master_m_rvalid_rresp(c64$dmem_master_m_rvalid_rresp),
		  .dmem_master_m_rvalid_ruser(c64$dmem_master_m_rvalid_ruser),
		  .dmem_master_m_rvalid_rvalid(c64$dmem_master_m_rvalid_rvalid),
		  .dmem_master_m_wready_wready(c64$dmem_master_m_wready_wready),
		  .imem_master_m_arready_arready(c64$imem_master_m_arready_arready),
		  .imem_master_m_awready_awready(c64$imem_master_m_awready_awready),
		  .imem_master_m_bvalid_bid(c64$imem_master_m_bvalid_bid),
		  .imem_master_m_bvalid_bresp(c64$imem_master_m_bvalid_bresp),
		  .imem_master_m_bvalid_buser(c64$imem_master_m_bvalid_buser),
		  .imem_master_m_bvalid_bvalid(c64$imem_master_m_bvalid_bvalid),
		  .imem_master_m_rvalid_rdata(c64$imem_master_m_rvalid_rdata),
		  .imem_master_m_rvalid_rid(c64$imem_master_m_rvalid_rid),
		  .imem_master_m_rvalid_rlast(c64$imem_master_m_rvalid_rlast),
		  .imem_master_m_rvalid_rresp(c64$imem_master_m_rvalid_rresp),
		  .imem_master_m_rvalid_ruser(c64$imem_master_m_rvalid_ruser),
		  .imem_master_m_rvalid_rvalid(c64$imem_master_m_rvalid_rvalid),
		  .imem_master_m_wready_wready(c64$imem_master_m_wready_wready),
		  .read_fgpr_r(c64$read_fgpr_r),
		  .read_igpr_r(c64$read_igpr_r),
		  .rw_csr_data(c64$rw_csr_data),
		  .rw_csr_r(c64$rw_csr_r),
		  .rw_csr_write(c64$rw_csr_write),
		  .set_external_interrupt_i(c64$set_external_interrupt_i),
		  .write_fgpr_d(c64$write_fgpr_d),
		  .write_fgpr_r(c64$write_fgpr_r),
		  .write_igpr_d(c64$write_igpr_d),
		  .write_igpr_r(c64$write_igpr_r),
		  .EN_set_external_interrupt(c64$EN_set_external_interrupt),
		  .EN_reset(c64$EN_reset),
		  .EN_run_continue(c64$EN_run_continue),
		  .EN_stop(c64$EN_stop),
		  .EN_write_igpr(c64$EN_write_igpr),
		  .EN_write_fgpr(c64$EN_write_fgpr),
		  .EN_rw_csr(c64$EN_rw_csr),
		  .EN_clint_msip(c64$EN_clint_msip),
		  .EN_clint_mtip(c64$EN_clint_mtip),
		  .EN_clint_mtime(c64$EN_clint_mtime),
		  .imem_master_awvalid(c64$imem_master_awvalid),
		  .imem_master_awaddr(c64$imem_master_awaddr),
		  .imem_master_awprot(c64$imem_master_awprot),
		  .imem_master_awuser(c64$imem_master_awuser),
		  .imem_master_awlen(c64$imem_master_awlen),
		  .imem_master_awsize(c64$imem_master_awsize),
		  .imem_master_awburst(c64$imem_master_awburst),
		  .imem_master_awlock(c64$imem_master_awlock),
		  .imem_master_awcache(c64$imem_master_awcache),
		  .imem_master_awqos(c64$imem_master_awqos),
		  .imem_master_awregion(c64$imem_master_awregion),
		  .imem_master_awid(c64$imem_master_awid),
		  .imem_master_wvalid(c64$imem_master_wvalid),
		  .imem_master_wdata(c64$imem_master_wdata),
		  .imem_master_wstrb(c64$imem_master_wstrb),
		  .imem_master_wlast(c64$imem_master_wlast),
		  .imem_master_wid(c64$imem_master_wid),
		  .imem_master_bready(c64$imem_master_bready),
		  .imem_master_arvalid(c64$imem_master_arvalid),
		  .imem_master_araddr(c64$imem_master_araddr),
		  .imem_master_arprot(c64$imem_master_arprot),
		  .imem_master_aruser(c64$imem_master_aruser),
		  .imem_master_arlen(c64$imem_master_arlen),
		  .imem_master_arsize(c64$imem_master_arsize),
		  .imem_master_arburst(c64$imem_master_arburst),
		  .imem_master_arlock(c64$imem_master_arlock),
		  .imem_master_arcache(c64$imem_master_arcache),
		  .imem_master_arqos(c64$imem_master_arqos),
		  .imem_master_arregion(c64$imem_master_arregion),
		  .imem_master_arid(c64$imem_master_arid),
		  .imem_master_rready(c64$imem_master_rready),
		  .dmem_master_awvalid(c64$dmem_master_awvalid),
		  .dmem_master_awaddr(c64$dmem_master_awaddr),
		  .dmem_master_awprot(c64$dmem_master_awprot),
		  .dmem_master_awuser(c64$dmem_master_awuser),
		  .dmem_master_awlen(c64$dmem_master_awlen),
		  .dmem_master_awsize(c64$dmem_master_awsize),
		  .dmem_master_awburst(c64$dmem_master_awburst),
		  .dmem_master_awlock(c64$dmem_master_awlock),
		  .dmem_master_awcache(c64$dmem_master_awcache),
		  .dmem_master_awqos(c64$dmem_master_awqos),
		  .dmem_master_awregion(c64$dmem_master_awregion),
		  .dmem_master_awid(c64$dmem_master_awid),
		  .dmem_master_wvalid(c64$dmem_master_wvalid),
		  .dmem_master_wdata(c64$dmem_master_wdata),
		  .dmem_master_wstrb(c64$dmem_master_wstrb),
		  .dmem_master_wlast(c64$dmem_master_wlast),
		  .dmem_master_wid(c64$dmem_master_wid),
		  .dmem_master_bready(c64$dmem_master_bready),
		  .dmem_master_arvalid(c64$dmem_master_arvalid),
		  .dmem_master_araddr(c64$dmem_master_araddr),
		  .dmem_master_arprot(c64$dmem_master_arprot),
		  .dmem_master_aruser(c64$dmem_master_aruser),
		  .dmem_master_arlen(c64$dmem_master_arlen),
		  .dmem_master_arsize(c64$dmem_master_arsize),
		  .dmem_master_arburst(c64$dmem_master_arburst),
		  .dmem_master_arlock(c64$dmem_master_arlock),
		  .dmem_master_arcache(c64$dmem_master_arcache),
		  .dmem_master_arqos(c64$dmem_master_arqos),
		  .dmem_master_arregion(c64$dmem_master_arregion),
		  .dmem_master_arid(c64$dmem_master_arid),
		  .dmem_master_rready(c64$dmem_master_rready),
		  .RDY_set_external_interrupt(c64$RDY_set_external_interrupt),
		  .RDY_boot_sequence(),
		  .RDY_reset(),
		  .RDY_run_continue(),
		  .reset_complete(c64$reset_complete),
		  .RDY_reset_complete(),
		  .RDY_stop(),
		  .halted(c64$halted),
		  .RDY_halted(),
		  .read_igpr(c64$read_igpr),
		  .RDY_read_igpr(),
		  .RDY_write_igpr(c64$RDY_write_igpr),
		  .read_fgpr(c64$read_fgpr),
		  .RDY_read_fgpr(),
		  .RDY_write_fgpr(c64$RDY_write_fgpr),
		  .rw_csr(c64$rw_csr),
		  .RDY_rw_csr(c64$RDY_rw_csr),
		  .RDY_clint_msip(),
		  .RDY_clint_mtip(),
		  .RDY_clint_mtime());

  // submodule master_xactor_f_rd_addr
  FIFOL1 #(.width(32'd75)) master_xactor_f_rd_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_addr$D_IN),
						   .ENQ(master_xactor_f_rd_addr$ENQ),
						   .DEQ(master_xactor_f_rd_addr$DEQ),
						   .CLR(master_xactor_f_rd_addr$CLR),
						   .D_OUT(master_xactor_f_rd_addr$D_OUT),
						   .FULL_N(master_xactor_f_rd_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_addr$EMPTY_N));

  // submodule master_xactor_f_rd_data
  FIFOL1 #(.width(32'd81)) master_xactor_f_rd_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_data$D_IN),
						   .ENQ(master_xactor_f_rd_data$ENQ),
						   .DEQ(master_xactor_f_rd_data$DEQ),
						   .CLR(master_xactor_f_rd_data$CLR),
						   .D_OUT(master_xactor_f_rd_data$D_OUT),
						   .FULL_N(master_xactor_f_rd_data$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_data$EMPTY_N));

  // submodule master_xactor_f_wr_addr
  FIFOL1 #(.width(32'd75)) master_xactor_f_wr_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_addr$D_IN),
						   .ENQ(master_xactor_f_wr_addr$ENQ),
						   .DEQ(master_xactor_f_wr_addr$DEQ),
						   .CLR(master_xactor_f_wr_addr$CLR),
						   .D_OUT(master_xactor_f_wr_addr$D_OUT),
						   .FULL_N(master_xactor_f_wr_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_addr$EMPTY_N));

  // submodule master_xactor_f_wr_data
  FIFOL1 #(.width(32'd77)) master_xactor_f_wr_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_data$D_IN),
						   .ENQ(master_xactor_f_wr_data$ENQ),
						   .DEQ(master_xactor_f_wr_data$DEQ),
						   .CLR(master_xactor_f_wr_data$CLR),
						   .D_OUT(master_xactor_f_wr_data$D_OUT),
						   .FULL_N(master_xactor_f_wr_data$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_data$EMPTY_N));

  // submodule master_xactor_f_wr_resp
  FIFOL1 #(.width(32'd16)) master_xactor_f_wr_resp(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_resp$D_IN),
						   .ENQ(master_xactor_f_wr_resp$ENQ),
						   .DEQ(master_xactor_f_wr_resp$DEQ),
						   .CLR(master_xactor_f_wr_resp$CLR),
						   .D_OUT(),
						   .FULL_N(master_xactor_f_wr_resp$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_resp$EMPTY_N));

  // submodule response_to_DTM
  FIFO2 #(.width(32'd34), .guarded(32'd1)) response_to_DTM(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(response_to_DTM$D_IN),
							   .ENQ(response_to_DTM$ENQ),
							   .DEQ(response_to_DTM$DEQ),
							   .CLR(response_to_DTM$CLR),
							   .D_OUT(response_to_DTM$D_OUT),
							   .FULL_N(response_to_DTM$FULL_N),
							   .EMPTY_N(response_to_DTM$EMPTY_N));

  // submodule slave_xactor_f_rd_addr
  FIFOL1 #(.width(32'd75)) slave_xactor_f_rd_addr(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(slave_xactor_f_rd_addr$D_IN),
						  .ENQ(slave_xactor_f_rd_addr$ENQ),
						  .DEQ(slave_xactor_f_rd_addr$DEQ),
						  .CLR(slave_xactor_f_rd_addr$CLR),
						  .D_OUT(slave_xactor_f_rd_addr$D_OUT),
						  .FULL_N(slave_xactor_f_rd_addr$FULL_N),
						  .EMPTY_N(slave_xactor_f_rd_addr$EMPTY_N));

  // submodule slave_xactor_f_rd_data
  FIFOL1 #(.width(32'd81)) slave_xactor_f_rd_data(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(slave_xactor_f_rd_data$D_IN),
						  .ENQ(slave_xactor_f_rd_data$ENQ),
						  .DEQ(slave_xactor_f_rd_data$DEQ),
						  .CLR(slave_xactor_f_rd_data$CLR),
						  .D_OUT(slave_xactor_f_rd_data$D_OUT),
						  .FULL_N(slave_xactor_f_rd_data$FULL_N),
						  .EMPTY_N(slave_xactor_f_rd_data$EMPTY_N));

  // submodule slave_xactor_f_wr_addr
  FIFOL1 #(.width(32'd75)) slave_xactor_f_wr_addr(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(slave_xactor_f_wr_addr$D_IN),
						  .ENQ(slave_xactor_f_wr_addr$ENQ),
						  .DEQ(slave_xactor_f_wr_addr$DEQ),
						  .CLR(slave_xactor_f_wr_addr$CLR),
						  .D_OUT(slave_xactor_f_wr_addr$D_OUT),
						  .FULL_N(slave_xactor_f_wr_addr$FULL_N),
						  .EMPTY_N(slave_xactor_f_wr_addr$EMPTY_N));

  // submodule slave_xactor_f_wr_data
  FIFOL1 #(.width(32'd77)) slave_xactor_f_wr_data(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(slave_xactor_f_wr_data$D_IN),
						  .ENQ(slave_xactor_f_wr_data$ENQ),
						  .DEQ(slave_xactor_f_wr_data$DEQ),
						  .CLR(slave_xactor_f_wr_data$CLR),
						  .D_OUT(slave_xactor_f_wr_data$D_OUT),
						  .FULL_N(slave_xactor_f_wr_data$FULL_N),
						  .EMPTY_N(slave_xactor_f_wr_data$EMPTY_N));

  // submodule slave_xactor_f_wr_resp
  FIFOL1 #(.width(32'd16)) slave_xactor_f_wr_resp(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(slave_xactor_f_wr_resp$D_IN),
						  .ENQ(slave_xactor_f_wr_resp$ENQ),
						  .DEQ(slave_xactor_f_wr_resp$DEQ),
						  .CLR(slave_xactor_f_wr_resp$CLR),
						  .D_OUT(slave_xactor_f_wr_resp$D_OUT),
						  .FULL_N(slave_xactor_f_wr_resp$FULL_N),
						  .EMPTY_N(slave_xactor_f_wr_resp$EMPTY_N));

  // rule RL_generate_nonexistent
  assign CAN_FIRE_RL_generate_nonexistent = 1'd1 ;
  assign WILL_FIRE_RL_generate_nonexistent = 1'd1 ;

  // rule RL_rl_rd_respond
  assign CAN_FIRE_RL_rl_rd_respond =
	     slave_xactor_f_rd_addr$EMPTY_N && slave_xactor_f_rd_data$FULL_N ;
  assign WILL_FIRE_RL_rl_rd_respond = CAN_FIRE_RL_rl_rd_respond ;

  // rule RL_rl_wr_response
  assign CAN_FIRE_RL_rl_wr_response =
	     slave_xactor_f_wr_addr$EMPTY_N &&
	     slave_xactor_f_wr_data$EMPTY_N &&
	     slave_xactor_f_wr_resp$FULL_N &&
	     !perform_reg_access ;
  assign WILL_FIRE_RL_rl_wr_response = CAN_FIRE_RL_rl_wr_response ;

  // rule RL_halt_request
  assign CAN_FIRE_RL_halt_request = wr_gen_haltreq && !rg_halted ;
  assign WILL_FIRE_RL_halt_request = CAN_FIRE_RL_halt_request ;

  // rule RL_resume_request
  assign CAN_FIRE_RL_resume_request = wr_gen_resumereq ;
  assign WILL_FIRE_RL_resume_request = wr_gen_resumereq ;

  // rule RL_reset
  assign CAN_FIRE_RL_reset = rg_hartreset && reset_status ;
  assign WILL_FIRE_RL_reset = CAN_FIRE_RL_reset ;

  // rule RL_access_register_or_pc
  assign CAN_FIRE_RL_access_register_or_pc =
	     c64$RDY_write_fgpr && c64$RDY_write_igpr && rg_halted &&
	     perform_reg_access &&
	     rg_control[12] ;
  assign WILL_FIRE_RL_access_register_or_pc =
	     CAN_FIRE_RL_access_register_or_pc ;

  // rule RL_access_csrs
  assign CAN_FIRE_RL_access_csrs =
	     c64$RDY_rw_csr && rg_halted && perform_reg_access &&
	     rg_control[17] &&
	     !rg_control[12] ;
  assign WILL_FIRE_RL_access_csrs = CAN_FIRE_RL_access_csrs ;

  // rule RL_resume_status
  assign CAN_FIRE_RL_resume_status = !wr_gen_resumereq ;
  assign WILL_FIRE_RL_resume_status = CAN_FIRE_RL_resume_status ;

  // rule RL_rst_status
  assign CAN_FIRE_RL_rst_status = 1'd1 ;
  assign WILL_FIRE_RL_rst_status = 1'd1 ;

  // rule RL_access_memory_request
  assign CAN_FIRE_RL_access_memory_request =
	     master_xactor_f_rd_addr$FULL_N &&
	     master_xactor_f_wr_addr$FULL_N &&
	     master_xactor_f_wr_data$FULL_N &&
	     (rg_sbsingleread || write_flag) ;
  assign WILL_FIRE_RL_access_memory_request =
	     CAN_FIRE_RL_access_memory_request ;

  // rule RL_read_memory_response
  assign CAN_FIRE_RL_read_memory_response = master_xactor_f_rd_data$EMPTY_N ;
  assign WILL_FIRE_RL_read_memory_response = master_xactor_f_rd_data$EMPTY_N ;

  // rule RL_halt_status_of_cpu
  assign CAN_FIRE_RL_halt_status_of_cpu = 1'd1 ;
  assign WILL_FIRE_RL_halt_status_of_cpu = 1'd1 ;

  // rule RL_write_memory_response
  assign CAN_FIRE_RL_write_memory_response = master_xactor_f_wr_resp$EMPTY_N ;
  assign WILL_FIRE_RL_write_memory_response =
	     master_xactor_f_wr_resp$EMPTY_N ;

  // rule RL_wr_gen_haltreq__dreg_update
  assign CAN_FIRE_RL_wr_gen_haltreq__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wr_gen_haltreq__dreg_update = 1'd1 ;

  // rule RL_wr_gen_resumereq__dreg_update
  assign CAN_FIRE_RL_wr_gen_resumereq__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wr_gen_resumereq__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_abstract_Data_0$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_wr_response && _dfoo167 ;
  assign MUX_abstract_Data_0$port0__write_1__SEL_2 =
	     WILL_FIRE_RL_access_register_or_pc && !rg_control[16] &&
	     rg_control[17] &&
	     (rg_control[22:20] == 3'd2 || rg_control[22:20] == 3'd3) ;
  assign MUX_abstract_Data_0$port0__write_1__SEL_3 =
	     WILL_FIRE_RL_access_csrs && !rg_control[16] &&
	     (rg_control[22:20] == 3'd2 || rg_control[22:20] == 3'd3) ;
  assign MUX_abstract_Data_1$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_wr_response && _dfoo165 ;
  assign MUX_abstract_Data_1$port0__write_1__SEL_2 =
	     WILL_FIRE_RL_access_register_or_pc && !rg_control[16] &&
	     rg_control[17] &&
	     rg_control[22:20] == 3'd3 ;
  assign MUX_abstract_Data_1$port0__write_1__SEL_3 =
	     WILL_FIRE_RL_access_csrs && !rg_control[16] &&
	     rg_control[22:20] == 3'd3 ;
  assign MUX_rg_resumeack$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_resume_status && resume && !c64$halted ;
  assign MUX_abstract_Data_0$port0__write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d225 ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo144 ;
  assign MUX_abstract_Data_1$port0__write_1__VAL_1 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d229 ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo142 ;

  // inlined wires
  assign wr_gen_haltreq_1$whas =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h10 &&
	     !request_from_dtm_requestfrmDTM[32] &&
	     request_from_dtm_requestfrmDTM[33] ;
  assign wr_gen_resumereq_1$whas =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h10 &&
	     !request_from_dtm_requestfrmDTM[33] &&
	     request_from_dtm_requestfrmDTM[32] ;
  assign _port0__write_RL_access_register_or_pc$EN_abstract_Data_0$wget =
	     !rg_control[16] && rg_control[17] &&
	     (rg_control[22:20] == 3'd2 || rg_control[22:20] == 3'd3) ;
  assign _port0__write_RL_access_register_or_pc$EN_abstract_Data_1$wget =
	     !rg_control[16] && rg_control[17] && rg_control[22:20] == 3'd3 ;
  assign rg_resumeack$EN_port0__write =
	     WILL_FIRE_RL_resume_status && resume && !c64$halted ||
	     wr_gen_resumereq ;
  assign rg_busy$EN_port1__write =
	     (WILL_FIRE_RL_access_csrs ||
	      WILL_FIRE_RL_access_register_or_pc) &&
	     !rg_control[18] ||
	     WILL_FIRE_RL_rl_rd_respond &&
	     (slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d15 ||
	      !slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d16) &&
	     slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d63 ;
  assign rg_busy$port2__read = rg_busy$EN_port1__write ? 1'd0 : rg_busy ;
  assign rg_busy$EN_port2__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d661 ;
  assign rg_busy$port3__read =
	     rg_busy$EN_port2__write || rg_busy$port2__read ;
  assign abstract_Data_0$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response && _dfoo167 ||
	     WILL_FIRE_RL_access_register_or_pc && !rg_control[16] &&
	     rg_control[17] &&
	     (rg_control[22:20] == 3'd2 || rg_control[22:20] == 3'd3) ||
	     WILL_FIRE_RL_access_csrs && !rg_control[16] &&
	     (rg_control[22:20] == 3'd2 || rg_control[22:20] == 3'd3) ;
  always@(MUX_abstract_Data_0$port0__write_1__SEL_1 or
	  MUX_abstract_Data_0$port0__write_1__VAL_1 or
	  MUX_abstract_Data_0$port0__write_1__SEL_2 or
	  IF_rg_control_2_BIT_5_56_THEN_c64_read_fgpr_rg_ETC___d460 or
	  MUX_abstract_Data_0$port0__write_1__SEL_3 or c64$rw_csr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_abstract_Data_0$port0__write_1__SEL_1:
	  abstract_Data_0$port0__write_1 =
	      MUX_abstract_Data_0$port0__write_1__VAL_1;
      MUX_abstract_Data_0$port0__write_1__SEL_2:
	  abstract_Data_0$port0__write_1 =
	      IF_rg_control_2_BIT_5_56_THEN_c64_read_fgpr_rg_ETC___d460[31:0];
      MUX_abstract_Data_0$port0__write_1__SEL_3:
	  abstract_Data_0$port0__write_1 = c64$rw_csr[31:0];
      default: abstract_Data_0$port0__write_1 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign abstract_Data_0$EN_port1__write =
	     EN_request_from_dtm && x__h37682 == 4'd0 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d685 ;
  assign abstract_Data_0$port2__read =
	     abstract_Data_0$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36252 ;
  assign abstract_Data_1$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response && _dfoo165 ||
	     WILL_FIRE_RL_access_register_or_pc && !rg_control[16] &&
	     rg_control[17] &&
	     rg_control[22:20] == 3'd3 ||
	     WILL_FIRE_RL_access_csrs && !rg_control[16] &&
	     rg_control[22:20] == 3'd3 ;
  always@(MUX_abstract_Data_1$port0__write_1__SEL_1 or
	  MUX_abstract_Data_1$port0__write_1__VAL_1 or
	  MUX_abstract_Data_1$port0__write_1__SEL_2 or
	  IF_rg_control_2_BIT_5_56_THEN_c64_read_fgpr_rg_ETC___d460 or
	  MUX_abstract_Data_1$port0__write_1__SEL_3 or c64$rw_csr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_abstract_Data_1$port0__write_1__SEL_1:
	  abstract_Data_1$port0__write_1 =
	      MUX_abstract_Data_1$port0__write_1__VAL_1;
      MUX_abstract_Data_1$port0__write_1__SEL_2:
	  abstract_Data_1$port0__write_1 =
	      IF_rg_control_2_BIT_5_56_THEN_c64_read_fgpr_rg_ETC___d460[63:32];
      MUX_abstract_Data_1$port0__write_1__SEL_3:
	  abstract_Data_1$port0__write_1 = c64$rw_csr[63:32];
      default: abstract_Data_1$port0__write_1 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign abstract_Data_1$EN_port1__write =
	     EN_request_from_dtm && x__h37682 == 4'd1 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d685 ;
  assign abstract_Data_1$port2__read =
	     abstract_Data_1$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36254 ;
  assign abstract_Data_2$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d231 ||
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d256 ||
	      _dfoo115) ;
  assign abstract_Data_2$port0__write_1 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d231 ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo140 ;
  assign abstract_Data_2$EN_port1__write =
	     EN_request_from_dtm && x__h37682 == 4'd2 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d685 ;
  assign abstract_Data_2$port2__read =
	     abstract_Data_2$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36256 ;
  assign abstract_Data_3$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d233 ||
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d258 ||
	      _dfoo113) ;
  assign abstract_Data_3$port0__write_1 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d233 ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo138 ;
  assign abstract_Data_3$EN_port1__write =
	     EN_request_from_dtm && x__h37682 == 4'd3 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d685 ;
  assign abstract_Data_3$port2__read =
	     abstract_Data_3$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36258 ;
  assign abstract_Data_4$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d235 ||
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d260 ||
	      _dfoo111) ;
  assign abstract_Data_4$port0__write_1 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d235 ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo136 ;
  assign abstract_Data_4$EN_port1__write =
	     EN_request_from_dtm && x__h37682 == 4'd4 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d685 ;
  assign abstract_Data_4$port2__read =
	     abstract_Data_4$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36260 ;
  assign abstract_Data_5$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d237 ||
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d262 ||
	      _dfoo109) ;
  assign abstract_Data_5$port0__write_1 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d237 ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo134 ;
  assign abstract_Data_5$EN_port1__write =
	     EN_request_from_dtm && x__h37682 == 4'd5 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d685 ;
  assign abstract_Data_5$port2__read =
	     abstract_Data_5$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36262 ;
  assign abstract_Data_6$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d239 ||
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d264 ||
	      _dfoo107) ;
  assign abstract_Data_6$port0__write_1 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d239 ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo132 ;
  assign abstract_Data_6$EN_port1__write =
	     EN_request_from_dtm && x__h37682 == 4'd6 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d685 ;
  assign abstract_Data_6$port2__read =
	     abstract_Data_6$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36264 ;
  assign abstract_Data_7$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d241 ||
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d266 ||
	      _dfoo105) ;
  assign abstract_Data_7$port0__write_1 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d241 ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo130 ;
  assign abstract_Data_7$EN_port1__write =
	     EN_request_from_dtm && x__h37682 == 4'd7 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d685 ;
  assign abstract_Data_7$port2__read =
	     abstract_Data_7$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36266 ;
  assign abstract_Data_8$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d243 ||
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d268 ||
	      _dfoo103) ;
  assign abstract_Data_8$port0__write_1 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d243 ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo128 ;
  assign abstract_Data_8$EN_port1__write =
	     EN_request_from_dtm && x__h37682 == 4'd8 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d685 ;
  assign abstract_Data_8$port2__read =
	     abstract_Data_8$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36268 ;
  assign abstract_Data_9$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d245 ||
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d270 ||
	      _dfoo101) ;
  assign abstract_Data_9$port0__write_1 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d245 ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo126 ;
  assign abstract_Data_9$EN_port1__write =
	     EN_request_from_dtm && x__h37682 == 4'd9 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d685 ;
  assign abstract_Data_9$port2__read =
	     abstract_Data_9$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36270 ;
  assign abstract_Data_10$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d247 ||
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d272 ||
	      _dfoo99) ;
  assign abstract_Data_10$port0__write_1 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d247 ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo124 ;
  assign abstract_Data_10$EN_port1__write =
	     EN_request_from_dtm && x__h37682 == 4'd10 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d685 ;
  assign abstract_Data_10$port2__read =
	     abstract_Data_10$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36272 ;
  assign abstract_Data_11$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d249 ||
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d274 ||
	      _dfoo97) ;
  assign abstract_Data_11$port0__write_1 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d249 ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo122 ;
  assign abstract_Data_11$EN_port1__write =
	     EN_request_from_dtm && x__h37682 == 4'd11 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d685 ;
  assign abstract_Data_11$port2__read =
	     abstract_Data_11$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36274 ;
  assign rg_sbsingleread$EN_port0__write =
	     WILL_FIRE_RL_access_memory_request && rg_sbsingleread ;
  assign rg_sbsingleread$EN_port1__write =
	     EN_request_from_dtm &&
	     (request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	      request_from_dtm_requestfrmDTM[39:34] == 6'h38 ||
	      request_from_dtm_requestfrmDTM[1:0] == 2'd1 &&
	      request_from_dtm_requestfrmDTM[39:34] == 6'h3C &&
	      rg_sbautoread) ;
  assign rg_sbsingleread$port1__write_1 =
	     request_from_dtm_requestfrmDTM[1:0] != 2'd2 ||
	     request_from_dtm_requestfrmDTM[22] ;
  assign rg_sbsingleread$port2__read =
	     rg_sbsingleread$EN_port1__write ?
	       rg_sbsingleread$port1__write_1 :
	       x_port1__read__h35862 ;
  assign busAddr0$EN_port0__write =
	     WILL_FIRE_RL_access_memory_request && rg_sbautoincrement ;
  assign busAddr0$port0__write_1 =
	     busAddr0 + { 24'd0, _theResult____h31668 } ;
  assign busAddr0$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h39 ;
  assign busAddr0$port2__read =
	     busAddr0$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       spliced_bits__h38504 ;
  assign busData0$EN_port0__write =
	     master_xactor_f_rd_data$EMPTY_N &&
	     master_xactor_f_rd_data$D_OUT[80:79] == 2'd0 &&
	     master_xactor_f_rd_data$D_OUT[3:0] == 4'd2 ;
  assign busData0$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h3C ;
  assign busData0$port2__read =
	     busData0$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       spliced_bits__h37416 ;
  assign busData1$EN_port0__write =
	     master_xactor_f_rd_data$EMPTY_N &&
	     master_xactor_f_rd_data$D_OUT[80:79] == 2'd0 &&
	     master_xactor_f_rd_data$D_OUT[3:0] == 4'd2 ;
  assign busData1$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h3D ;
  assign busData1$port2__read =
	     busData1$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       spliced_bits__h38563 ;
  assign program_Buffer_0$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (x__h26901 == 4'd0 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318 ||
	      _dfoo63) ;
  assign program_Buffer_0$port0__write_1 =
	     (x__h26901 == 4'd0 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318) ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo64 ;
  assign program_Buffer_0$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[37:34] == 4'd0 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720 ;
  assign program_Buffer_0$port2__read =
	     program_Buffer_0$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36658 ;
  assign program_Buffer_1$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (x__h26901 == 4'd1 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318 ||
	      _dfoo61) ;
  assign program_Buffer_1$port0__write_1 =
	     (x__h26901 == 4'd1 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318) ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo62 ;
  assign program_Buffer_1$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[37:34] == 4'd1 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720 ;
  assign program_Buffer_1$port2__read =
	     program_Buffer_1$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36660 ;
  assign program_Buffer_2$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (x__h26901 == 4'd2 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318 ||
	      _dfoo59) ;
  assign program_Buffer_2$port0__write_1 =
	     (x__h26901 == 4'd2 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318) ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo60 ;
  assign program_Buffer_2$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[37:34] == 4'd2 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720 ;
  assign program_Buffer_2$port2__read =
	     program_Buffer_2$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36662 ;
  assign program_Buffer_3$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (x__h26901 == 4'd3 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318 ||
	      _dfoo57) ;
  assign program_Buffer_3$port0__write_1 =
	     (x__h26901 == 4'd3 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318) ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo58 ;
  assign program_Buffer_3$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[37:34] == 4'd3 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720 ;
  assign program_Buffer_3$port2__read =
	     program_Buffer_3$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36664 ;
  assign program_Buffer_4$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (x__h26901 == 4'd4 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318 ||
	      _dfoo55) ;
  assign program_Buffer_4$port0__write_1 =
	     (x__h26901 == 4'd4 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318) ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo56 ;
  assign program_Buffer_4$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[37:34] == 4'd4 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720 ;
  assign program_Buffer_4$port2__read =
	     program_Buffer_4$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36666 ;
  assign program_Buffer_5$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (x__h26901 == 4'd5 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318 ||
	      _dfoo53) ;
  assign program_Buffer_5$port0__write_1 =
	     (x__h26901 == 4'd5 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318) ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo54 ;
  assign program_Buffer_5$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[37:34] == 4'd5 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720 ;
  assign program_Buffer_5$port2__read =
	     program_Buffer_5$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36668 ;
  assign program_Buffer_6$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (x__h26901 == 4'd6 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318 ||
	      _dfoo51) ;
  assign program_Buffer_6$port0__write_1 =
	     (x__h26901 == 4'd6 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318) ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo52 ;
  assign program_Buffer_6$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[37:34] == 4'd6 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720 ;
  assign program_Buffer_6$port2__read =
	     program_Buffer_6$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36670 ;
  assign program_Buffer_7$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (x__h26901 == 4'd7 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318 ||
	      _dfoo49) ;
  assign program_Buffer_7$port0__write_1 =
	     (x__h26901 == 4'd7 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318) ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo50 ;
  assign program_Buffer_7$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[37:34] == 4'd7 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720 ;
  assign program_Buffer_7$port2__read =
	     program_Buffer_7$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36672 ;
  assign program_Buffer_8$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (x__h26901 == 4'd8 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318 ||
	      _dfoo47) ;
  assign program_Buffer_8$port0__write_1 =
	     (x__h26901 == 4'd8 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318) ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo48 ;
  assign program_Buffer_8$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[37:34] == 4'd8 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720 ;
  assign program_Buffer_8$port2__read =
	     program_Buffer_8$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36674 ;
  assign program_Buffer_9$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (x__h26901 == 4'd9 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318 ||
	      _dfoo45) ;
  assign program_Buffer_9$port0__write_1 =
	     (x__h26901 == 4'd9 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318) ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo46 ;
  assign program_Buffer_9$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[37:34] == 4'd9 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720 ;
  assign program_Buffer_9$port2__read =
	     program_Buffer_9$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36676 ;
  assign program_Buffer_10$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (x__h26901 == 4'd10 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318 ||
	      _dfoo43) ;
  assign program_Buffer_10$port0__write_1 =
	     (x__h26901 == 4'd10 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318) ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo44 ;
  assign program_Buffer_10$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[37:34] == 4'd10 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720 ;
  assign program_Buffer_10$port2__read =
	     program_Buffer_10$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36678 ;
  assign program_Buffer_11$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (x__h26901 == 4'd11 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318 ||
	      _dfoo41) ;
  assign program_Buffer_11$port0__write_1 =
	     (x__h26901 == 4'd11 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318) ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo42 ;
  assign program_Buffer_11$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[37:34] == 4'd11 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720 ;
  assign program_Buffer_11$port2__read =
	     program_Buffer_11$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36680 ;
  assign program_Buffer_12$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (x__h26901 == 4'd12 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318 ||
	      _dfoo39) ;
  assign program_Buffer_12$port0__write_1 =
	     (x__h26901 == 4'd12 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318) ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo40 ;
  assign program_Buffer_12$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[37:34] == 4'd12 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720 ;
  assign program_Buffer_12$port2__read =
	     program_Buffer_12$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36682 ;
  assign program_Buffer_13$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (x__h26901 == 4'd13 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318 ||
	      _dfoo37) ;
  assign program_Buffer_13$port0__write_1 =
	     (x__h26901 == 4'd13 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318) ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo38 ;
  assign program_Buffer_13$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[37:34] == 4'd13 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720 ;
  assign program_Buffer_13$port2__read =
	     program_Buffer_13$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36684 ;
  assign program_Buffer_14$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (x__h26901 == 4'd14 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318 ||
	      _dfoo35) ;
  assign program_Buffer_14$port0__write_1 =
	     (x__h26901 == 4'd14 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318) ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo36 ;
  assign program_Buffer_14$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[37:34] == 4'd14 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720 ;
  assign program_Buffer_14$port2__read =
	     program_Buffer_14$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36686 ;
  assign program_Buffer_15$EN_port0__write =
	     WILL_FIRE_RL_rl_wr_response &&
	     (x__h26901 == 4'd15 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318 ||
	      _dfoo33) ;
  assign program_Buffer_15$port0__write_1 =
	     (x__h26901 == 4'd15 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318) ?
	       slave_xactor_f_wr_data$D_OUT[76:45] :
	       _dfoo34 ;
  assign program_Buffer_15$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[37:34] == 4'd15 &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720 ;
  assign program_Buffer_15$port2__read =
	     program_Buffer_15$EN_port1__write ?
	       request_from_dtm_requestfrmDTM[33:2] :
	       x_port1__read__h36688 ;
  assign write_flag$EN_port0__write =
	     WILL_FIRE_RL_access_memory_request && !rg_sbsingleread ;
  assign write_flag$port1__read = !write_flag$EN_port0__write && write_flag ;
  assign write_flag$EN_port1__write =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h3C ;
  assign write_flag$port2__read =
	     write_flag$EN_port1__write || write_flag$port1__read ;
  assign perform_reg_access$EN_port0__write =
	     WILL_FIRE_RL_access_csrs || WILL_FIRE_RL_access_register_or_pc ;
  assign perform_reg_access$port1__read =
	     !perform_reg_access$EN_port0__write && perform_reg_access ;
  assign perform_reg_access$EN_port1__write =
	     EN_request_from_dtm &&
	     (request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	      request_from_dtm_requestfrmDTM[39:34] != 6'h10 &&
	      request_from_dtm_requestfrmDTM[39:34] != 6'h11 &&
	      request_from_dtm_requestfrmDTM[39:34] != 6'h12 &&
	      request_from_dtm_requestfrmDTM[39:34] != 6'h16 &&
	      request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d605 ||
	      request_from_dtm_requestfrmDTM[1:0] == 2'd1 &&
	      request_from_dtm_requestfrmDTM[39:34] != 6'h10 &&
	      request_from_dtm_requestfrmDTM[39:34] != 6'h11 &&
	      request_from_dtm_requestfrmDTM[39:34] != 6'h12 &&
	      request_from_dtm_requestfrmDTM[39:34] != 6'h16 &&
	      request_from_dtm_requestfrmDTM[39:34] != 6'h17 &&
	      request_from_dtm_requestfrmDTM[39:34] != 6'h18 &&
	      request_from_dtm_requestfrmDTM[39:34] != 6'h38 &&
	      request_from_dtm_requestfrmDTM[39:34] != 6'h39 &&
	      request_from_dtm_requestfrmDTM[39:34] != 6'h3C &&
	      request_from_dtm_requestfrmDTM[39:34] != 6'h3D &&
	      NOT_request_from_dtm_requestfrmDTM_BITS_39_TO__ETC___d622) ;
  assign perform_reg_access$port2__read =
	     perform_reg_access$EN_port1__write ||
	     perform_reg_access$port1__read ;
  assign start_program_exec$EN_port0__write =
	     WILL_FIRE_RL_rl_rd_respond &&
	     slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d49 ;
  assign start_program_exec$port1__read =
	     !start_program_exec$EN_port0__write && start_program_exec ;
  assign start_program_exec$EN_port1__write =
	     _dor1start_program_exec$EN_port1__write && rg_control[18] ;
  assign start_program_exec$port2__read =
	     start_program_exec$EN_port1__write ||
	     start_program_exec$port1__read ;

  // register abstract_Data_0
  assign abstract_Data_0$D_IN = abstract_Data_0$port2__read ;
  assign abstract_Data_0$EN = 1'b1 ;

  // register abstract_Data_1
  assign abstract_Data_1$D_IN = abstract_Data_1$port2__read ;
  assign abstract_Data_1$EN = 1'b1 ;

  // register abstract_Data_10
  assign abstract_Data_10$D_IN = abstract_Data_10$port2__read ;
  assign abstract_Data_10$EN = 1'b1 ;

  // register abstract_Data_11
  assign abstract_Data_11$D_IN = abstract_Data_11$port2__read ;
  assign abstract_Data_11$EN = 1'b1 ;

  // register abstract_Data_2
  assign abstract_Data_2$D_IN = abstract_Data_2$port2__read ;
  assign abstract_Data_2$EN = 1'b1 ;

  // register abstract_Data_3
  assign abstract_Data_3$D_IN = abstract_Data_3$port2__read ;
  assign abstract_Data_3$EN = 1'b1 ;

  // register abstract_Data_4
  assign abstract_Data_4$D_IN = abstract_Data_4$port2__read ;
  assign abstract_Data_4$EN = 1'b1 ;

  // register abstract_Data_5
  assign abstract_Data_5$D_IN = abstract_Data_5$port2__read ;
  assign abstract_Data_5$EN = 1'b1 ;

  // register abstract_Data_6
  assign abstract_Data_6$D_IN = abstract_Data_6$port2__read ;
  assign abstract_Data_6$EN = 1'b1 ;

  // register abstract_Data_7
  assign abstract_Data_7$D_IN = abstract_Data_7$port2__read ;
  assign abstract_Data_7$EN = 1'b1 ;

  // register abstract_Data_8
  assign abstract_Data_8$D_IN = abstract_Data_8$port2__read ;
  assign abstract_Data_8$EN = 1'b1 ;

  // register abstract_Data_9
  assign abstract_Data_9$D_IN = abstract_Data_9$port2__read ;
  assign abstract_Data_9$EN = 1'b1 ;

  // register busAddr0
  assign busAddr0$D_IN = busAddr0$port2__read ;
  assign busAddr0$EN = 1'b1 ;

  // register busData0
  assign busData0$D_IN = busData0$port2__read ;
  assign busData0$EN = 1'b1 ;

  // register busData1
  assign busData1$D_IN = busData1$port2__read ;
  assign busData1$EN = 1'b1 ;

  // register haltreq
  assign haltreq$D_IN = request_from_dtm_requestfrmDTM[33] ;
  assign haltreq$EN =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h10 &&
	     (!request_from_dtm_requestfrmDTM[32] ||
	      !request_from_dtm_requestfrmDTM[33]) ;

  // register instruction0
  assign instruction0$D_IN = 32'h0 ;
  assign instruction0$EN = 1'b0 ;

  // register instruction1
  assign instruction1$D_IN = 32'h0 ;
  assign instruction1$EN = 1'b0 ;

  // register instruction2
  assign instruction2$D_IN = 32'h0 ;
  assign instruction2$EN = 1'b0 ;

  // register instruction3
  assign instruction3$D_IN = 32'h0 ;
  assign instruction3$EN = 1'b0 ;

  // register perform_reg_access
  assign perform_reg_access$D_IN = perform_reg_access$port2__read ;
  assign perform_reg_access$EN = 1'b1 ;

  // register prog_ebreak_read
  assign prog_ebreak_read$D_IN = 1'b0 ;
  assign prog_ebreak_read$EN = 1'b0 ;

  // register program_Buffer_0
  assign program_Buffer_0$D_IN = program_Buffer_0$port2__read ;
  assign program_Buffer_0$EN = 1'b1 ;

  // register program_Buffer_1
  assign program_Buffer_1$D_IN = program_Buffer_1$port2__read ;
  assign program_Buffer_1$EN = 1'b1 ;

  // register program_Buffer_10
  assign program_Buffer_10$D_IN = program_Buffer_10$port2__read ;
  assign program_Buffer_10$EN = 1'b1 ;

  // register program_Buffer_11
  assign program_Buffer_11$D_IN = program_Buffer_11$port2__read ;
  assign program_Buffer_11$EN = 1'b1 ;

  // register program_Buffer_12
  assign program_Buffer_12$D_IN = program_Buffer_12$port2__read ;
  assign program_Buffer_12$EN = 1'b1 ;

  // register program_Buffer_13
  assign program_Buffer_13$D_IN = program_Buffer_13$port2__read ;
  assign program_Buffer_13$EN = 1'b1 ;

  // register program_Buffer_14
  assign program_Buffer_14$D_IN = program_Buffer_14$port2__read ;
  assign program_Buffer_14$EN = 1'b1 ;

  // register program_Buffer_15
  assign program_Buffer_15$D_IN = program_Buffer_15$port2__read ;
  assign program_Buffer_15$EN = 1'b1 ;

  // register program_Buffer_2
  assign program_Buffer_2$D_IN = program_Buffer_2$port2__read ;
  assign program_Buffer_2$EN = 1'b1 ;

  // register program_Buffer_3
  assign program_Buffer_3$D_IN = program_Buffer_3$port2__read ;
  assign program_Buffer_3$EN = 1'b1 ;

  // register program_Buffer_4
  assign program_Buffer_4$D_IN = program_Buffer_4$port2__read ;
  assign program_Buffer_4$EN = 1'b1 ;

  // register program_Buffer_5
  assign program_Buffer_5$D_IN = program_Buffer_5$port2__read ;
  assign program_Buffer_5$EN = 1'b1 ;

  // register program_Buffer_6
  assign program_Buffer_6$D_IN = program_Buffer_6$port2__read ;
  assign program_Buffer_6$EN = 1'b1 ;

  // register program_Buffer_7
  assign program_Buffer_7$D_IN = program_Buffer_7$port2__read ;
  assign program_Buffer_7$EN = 1'b1 ;

  // register program_Buffer_8
  assign program_Buffer_8$D_IN = program_Buffer_8$port2__read ;
  assign program_Buffer_8$EN = 1'b1 ;

  // register program_Buffer_9
  assign program_Buffer_9$D_IN = program_Buffer_9$port2__read ;
  assign program_Buffer_9$EN = 1'b1 ;

  // register reset_status
  assign reset_status$D_IN = c64$reset_complete ;
  assign reset_status$EN = 1'd1 ;

  // register resume
  assign resume$D_IN = request_from_dtm_requestfrmDTM[32] ;
  assign resume$EN =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h10 &&
	     (!request_from_dtm_requestfrmDTM[32] ||
	      !request_from_dtm_requestfrmDTM[33]) ;

  // register rg_autoexecdata
  assign rg_autoexecdata$D_IN = request_from_dtm_requestfrmDTM[13:2] ;
  assign rg_autoexecdata$EN =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h18 ;

  // register rg_autoexecprogbuf
  assign rg_autoexecprogbuf$D_IN = request_from_dtm_requestfrmDTM[33:18] ;
  assign rg_autoexecprogbuf$EN =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h18 ;

  // register rg_busy
  assign rg_busy$D_IN = rg_busy$port3__read ;
  assign rg_busy$EN = 1'b1 ;

  // register rg_cmderr
  assign rg_cmderr$D_IN =
	     (request_from_dtm_requestfrmDTM[39:34] == 6'h16) ?
	       request_from_dtm_requestfrmDTM[12:10] :
	       3'd1 ;
  assign rg_cmderr$EN =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] != 6'h10 &&
	     (request_from_dtm_requestfrmDTM[39:34] == 6'h16 ||
	      request_from_dtm_requestfrmDTM[39:34] == 6'h17 &&
	      (rg_busy$port2__read || start_program_exec$port2__read)) ;

  // register rg_cmdtype
  assign rg_cmdtype$D_IN = request_from_dtm_requestfrmDTM[33:26] ;
  assign rg_cmdtype$EN =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d661 ;

  // register rg_control
  assign rg_control$D_IN = request_from_dtm_requestfrmDTM[25:2] ;
  assign rg_control$EN =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d661 ;

  // register rg_dmactive
  assign rg_dmactive$D_IN = request_from_dtm_requestfrmDTM[2] ;
  assign rg_dmactive$EN =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h10 &&
	     (!request_from_dtm_requestfrmDTM[32] ||
	      !request_from_dtm_requestfrmDTM[33]) ;

  // register rg_halted
  assign rg_halted$D_IN = c64$halted ;
  assign rg_halted$EN = 1'd1 ;

  // register rg_hartreset
  assign rg_hartreset$D_IN = request_from_dtm_requestfrmDTM[31] ;
  assign rg_hartreset$EN =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h10 &&
	     (!request_from_dtm_requestfrmDTM[32] ||
	      !request_from_dtm_requestfrmDTM[33]) ;

  // register rg_hartsel
  assign rg_hartsel$D_IN = request_from_dtm_requestfrmDTM[27:18] ;
  assign rg_hartsel$EN =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h10 &&
	     (!request_from_dtm_requestfrmDTM[32] ||
	      !request_from_dtm_requestfrmDTM[33]) ;

  // register rg_nonexistent
  assign rg_nonexistent$D_IN = rg_hartsel != 10'd0 ;
  assign rg_nonexistent$EN = 1'd1 ;

  // register rg_reset
  assign rg_reset$D_IN = request_from_dtm_requestfrmDTM[3] ;
  assign rg_reset$EN =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h10 &&
	     (!request_from_dtm_requestfrmDTM[32] ||
	      !request_from_dtm_requestfrmDTM[33]) ;

  // register rg_resumeack
  assign rg_resumeack$D_IN = r__h34864 ;
  assign rg_resumeack$EN = 1'b1 ;

  // register rg_running
  assign rg_running$D_IN = 1'b0 ;
  assign rg_running$EN = 1'b0 ;

  // register rg_sbaccess
  assign rg_sbaccess$D_IN = request_from_dtm_requestfrmDTM[21:19] ;
  assign rg_sbaccess$EN =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h38 ;

  // register rg_sbautoincrement
  assign rg_sbautoincrement$D_IN = request_from_dtm_requestfrmDTM[18] ;
  assign rg_sbautoincrement$EN =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h38 ;

  // register rg_sbautoread
  assign rg_sbautoread$D_IN = request_from_dtm_requestfrmDTM[17] ;
  assign rg_sbautoread$EN =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h38 ;

  // register rg_sberror
  assign rg_sberror$D_IN = request_from_dtm_requestfrmDTM[16:14] ;
  assign rg_sberror$EN =
	     EN_request_from_dtm &&
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h38 ;

  // register rg_sbsingleread
  assign rg_sbsingleread$D_IN = rg_sbsingleread$port2__read ;
  assign rg_sbsingleread$EN = 1'b1 ;

  // register rg_unavailable
  assign rg_unavailable$D_IN = 1'b0 ;
  assign rg_unavailable$EN = 1'b0 ;

  // register start_program_exec
  assign start_program_exec$D_IN = start_program_exec$port2__read ;
  assign start_program_exec$EN = 1'b1 ;

  // register wr_gen_haltreq
  assign wr_gen_haltreq$D_IN = wr_gen_haltreq_1$whas ;
  assign wr_gen_haltreq$EN = 1'd1 ;

  // register wr_gen_resumereq
  assign wr_gen_resumereq$D_IN = wr_gen_resumereq_1$whas ;
  assign wr_gen_resumereq$EN = 1'd1 ;

  // register write_flag
  assign write_flag$D_IN = write_flag$port2__read ;
  assign write_flag$EN = 1'b1 ;

  // submodule c64
  assign c64$boot_sequence_bootseq = boot_sequence_bootseq ;
  assign c64$clint_msip_intrpt = clint_msip_intrpt ;
  assign c64$clint_mtime_c_mtime = clint_mtime_c_mtime ;
  assign c64$clint_mtip_intrpt = clint_mtip_intrpt ;
  assign c64$dmem_master_m_arready_arready = dmem_master_m_arready_arready ;
  assign c64$dmem_master_m_awready_awready = dmem_master_m_awready_awready ;
  assign c64$dmem_master_m_bvalid_bid = dmem_master_m_bvalid_bid ;
  assign c64$dmem_master_m_bvalid_bresp = dmem_master_m_bvalid_bresp ;
  assign c64$dmem_master_m_bvalid_buser = dmem_master_m_bvalid_buser ;
  assign c64$dmem_master_m_bvalid_bvalid = dmem_master_m_bvalid_bvalid ;
  assign c64$dmem_master_m_rvalid_rdata = dmem_master_m_rvalid_rdata ;
  assign c64$dmem_master_m_rvalid_rid = dmem_master_m_rvalid_rid ;
  assign c64$dmem_master_m_rvalid_rlast = dmem_master_m_rvalid_rlast ;
  assign c64$dmem_master_m_rvalid_rresp = dmem_master_m_rvalid_rresp ;
  assign c64$dmem_master_m_rvalid_ruser = dmem_master_m_rvalid_ruser ;
  assign c64$dmem_master_m_rvalid_rvalid = dmem_master_m_rvalid_rvalid ;
  assign c64$dmem_master_m_wready_wready = dmem_master_m_wready_wready ;
  assign c64$imem_master_m_arready_arready = imem_master_m_arready_arready ;
  assign c64$imem_master_m_awready_awready = imem_master_m_awready_awready ;
  assign c64$imem_master_m_bvalid_bid = imem_master_m_bvalid_bid ;
  assign c64$imem_master_m_bvalid_bresp = imem_master_m_bvalid_bresp ;
  assign c64$imem_master_m_bvalid_buser = imem_master_m_bvalid_buser ;
  assign c64$imem_master_m_bvalid_bvalid = imem_master_m_bvalid_bvalid ;
  assign c64$imem_master_m_rvalid_rdata = imem_master_m_rvalid_rdata ;
  assign c64$imem_master_m_rvalid_rid = imem_master_m_rvalid_rid ;
  assign c64$imem_master_m_rvalid_rlast = imem_master_m_rvalid_rlast ;
  assign c64$imem_master_m_rvalid_rresp = imem_master_m_rvalid_rresp ;
  assign c64$imem_master_m_rvalid_ruser = imem_master_m_rvalid_ruser ;
  assign c64$imem_master_m_rvalid_rvalid = imem_master_m_rvalid_rvalid ;
  assign c64$imem_master_m_wready_wready = imem_master_m_wready_wready ;
  assign c64$read_fgpr_r = rg_control[4:0] ;
  assign c64$read_igpr_r = rg_control[4:0] ;
  always@(rg_control or
	  write_data___1__h31338 or abstract_Data_1 or abstract_Data_0)
  begin
    case (rg_control[22:20])
      3'd2: c64$rw_csr_data = write_data___1__h31338;
      3'd3: c64$rw_csr_data = { abstract_Data_1, abstract_Data_0 };
      default: c64$rw_csr_data = 64'd0;
    endcase
  end
  assign c64$rw_csr_r = rg_control[11:0] ;
  assign c64$rw_csr_write = rg_control[16] ;
  assign c64$set_external_interrupt_i = set_external_interrupt_i ;
  assign c64$write_fgpr_d = c64$rw_csr_data ;
  assign c64$write_fgpr_r = rg_control[4:0] ;
  assign c64$write_igpr_d = c64$rw_csr_data ;
  assign c64$write_igpr_r = rg_control[4:0] ;
  assign c64$EN_set_external_interrupt = EN_set_external_interrupt ;
  assign c64$EN_reset = CAN_FIRE_RL_reset ;
  assign c64$EN_run_continue = wr_gen_resumereq ;
  assign c64$EN_stop = CAN_FIRE_RL_halt_request ;
  assign c64$EN_write_igpr =
	     WILL_FIRE_RL_access_register_or_pc && rg_control[16] &&
	     rg_control[17] &&
	     !rg_control[5] ;
  assign c64$EN_write_fgpr =
	     WILL_FIRE_RL_access_register_or_pc && rg_control[16] &&
	     rg_control[17] &&
	     rg_control[5] ;
  assign c64$EN_rw_csr = CAN_FIRE_RL_access_csrs ;
  assign c64$EN_clint_msip = EN_clint_msip ;
  assign c64$EN_clint_mtip = EN_clint_mtip ;
  assign c64$EN_clint_mtime = EN_clint_mtime ;

  // submodule master_xactor_f_rd_addr
  assign master_xactor_f_rd_addr$D_IN =
	     { busAddr0, 21'd0, rg_sbaccess, 19'd131074 } ;
  assign master_xactor_f_rd_addr$ENQ =
	     WILL_FIRE_RL_access_memory_request && rg_sbsingleread ;
  assign master_xactor_f_rd_addr$DEQ =
	     master_xactor_f_rd_addr$EMPTY_N &&
	     debug_master_m_arready_arready ;
  assign master_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule master_xactor_f_rd_data
  assign master_xactor_f_rd_data$D_IN =
	     { debug_master_m_rvalid_rresp,
	       debug_master_m_rvalid_rdata,
	       debug_master_m_rvalid_rlast,
	       debug_master_m_rvalid_ruser,
	       debug_master_m_rvalid_rid } ;
  assign master_xactor_f_rd_data$ENQ =
	     debug_master_m_rvalid_rvalid && master_xactor_f_rd_data$FULL_N ;
  assign master_xactor_f_rd_data$DEQ = master_xactor_f_rd_data$EMPTY_N ;
  assign master_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule master_xactor_f_wr_addr
  assign master_xactor_f_wr_addr$D_IN =
	     { address___1__h31912, 21'd0, rg_sbaccess, 19'd131074 } ;
  assign master_xactor_f_wr_addr$ENQ =
	     WILL_FIRE_RL_access_memory_request && !rg_sbsingleread ;
  assign master_xactor_f_wr_addr$DEQ =
	     master_xactor_f_wr_addr$EMPTY_N &&
	     debug_master_m_awready_awready ;
  assign master_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule master_xactor_f_wr_data
  assign master_xactor_f_wr_data$D_IN =
	     { request_data_wdata__h32053,
	       request_data_wstrb__h32054,
	       5'd5 } ;
  assign master_xactor_f_wr_data$ENQ =
	     WILL_FIRE_RL_access_memory_request && !rg_sbsingleread ;
  assign master_xactor_f_wr_data$DEQ =
	     master_xactor_f_wr_data$EMPTY_N && debug_master_m_wready_wready ;
  assign master_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule master_xactor_f_wr_resp
  assign master_xactor_f_wr_resp$D_IN =
	     { debug_master_m_bvalid_bresp,
	       debug_master_m_bvalid_buser,
	       debug_master_m_bvalid_bid } ;
  assign master_xactor_f_wr_resp$ENQ =
	     debug_master_m_bvalid_bvalid && master_xactor_f_wr_resp$FULL_N ;
  assign master_xactor_f_wr_resp$DEQ = master_xactor_f_wr_resp$EMPTY_N ;
  assign master_xactor_f_wr_resp$CLR = 1'b0 ;

  // submodule response_to_DTM
  always@(request_from_dtm_requestfrmDTM or v__h37237 or v__h34006)
  begin
    case (request_from_dtm_requestfrmDTM[1:0])
      2'd1: response_to_DTM$D_IN = v__h37237;
      2'd2: response_to_DTM$D_IN = v__h34006;
      default: response_to_DTM$D_IN = 34'h0;
    endcase
  end
  assign response_to_DTM$ENQ = EN_request_from_dtm ;
  assign response_to_DTM$DEQ = EN_response_to_dtm ;
  assign response_to_DTM$CLR = 1'b0 ;

  // submodule slave_xactor_f_rd_addr
  assign slave_xactor_f_rd_addr$D_IN =
	     { debug_slave_m_arvalid_araddr,
	       debug_slave_m_arvalid_arprot,
	       debug_slave_m_arvalid_aruser,
	       debug_slave_m_arvalid_arlen,
	       debug_slave_m_arvalid_arsize,
	       debug_slave_m_arvalid_arburst,
	       debug_slave_m_arvalid_arlock,
	       debug_slave_m_arvalid_arcache,
	       debug_slave_m_arvalid_arqos,
	       debug_slave_m_arvalid_arregion,
	       debug_slave_m_arvalid_arid } ;
  assign slave_xactor_f_rd_addr$ENQ =
	     debug_slave_m_arvalid_arvalid && slave_xactor_f_rd_addr$FULL_N ;
  assign slave_xactor_f_rd_addr$DEQ = CAN_FIRE_RL_rl_rd_respond ;
  assign slave_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule slave_xactor_f_rd_data
  assign slave_xactor_f_rd_data$D_IN =
	     { IF_NOT_slave_xactor_f_rd_addr_first__3_BITS_74_ETC___d81,
	       x1_avValue_rdata__h11555,
	       11'd1024,
	       slave_xactor_f_rd_addr$D_OUT[3:0] } ;
  assign slave_xactor_f_rd_data$ENQ = CAN_FIRE_RL_rl_rd_respond ;
  assign slave_xactor_f_rd_data$DEQ =
	     debug_slave_m_rready_rready && slave_xactor_f_rd_data$EMPTY_N ;
  assign slave_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_addr
  assign slave_xactor_f_wr_addr$D_IN =
	     { debug_slave_m_awvalid_awaddr,
	       debug_slave_m_awvalid_awprot,
	       debug_slave_m_awvalid_awuser,
	       debug_slave_m_awvalid_awlen,
	       debug_slave_m_awvalid_awsize,
	       debug_slave_m_awvalid_awburst,
	       debug_slave_m_awvalid_awlock,
	       debug_slave_m_awvalid_awcache,
	       debug_slave_m_awvalid_awqos,
	       debug_slave_m_awvalid_awregion,
	       debug_slave_m_awvalid_awid } ;
  assign slave_xactor_f_wr_addr$ENQ =
	     EN_debug_slave_m_awvalid && debug_slave_m_awvalid_awvalid ;
  assign slave_xactor_f_wr_addr$DEQ = CAN_FIRE_RL_rl_wr_response ;
  assign slave_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_data
  assign slave_xactor_f_wr_data$D_IN =
	     { debug_slave_m_wvalid_wdata,
	       debug_slave_m_wvalid_wstrb,
	       debug_slave_m_wvalid_wid,
	       debug_slave_m_wvalid_wlast } ;
  assign slave_xactor_f_wr_data$ENQ =
	     EN_debug_slave_m_wvalid && debug_slave_m_wvalid_wvalid ;
  assign slave_xactor_f_wr_data$DEQ = CAN_FIRE_RL_rl_wr_response ;
  assign slave_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_resp
  assign slave_xactor_f_wr_resp$D_IN =
	     { IF_NOT_slave_xactor_f_wr_addr_first__12_BITS_7_ETC___d422,
	       slave_xactor_f_wr_addr$D_OUT[39:30],
	       slave_xactor_f_wr_addr$D_OUT[3:0] } ;
  assign slave_xactor_f_wr_resp$ENQ = CAN_FIRE_RL_rl_wr_response ;
  assign slave_xactor_f_wr_resp$DEQ =
	     debug_slave_m_bready_bready && slave_xactor_f_wr_resp$EMPTY_N ;
  assign slave_xactor_f_wr_resp$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_slave_xactor_f_rd_addr_first__3_BITS_74_ETC___d81 =
	     (!slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d15 &&
	      slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d16) ?
	       CASE_slave_xactor_f_rd_addrD_OUT_BITS_21_TO_1_ETC__q4 :
	       (NOT_slave_xactor_f_rd_addr_first__3_BITS_74_TO_ETC___d79 ?
		  2'd0 :
		  2'd2) ;
  assign IF_NOT_slave_xactor_f_wr_addr_first__12_BITS_7_ETC___d422 =
	     (!slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220) ?
	       CASE_slave_xactor_f_wr_addrD_OUT_BITS_21_TO_1_ETC__q3 :
	       ((slave_xactor_f_wr_addr$D_OUT[74:43] >= 32'd12 &&
		 slave_xactor_f_wr_addr$D_OUT[74:43] <= 32'd72) ?
		  2'd0 :
		  2'd2) ;
  assign IF_rg_control_2_BIT_5_56_THEN_c64_read_fgpr_rg_ETC___d460 =
	     rg_control[5] ? c64$read_fgpr : c64$read_igpr ;
  assign NOT_request_from_dtm_requestfrmDTM_BITS_39_TO__ETC___d598 =
	     !request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d574 &&
	     request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d576 &&
	     bs__h36437[x__h37682] ||
	     request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d597 ;
  assign NOT_request_from_dtm_requestfrmDTM_BITS_39_TO__ETC___d622 =
	     !request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d574 &&
	     request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d576 &&
	     bs__h36437[x__h37682] ||
	     request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d621 ;
  assign NOT_slave_xactor_f_rd_addr_first__3_BITS_74_TO_ETC___d79 =
	     !slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d19 &&
	     slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d21 ||
	     slave_xactor_f_rd_addr$D_OUT[74:43] == 32'h0 &&
	     slave_xactor_f_rd_addr$D_OUT[21:19] == 3'd2 ||
	     slave_xactor_f_rd_addr$D_OUT[74:43] == 32'd4 &&
	     slave_xactor_f_rd_addr$D_OUT[21:19] == 3'd2 ||
	     slave_xactor_f_rd_addr$D_OUT[74:43] == 32'd8 &&
	     (rg_control[18] && start_program_exec ||
	      slave_xactor_f_rd_addr$D_OUT[21:19] == 3'd2) ;
  assign _dfoo101 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d289 ||
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd9 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'h0F ;
  assign _dfoo103 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d288 ||
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd8 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'h0F ;
  assign _dfoo105 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d287 ||
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd7 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'h0F ;
  assign _dfoo107 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d286 ||
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd6 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'h0F ;
  assign _dfoo109 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d285 ||
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd5 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'h0F ;
  assign _dfoo111 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d284 ||
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd4 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'h0F ;
  assign _dfoo113 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d283 ||
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd3 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'h0F ;
  assign _dfoo115 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d282 ||
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd2 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'h0F ;
  assign _dfoo117 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d281 ||
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd1 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'h0F ;
  assign _dfoo119 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d280 ||
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd0 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'h0F ;
  assign _dfoo122 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d274 ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d291 ?
		  slave_xactor_f_wr_data$D_OUT[76:45] :
		  slave_xactor_f_wr_data$D_OUT[44:13]) ;
  assign _dfoo124 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d272 ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d290 ?
		  slave_xactor_f_wr_data$D_OUT[76:45] :
		  slave_xactor_f_wr_data$D_OUT[44:13]) ;
  assign _dfoo126 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d270 ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d289 ?
		  slave_xactor_f_wr_data$D_OUT[76:45] :
		  slave_xactor_f_wr_data$D_OUT[44:13]) ;
  assign _dfoo128 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d268 ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d288 ?
		  slave_xactor_f_wr_data$D_OUT[76:45] :
		  slave_xactor_f_wr_data$D_OUT[44:13]) ;
  assign _dfoo130 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d266 ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d287 ?
		  slave_xactor_f_wr_data$D_OUT[76:45] :
		  slave_xactor_f_wr_data$D_OUT[44:13]) ;
  assign _dfoo132 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d264 ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d286 ?
		  slave_xactor_f_wr_data$D_OUT[76:45] :
		  slave_xactor_f_wr_data$D_OUT[44:13]) ;
  assign _dfoo134 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d262 ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d285 ?
		  slave_xactor_f_wr_data$D_OUT[76:45] :
		  slave_xactor_f_wr_data$D_OUT[44:13]) ;
  assign _dfoo136 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d260 ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d284 ?
		  slave_xactor_f_wr_data$D_OUT[76:45] :
		  slave_xactor_f_wr_data$D_OUT[44:13]) ;
  assign _dfoo138 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d258 ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d283 ?
		  slave_xactor_f_wr_data$D_OUT[76:45] :
		  slave_xactor_f_wr_data$D_OUT[44:13]) ;
  assign _dfoo140 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d256 ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d282 ?
		  slave_xactor_f_wr_data$D_OUT[76:45] :
		  slave_xactor_f_wr_data$D_OUT[44:13]) ;
  assign _dfoo142 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d254 ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d281 ?
		  slave_xactor_f_wr_data$D_OUT[76:45] :
		  slave_xactor_f_wr_data$D_OUT[44:13]) ;
  assign _dfoo144 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d251 ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d280 ?
		  slave_xactor_f_wr_data$D_OUT[76:45] :
		  slave_xactor_f_wr_data$D_OUT[44:13]) ;
  assign _dfoo165 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d229 ||
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d254 ||
	     _dfoo117 ;
  assign _dfoo167 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d225 ||
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d251 ||
	     _dfoo119 ;
  assign _dfoo33 =
	     index__h26864 == 4'd15 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352 ||
	     (index__h26864 == 4'd15 || x__h26901 == 4'd15) &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386 ;
  assign _dfoo34 =
	     (index__h26864 == 4'd15 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352) ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       ((index__h26864 == 4'd15 &&
		 slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386) ?
		  slave_xactor_f_wr_data$D_OUT[44:13] :
		  slave_xactor_f_wr_data$D_OUT[76:45]) ;
  assign _dfoo35 =
	     index__h26864 == 4'd14 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352 ||
	     (index__h26864 == 4'd14 || x__h26901 == 4'd14) &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386 ;
  assign _dfoo36 =
	     (index__h26864 == 4'd14 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352) ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       ((index__h26864 == 4'd14 &&
		 slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386) ?
		  slave_xactor_f_wr_data$D_OUT[44:13] :
		  slave_xactor_f_wr_data$D_OUT[76:45]) ;
  assign _dfoo37 =
	     index__h26864 == 4'd13 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352 ||
	     (index__h26864 == 4'd13 || x__h26901 == 4'd13) &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386 ;
  assign _dfoo38 =
	     (index__h26864 == 4'd13 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352) ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       ((index__h26864 == 4'd13 &&
		 slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386) ?
		  slave_xactor_f_wr_data$D_OUT[44:13] :
		  slave_xactor_f_wr_data$D_OUT[76:45]) ;
  assign _dfoo39 =
	     index__h26864 == 4'd12 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352 ||
	     (index__h26864 == 4'd12 || x__h26901 == 4'd12) &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386 ;
  assign _dfoo40 =
	     (index__h26864 == 4'd12 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352) ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       ((index__h26864 == 4'd12 &&
		 slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386) ?
		  slave_xactor_f_wr_data$D_OUT[44:13] :
		  slave_xactor_f_wr_data$D_OUT[76:45]) ;
  assign _dfoo41 =
	     index__h26864 == 4'd11 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352 ||
	     (index__h26864 == 4'd11 || x__h26901 == 4'd11) &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386 ;
  assign _dfoo42 =
	     (index__h26864 == 4'd11 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352) ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       ((index__h26864 == 4'd11 &&
		 slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386) ?
		  slave_xactor_f_wr_data$D_OUT[44:13] :
		  slave_xactor_f_wr_data$D_OUT[76:45]) ;
  assign _dfoo43 =
	     index__h26864 == 4'd10 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352 ||
	     (index__h26864 == 4'd10 || x__h26901 == 4'd10) &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386 ;
  assign _dfoo44 =
	     (index__h26864 == 4'd10 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352) ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       ((index__h26864 == 4'd10 &&
		 slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386) ?
		  slave_xactor_f_wr_data$D_OUT[44:13] :
		  slave_xactor_f_wr_data$D_OUT[76:45]) ;
  assign _dfoo45 =
	     index__h26864 == 4'd9 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352 ||
	     (index__h26864 == 4'd9 || x__h26901 == 4'd9) &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386 ;
  assign _dfoo46 =
	     (index__h26864 == 4'd9 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352) ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       ((index__h26864 == 4'd9 &&
		 slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386) ?
		  slave_xactor_f_wr_data$D_OUT[44:13] :
		  slave_xactor_f_wr_data$D_OUT[76:45]) ;
  assign _dfoo47 =
	     index__h26864 == 4'd8 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352 ||
	     (index__h26864 == 4'd8 || x__h26901 == 4'd8) &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386 ;
  assign _dfoo48 =
	     (index__h26864 == 4'd8 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352) ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       ((index__h26864 == 4'd8 &&
		 slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386) ?
		  slave_xactor_f_wr_data$D_OUT[44:13] :
		  slave_xactor_f_wr_data$D_OUT[76:45]) ;
  assign _dfoo49 =
	     index__h26864 == 4'd7 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352 ||
	     (index__h26864 == 4'd7 || x__h26901 == 4'd7) &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386 ;
  assign _dfoo50 =
	     (index__h26864 == 4'd7 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352) ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       ((index__h26864 == 4'd7 &&
		 slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386) ?
		  slave_xactor_f_wr_data$D_OUT[44:13] :
		  slave_xactor_f_wr_data$D_OUT[76:45]) ;
  assign _dfoo51 =
	     index__h26864 == 4'd6 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352 ||
	     (index__h26864 == 4'd6 || x__h26901 == 4'd6) &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386 ;
  assign _dfoo52 =
	     (index__h26864 == 4'd6 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352) ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       ((index__h26864 == 4'd6 &&
		 slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386) ?
		  slave_xactor_f_wr_data$D_OUT[44:13] :
		  slave_xactor_f_wr_data$D_OUT[76:45]) ;
  assign _dfoo53 =
	     index__h26864 == 4'd5 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352 ||
	     (index__h26864 == 4'd5 || x__h26901 == 4'd5) &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386 ;
  assign _dfoo54 =
	     (index__h26864 == 4'd5 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352) ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       ((index__h26864 == 4'd5 &&
		 slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386) ?
		  slave_xactor_f_wr_data$D_OUT[44:13] :
		  slave_xactor_f_wr_data$D_OUT[76:45]) ;
  assign _dfoo55 =
	     index__h26864 == 4'd4 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352 ||
	     (index__h26864 == 4'd4 || x__h26901 == 4'd4) &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386 ;
  assign _dfoo56 =
	     (index__h26864 == 4'd4 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352) ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       ((index__h26864 == 4'd4 &&
		 slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386) ?
		  slave_xactor_f_wr_data$D_OUT[44:13] :
		  slave_xactor_f_wr_data$D_OUT[76:45]) ;
  assign _dfoo57 =
	     index__h26864 == 4'd3 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352 ||
	     (index__h26864 == 4'd3 || x__h26901 == 4'd3) &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386 ;
  assign _dfoo58 =
	     (index__h26864 == 4'd3 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352) ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       ((index__h26864 == 4'd3 &&
		 slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386) ?
		  slave_xactor_f_wr_data$D_OUT[44:13] :
		  slave_xactor_f_wr_data$D_OUT[76:45]) ;
  assign _dfoo59 =
	     index__h26864 == 4'd2 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352 ||
	     (index__h26864 == 4'd2 || x__h26901 == 4'd2) &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386 ;
  assign _dfoo60 =
	     (index__h26864 == 4'd2 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352) ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       ((index__h26864 == 4'd2 &&
		 slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386) ?
		  slave_xactor_f_wr_data$D_OUT[44:13] :
		  slave_xactor_f_wr_data$D_OUT[76:45]) ;
  assign _dfoo61 =
	     index__h26864 == 4'd1 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352 ||
	     (index__h26864 == 4'd1 || x__h26901 == 4'd1) &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386 ;
  assign _dfoo62 =
	     (index__h26864 == 4'd1 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352) ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       ((index__h26864 == 4'd1 &&
		 slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386) ?
		  slave_xactor_f_wr_data$D_OUT[44:13] :
		  slave_xactor_f_wr_data$D_OUT[76:45]) ;
  assign _dfoo63 =
	     index__h26864 == 4'd0 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352 ||
	     (index__h26864 == 4'd0 || x__h26901 == 4'd0) &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386 ;
  assign _dfoo64 =
	     (index__h26864 == 4'd0 &&
	      slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352) ?
	       slave_xactor_f_wr_data$D_OUT[44:13] :
	       ((index__h26864 == 4'd0 &&
		 slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386) ?
		  slave_xactor_f_wr_data$D_OUT[44:13] :
		  slave_xactor_f_wr_data$D_OUT[76:45]) ;
  assign _dfoo97 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d291 ||
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd11 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'h0F ;
  assign _dfoo99 =
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d290 ||
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd10 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'h0F ;
  assign _dor1start_program_exec$EN_port1__write =
	     WILL_FIRE_RL_access_csrs || WILL_FIRE_RL_access_register_or_pc ;
  assign address___1__h31912 = { busAddr0[31:3], 3'd0 } ;
  assign bs__h36437 = { r1__read__h35661, rg_autoexecdata } ;
  assign i__h37794 = x__h37799 + 6'd16 ;
  assign index__h10197 = slave_xactor_f_rd_addr$D_OUT[48:45] - 4'd3 ;
  assign index__h26864 = slave_xactor_f_wr_addr$D_OUT[48:45] - 4'd3 ;
  assign r1__read__h34270 = { r1__read__h34282, rg_reset } ;
  assign r1__read__h34282 = { r1__read__h34294, 14'b0 } ;
  assign r1__read__h34294 = { r1__read__h34306, rg_hartsel } ;
  assign r1__read__h34306 = { r1__read__h34318, 1'b0 } ;
  assign r1__read__h34318 = { r1__read__h34330, 2'b0 } ;
  assign r1__read__h34330 = { r1__read__h34342, rg_hartreset } ;
  assign r1__read__h34342 = { haltreq, resume } ;
  assign r1__read__h34718 = { r1__read__h34730, rg_halted } ;
  assign r1__read__h34730 = { r1__read__h34742, rg_halted } ;
  assign r1__read__h34742 = { r1__read__h34754, rg_running } ;
  assign r1__read__h34754 = { r1__read__h34766, rg_running } ;
  assign r1__read__h34766 = { r1__read__h34778, rg_unavailable } ;
  assign r1__read__h34778 = { r1__read__h34790, rg_unavailable } ;
  assign r1__read__h34790 = { r1__read__h34802, rg_nonexistent } ;
  assign r1__read__h34802 = { r1__read__h34814, rg_nonexistent } ;
  assign r1__read__h34814 = { r1__read__h34826, r__h34864 } ;
  assign r1__read__h34826 = { 14'd0, r__h34864 } ;
  assign r1__read__h35203 = { r1__read__h35215, 3'b0 } ;
  assign r1__read__h35215 = { r1__read__h35227, rg_cmderr } ;
  assign r1__read__h35227 = { r1__read__h35239, 1'b0 } ;
  assign r1__read__h35239 = { 19'd32768, rg_busy$port2__read } ;
  assign r1__read__h35661 = { rg_autoexecprogbuf, 4'b0 } ;
  assign r1__read__h35770 = { r1__read__h35782, 7'h40 } ;
  assign r1__read__h35782 = { r1__read__h35794, rg_sberror } ;
  assign r1__read__h35794 = { r1__read__h35806, rg_sbautoread } ;
  assign r1__read__h35806 = { r1__read__h35818, rg_sbautoincrement } ;
  assign r1__read__h35818 = { r1__read__h35830, rg_sbaccess } ;
  assign r1__read__h35830 = { 11'b0, x_port1__read__h35862 } ;
  assign r__h34864 =
	     rg_resumeack$EN_port0__write ?
	       MUX_rg_resumeack$port0__write_1__SEL_1 :
	       rg_resumeack ;
  assign request_data_wstrb__h32054 =
	     (rg_sbaccess == 3'd3) ?
	       write_strobe__h31911 :
	       write_strobe___1__h33287 ;
  assign request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d661 =
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] == 6'h17 &&
	     !rg_busy$port2__read &&
	     !start_program_exec$port2__read ;
  assign request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d685 =
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     request_from_dtm_requestfrmDTM[39:34] != 6'h10 &&
	     request_from_dtm_requestfrmDTM[39:34] != 6'h11 &&
	     request_from_dtm_requestfrmDTM[39:34] != 6'h12 &&
	     request_from_dtm_requestfrmDTM[39:34] != 6'h16 &&
	     request_from_dtm_requestfrmDTM[39:34] != 6'h17 &&
	     request_from_dtm_requestfrmDTM[39:34] != 6'h18 &&
	     request_from_dtm_requestfrmDTM[39:34] != 6'h38 &&
	     request_from_dtm_requestfrmDTM[39:34] != 6'h39 &&
	     request_from_dtm_requestfrmDTM[39:34] != 6'h3C &&
	     request_from_dtm_requestfrmDTM[39:34] != 6'h3D &&
	     !request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d574 &&
	     request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d576 ;
  assign request_from_dtm_requestfrmDTM_BITS_1_TO_0_44__ETC___d720 =
	     request_from_dtm_requestfrmDTM[1:0] == 2'd2 &&
	     (request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d574 ||
	      !request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d576) &&
	     request_from_dtm_requestfrmDTM[39:34] >= 6'h20 &&
	     request_from_dtm_requestfrmDTM[39:34] <= 6'h2F ;
  assign request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d574 =
	     request_from_dtm_requestfrmDTM[39:34] < 6'h04 ;
  assign request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d576 =
	     request_from_dtm_requestfrmDTM[39:34] <= 6'h0F ;
  assign request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d597 =
	     (request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d574 ||
	      !request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d576) &&
	     request_from_dtm_requestfrmDTM[39:34] >= 6'h20 &&
	     request_from_dtm_requestfrmDTM[39:34] <= 6'h2F &&
	     rg_autoexecprogbuf[i__h37794[3:0]] ;
  assign request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d605 =
	     request_from_dtm_requestfrmDTM[39:34] == 6'h17 &&
	     !rg_busy$port2__read &&
	     !start_program_exec$port2__read ||
	     request_from_dtm_requestfrmDTM[39:34] != 6'h17 &&
	     request_from_dtm_requestfrmDTM[39:34] != 6'h18 &&
	     request_from_dtm_requestfrmDTM[39:34] != 6'h38 &&
	     request_from_dtm_requestfrmDTM[39:34] != 6'h39 &&
	     request_from_dtm_requestfrmDTM[39:34] != 6'h3C &&
	     request_from_dtm_requestfrmDTM[39:34] != 6'h3D &&
	     NOT_request_from_dtm_requestfrmDTM_BITS_39_TO__ETC___d598 ;
  assign request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d621 =
	     (request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d574 ||
	      !request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d576) &&
	     request_from_dtm_requestfrmDTM[39:34] >= 6'h20 &&
	     request_from_dtm_requestfrmDTM[39:34] <= 6'h2F &&
	     bs__h36437[i__h37794[4:0]] ;
  assign slave_xactor_f_rd_addrD_OUT_BITS_74_TO_43_MIN_ETC__q2 =
	     slave_xactor_f_rd_addr$D_OUT[74:43] - 32'h0000004C ;
  assign slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d15 =
	     slave_xactor_f_rd_addr$D_OUT[74:43] < 32'd76 ;
  assign slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d16 =
	     slave_xactor_f_rd_addr$D_OUT[74:43] <= 32'h000000FF ;
  assign slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d19 =
	     slave_xactor_f_rd_addr$D_OUT[74:43] < 32'd12 ;
  assign slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d21 =
	     slave_xactor_f_rd_addr$D_OUT[74:43] <= 32'd72 ;
  assign slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d49 =
	     (slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d15 ||
	      !slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d16) &&
	     !slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d19 &&
	     slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d21 &&
	     SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42[14:12] ==
	     3'b0 &&
	     SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42[6:2] ==
	     5'b11100 ;
  assign slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d63 =
	     (slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d19 ||
	      !slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d21) &&
	     (!rg_control[18] || !start_program_exec) &&
	     slave_xactor_f_rd_addr$D_OUT[74:43] == 32'd8 &&
	     slave_xactor_f_rd_addr$D_OUT[21:19] == 3'd2 ;
  assign slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1 =
	     slave_xactor_f_wr_addr$D_OUT[74:43] - 32'h0000004C ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 =
	     slave_xactor_f_wr_addr$D_OUT[74:43] < 32'd76 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 =
	     slave_xactor_f_wr_addr$D_OUT[74:43] <= 32'h000000FF ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d225 =
	     x__h24861 == 4'd0 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d229 =
	     x__h24861 == 4'd1 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d231 =
	     x__h24861 == 4'd2 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d233 =
	     x__h24861 == 4'd3 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d235 =
	     x__h24861 == 4'd4 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d237 =
	     x__h24861 == 4'd5 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d239 =
	     x__h24861 == 4'd6 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d241 =
	     x__h24861 == 4'd7 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d243 =
	     x__h24861 == 4'd8 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d245 =
	     x__h24861 == 4'd9 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d247 =
	     x__h24861 == 4'd10 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d249 =
	     x__h24861 == 4'd11 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d251 =
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd0 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d254 =
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd1 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d256 =
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd2 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d258 =
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd3 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d260 =
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd4 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d262 =
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd5 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d264 =
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd6 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d266 =
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd7 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d268 =
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd8 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d270 =
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd9 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d272 =
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd10 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d274 =
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] ==
	     4'd11 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd3 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d280 =
	     x__h24861 == 4'd0 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'hF0 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d281 =
	     x__h24861 == 4'd1 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'hF0 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d282 =
	     x__h24861 == 4'd2 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'hF0 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d283 =
	     x__h24861 == 4'd3 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'hF0 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d284 =
	     x__h24861 == 4'd4 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'hF0 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d285 =
	     x__h24861 == 4'd5 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'hF0 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d286 =
	     x__h24861 == 4'd6 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'hF0 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d287 =
	     x__h24861 == 4'd7 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'hF0 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d288 =
	     x__h24861 == 4'd8 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'hF0 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d289 =
	     x__h24861 == 4'd9 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'hF0 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d290 =
	     x__h24861 == 4'd10 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'hF0 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d291 =
	     x__h24861 == 4'd11 &&
	     !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 &&
	     slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220 &&
	     slave_xactor_f_wr_addr$D_OUT[21:19] == 3'd2 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'hF0 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d318 =
	     (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 ||
	      !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220) &&
	     slave_xactor_f_wr_addr$D_OUT[74:43] >= 32'd12 &&
	     slave_xactor_f_wr_addr$D_OUT[74:43] <= 32'd72 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'hF0 ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d352 =
	     (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 ||
	      !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220) &&
	     slave_xactor_f_wr_addr$D_OUT[74:43] >= 32'd12 &&
	     slave_xactor_f_wr_addr$D_OUT[74:43] <= 32'd72 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'h0F ;
  assign slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d386 =
	     (slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d218 ||
	      !slave_xactor_f_wr_addr_first__12_BITS_74_TO_43_ETC___d220) &&
	     slave_xactor_f_wr_addr$D_OUT[74:43] >= 32'd12 &&
	     slave_xactor_f_wr_addr$D_OUT[74:43] <= 32'd72 &&
	     slave_xactor_f_wr_data$D_OUT[12:5] == 8'hFF ;
  assign spliced_bits__h37416 =
	     busData0$EN_port0__write ?
	       master_xactor_f_rd_data$D_OUT[46:15] :
	       busData0 ;
  assign spliced_bits__h38126 = { r1__read__h34270, rg_dmactive } ;
  assign spliced_bits__h38178 = { r1__read__h34718, 8'b10000010 } ;
  assign spliced_bits__h38295 = { r1__read__h35203, 5'd12 } ;
  assign spliced_bits__h38354 = { rg_cmdtype, rg_control } ;
  assign spliced_bits__h38453 = { r1__read__h35770, 5'b01111 } ;
  assign spliced_bits__h38504 =
	     busAddr0$EN_port0__write ? busAddr0$port0__write_1 : busAddr0 ;
  assign spliced_bits__h38563 =
	     busData1$EN_port0__write ?
	       master_xactor_f_rd_data$D_OUT[78:47] :
	       busData1 ;
  assign v__h34006 =
	     (request_from_dtm_requestfrmDTM[39:34] == 6'h10) ?
	       v__h34128 :
	       ((request_from_dtm_requestfrmDTM[39:34] == 6'h11 ||
		 request_from_dtm_requestfrmDTM[39:34] == 6'h12 ||
		 request_from_dtm_requestfrmDTM[39:34] == 6'h16 ||
		 request_from_dtm_requestfrmDTM[39:34] == 6'h17 ||
		 request_from_dtm_requestfrmDTM[39:34] == 6'h18 ||
		 request_from_dtm_requestfrmDTM[39:34] == 6'h38 ||
		 request_from_dtm_requestfrmDTM[39:34] == 6'h39 ||
		 request_from_dtm_requestfrmDTM[39:34] == 6'h3C ||
		 request_from_dtm_requestfrmDTM[39:34] == 6'h3D ||
		 !request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d574 &&
		 request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d576 ||
		 request_from_dtm_requestfrmDTM[39:34] >= 6'h20 &&
		 request_from_dtm_requestfrmDTM[39:34] <= 6'h2F) ?
		  34'h0 :
		  34'd2) ;
  assign v__h34128 =
	     (request_from_dtm_requestfrmDTM[32] &&
	      request_from_dtm_requestfrmDTM[33]) ?
	       34'd2 :
	       34'h0 ;
  assign v__h37317 = { spliced_bits__h37416, 2'd0 } ;
  assign v__h37475 =
	     (!request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d574 &&
	      request_from_dtm_requestfrmDTM_BITS_39_TO_34_4_ETC___d576) ?
	       v__h37499 :
	       v__h37761 ;
  assign v__h37499 = { spliced_bits__h37628, 2'd0 } ;
  assign v__h37761 =
	     (request_from_dtm_requestfrmDTM[39:34] >= 6'h20 &&
	      request_from_dtm_requestfrmDTM[39:34] <= 6'h2F) ?
	       v__h37779 :
	       34'd2 ;
  assign v__h37779 = { spliced_bits__h37910, 2'd0 } ;
  assign write_data___1__h31338 = { 32'd0, abstract_Data_0 } ;
  assign write_strobe___1__h33287 = write_strobe__h31911 << busAddr0[2:0] ;
  assign x1_avValue_rdata__h11483 = {2{instruction2}} ;
  assign x1_avValue_rdata__h11495 =
	     (slave_xactor_f_rd_addr$D_OUT[74:43] == 32'd8 &&
	      rg_control[18] &&
	      start_program_exec) ?
	       {2{instruction3}} :
	       x1_avValue_rdata__h11483 ;
  assign x1_avValue_rdata__h11507 =
	     (slave_xactor_f_rd_addr$D_OUT[74:43] == 32'd4 &&
	      slave_xactor_f_rd_addr$D_OUT[21:19] == 3'd2) ?
	       {2{instruction1}} :
	       x1_avValue_rdata__h11495 ;
  assign x1_avValue_rdata__h11520 =
	     (slave_xactor_f_rd_addr$D_OUT[74:43] == 32'h0 &&
	      slave_xactor_f_rd_addr$D_OUT[21:19] == 3'd2) ?
	       {2{instruction0}} :
	       x1_avValue_rdata__h11507 ;
  assign x1_avValue_rdata__h11534 =
	     (!slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d19 &&
	      slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d21) ?
	       y_avValue_rdata__h11299 :
	       x1_avValue_rdata__h11520 ;
  assign x1_avValue_rdata__h11555 =
	     (!slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d15 &&
	      slave_xactor_f_rd_addr_first__3_BITS_74_TO_43__ETC___d16) ?
	       ((slave_xactor_f_rd_addr$D_OUT[21:19] == 3'd3) ?
		  { SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d98,
		    SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d99 } :
		  {2{SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d99}}) :
	       x1_avValue_rdata__h11534 ;
  assign x__h11613 =
	     slave_xactor_f_rd_addrD_OUT_BITS_74_TO_43_MIN_ETC__q2[5:2] +
	     4'd1 ;
  assign x__h12464 = index__h10197 + 4'd1 ;
  assign x__h24861 =
	     slave_xactor_f_wr_addrD_OUT_BITS_74_TO_43_MIN_ETC__q1[5:2] +
	     4'd1 ;
  assign x__h26901 = index__h26864 + 4'd1 ;
  assign x__h37682 = request_from_dtm_requestfrmDTM[37:34] - 4'h4 ;
  assign x__h37799 = request_from_dtm_requestfrmDTM[39:34] - 6'h20 ;
  assign x_port1__read__h35862 =
	     !rg_sbsingleread$EN_port0__write && rg_sbsingleread ;
  assign x_port1__read__h36252 =
	     abstract_Data_0$EN_port0__write ?
	       abstract_Data_0$port0__write_1 :
	       abstract_Data_0 ;
  assign x_port1__read__h36254 =
	     abstract_Data_1$EN_port0__write ?
	       abstract_Data_1$port0__write_1 :
	       abstract_Data_1 ;
  assign x_port1__read__h36256 =
	     abstract_Data_2$EN_port0__write ?
	       abstract_Data_2$port0__write_1 :
	       abstract_Data_2 ;
  assign x_port1__read__h36258 =
	     abstract_Data_3$EN_port0__write ?
	       abstract_Data_3$port0__write_1 :
	       abstract_Data_3 ;
  assign x_port1__read__h36260 =
	     abstract_Data_4$EN_port0__write ?
	       abstract_Data_4$port0__write_1 :
	       abstract_Data_4 ;
  assign x_port1__read__h36262 =
	     abstract_Data_5$EN_port0__write ?
	       abstract_Data_5$port0__write_1 :
	       abstract_Data_5 ;
  assign x_port1__read__h36264 =
	     abstract_Data_6$EN_port0__write ?
	       abstract_Data_6$port0__write_1 :
	       abstract_Data_6 ;
  assign x_port1__read__h36266 =
	     abstract_Data_7$EN_port0__write ?
	       abstract_Data_7$port0__write_1 :
	       abstract_Data_7 ;
  assign x_port1__read__h36268 =
	     abstract_Data_8$EN_port0__write ?
	       abstract_Data_8$port0__write_1 :
	       abstract_Data_8 ;
  assign x_port1__read__h36270 =
	     abstract_Data_9$EN_port0__write ?
	       abstract_Data_9$port0__write_1 :
	       abstract_Data_9 ;
  assign x_port1__read__h36272 =
	     abstract_Data_10$EN_port0__write ?
	       abstract_Data_10$port0__write_1 :
	       abstract_Data_10 ;
  assign x_port1__read__h36274 =
	     abstract_Data_11$EN_port0__write ?
	       abstract_Data_11$port0__write_1 :
	       abstract_Data_11 ;
  assign x_port1__read__h36658 =
	     program_Buffer_0$EN_port0__write ?
	       program_Buffer_0$port0__write_1 :
	       program_Buffer_0 ;
  assign x_port1__read__h36660 =
	     program_Buffer_1$EN_port0__write ?
	       program_Buffer_1$port0__write_1 :
	       program_Buffer_1 ;
  assign x_port1__read__h36662 =
	     program_Buffer_2$EN_port0__write ?
	       program_Buffer_2$port0__write_1 :
	       program_Buffer_2 ;
  assign x_port1__read__h36664 =
	     program_Buffer_3$EN_port0__write ?
	       program_Buffer_3$port0__write_1 :
	       program_Buffer_3 ;
  assign x_port1__read__h36666 =
	     program_Buffer_4$EN_port0__write ?
	       program_Buffer_4$port0__write_1 :
	       program_Buffer_4 ;
  assign x_port1__read__h36668 =
	     program_Buffer_5$EN_port0__write ?
	       program_Buffer_5$port0__write_1 :
	       program_Buffer_5 ;
  assign x_port1__read__h36670 =
	     program_Buffer_6$EN_port0__write ?
	       program_Buffer_6$port0__write_1 :
	       program_Buffer_6 ;
  assign x_port1__read__h36672 =
	     program_Buffer_7$EN_port0__write ?
	       program_Buffer_7$port0__write_1 :
	       program_Buffer_7 ;
  assign x_port1__read__h36674 =
	     program_Buffer_8$EN_port0__write ?
	       program_Buffer_8$port0__write_1 :
	       program_Buffer_8 ;
  assign x_port1__read__h36676 =
	     program_Buffer_9$EN_port0__write ?
	       program_Buffer_9$port0__write_1 :
	       program_Buffer_9 ;
  assign x_port1__read__h36678 =
	     program_Buffer_10$EN_port0__write ?
	       program_Buffer_10$port0__write_1 :
	       program_Buffer_10 ;
  assign x_port1__read__h36680 =
	     program_Buffer_11$EN_port0__write ?
	       program_Buffer_11$port0__write_1 :
	       program_Buffer_11 ;
  assign x_port1__read__h36682 =
	     program_Buffer_12$EN_port0__write ?
	       program_Buffer_12$port0__write_1 :
	       program_Buffer_12 ;
  assign x_port1__read__h36684 =
	     program_Buffer_13$EN_port0__write ?
	       program_Buffer_13$port0__write_1 :
	       program_Buffer_13 ;
  assign x_port1__read__h36686 =
	     program_Buffer_14$EN_port0__write ?
	       program_Buffer_14$port0__write_1 :
	       program_Buffer_14 ;
  assign x_port1__read__h36688 =
	     program_Buffer_15$EN_port0__write ?
	       program_Buffer_15$port0__write_1 :
	       program_Buffer_15 ;
  always@(rg_sbaccess)
  begin
    case (rg_sbaccess)
      3'd0: _theResult____h31668 = 8'd1;
      3'd1: _theResult____h31668 = 8'd2;
      3'd2: _theResult____h31668 = 8'd4;
      3'd3: _theResult____h31668 = 8'd8;
      default: _theResult____h31668 = 8'd0;
    endcase
  end
  always@(rg_sbaccess or busData0 or busData1)
  begin
    case (rg_sbaccess)
      3'd0: request_data_wdata__h32053 = {8{busData0[7:0]}};
      3'd1: request_data_wdata__h32053 = {4{busData0[15:0]}};
      3'd2: request_data_wdata__h32053 = {2{busData0}};
      3'd3: request_data_wdata__h32053 = { busData1, busData0 };
      default: request_data_wdata__h32053 = 64'd0;
    endcase
  end
  always@(rg_sbaccess)
  begin
    case (rg_sbaccess)
      3'd0: write_strobe__h31911 = 8'b00000001;
      3'd1: write_strobe__h31911 = 8'b00000011;
      3'd2: write_strobe__h31911 = 8'h0F;
      default: write_strobe__h31911 = 8'hFF;
    endcase
  end
  always@(index__h10197 or
	  program_Buffer_0 or
	  program_Buffer_1 or
	  program_Buffer_2 or
	  program_Buffer_3 or
	  program_Buffer_4 or
	  program_Buffer_5 or
	  program_Buffer_6 or
	  program_Buffer_7 or
	  program_Buffer_8 or
	  program_Buffer_9 or
	  program_Buffer_10 or
	  program_Buffer_11 or
	  program_Buffer_12 or
	  program_Buffer_13 or program_Buffer_14 or program_Buffer_15)
  begin
    case (index__h10197)
      4'd0:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 =
	      program_Buffer_0;
      4'd1:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 =
	      program_Buffer_1;
      4'd2:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 =
	      program_Buffer_2;
      4'd3:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 =
	      program_Buffer_3;
      4'd4:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 =
	      program_Buffer_4;
      4'd5:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 =
	      program_Buffer_5;
      4'd6:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 =
	      program_Buffer_6;
      4'd7:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 =
	      program_Buffer_7;
      4'd8:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 =
	      program_Buffer_8;
      4'd9:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 =
	      program_Buffer_9;
      4'd10:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 =
	      program_Buffer_10;
      4'd11:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 =
	      program_Buffer_11;
      4'd12:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 =
	      program_Buffer_12;
      4'd13:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 =
	      program_Buffer_13;
      4'd14:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 =
	      program_Buffer_14;
      4'd15:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 =
	      program_Buffer_15;
    endcase
  end
  always@(slave_xactor_f_rd_addrD_OUT_BITS_74_TO_43_MIN_ETC__q2 or
	  abstract_Data_0 or
	  abstract_Data_1 or
	  abstract_Data_2 or
	  abstract_Data_3 or
	  abstract_Data_4 or
	  abstract_Data_5 or
	  abstract_Data_6 or
	  abstract_Data_7 or
	  abstract_Data_8 or
	  abstract_Data_9 or abstract_Data_10 or abstract_Data_11)
  begin
    case (slave_xactor_f_rd_addrD_OUT_BITS_74_TO_43_MIN_ETC__q2[5:2])
      4'd0:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d99 =
	      abstract_Data_0;
      4'd1:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d99 =
	      abstract_Data_1;
      4'd2:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d99 =
	      abstract_Data_2;
      4'd3:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d99 =
	      abstract_Data_3;
      4'd4:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d99 =
	      abstract_Data_4;
      4'd5:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d99 =
	      abstract_Data_5;
      4'd6:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d99 =
	      abstract_Data_6;
      4'd7:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d99 =
	      abstract_Data_7;
      4'd8:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d99 =
	      abstract_Data_8;
      4'd9:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d99 =
	      abstract_Data_9;
      4'd10:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d99 =
	      abstract_Data_10;
      4'd11:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d99 =
	      abstract_Data_11;
      default: SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d99 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(x__h11613 or
	  abstract_Data_0 or
	  abstract_Data_1 or
	  abstract_Data_2 or
	  abstract_Data_3 or
	  abstract_Data_4 or
	  abstract_Data_5 or
	  abstract_Data_6 or
	  abstract_Data_7 or
	  abstract_Data_8 or
	  abstract_Data_9 or abstract_Data_10 or abstract_Data_11)
  begin
    case (x__h11613)
      4'd0:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d98 =
	      abstract_Data_0;
      4'd1:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d98 =
	      abstract_Data_1;
      4'd2:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d98 =
	      abstract_Data_2;
      4'd3:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d98 =
	      abstract_Data_3;
      4'd4:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d98 =
	      abstract_Data_4;
      4'd5:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d98 =
	      abstract_Data_5;
      4'd6:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d98 =
	      abstract_Data_6;
      4'd7:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d98 =
	      abstract_Data_7;
      4'd8:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d98 =
	      abstract_Data_8;
      4'd9:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d98 =
	      abstract_Data_9;
      4'd10:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d98 =
	      abstract_Data_10;
      4'd11:
	  SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d98 =
	      abstract_Data_11;
      default: SEL_ARR_abstract_Data_0_port0__read__2_abstrac_ETC___d98 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(x__h12464 or
	  program_Buffer_0 or
	  program_Buffer_1 or
	  program_Buffer_2 or
	  program_Buffer_3 or
	  program_Buffer_4 or
	  program_Buffer_5 or
	  program_Buffer_6 or
	  program_Buffer_7 or
	  program_Buffer_8 or
	  program_Buffer_9 or
	  program_Buffer_10 or
	  program_Buffer_11 or
	  program_Buffer_12 or
	  program_Buffer_13 or program_Buffer_14 or program_Buffer_15)
  begin
    case (x__h12464)
      4'd0:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 =
	      program_Buffer_0;
      4'd1:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 =
	      program_Buffer_1;
      4'd2:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 =
	      program_Buffer_2;
      4'd3:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 =
	      program_Buffer_3;
      4'd4:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 =
	      program_Buffer_4;
      4'd5:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 =
	      program_Buffer_5;
      4'd6:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 =
	      program_Buffer_6;
      4'd7:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 =
	      program_Buffer_7;
      4'd8:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 =
	      program_Buffer_8;
      4'd9:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 =
	      program_Buffer_9;
      4'd10:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 =
	      program_Buffer_10;
      4'd11:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 =
	      program_Buffer_11;
      4'd12:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 =
	      program_Buffer_12;
      4'd13:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 =
	      program_Buffer_13;
      4'd14:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 =
	      program_Buffer_14;
      4'd15:
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 =
	      program_Buffer_15;
    endcase
  end
  always@(slave_xactor_f_rd_addr$D_OUT or
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 or
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42)
  begin
    case (slave_xactor_f_rd_addr$D_OUT[45:43])
      3'd0:
	  IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d129 =
	      {4{SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42[15:0]}};
      3'd2:
	  IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d129 =
	      {4{SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42[31:16]}};
      3'd4:
	  IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d129 =
	      {4{SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105[15:0]}};
      default: IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d129 =
		   {4{SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105[31:16]}};
    endcase
  end
  always@(slave_xactor_f_rd_addr$D_OUT or
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105 or
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42)
  begin
    case (slave_xactor_f_rd_addr$D_OUT[45:43])
      3'd0:
	  IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d182 =
	      {8{SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42[7:0]}};
      3'd1:
	  IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d182 =
	      {8{SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42[15:8]}};
      3'd2:
	  IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d182 =
	      {8{SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42[23:16]}};
      3'd3:
	  IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d182 =
	      {8{SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42[31:24]}};
      3'd4:
	  IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d182 =
	      {8{SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105[7:0]}};
      3'd5:
	  IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d182 =
	      {8{SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105[15:8]}};
      3'd6:
	  IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d182 =
	      {8{SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105[23:16]}};
      3'd7:
	  IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d182 =
	      {8{SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105[31:24]}};
    endcase
  end
  always@(slave_xactor_f_rd_addr$D_OUT or
	  IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d182 or
	  IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d129 or
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 or
	  SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105)
  begin
    case (slave_xactor_f_rd_addr$D_OUT[21:19])
      3'd1:
	  y_avValue_rdata__h11299 =
	      IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d129;
      3'd2:
	  y_avValue_rdata__h11299 =
	      {2{SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42}};
      3'd3:
	  y_avValue_rdata__h11299 =
	      { SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d105,
		SEL_ARR_program_Buffer_0_port0__read__3_progra_ETC___d42 };
      default: y_avValue_rdata__h11299 =
		   IF_slave_xactor_f_rd_addr_first__3_BITS_45_TO__ETC___d182;
    endcase
  end
  always@(slave_xactor_f_wr_addr$D_OUT)
  begin
    case (slave_xactor_f_wr_addr$D_OUT[21:19])
      3'd2, 3'd3:
	  CASE_slave_xactor_f_wr_addrD_OUT_BITS_21_TO_1_ETC__q3 = 2'd0;
      default: CASE_slave_xactor_f_wr_addrD_OUT_BITS_21_TO_1_ETC__q3 = 2'd2;
    endcase
  end
  always@(slave_xactor_f_rd_addr$D_OUT)
  begin
    case (slave_xactor_f_rd_addr$D_OUT[21:19])
      3'd2, 3'd3:
	  CASE_slave_xactor_f_rd_addrD_OUT_BITS_21_TO_1_ETC__q4 = 2'd0;
      default: CASE_slave_xactor_f_rd_addrD_OUT_BITS_21_TO_1_ETC__q4 = 2'd2;
    endcase
  end
  always@(x__h37682 or
	  x_port1__read__h36252 or
	  x_port1__read__h36254 or
	  x_port1__read__h36256 or
	  x_port1__read__h36258 or
	  x_port1__read__h36260 or
	  x_port1__read__h36262 or
	  x_port1__read__h36264 or
	  x_port1__read__h36266 or
	  x_port1__read__h36268 or
	  x_port1__read__h36270 or
	  x_port1__read__h36272 or x_port1__read__h36274)
  begin
    case (x__h37682)
      4'd0: spliced_bits__h37628 = x_port1__read__h36252;
      4'd1: spliced_bits__h37628 = x_port1__read__h36254;
      4'd2: spliced_bits__h37628 = x_port1__read__h36256;
      4'd3: spliced_bits__h37628 = x_port1__read__h36258;
      4'd4: spliced_bits__h37628 = x_port1__read__h36260;
      4'd5: spliced_bits__h37628 = x_port1__read__h36262;
      4'd6: spliced_bits__h37628 = x_port1__read__h36264;
      4'd7: spliced_bits__h37628 = x_port1__read__h36266;
      4'd8: spliced_bits__h37628 = x_port1__read__h36268;
      4'd9: spliced_bits__h37628 = x_port1__read__h36270;
      4'd10: spliced_bits__h37628 = x_port1__read__h36272;
      4'd11: spliced_bits__h37628 = x_port1__read__h36274;
      default: spliced_bits__h37628 = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(request_from_dtm_requestfrmDTM or
	  x_port1__read__h36658 or
	  x_port1__read__h36660 or
	  x_port1__read__h36662 or
	  x_port1__read__h36664 or
	  x_port1__read__h36666 or
	  x_port1__read__h36668 or
	  x_port1__read__h36670 or
	  x_port1__read__h36672 or
	  x_port1__read__h36674 or
	  x_port1__read__h36676 or
	  x_port1__read__h36678 or
	  x_port1__read__h36680 or
	  x_port1__read__h36682 or
	  x_port1__read__h36684 or
	  x_port1__read__h36686 or x_port1__read__h36688)
  begin
    case (request_from_dtm_requestfrmDTM[37:34])
      4'd0: spliced_bits__h37910 = x_port1__read__h36658;
      4'd1: spliced_bits__h37910 = x_port1__read__h36660;
      4'd2: spliced_bits__h37910 = x_port1__read__h36662;
      4'd3: spliced_bits__h37910 = x_port1__read__h36664;
      4'd4: spliced_bits__h37910 = x_port1__read__h36666;
      4'd5: spliced_bits__h37910 = x_port1__read__h36668;
      4'd6: spliced_bits__h37910 = x_port1__read__h36670;
      4'd7: spliced_bits__h37910 = x_port1__read__h36672;
      4'd8: spliced_bits__h37910 = x_port1__read__h36674;
      4'd9: spliced_bits__h37910 = x_port1__read__h36676;
      4'd10: spliced_bits__h37910 = x_port1__read__h36678;
      4'd11: spliced_bits__h37910 = x_port1__read__h36680;
      4'd12: spliced_bits__h37910 = x_port1__read__h36682;
      4'd13: spliced_bits__h37910 = x_port1__read__h36684;
      4'd14: spliced_bits__h37910 = x_port1__read__h36686;
      4'd15: spliced_bits__h37910 = x_port1__read__h36688;
    endcase
  end
  always@(request_from_dtm_requestfrmDTM or
	  v__h37475 or
	  spliced_bits__h38126 or
	  spliced_bits__h38178 or
	  spliced_bits__h38295 or
	  spliced_bits__h38354 or
	  bs__h36437 or
	  spliced_bits__h38453 or
	  spliced_bits__h38504 or v__h37317 or spliced_bits__h38563)
  begin
    case (request_from_dtm_requestfrmDTM[39:34])
      6'h10: v__h37237 = { spliced_bits__h38126, 2'd0 };
      6'h11: v__h37237 = { spliced_bits__h38178, 2'd0 };
      6'h12: v__h37237 = 34'd8847664;
      6'h16: v__h37237 = { spliced_bits__h38295, 2'd0 };
      6'h17: v__h37237 = { spliced_bits__h38354, 2'd0 };
      6'h18: v__h37237 = { bs__h36437, 2'd0 };
      6'h38: v__h37237 = { spliced_bits__h38453, 2'd0 };
      6'h39: v__h37237 = { spliced_bits__h38504, 2'd0 };
      6'h3C: v__h37237 = v__h37317;
      6'h3D: v__h37237 = { spliced_bits__h38563, 2'd0 };
      default: v__h37237 = v__h37475;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        abstract_Data_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abstract_Data_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abstract_Data_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abstract_Data_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abstract_Data_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abstract_Data_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abstract_Data_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abstract_Data_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abstract_Data_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abstract_Data_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abstract_Data_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	abstract_Data_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	busAddr0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	busData0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	busData1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	haltreq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	instruction0 <= `BSV_ASSIGNMENT_DELAY 32'h0000100F;
	instruction1 <= `BSV_ASSIGNMENT_DELAY 32'h00000013;
	instruction2 <= `BSV_ASSIGNMENT_DELAY 32'hFFDFF06F;
	instruction3 <= `BSV_ASSIGNMENT_DELAY 32'h0040006F;
	perform_reg_access <= `BSV_ASSIGNMENT_DELAY 1'd0;
	prog_ebreak_read <= `BSV_ASSIGNMENT_DELAY 1'd0;
	program_Buffer_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	program_Buffer_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	program_Buffer_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	program_Buffer_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	program_Buffer_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	program_Buffer_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	program_Buffer_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	program_Buffer_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	program_Buffer_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	program_Buffer_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	program_Buffer_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	program_Buffer_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	program_Buffer_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	program_Buffer_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	program_Buffer_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	program_Buffer_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reset_status <= `BSV_ASSIGNMENT_DELAY 1'd1;
	resume <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_autoexecdata <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rg_autoexecprogbuf <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_cmderr <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_cmdtype <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_control <= `BSV_ASSIGNMENT_DELAY 24'd0;
	rg_dmactive <= `BSV_ASSIGNMENT_DELAY 1'b0;
	rg_halted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_hartreset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_hartsel <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_nonexistent <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_reset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_resumeack <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_sbaccess <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_sbautoincrement <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_sbautoread <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_sberror <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_sbsingleread <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_unavailable <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_program_exec <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wr_gen_haltreq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wr_gen_resumereq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	write_flag <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (abstract_Data_0$EN)
	  abstract_Data_0 <= `BSV_ASSIGNMENT_DELAY abstract_Data_0$D_IN;
	if (abstract_Data_1$EN)
	  abstract_Data_1 <= `BSV_ASSIGNMENT_DELAY abstract_Data_1$D_IN;
	if (abstract_Data_10$EN)
	  abstract_Data_10 <= `BSV_ASSIGNMENT_DELAY abstract_Data_10$D_IN;
	if (abstract_Data_11$EN)
	  abstract_Data_11 <= `BSV_ASSIGNMENT_DELAY abstract_Data_11$D_IN;
	if (abstract_Data_2$EN)
	  abstract_Data_2 <= `BSV_ASSIGNMENT_DELAY abstract_Data_2$D_IN;
	if (abstract_Data_3$EN)
	  abstract_Data_3 <= `BSV_ASSIGNMENT_DELAY abstract_Data_3$D_IN;
	if (abstract_Data_4$EN)
	  abstract_Data_4 <= `BSV_ASSIGNMENT_DELAY abstract_Data_4$D_IN;
	if (abstract_Data_5$EN)
	  abstract_Data_5 <= `BSV_ASSIGNMENT_DELAY abstract_Data_5$D_IN;
	if (abstract_Data_6$EN)
	  abstract_Data_6 <= `BSV_ASSIGNMENT_DELAY abstract_Data_6$D_IN;
	if (abstract_Data_7$EN)
	  abstract_Data_7 <= `BSV_ASSIGNMENT_DELAY abstract_Data_7$D_IN;
	if (abstract_Data_8$EN)
	  abstract_Data_8 <= `BSV_ASSIGNMENT_DELAY abstract_Data_8$D_IN;
	if (abstract_Data_9$EN)
	  abstract_Data_9 <= `BSV_ASSIGNMENT_DELAY abstract_Data_9$D_IN;
	if (busAddr0$EN) busAddr0 <= `BSV_ASSIGNMENT_DELAY busAddr0$D_IN;
	if (busData0$EN) busData0 <= `BSV_ASSIGNMENT_DELAY busData0$D_IN;
	if (busData1$EN) busData1 <= `BSV_ASSIGNMENT_DELAY busData1$D_IN;
	if (haltreq$EN) haltreq <= `BSV_ASSIGNMENT_DELAY haltreq$D_IN;
	if (instruction0$EN)
	  instruction0 <= `BSV_ASSIGNMENT_DELAY instruction0$D_IN;
	if (instruction1$EN)
	  instruction1 <= `BSV_ASSIGNMENT_DELAY instruction1$D_IN;
	if (instruction2$EN)
	  instruction2 <= `BSV_ASSIGNMENT_DELAY instruction2$D_IN;
	if (instruction3$EN)
	  instruction3 <= `BSV_ASSIGNMENT_DELAY instruction3$D_IN;
	if (perform_reg_access$EN)
	  perform_reg_access <= `BSV_ASSIGNMENT_DELAY perform_reg_access$D_IN;
	if (prog_ebreak_read$EN)
	  prog_ebreak_read <= `BSV_ASSIGNMENT_DELAY prog_ebreak_read$D_IN;
	if (program_Buffer_0$EN)
	  program_Buffer_0 <= `BSV_ASSIGNMENT_DELAY program_Buffer_0$D_IN;
	if (program_Buffer_1$EN)
	  program_Buffer_1 <= `BSV_ASSIGNMENT_DELAY program_Buffer_1$D_IN;
	if (program_Buffer_10$EN)
	  program_Buffer_10 <= `BSV_ASSIGNMENT_DELAY program_Buffer_10$D_IN;
	if (program_Buffer_11$EN)
	  program_Buffer_11 <= `BSV_ASSIGNMENT_DELAY program_Buffer_11$D_IN;
	if (program_Buffer_12$EN)
	  program_Buffer_12 <= `BSV_ASSIGNMENT_DELAY program_Buffer_12$D_IN;
	if (program_Buffer_13$EN)
	  program_Buffer_13 <= `BSV_ASSIGNMENT_DELAY program_Buffer_13$D_IN;
	if (program_Buffer_14$EN)
	  program_Buffer_14 <= `BSV_ASSIGNMENT_DELAY program_Buffer_14$D_IN;
	if (program_Buffer_15$EN)
	  program_Buffer_15 <= `BSV_ASSIGNMENT_DELAY program_Buffer_15$D_IN;
	if (program_Buffer_2$EN)
	  program_Buffer_2 <= `BSV_ASSIGNMENT_DELAY program_Buffer_2$D_IN;
	if (program_Buffer_3$EN)
	  program_Buffer_3 <= `BSV_ASSIGNMENT_DELAY program_Buffer_3$D_IN;
	if (program_Buffer_4$EN)
	  program_Buffer_4 <= `BSV_ASSIGNMENT_DELAY program_Buffer_4$D_IN;
	if (program_Buffer_5$EN)
	  program_Buffer_5 <= `BSV_ASSIGNMENT_DELAY program_Buffer_5$D_IN;
	if (program_Buffer_6$EN)
	  program_Buffer_6 <= `BSV_ASSIGNMENT_DELAY program_Buffer_6$D_IN;
	if (program_Buffer_7$EN)
	  program_Buffer_7 <= `BSV_ASSIGNMENT_DELAY program_Buffer_7$D_IN;
	if (program_Buffer_8$EN)
	  program_Buffer_8 <= `BSV_ASSIGNMENT_DELAY program_Buffer_8$D_IN;
	if (program_Buffer_9$EN)
	  program_Buffer_9 <= `BSV_ASSIGNMENT_DELAY program_Buffer_9$D_IN;
	if (reset_status$EN)
	  reset_status <= `BSV_ASSIGNMENT_DELAY reset_status$D_IN;
	if (resume$EN) resume <= `BSV_ASSIGNMENT_DELAY resume$D_IN;
	if (rg_autoexecdata$EN)
	  rg_autoexecdata <= `BSV_ASSIGNMENT_DELAY rg_autoexecdata$D_IN;
	if (rg_autoexecprogbuf$EN)
	  rg_autoexecprogbuf <= `BSV_ASSIGNMENT_DELAY rg_autoexecprogbuf$D_IN;
	if (rg_busy$EN) rg_busy <= `BSV_ASSIGNMENT_DELAY rg_busy$D_IN;
	if (rg_cmderr$EN) rg_cmderr <= `BSV_ASSIGNMENT_DELAY rg_cmderr$D_IN;
	if (rg_cmdtype$EN)
	  rg_cmdtype <= `BSV_ASSIGNMENT_DELAY rg_cmdtype$D_IN;
	if (rg_control$EN)
	  rg_control <= `BSV_ASSIGNMENT_DELAY rg_control$D_IN;
	if (rg_dmactive$EN)
	  rg_dmactive <= `BSV_ASSIGNMENT_DELAY rg_dmactive$D_IN;
	if (rg_halted$EN) rg_halted <= `BSV_ASSIGNMENT_DELAY rg_halted$D_IN;
	if (rg_hartreset$EN)
	  rg_hartreset <= `BSV_ASSIGNMENT_DELAY rg_hartreset$D_IN;
	if (rg_hartsel$EN)
	  rg_hartsel <= `BSV_ASSIGNMENT_DELAY rg_hartsel$D_IN;
	if (rg_nonexistent$EN)
	  rg_nonexistent <= `BSV_ASSIGNMENT_DELAY rg_nonexistent$D_IN;
	if (rg_reset$EN) rg_reset <= `BSV_ASSIGNMENT_DELAY rg_reset$D_IN;
	if (rg_resumeack$EN)
	  rg_resumeack <= `BSV_ASSIGNMENT_DELAY rg_resumeack$D_IN;
	if (rg_running$EN)
	  rg_running <= `BSV_ASSIGNMENT_DELAY rg_running$D_IN;
	if (rg_sbaccess$EN)
	  rg_sbaccess <= `BSV_ASSIGNMENT_DELAY rg_sbaccess$D_IN;
	if (rg_sbautoincrement$EN)
	  rg_sbautoincrement <= `BSV_ASSIGNMENT_DELAY rg_sbautoincrement$D_IN;
	if (rg_sbautoread$EN)
	  rg_sbautoread <= `BSV_ASSIGNMENT_DELAY rg_sbautoread$D_IN;
	if (rg_sberror$EN)
	  rg_sberror <= `BSV_ASSIGNMENT_DELAY rg_sberror$D_IN;
	if (rg_sbsingleread$EN)
	  rg_sbsingleread <= `BSV_ASSIGNMENT_DELAY rg_sbsingleread$D_IN;
	if (rg_unavailable$EN)
	  rg_unavailable <= `BSV_ASSIGNMENT_DELAY rg_unavailable$D_IN;
	if (start_program_exec$EN)
	  start_program_exec <= `BSV_ASSIGNMENT_DELAY start_program_exec$D_IN;
	if (wr_gen_haltreq$EN)
	  wr_gen_haltreq <= `BSV_ASSIGNMENT_DELAY wr_gen_haltreq$D_IN;
	if (wr_gen_resumereq$EN)
	  wr_gen_resumereq <= `BSV_ASSIGNMENT_DELAY wr_gen_resumereq$D_IN;
	if (write_flag$EN)
	  write_flag <= `BSV_ASSIGNMENT_DELAY write_flag$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    abstract_Data_0 = 32'hAAAAAAAA;
    abstract_Data_1 = 32'hAAAAAAAA;
    abstract_Data_10 = 32'hAAAAAAAA;
    abstract_Data_11 = 32'hAAAAAAAA;
    abstract_Data_2 = 32'hAAAAAAAA;
    abstract_Data_3 = 32'hAAAAAAAA;
    abstract_Data_4 = 32'hAAAAAAAA;
    abstract_Data_5 = 32'hAAAAAAAA;
    abstract_Data_6 = 32'hAAAAAAAA;
    abstract_Data_7 = 32'hAAAAAAAA;
    abstract_Data_8 = 32'hAAAAAAAA;
    abstract_Data_9 = 32'hAAAAAAAA;
    busAddr0 = 32'hAAAAAAAA;
    busData0 = 32'hAAAAAAAA;
    busData1 = 32'hAAAAAAAA;
    haltreq = 1'h0;
    instruction0 = 32'hAAAAAAAA;
    instruction1 = 32'hAAAAAAAA;
    instruction2 = 32'hAAAAAAAA;
    instruction3 = 32'hAAAAAAAA;
    perform_reg_access = 1'h0;
    prog_ebreak_read = 1'h0;
    program_Buffer_0 = 32'hAAAAAAAA;
    program_Buffer_1 = 32'hAAAAAAAA;
    program_Buffer_10 = 32'hAAAAAAAA;
    program_Buffer_11 = 32'hAAAAAAAA;
    program_Buffer_12 = 32'hAAAAAAAA;
    program_Buffer_13 = 32'hAAAAAAAA;
    program_Buffer_14 = 32'hAAAAAAAA;
    program_Buffer_15 = 32'hAAAAAAAA;
    program_Buffer_2 = 32'hAAAAAAAA;
    program_Buffer_3 = 32'hAAAAAAAA;
    program_Buffer_4 = 32'hAAAAAAAA;
    program_Buffer_5 = 32'hAAAAAAAA;
    program_Buffer_6 = 32'hAAAAAAAA;
    program_Buffer_7 = 32'hAAAAAAAA;
    program_Buffer_8 = 32'hAAAAAAAA;
    program_Buffer_9 = 32'hAAAAAAAA;
    reset_status = 1'h0;
    resume = 1'h0;
    rg_autoexecdata = 12'hAAA;
    rg_autoexecprogbuf = 16'hAAAA;
    rg_busy = 1'h0;
    rg_cmderr = 3'h2;
    rg_cmdtype = 8'hAA;
    rg_control = 24'hAAAAAA;
    rg_dmactive = 1'h0;
    rg_halted = 1'h0;
    rg_hartreset = 1'h0;
    rg_hartsel = 10'h2AA;
    rg_nonexistent = 1'h0;
    rg_reset = 1'h0;
    rg_resumeack = 1'h0;
    rg_running = 1'h0;
    rg_sbaccess = 3'h2;
    rg_sbautoincrement = 1'h0;
    rg_sbautoread = 1'h0;
    rg_sberror = 3'h2;
    rg_sbsingleread = 1'h0;
    rg_unavailable = 1'h0;
    start_program_exec = 1'h0;
    wr_gen_haltreq = 1'h0;
    wr_gen_resumereq = 1'h0;
    write_flag = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_access_csrs && WILL_FIRE_RL_access_register_or_pc &&
	  !rg_control[12] &&
	  c64$RDY_rw_csr &&
	  rg_halted &&
	  rg_control[17])
	$display("Error: \"src/uncore/debug/DebugModule.bsv\", line 407, column 22: (R0002)\n  Conflict-free rules RL_access_csrs and RL_access_register_or_pc called\n  conflicting methods port0__read and port0__write of module instance\n  perform_reg_access.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_access_csrs && WILL_FIRE_RL_access_register_or_pc &&
	  rg_control[16] &&
	  _port0__write_RL_access_register_or_pc$EN_abstract_Data_0$wget)
	$display("Error: \"src/uncore/debug/DebugModule.bsv\", line 407, column 22: (R0002)\n  Conflict-free rules RL_access_csrs and RL_access_register_or_pc called\n  conflicting methods port0__read and port0__write of module instance\n  abstract_Data_0.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_access_csrs && WILL_FIRE_RL_access_register_or_pc &&
	  rg_control[16] &&
	  rg_control[22:20] == 3'd3 &&
	  _port0__write_RL_access_register_or_pc$EN_abstract_Data_1$wget)
	$display("Error: \"src/uncore/debug/DebugModule.bsv\", line 407, column 22: (R0002)\n  Conflict-free rules RL_access_csrs and RL_access_register_or_pc called\n  conflicting methods port0__read and port0__write of module instance\n  abstract_Data_1.\n");
  end
  // synopsys translate_on
endmodule  // mkDebugModule

