//
// Generated by Bluespec Compiler, version 2021.07-1-gaf77efcd (build af77efcd)
//
// On Mon Oct 18 13:12:40 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_encrypt                    O     1
// ret                            O   128 reg
// RDY_ret                        O     1
// outp_ready                     O     1 reg
// RDY_outp_ready                 O     1 const
// can_take_inp                   O     1
// RDY_can_take_inp               O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// encrypt_plaintexttt            I   128
// encrypt_keyyy                  I   256
// encrypt_decrypttt              I     1
// encrypt_keyylenn               I     2
// EN_encrypt                     I     1
// EN_ret                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAES(CLK,
	     RST_N,

	     encrypt_plaintexttt,
	     encrypt_keyyy,
	     encrypt_decrypttt,
	     encrypt_keyylenn,
	     EN_encrypt,
	     RDY_encrypt,

	     EN_ret,
	     ret,
	     RDY_ret);
  input  CLK;
  input  RST_N;

  // action method encrypt
  input  [127 : 0] encrypt_plaintexttt;
  input  [255 : 0] encrypt_keyyy;
  input  encrypt_decrypttt;
  input  [1 : 0] encrypt_keyylenn;
  input  EN_encrypt;
  output RDY_encrypt;

  // actionvalue method ret
  input  EN_ret;
  output [127 : 0] ret;
  output RDY_ret;

  // signals for module outputs
  wire [127 : 0] ret;
  wire RDY_encrypt,
       RDY_ret;

  // register _unnamed_
  reg _unnamed_;
  wire _unnamed_$D_IN, _unnamed_$EN;

  // register ciphertext
  reg [127 : 0] ciphertext;
  wire [127 : 0] ciphertext$D_IN;
  wire ciphertext$EN;

  // register col0
  reg [31 : 0] col0;
  wire [31 : 0] col0$D_IN;
  wire col0$EN;

  // register col1
  reg [31 : 0] col1;
  wire [31 : 0] col1$D_IN;
  wire col1$EN;

  // register col2
  reg [31 : 0] col2;
  wire [31 : 0] col2$D_IN;
  wire col2$EN;

  // register col3
  reg [31 : 0] col3;
  wire [31 : 0] col3$D_IN;
  wire col3$EN;

  // register colout0
  reg [31 : 0] colout0;
  wire [31 : 0] colout0$D_IN;
  wire colout0$EN;

  // register colout1
  reg [31 : 0] colout1;
  wire [31 : 0] colout1$D_IN;
  wire colout1$EN;

  // register colout2
  reg [31 : 0] colout2;
  wire [31 : 0] colout2$D_IN;
  wire colout2$EN;

  // register colout3
  reg [31 : 0] colout3;
  wire [31 : 0] colout3$D_IN;
  wire colout3$EN;

  // register counter
  reg [3 : 0] counter;
  wire [3 : 0] counter$D_IN;
  wire counter$EN;

  // register decrypt
  reg decrypt;
  wire decrypt$D_IN, decrypt$EN;

  // register dr_c0_col_in
  reg [31 : 0] dr_c0_col_in;
  wire [31 : 0] dr_c0_col_in$D_IN;
  wire dr_c0_col_in$EN;

  // register dr_c1_col_in
  reg [31 : 0] dr_c1_col_in;
  wire [31 : 0] dr_c1_col_in$D_IN;
  wire dr_c1_col_in$EN;

  // register dr_c2_col_in
  reg [31 : 0] dr_c2_col_in;
  wire [31 : 0] dr_c2_col_in$D_IN;
  wire dr_c2_col_in$EN;

  // register dr_c3_col_in
  reg [31 : 0] dr_c3_col_in;
  wire [31 : 0] dr_c3_col_in$D_IN;
  wire dr_c3_col_in$EN;

  // register dr_col__0
  reg [7 : 0] dr_col__0;
  reg [7 : 0] dr_col__0$D_IN;
  wire dr_col__0$EN;

  // register dr_col__1
  reg [7 : 0] dr_col__1;
  reg [7 : 0] dr_col__1$D_IN;
  wire dr_col__1$EN;

  // register dr_col__10
  reg [7 : 0] dr_col__10;
  reg [7 : 0] dr_col__10$D_IN;
  wire dr_col__10$EN;

  // register dr_col__11
  reg [7 : 0] dr_col__11;
  reg [7 : 0] dr_col__11$D_IN;
  wire dr_col__11$EN;

  // register dr_col__12
  reg [7 : 0] dr_col__12;
  reg [7 : 0] dr_col__12$D_IN;
  wire dr_col__12$EN;

  // register dr_col__13
  reg [7 : 0] dr_col__13;
  reg [7 : 0] dr_col__13$D_IN;
  wire dr_col__13$EN;

  // register dr_col__14
  reg [7 : 0] dr_col__14;
  reg [7 : 0] dr_col__14$D_IN;
  wire dr_col__14$EN;

  // register dr_col__15
  reg [7 : 0] dr_col__15;
  reg [7 : 0] dr_col__15$D_IN;
  wire dr_col__15$EN;

  // register dr_col__2
  reg [7 : 0] dr_col__2;
  reg [7 : 0] dr_col__2$D_IN;
  wire dr_col__2$EN;

  // register dr_col__3
  reg [7 : 0] dr_col__3;
  reg [7 : 0] dr_col__3$D_IN;
  wire dr_col__3$EN;

  // register dr_col__4
  reg [7 : 0] dr_col__4;
  reg [7 : 0] dr_col__4$D_IN;
  wire dr_col__4$EN;

  // register dr_col__5
  reg [7 : 0] dr_col__5;
  reg [7 : 0] dr_col__5$D_IN;
  wire dr_col__5$EN;

  // register dr_col__6
  reg [7 : 0] dr_col__6;
  reg [7 : 0] dr_col__6$D_IN;
  wire dr_col__6$EN;

  // register dr_col__7
  reg [7 : 0] dr_col__7;
  reg [7 : 0] dr_col__7$D_IN;
  wire dr_col__7$EN;

  // register dr_col__8
  reg [7 : 0] dr_col__8;
  reg [7 : 0] dr_col__8$D_IN;
  wire dr_col__8$EN;

  // register dr_col__9
  reg [7 : 0] dr_col__9;
  reg [7 : 0] dr_col__9$D_IN;
  wire dr_col__9$EN;

  // register dr_colout0
  reg [31 : 0] dr_colout0;
  wire [31 : 0] dr_colout0$D_IN;
  wire dr_colout0$EN;

  // register dr_colout1
  reg [31 : 0] dr_colout1;
  wire [31 : 0] dr_colout1$D_IN;
  wire dr_colout1$EN;

  // register dr_colout2
  reg [31 : 0] dr_colout2;
  wire [31 : 0] dr_colout2$D_IN;
  wire dr_colout2$EN;

  // register dr_colout3
  reg [31 : 0] dr_colout3;
  wire [31 : 0] dr_colout3$D_IN;
  wire dr_colout3$EN;

  // register dr_counter
  reg [7 : 0] dr_counter;
  wire [7 : 0] dr_counter$D_IN;
  wire dr_counter$EN;

  // register dr_decrypt
  reg dr_decrypt;
  wire dr_decrypt$D_IN, dr_decrypt$EN;

  // register dr_last_round
  reg dr_last_round;
  reg dr_last_round$D_IN;
  wire dr_last_round$EN;

  // register dr_new_round
  reg dr_new_round;
  wire dr_new_round$D_IN, dr_new_round$EN;

  // register dr_rg_state
  reg [3 : 0] dr_rg_state;
  reg [3 : 0] dr_rg_state$D_IN;
  wire dr_rg_state$EN;

  // register dr_round_done
  reg dr_round_done;
  wire dr_round_done$D_IN, dr_round_done$EN;

  // register dr_sboxes_out_0
  reg [7 : 0] dr_sboxes_out_0;
  wire [7 : 0] dr_sboxes_out_0$D_IN;
  wire dr_sboxes_out_0$EN;

  // register dr_sboxes_out_1
  reg [7 : 0] dr_sboxes_out_1;
  wire [7 : 0] dr_sboxes_out_1$D_IN;
  wire dr_sboxes_out_1$EN;

  // register dr_sboxes_out_10
  reg [7 : 0] dr_sboxes_out_10;
  wire [7 : 0] dr_sboxes_out_10$D_IN;
  wire dr_sboxes_out_10$EN;

  // register dr_sboxes_out_11
  reg [7 : 0] dr_sboxes_out_11;
  wire [7 : 0] dr_sboxes_out_11$D_IN;
  wire dr_sboxes_out_11$EN;

  // register dr_sboxes_out_12
  reg [7 : 0] dr_sboxes_out_12;
  wire [7 : 0] dr_sboxes_out_12$D_IN;
  wire dr_sboxes_out_12$EN;

  // register dr_sboxes_out_13
  reg [7 : 0] dr_sboxes_out_13;
  wire [7 : 0] dr_sboxes_out_13$D_IN;
  wire dr_sboxes_out_13$EN;

  // register dr_sboxes_out_14
  reg [7 : 0] dr_sboxes_out_14;
  wire [7 : 0] dr_sboxes_out_14$D_IN;
  wire dr_sboxes_out_14$EN;

  // register dr_sboxes_out_15
  reg [7 : 0] dr_sboxes_out_15;
  wire [7 : 0] dr_sboxes_out_15$D_IN;
  wire dr_sboxes_out_15$EN;

  // register dr_sboxes_out_2
  reg [7 : 0] dr_sboxes_out_2;
  wire [7 : 0] dr_sboxes_out_2$D_IN;
  wire dr_sboxes_out_2$EN;

  // register dr_sboxes_out_3
  reg [7 : 0] dr_sboxes_out_3;
  wire [7 : 0] dr_sboxes_out_3$D_IN;
  wire dr_sboxes_out_3$EN;

  // register dr_sboxes_out_4
  reg [7 : 0] dr_sboxes_out_4;
  wire [7 : 0] dr_sboxes_out_4$D_IN;
  wire dr_sboxes_out_4$EN;

  // register dr_sboxes_out_5
  reg [7 : 0] dr_sboxes_out_5;
  wire [7 : 0] dr_sboxes_out_5$D_IN;
  wire dr_sboxes_out_5$EN;

  // register dr_sboxes_out_6
  reg [7 : 0] dr_sboxes_out_6;
  wire [7 : 0] dr_sboxes_out_6$D_IN;
  wire dr_sboxes_out_6$EN;

  // register dr_sboxes_out_7
  reg [7 : 0] dr_sboxes_out_7;
  wire [7 : 0] dr_sboxes_out_7$D_IN;
  wire dr_sboxes_out_7$EN;

  // register dr_sboxes_out_8
  reg [7 : 0] dr_sboxes_out_8;
  wire [7 : 0] dr_sboxes_out_8$D_IN;
  wire dr_sboxes_out_8$EN;

  // register dr_sboxes_out_9
  reg [7 : 0] dr_sboxes_out_9;
  wire [7 : 0] dr_sboxes_out_9$D_IN;
  wire dr_sboxes_out_9$EN;

  // register dr_sub_col_0
  reg [7 : 0] dr_sub_col_0;
  wire [7 : 0] dr_sub_col_0$D_IN;
  wire dr_sub_col_0$EN;

  // register dr_sub_col_1
  reg [7 : 0] dr_sub_col_1;
  wire [7 : 0] dr_sub_col_1$D_IN;
  wire dr_sub_col_1$EN;

  // register dr_sub_col_10
  reg [7 : 0] dr_sub_col_10;
  wire [7 : 0] dr_sub_col_10$D_IN;
  wire dr_sub_col_10$EN;

  // register dr_sub_col_11
  reg [7 : 0] dr_sub_col_11;
  wire [7 : 0] dr_sub_col_11$D_IN;
  wire dr_sub_col_11$EN;

  // register dr_sub_col_12
  reg [7 : 0] dr_sub_col_12;
  wire [7 : 0] dr_sub_col_12$D_IN;
  wire dr_sub_col_12$EN;

  // register dr_sub_col_13
  reg [7 : 0] dr_sub_col_13;
  wire [7 : 0] dr_sub_col_13$D_IN;
  wire dr_sub_col_13$EN;

  // register dr_sub_col_14
  reg [7 : 0] dr_sub_col_14;
  wire [7 : 0] dr_sub_col_14$D_IN;
  wire dr_sub_col_14$EN;

  // register dr_sub_col_15
  reg [7 : 0] dr_sub_col_15;
  wire [7 : 0] dr_sub_col_15$D_IN;
  wire dr_sub_col_15$EN;

  // register dr_sub_col_2
  reg [7 : 0] dr_sub_col_2;
  wire [7 : 0] dr_sub_col_2$D_IN;
  wire dr_sub_col_2$EN;

  // register dr_sub_col_3
  reg [7 : 0] dr_sub_col_3;
  wire [7 : 0] dr_sub_col_3$D_IN;
  wire dr_sub_col_3$EN;

  // register dr_sub_col_4
  reg [7 : 0] dr_sub_col_4;
  wire [7 : 0] dr_sub_col_4$D_IN;
  wire dr_sub_col_4$EN;

  // register dr_sub_col_5
  reg [7 : 0] dr_sub_col_5;
  wire [7 : 0] dr_sub_col_5$D_IN;
  wire dr_sub_col_5$EN;

  // register dr_sub_col_6
  reg [7 : 0] dr_sub_col_6;
  wire [7 : 0] dr_sub_col_6$D_IN;
  wire dr_sub_col_6$EN;

  // register dr_sub_col_7
  reg [7 : 0] dr_sub_col_7;
  wire [7 : 0] dr_sub_col_7$D_IN;
  wire dr_sub_col_7$EN;

  // register dr_sub_col_8
  reg [7 : 0] dr_sub_col_8;
  wire [7 : 0] dr_sub_col_8$D_IN;
  wire dr_sub_col_8$EN;

  // register dr_sub_col_9
  reg [7 : 0] dr_sub_col_9;
  wire [7 : 0] dr_sub_col_9$D_IN;
  wire dr_sub_col_9$EN;

  // register key
  reg [127 : 0] key;
  reg [127 : 0] key$D_IN;
  wire key$EN;

  // register kg_aes256_subcol4
  reg [31 : 0] kg_aes256_subcol4;
  wire [31 : 0] kg_aes256_subcol4$D_IN;
  wire kg_aes256_subcol4$EN;

  // register kg_counter
  reg [3 : 0] kg_counter;
  wire [3 : 0] kg_counter$D_IN;
  wire kg_counter$EN;

  // register kg_key_length
  reg [1 : 0] kg_key_length;
  wire [1 : 0] kg_key_length$D_IN;
  wire kg_key_length$EN;

  // register kg_key_saved
  reg kg_key_saved;
  wire kg_key_saved$D_IN, kg_key_saved$EN;

  // register kg_last_col_sub_rot
  reg [31 : 0] kg_last_col_sub_rot;
  reg [31 : 0] kg_last_col_sub_rot$D_IN;
  wire kg_last_col_sub_rot$EN;

  // register kg_maxrounds
  reg [4 : 0] kg_maxrounds;
  reg [4 : 0] kg_maxrounds$D_IN;
  wire kg_maxrounds$EN;

  // register kg_prev_key0
  reg [31 : 0] kg_prev_key0;
  wire [31 : 0] kg_prev_key0$D_IN;
  wire kg_prev_key0$EN;

  // register kg_prev_key1
  reg [31 : 0] kg_prev_key1;
  wire [31 : 0] kg_prev_key1$D_IN;
  wire kg_prev_key1$EN;

  // register kg_prev_key2
  reg [31 : 0] kg_prev_key2;
  wire [31 : 0] kg_prev_key2$D_IN;
  wire kg_prev_key2$EN;

  // register kg_prev_key3
  reg [31 : 0] kg_prev_key3;
  wire [31 : 0] kg_prev_key3$D_IN;
  wire kg_prev_key3$EN;

  // register kg_prev_key4
  reg [31 : 0] kg_prev_key4;
  wire [31 : 0] kg_prev_key4$D_IN;
  wire kg_prev_key4$EN;

  // register kg_prev_key5
  reg [31 : 0] kg_prev_key5;
  wire [31 : 0] kg_prev_key5$D_IN;
  wire kg_prev_key5$EN;

  // register kg_prev_key6
  reg [31 : 0] kg_prev_key6;
  wire [31 : 0] kg_prev_key6$D_IN;
  wire kg_prev_key6$EN;

  // register kg_prev_key7
  reg [31 : 0] kg_prev_key7;
  wire [31 : 0] kg_prev_key7$D_IN;
  wire kg_prev_key7$EN;

  // register kg_rci
  reg [3 : 0] kg_rci;
  wire [3 : 0] kg_rci$D_IN;
  wire kg_rci$EN;

  // register kg_rcon
  reg [31 : 0] kg_rcon;
  wire [31 : 0] kg_rcon$D_IN;
  wire kg_rcon$EN;

  // register kg_rg_state
  reg [2 : 0] kg_rg_state;
  reg [2 : 0] kg_rg_state$D_IN;
  wire kg_rg_state$EN;

  // register kg_rot_prev_key
  reg [31 : 0] kg_rot_prev_key;
  wire [31 : 0] kg_rot_prev_key$D_IN;
  wire kg_rot_prev_key$EN;

  // register kg_round_key_done_0
  reg kg_round_key_done_0;
  wire kg_round_key_done_0$D_IN, kg_round_key_done_0$EN;

  // register kg_round_key_done_1
  reg kg_round_key_done_1;
  wire kg_round_key_done_1$D_IN, kg_round_key_done_1$EN;

  // register kg_round_key_done_10
  reg kg_round_key_done_10;
  wire kg_round_key_done_10$D_IN, kg_round_key_done_10$EN;

  // register kg_round_key_done_11
  reg kg_round_key_done_11;
  wire kg_round_key_done_11$D_IN, kg_round_key_done_11$EN;

  // register kg_round_key_done_12
  reg kg_round_key_done_12;
  wire kg_round_key_done_12$D_IN, kg_round_key_done_12$EN;

  // register kg_round_key_done_13
  reg kg_round_key_done_13;
  wire kg_round_key_done_13$D_IN, kg_round_key_done_13$EN;

  // register kg_round_key_done_14
  reg kg_round_key_done_14;
  wire kg_round_key_done_14$D_IN, kg_round_key_done_14$EN;

  // register kg_round_key_done_2
  reg kg_round_key_done_2;
  wire kg_round_key_done_2$D_IN, kg_round_key_done_2$EN;

  // register kg_round_key_done_3
  reg kg_round_key_done_3;
  wire kg_round_key_done_3$D_IN, kg_round_key_done_3$EN;

  // register kg_round_key_done_4
  reg kg_round_key_done_4;
  wire kg_round_key_done_4$D_IN, kg_round_key_done_4$EN;

  // register kg_round_key_done_5
  reg kg_round_key_done_5;
  wire kg_round_key_done_5$D_IN, kg_round_key_done_5$EN;

  // register kg_round_key_done_6
  reg kg_round_key_done_6;
  wire kg_round_key_done_6$D_IN, kg_round_key_done_6$EN;

  // register kg_round_key_done_7
  reg kg_round_key_done_7;
  wire kg_round_key_done_7$D_IN, kg_round_key_done_7$EN;

  // register kg_round_key_done_8
  reg kg_round_key_done_8;
  wire kg_round_key_done_8$D_IN, kg_round_key_done_8$EN;

  // register kg_round_key_done_9
  reg kg_round_key_done_9;
  wire kg_round_key_done_9$D_IN, kg_round_key_done_9$EN;

  // register kg_round_number
  reg [4 : 0] kg_round_number;
  wire [4 : 0] kg_round_number$D_IN;
  wire kg_round_number$EN;

  // register kg_round_toggle_192
  reg kg_round_toggle_192;
  wire kg_round_toggle_192$D_IN, kg_round_toggle_192$EN;

  // register kg_save_key0_0
  reg [31 : 0] kg_save_key0_0;
  wire [31 : 0] kg_save_key0_0$D_IN;
  wire kg_save_key0_0$EN;

  // register kg_save_key0_1
  reg [31 : 0] kg_save_key0_1;
  wire [31 : 0] kg_save_key0_1$D_IN;
  wire kg_save_key0_1$EN;

  // register kg_save_key0_10
  reg [31 : 0] kg_save_key0_10;
  wire [31 : 0] kg_save_key0_10$D_IN;
  wire kg_save_key0_10$EN;

  // register kg_save_key0_11
  reg [31 : 0] kg_save_key0_11;
  wire [31 : 0] kg_save_key0_11$D_IN;
  wire kg_save_key0_11$EN;

  // register kg_save_key0_12
  reg [31 : 0] kg_save_key0_12;
  wire [31 : 0] kg_save_key0_12$D_IN;
  wire kg_save_key0_12$EN;

  // register kg_save_key0_13
  reg [31 : 0] kg_save_key0_13;
  wire [31 : 0] kg_save_key0_13$D_IN;
  wire kg_save_key0_13$EN;

  // register kg_save_key0_14
  reg [31 : 0] kg_save_key0_14;
  wire [31 : 0] kg_save_key0_14$D_IN;
  wire kg_save_key0_14$EN;

  // register kg_save_key0_2
  reg [31 : 0] kg_save_key0_2;
  wire [31 : 0] kg_save_key0_2$D_IN;
  wire kg_save_key0_2$EN;

  // register kg_save_key0_3
  reg [31 : 0] kg_save_key0_3;
  wire [31 : 0] kg_save_key0_3$D_IN;
  wire kg_save_key0_3$EN;

  // register kg_save_key0_4
  reg [31 : 0] kg_save_key0_4;
  wire [31 : 0] kg_save_key0_4$D_IN;
  wire kg_save_key0_4$EN;

  // register kg_save_key0_5
  reg [31 : 0] kg_save_key0_5;
  wire [31 : 0] kg_save_key0_5$D_IN;
  wire kg_save_key0_5$EN;

  // register kg_save_key0_6
  reg [31 : 0] kg_save_key0_6;
  wire [31 : 0] kg_save_key0_6$D_IN;
  wire kg_save_key0_6$EN;

  // register kg_save_key0_7
  reg [31 : 0] kg_save_key0_7;
  wire [31 : 0] kg_save_key0_7$D_IN;
  wire kg_save_key0_7$EN;

  // register kg_save_key0_8
  reg [31 : 0] kg_save_key0_8;
  wire [31 : 0] kg_save_key0_8$D_IN;
  wire kg_save_key0_8$EN;

  // register kg_save_key0_9
  reg [31 : 0] kg_save_key0_9;
  wire [31 : 0] kg_save_key0_9$D_IN;
  wire kg_save_key0_9$EN;

  // register kg_save_key1_0
  reg [31 : 0] kg_save_key1_0;
  wire [31 : 0] kg_save_key1_0$D_IN;
  wire kg_save_key1_0$EN;

  // register kg_save_key1_1
  reg [31 : 0] kg_save_key1_1;
  wire [31 : 0] kg_save_key1_1$D_IN;
  wire kg_save_key1_1$EN;

  // register kg_save_key1_10
  reg [31 : 0] kg_save_key1_10;
  wire [31 : 0] kg_save_key1_10$D_IN;
  wire kg_save_key1_10$EN;

  // register kg_save_key1_11
  reg [31 : 0] kg_save_key1_11;
  wire [31 : 0] kg_save_key1_11$D_IN;
  wire kg_save_key1_11$EN;

  // register kg_save_key1_12
  reg [31 : 0] kg_save_key1_12;
  wire [31 : 0] kg_save_key1_12$D_IN;
  wire kg_save_key1_12$EN;

  // register kg_save_key1_13
  reg [31 : 0] kg_save_key1_13;
  wire [31 : 0] kg_save_key1_13$D_IN;
  wire kg_save_key1_13$EN;

  // register kg_save_key1_14
  reg [31 : 0] kg_save_key1_14;
  wire [31 : 0] kg_save_key1_14$D_IN;
  wire kg_save_key1_14$EN;

  // register kg_save_key1_2
  reg [31 : 0] kg_save_key1_2;
  wire [31 : 0] kg_save_key1_2$D_IN;
  wire kg_save_key1_2$EN;

  // register kg_save_key1_3
  reg [31 : 0] kg_save_key1_3;
  wire [31 : 0] kg_save_key1_3$D_IN;
  wire kg_save_key1_3$EN;

  // register kg_save_key1_4
  reg [31 : 0] kg_save_key1_4;
  wire [31 : 0] kg_save_key1_4$D_IN;
  wire kg_save_key1_4$EN;

  // register kg_save_key1_5
  reg [31 : 0] kg_save_key1_5;
  wire [31 : 0] kg_save_key1_5$D_IN;
  wire kg_save_key1_5$EN;

  // register kg_save_key1_6
  reg [31 : 0] kg_save_key1_6;
  wire [31 : 0] kg_save_key1_6$D_IN;
  wire kg_save_key1_6$EN;

  // register kg_save_key1_7
  reg [31 : 0] kg_save_key1_7;
  wire [31 : 0] kg_save_key1_7$D_IN;
  wire kg_save_key1_7$EN;

  // register kg_save_key1_8
  reg [31 : 0] kg_save_key1_8;
  wire [31 : 0] kg_save_key1_8$D_IN;
  wire kg_save_key1_8$EN;

  // register kg_save_key1_9
  reg [31 : 0] kg_save_key1_9;
  wire [31 : 0] kg_save_key1_9$D_IN;
  wire kg_save_key1_9$EN;

  // register kg_save_key2_0
  reg [31 : 0] kg_save_key2_0;
  wire [31 : 0] kg_save_key2_0$D_IN;
  wire kg_save_key2_0$EN;

  // register kg_save_key2_1
  reg [31 : 0] kg_save_key2_1;
  wire [31 : 0] kg_save_key2_1$D_IN;
  wire kg_save_key2_1$EN;

  // register kg_save_key2_10
  reg [31 : 0] kg_save_key2_10;
  wire [31 : 0] kg_save_key2_10$D_IN;
  wire kg_save_key2_10$EN;

  // register kg_save_key2_11
  reg [31 : 0] kg_save_key2_11;
  wire [31 : 0] kg_save_key2_11$D_IN;
  wire kg_save_key2_11$EN;

  // register kg_save_key2_12
  reg [31 : 0] kg_save_key2_12;
  wire [31 : 0] kg_save_key2_12$D_IN;
  wire kg_save_key2_12$EN;

  // register kg_save_key2_13
  reg [31 : 0] kg_save_key2_13;
  wire [31 : 0] kg_save_key2_13$D_IN;
  wire kg_save_key2_13$EN;

  // register kg_save_key2_14
  reg [31 : 0] kg_save_key2_14;
  wire [31 : 0] kg_save_key2_14$D_IN;
  wire kg_save_key2_14$EN;

  // register kg_save_key2_2
  reg [31 : 0] kg_save_key2_2;
  wire [31 : 0] kg_save_key2_2$D_IN;
  wire kg_save_key2_2$EN;

  // register kg_save_key2_3
  reg [31 : 0] kg_save_key2_3;
  wire [31 : 0] kg_save_key2_3$D_IN;
  wire kg_save_key2_3$EN;

  // register kg_save_key2_4
  reg [31 : 0] kg_save_key2_4;
  wire [31 : 0] kg_save_key2_4$D_IN;
  wire kg_save_key2_4$EN;

  // register kg_save_key2_5
  reg [31 : 0] kg_save_key2_5;
  wire [31 : 0] kg_save_key2_5$D_IN;
  wire kg_save_key2_5$EN;

  // register kg_save_key2_6
  reg [31 : 0] kg_save_key2_6;
  wire [31 : 0] kg_save_key2_6$D_IN;
  wire kg_save_key2_6$EN;

  // register kg_save_key2_7
  reg [31 : 0] kg_save_key2_7;
  wire [31 : 0] kg_save_key2_7$D_IN;
  wire kg_save_key2_7$EN;

  // register kg_save_key2_8
  reg [31 : 0] kg_save_key2_8;
  wire [31 : 0] kg_save_key2_8$D_IN;
  wire kg_save_key2_8$EN;

  // register kg_save_key2_9
  reg [31 : 0] kg_save_key2_9;
  wire [31 : 0] kg_save_key2_9$D_IN;
  wire kg_save_key2_9$EN;

  // register kg_save_key3_0
  reg [31 : 0] kg_save_key3_0;
  wire [31 : 0] kg_save_key3_0$D_IN;
  wire kg_save_key3_0$EN;

  // register kg_save_key3_1
  reg [31 : 0] kg_save_key3_1;
  wire [31 : 0] kg_save_key3_1$D_IN;
  wire kg_save_key3_1$EN;

  // register kg_save_key3_10
  reg [31 : 0] kg_save_key3_10;
  wire [31 : 0] kg_save_key3_10$D_IN;
  wire kg_save_key3_10$EN;

  // register kg_save_key3_11
  reg [31 : 0] kg_save_key3_11;
  wire [31 : 0] kg_save_key3_11$D_IN;
  wire kg_save_key3_11$EN;

  // register kg_save_key3_12
  reg [31 : 0] kg_save_key3_12;
  wire [31 : 0] kg_save_key3_12$D_IN;
  wire kg_save_key3_12$EN;

  // register kg_save_key3_13
  reg [31 : 0] kg_save_key3_13;
  wire [31 : 0] kg_save_key3_13$D_IN;
  wire kg_save_key3_13$EN;

  // register kg_save_key3_14
  reg [31 : 0] kg_save_key3_14;
  wire [31 : 0] kg_save_key3_14$D_IN;
  wire kg_save_key3_14$EN;

  // register kg_save_key3_2
  reg [31 : 0] kg_save_key3_2;
  wire [31 : 0] kg_save_key3_2$D_IN;
  wire kg_save_key3_2$EN;

  // register kg_save_key3_3
  reg [31 : 0] kg_save_key3_3;
  wire [31 : 0] kg_save_key3_3$D_IN;
  wire kg_save_key3_3$EN;

  // register kg_save_key3_4
  reg [31 : 0] kg_save_key3_4;
  wire [31 : 0] kg_save_key3_4$D_IN;
  wire kg_save_key3_4$EN;

  // register kg_save_key3_5
  reg [31 : 0] kg_save_key3_5;
  wire [31 : 0] kg_save_key3_5$D_IN;
  wire kg_save_key3_5$EN;

  // register kg_save_key3_6
  reg [31 : 0] kg_save_key3_6;
  wire [31 : 0] kg_save_key3_6$D_IN;
  wire kg_save_key3_6$EN;

  // register kg_save_key3_7
  reg [31 : 0] kg_save_key3_7;
  wire [31 : 0] kg_save_key3_7$D_IN;
  wire kg_save_key3_7$EN;

  // register kg_save_key3_8
  reg [31 : 0] kg_save_key3_8;
  wire [31 : 0] kg_save_key3_8$D_IN;
  wire kg_save_key3_8$EN;

  // register kg_save_key3_9
  reg [31 : 0] kg_save_key3_9;
  wire [31 : 0] kg_save_key3_9$D_IN;
  wire kg_save_key3_9$EN;

  // register kg_sbox_out
  reg [7 : 0] kg_sbox_out;
  wire [7 : 0] kg_sbox_out$D_IN;
  wire kg_sbox_out$EN;

  // register maxround
  reg [3 : 0] maxround;
  reg [3 : 0] maxround$D_IN;
  wire maxround$EN;

  // register new_round
  reg new_round;
  wire new_round$D_IN, new_round$EN;

  // register plaintext
  reg [127 : 0] plaintext;
  wire [127 : 0] plaintext$D_IN;
  wire plaintext$EN;

  // register rg_state
  reg [2 : 0] rg_state;
  reg [2 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // ports of submodule kg_rcongen
  wire [7 : 0] kg_rcongen$read;
  wire [3 : 0] kg_rcongen$read_addr;

  // ports of submodule sboxes_0
  reg [7 : 0] sboxes_0$getbyte_byte_in;
  reg sboxes_0$getbyte_decrypt_;
  wire [7 : 0] sboxes_0$getbyte;
  wire sboxes_0$EN_getbyte;

  // ports of submodule sboxes_1
  reg [7 : 0] sboxes_1$getbyte_byte_in;
  reg sboxes_1$getbyte_decrypt_;
  wire [7 : 0] sboxes_1$getbyte;
  wire sboxes_1$EN_getbyte;

  // ports of submodule sboxes_10
  reg [7 : 0] sboxes_10$getbyte_byte_in;
  reg sboxes_10$getbyte_decrypt_;
  wire [7 : 0] sboxes_10$getbyte;
  wire sboxes_10$EN_getbyte;

  // ports of submodule sboxes_11
  reg [7 : 0] sboxes_11$getbyte_byte_in;
  reg sboxes_11$getbyte_decrypt_;
  wire [7 : 0] sboxes_11$getbyte;
  wire sboxes_11$EN_getbyte;

  // ports of submodule sboxes_12
  reg [7 : 0] sboxes_12$getbyte_byte_in;
  reg sboxes_12$getbyte_decrypt_;
  wire [7 : 0] sboxes_12$getbyte;
  wire sboxes_12$EN_getbyte;

  // ports of submodule sboxes_13
  reg [7 : 0] sboxes_13$getbyte_byte_in;
  reg sboxes_13$getbyte_decrypt_;
  wire [7 : 0] sboxes_13$getbyte;
  wire sboxes_13$EN_getbyte;

  // ports of submodule sboxes_14
  reg [7 : 0] sboxes_14$getbyte_byte_in;
  reg sboxes_14$getbyte_decrypt_;
  wire [7 : 0] sboxes_14$getbyte;
  wire sboxes_14$EN_getbyte;

  // ports of submodule sboxes_15
  reg [7 : 0] sboxes_15$getbyte_byte_in;
  reg sboxes_15$getbyte_decrypt_;
  wire [7 : 0] sboxes_15$getbyte;
  wire sboxes_15$EN_getbyte;

  // ports of submodule sboxes_2
  reg [7 : 0] sboxes_2$getbyte_byte_in;
  reg sboxes_2$getbyte_decrypt_;
  wire [7 : 0] sboxes_2$getbyte;
  wire sboxes_2$EN_getbyte;

  // ports of submodule sboxes_3
  reg [7 : 0] sboxes_3$getbyte_byte_in;
  reg sboxes_3$getbyte_decrypt_;
  wire [7 : 0] sboxes_3$getbyte;
  wire sboxes_3$EN_getbyte;

  // ports of submodule sboxes_4
  reg [7 : 0] sboxes_4$getbyte_byte_in;
  reg sboxes_4$getbyte_decrypt_;
  wire [7 : 0] sboxes_4$getbyte;
  wire sboxes_4$EN_getbyte;

  // ports of submodule sboxes_5
  reg [7 : 0] sboxes_5$getbyte_byte_in;
  reg sboxes_5$getbyte_decrypt_;
  wire [7 : 0] sboxes_5$getbyte;
  wire sboxes_5$EN_getbyte;

  // ports of submodule sboxes_6
  reg [7 : 0] sboxes_6$getbyte_byte_in;
  reg sboxes_6$getbyte_decrypt_;
  wire [7 : 0] sboxes_6$getbyte;
  wire sboxes_6$EN_getbyte;

  // ports of submodule sboxes_7
  reg [7 : 0] sboxes_7$getbyte_byte_in;
  reg sboxes_7$getbyte_decrypt_;
  wire [7 : 0] sboxes_7$getbyte;
  wire sboxes_7$EN_getbyte;

  // ports of submodule sboxes_8
  reg [7 : 0] sboxes_8$getbyte_byte_in;
  reg sboxes_8$getbyte_decrypt_;
  wire [7 : 0] sboxes_8$getbyte;
  wire sboxes_8$EN_getbyte;

  // ports of submodule sboxes_9
  reg [7 : 0] sboxes_9$getbyte_byte_in;
  reg sboxes_9$getbyte_decrypt_;
  wire [7 : 0] sboxes_9$getbyte;
  wire sboxes_9$EN_getbyte;

  // rule scheduling signals
  wire WILL_FIRE_RL_decrypt_key,
       WILL_FIRE_RL_done_encoding,
       WILL_FIRE_RL_done_encoding_decrypt,
       WILL_FIRE_RL_dr_addKeyDecrypt,
       WILL_FIRE_RL_dr_mixColsDecrypt,
       WILL_FIRE_RL_dr_rowColShift,
       WILL_FIRE_RL_dr_sub,
       WILL_FIRE_RL_encode,
       WILL_FIRE_RL_initial_xor;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_kg_aes256_subcol4$write_1__VAL_2,
	       MUX_kg_prev_key0$write_1__VAL_2,
	       MUX_kg_prev_key1$write_1__VAL_2,
	       MUX_kg_prev_key2$write_1__VAL_2,
	       MUX_kg_prev_key3$write_1__VAL_2,
	       MUX_kg_rot_prev_key$write_1__VAL_1,
	       MUX_kg_rot_prev_key$write_1__VAL_2;
  reg [7 : 0] MUX_kg_sbox_out$write_1__VAL_3,
	      MUX_sboxes_0$getbyte_1__VAL_1,
	      MUX_sboxes_0$getbyte_1__VAL_3,
	      MUX_sboxes_0$getbyte_1__VAL_6,
	      MUX_sboxes_0$getbyte_1__VAL_7;
  reg [4 : 0] MUX_kg_round_number$write_1__VAL_1,
	      MUX_kg_round_number$write_1__VAL_2;
  reg MUX_sboxes_0$getbyte_2__VAL_6;
  wire [127 : 0] MUX_key$write_1__VAL_2, MUX_key$write_1__VAL_3;
  wire [31 : 0] MUX_col0$write_1__VAL_2,
		MUX_col1$write_1__VAL_2,
		MUX_col2$write_1__VAL_2,
		MUX_col3$write_1__VAL_2,
		MUX_dr_colout0$write_1__VAL_1,
		MUX_dr_colout0$write_1__VAL_2,
		MUX_dr_colout1$write_1__VAL_1,
		MUX_dr_colout1$write_1__VAL_2,
		MUX_dr_colout2$write_1__VAL_1,
		MUX_dr_colout2$write_1__VAL_2,
		MUX_dr_colout3$write_1__VAL_1,
		MUX_dr_colout3$write_1__VAL_2,
		MUX_kg_prev_key4$write_1__VAL_2,
		MUX_kg_prev_key5$write_1__VAL_2,
		MUX_kg_save_key0_0$write_1__VAL_1,
		MUX_kg_save_key0_1$write_1__VAL_2,
		MUX_kg_save_key1_0$write_1__VAL_1,
		MUX_kg_save_key1_1$write_1__VAL_2,
		MUX_kg_save_key2_0$write_1__VAL_1,
		MUX_kg_save_key2_1$write_1__VAL_2,
		MUX_kg_save_key3_0$write_1__VAL_1,
		MUX_kg_save_key3_1$write_1__VAL_2;
  wire [7 : 0] MUX_dr_col__0$write_1__VAL_3,
	       MUX_dr_col__0$write_1__VAL_4,
	       MUX_dr_col__1$write_1__VAL_3,
	       MUX_dr_col__1$write_1__VAL_4,
	       MUX_dr_col__10$write_1__VAL_3,
	       MUX_dr_col__10$write_1__VAL_4,
	       MUX_dr_col__11$write_1__VAL_3,
	       MUX_dr_col__11$write_1__VAL_4,
	       MUX_dr_col__12$write_1__VAL_3,
	       MUX_dr_col__12$write_1__VAL_4,
	       MUX_dr_col__13$write_1__VAL_3,
	       MUX_dr_col__13$write_1__VAL_4,
	       MUX_dr_col__14$write_1__VAL_3,
	       MUX_dr_col__14$write_1__VAL_4,
	       MUX_dr_col__15$write_1__VAL_3,
	       MUX_dr_col__15$write_1__VAL_4,
	       MUX_dr_col__2$write_1__VAL_3,
	       MUX_dr_col__2$write_1__VAL_4,
	       MUX_dr_col__3$write_1__VAL_3,
	       MUX_dr_col__3$write_1__VAL_4,
	       MUX_dr_col__4$write_1__VAL_3,
	       MUX_dr_col__4$write_1__VAL_4,
	       MUX_dr_col__5$write_1__VAL_3,
	       MUX_dr_col__5$write_1__VAL_4,
	       MUX_dr_col__6$write_1__VAL_3,
	       MUX_dr_col__6$write_1__VAL_4,
	       MUX_dr_col__7$write_1__VAL_3,
	       MUX_dr_col__7$write_1__VAL_4,
	       MUX_dr_col__8$write_1__VAL_3,
	       MUX_dr_col__8$write_1__VAL_4,
	       MUX_dr_col__9$write_1__VAL_3,
	       MUX_dr_col__9$write_1__VAL_4,
	       MUX_dr_counter$write_1__VAL_3;
  wire [3 : 0] MUX_counter$write_1__VAL_1,
	       MUX_dr_rg_state$write_1__VAL_6,
	       MUX_kg_counter$write_1__VAL_1,
	       MUX_kg_rci$write_1__VAL_1;
  wire [2 : 0] MUX_kg_rg_state$write_1__VAL_1,
	       MUX_kg_rg_state$write_1__VAL_3,
	       MUX_kg_rg_state$write_1__VAL_4,
	       MUX_rg_state$write_1__VAL_2;
  wire MUX__unnamed_$write_1__PSEL_1,
       MUX__unnamed_$write_1__SEL_1,
       MUX_counter$write_1__SEL_1,
       MUX_dr_col__0$write_1__SEL_1,
       MUX_dr_col__0$write_1__SEL_2,
       MUX_dr_col__1$write_1__SEL_1,
       MUX_dr_col__10$write_1__SEL_1,
       MUX_dr_col__11$write_1__SEL_1,
       MUX_dr_col__12$write_1__SEL_1,
       MUX_dr_col__13$write_1__SEL_1,
       MUX_dr_col__14$write_1__SEL_1,
       MUX_dr_col__15$write_1__SEL_1,
       MUX_dr_col__2$write_1__SEL_1,
       MUX_dr_col__3$write_1__SEL_1,
       MUX_dr_col__4$write_1__SEL_1,
       MUX_dr_col__5$write_1__SEL_1,
       MUX_dr_col__6$write_1__SEL_1,
       MUX_dr_col__7$write_1__SEL_1,
       MUX_dr_col__8$write_1__SEL_1,
       MUX_dr_col__9$write_1__SEL_1,
       MUX_dr_counter$write_1__SEL_3,
       MUX_dr_decrypt$write_1__SEL_1,
       MUX_dr_last_round$write_1__SEL_1,
       MUX_dr_last_round$write_1__SEL_2,
       MUX_dr_last_round$write_1__VAL_1,
       MUX_dr_rg_state$write_1__SEL_1,
       MUX_dr_rg_state$write_1__SEL_2,
       MUX_dr_rg_state$write_1__SEL_7,
       MUX_dr_round_done$write_1__SEL_1,
       MUX_dr_sboxes_out_0$write_1__SEL_1,
       MUX_kg_aes256_subcol4$write_1__SEL_1,
       MUX_kg_counter$write_1__SEL_1,
       MUX_kg_counter$write_1__SEL_2,
       MUX_kg_key_saved$write_1__SEL_1,
       MUX_kg_prev_key0$write_1__SEL_1,
       MUX_kg_prev_key0$write_1__SEL_2,
       MUX_kg_rci$write_1__SEL_1,
       MUX_kg_rg_state$write_1__SEL_2,
       MUX_kg_rg_state$write_1__SEL_3,
       MUX_kg_rot_prev_key$write_1__SEL_1,
       MUX_kg_rot_prev_key$write_1__SEL_2,
       MUX_kg_round_key_done_0$write_1__SEL_1,
       MUX_kg_round_key_done_1$write_1__SEL_1,
       MUX_kg_round_toggle_192$write_1__SEL_1,
       MUX_kg_save_key0_0$write_1__SEL_1,
       MUX_kg_save_key0_1$write_1__SEL_1,
       MUX_kg_save_key1_0$write_1__SEL_1,
       MUX_kg_save_key2_0$write_1__SEL_1,
       MUX_kg_save_key3_0$write_1__SEL_1,
       MUX_kg_sbox_out$write_1__SEL_4,
       MUX_rg_state$write_1__SEL_1,
       MUX_sboxes_0$getbyte_1__SEL_6,
       MUX_sboxes_0$getbyte_1__SEL_7;

  // remaining internal signals
  reg [127 : 0] v__h84222;
  reg [31 : 0] SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988,
	       SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113,
	       SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005,
	       SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114,
	       SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022,
	       SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115,
	       SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039,
	       SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116;
  reg [2 : 0] CASE_kg_key_length_0_2_1_2_IF_kg_round_number__ETC__q1;
  reg SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970,
      SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109;
  wire [31 : 0] _dfoo101,
		_dfoo103,
		_dfoo105,
		_dfoo107,
		_dfoo109,
		_dfoo111,
		_dfoo113,
		_dfoo115,
		_dfoo117,
		_dfoo119,
		_dfoo121,
		_dfoo123,
		_dfoo125,
		_dfoo127,
		_dfoo129,
		_dfoo131,
		_dfoo133,
		_dfoo135,
		_dfoo137,
		_dfoo139,
		_dfoo141,
		_dfoo143,
		_dfoo145,
		_dfoo147,
		_dfoo149,
		_dfoo151,
		_dfoo153,
		_dfoo155,
		_dfoo157,
		_dfoo159,
		_dfoo161,
		_dfoo163,
		_dfoo165,
		_dfoo167,
		_dfoo169,
		_dfoo171,
		_dfoo173,
		_dfoo175,
		_dfoo177,
		_dfoo179,
		_dfoo181,
		_dfoo183,
		_dfoo185,
		_dfoo187,
		_dfoo369,
		_dfoo371,
		_dfoo373,
		_dfoo375,
		_dfoo377,
		_dfoo379,
		_dfoo381,
		_dfoo383,
		_dfoo385,
		_dfoo387,
		_dfoo389,
		_dfoo391,
		_dfoo393,
		_dfoo395,
		_dfoo397,
		_dfoo399,
		_dfoo401,
		_dfoo403,
		_dfoo405,
		_dfoo407,
		_dfoo409,
		_dfoo411,
		_dfoo413,
		_dfoo415,
		_dfoo417,
		_dfoo419,
		_dfoo421,
		_dfoo423,
		_dfoo425,
		_dfoo427,
		_dfoo459,
		_dfoo461,
		_dfoo463,
		_dfoo465,
		_dfoo467,
		_dfoo469,
		_dfoo471,
		_dfoo473,
		_dfoo475,
		_dfoo477,
		_dfoo479,
		_dfoo481,
		_dfoo483,
		_dfoo485,
		_dfoo487,
		_dfoo489,
		_dfoo491,
		_dfoo493,
		_dfoo495,
		_dfoo497,
		_dfoo499,
		_dfoo501,
		_dfoo503,
		_dfoo505,
		_dfoo507,
		_dfoo509,
		_dfoo511,
		_dfoo513,
		_dfoo515,
		_dfoo517,
		_dfoo69,
		_dfoo71,
		_dfoo73,
		_dfoo75,
		_dfoo77,
		_dfoo79,
		_dfoo81,
		_dfoo83,
		_dfoo85,
		_dfoo87,
		_dfoo89,
		_dfoo91,
		_dfoo93,
		_dfoo95,
		_dfoo97,
		_dfoo99,
		_theResult____h12552,
		col_in0__h67039,
		col_in1__h67040,
		col_in2__h67041,
		col_in3__h67042,
		key0__h12547,
		key1__h12548,
		key2__h12549,
		key3__h12550,
		key4___1__h16066,
		key4__h12551,
		key5__h12553,
		key6__h12554,
		key7__h12555,
		temp_col__h11429,
		x__h10104,
		x__h10514,
		x__h10660,
		x__h10875,
		x__h11090,
		x__h11305,
		x__h11473,
		x__h11474,
		x__h11476,
		x__h11775,
		x__h11965,
		x__h12159,
		x__h12353,
		x__h14000,
		x__h19400,
		x__h22385,
		x__h29135,
		x__h34440,
		x__h39743,
		x__h45046,
		x__h50356,
		x__h50385,
		x__h50433,
		x__h50452,
		x__h50500,
		x__h50519,
		x__h50567,
		x__h50586,
		x__h51910,
		x__h51975,
		x__h52042,
		x__h52109,
		x__h87451,
		x__h87534,
		x__h87607,
		x__h87680,
		x__h9845;
  wire [7 : 0] eight__h54389,
	       eight__h54510,
	       eight__h54630,
	       eight__h55811,
	       eight__h56836,
	       eight__h56957,
	       eight__h57077,
	       eight__h58258,
	       eight__h59283,
	       eight__h59404,
	       eight__h59524,
	       eight__h60705,
	       eight__h61729,
	       eight__h61850,
	       eight__h61970,
	       eight__h63151,
	       four__h54509,
	       four__h54889,
	       four__h55131,
	       four__h55295,
	       four__h56956,
	       four__h57336,
	       four__h57578,
	       four__h57742,
	       four__h59403,
	       four__h59783,
	       four__h60025,
	       four__h60189,
	       four__h61849,
	       four__h62229,
	       four__h62471,
	       four__h62635,
	       spliced_bits__h10680,
	       spliced_bits__h10895,
	       spliced_bits__h11110,
	       spliced_bits__h11325,
	       spliced_bits__h29158,
	       spliced_bits__h29186,
	       spliced_bits__h29214,
	       spliced_bits__h29242,
	       spliced_bits__h34463,
	       spliced_bits__h34491,
	       spliced_bits__h34519,
	       spliced_bits__h34547,
	       spliced_bits__h39766,
	       spliced_bits__h39794,
	       spliced_bits__h39822,
	       spliced_bits__h39850,
	       spliced_bits__h45069,
	       spliced_bits__h45097,
	       spliced_bits__h45125,
	       spliced_bits__h45153,
	       spliced_bits__h53819,
	       spliced_bits__h53847,
	       spliced_bits__h53875,
	       spliced_bits__h53903,
	       spliced_bits__h56281,
	       spliced_bits__h56309,
	       spliced_bits__h56337,
	       spliced_bits__h56365,
	       spliced_bits__h58728,
	       spliced_bits__h58756,
	       spliced_bits__h58784,
	       spliced_bits__h58812,
	       spliced_bits__h61175,
	       spliced_bits__h61203,
	       spliced_bits__h61231,
	       spliced_bits__h61259,
	       two__h54387,
	       two__h55009,
	       two__h55645,
	       two__h55809,
	       two__h56834,
	       two__h57456,
	       two__h58092,
	       two__h58256,
	       two__h59281,
	       two__h59903,
	       two__h60539,
	       two__h60703,
	       two__h61727,
	       two__h62349,
	       two__h62985,
	       two__h63149,
	       x__h53964,
	       x__h53966,
	       x__h53968,
	       x__h54400,
	       x__h54521,
	       x__h54762,
	       x__h54764,
	       x__h54766,
	       x__h54901,
	       x__h55022,
	       x__h55143,
	       x__h55277,
	       x__h55279,
	       x__h55281,
	       x__h55307,
	       x__h55658,
	       x__h55792,
	       x__h55794,
	       x__h55796,
	       x__h55822,
	       x__h56426,
	       x__h56428,
	       x__h56430,
	       x__h56847,
	       x__h56968,
	       x__h57209,
	       x__h57211,
	       x__h57213,
	       x__h57348,
	       x__h57469,
	       x__h57590,
	       x__h57724,
	       x__h57726,
	       x__h57728,
	       x__h57754,
	       x__h58105,
	       x__h58239,
	       x__h58241,
	       x__h58243,
	       x__h58269,
	       x__h58873,
	       x__h58875,
	       x__h58877,
	       x__h59294,
	       x__h59415,
	       x__h59656,
	       x__h59658,
	       x__h59660,
	       x__h59795,
	       x__h59916,
	       x__h60037,
	       x__h60171,
	       x__h60173,
	       x__h60175,
	       x__h60201,
	       x__h60552,
	       x__h60686,
	       x__h60688,
	       x__h60690,
	       x__h60716,
	       x__h61320,
	       x__h61322,
	       x__h61324,
	       x__h61740,
	       x__h61861,
	       x__h62102,
	       x__h62104,
	       x__h62106,
	       x__h62241,
	       x__h62362,
	       x__h62483,
	       x__h62617,
	       x__h62619,
	       x__h62621,
	       x__h62647,
	       x__h62998,
	       x__h63132,
	       x__h63134,
	       x__h63136,
	       x__h63162,
	       y__h53965,
	       y__h53967,
	       y__h53969,
	       y__h54763,
	       y__h54765,
	       y__h54767,
	       y__h55278,
	       y__h55280,
	       y__h55282,
	       y__h55793,
	       y__h55795,
	       y__h55797,
	       y__h56427,
	       y__h56429,
	       y__h56431,
	       y__h57210,
	       y__h57212,
	       y__h57214,
	       y__h57725,
	       y__h57727,
	       y__h57729,
	       y__h58240,
	       y__h58242,
	       y__h58244,
	       y__h58874,
	       y__h58876,
	       y__h58878,
	       y__h59657,
	       y__h59659,
	       y__h59661,
	       y__h60172,
	       y__h60174,
	       y__h60176,
	       y__h60687,
	       y__h60689,
	       y__h60691,
	       y__h61321,
	       y__h61323,
	       y__h61325,
	       y__h62103,
	       y__h62105,
	       y__h62107,
	       y__h62618,
	       y__h62620,
	       y__h62622,
	       y__h63133,
	       y__h63135,
	       y__h63137;
  wire [4 : 0] x__h22457, x__h22778;
  wire [3 : 0] dr_sub_col_0_21_BIT_2_79_XOR_dr_sub_col_0_21_B_ETC___d525,
	       dr_sub_col_10_19_BIT_2_65_XOR_dr_sub_col_10_19_ETC___d440,
	       dr_sub_col_11_31_BIT_2_75_XOR_dr_sub_col_11_31_ETC___d610,
	       dr_sub_col_12_34_BIT_2_91_XOR_dr_sub_col_12_34_ETC___d737,
	       dr_sub_col_13_45_BIT_2_01_XOR_dr_sub_col_13_45_ETC___d907,
	       dr_sub_col_14_56_BIT_2_001_XOR_dr_sub_col_14_5_ETC___d1076,
	       dr_sub_col_15_18_BIT_2_63_XOR_dr_sub_col_15_18_ETC___d398,
	       dr_sub_col_1_33_BIT_2_89_XOR_dr_sub_col_1_33_B_ETC___d695,
	       dr_sub_col_2_44_BIT_2_89_XOR_dr_sub_col_2_44_B_ETC___d864,
	       dr_sub_col_3_55_BIT_2_99_XOR_dr_sub_col_3_55_B_ETC___d1034,
	       dr_sub_col_4_58_BIT_2_015_XOR_dr_sub_col_4_58__ETC___d1161,
	       dr_sub_col_5_20_BIT_2_77_XOR_dr_sub_col_5_20_B_ETC___d483,
	       dr_sub_col_6_32_BIT_2_77_XOR_dr_sub_col_6_32_B_ETC___d652,
	       dr_sub_col_7_43_BIT_2_87_XOR_dr_sub_col_7_43_B_ETC___d822,
	       dr_sub_col_8_46_BIT_2_03_XOR_dr_sub_col_8_46_B_ETC___d949,
	       dr_sub_col_9_57_BIT_2_013_XOR_dr_sub_col_9_57__ETC___d1119,
	       getKeynum___1__h73730,
	       roundnumber__h73726,
	       y__h73875;
  wire [2 : 0] IF_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_save_ETC___d2211;
  wire NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2219,
       NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255,
       NOT_encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_sa_ETC___d2234,
       NOT_encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_sa_ETC___d2252,
       NOT_encrypt_keyyy_BITS_255_TO_224_191_EQ_kg_sa_ETC___d2247,
       _dfoo15,
       _dfoo188,
       _dfoo190,
       _dfoo192,
       _dfoo194,
       _dfoo196,
       _dfoo198,
       _dfoo200,
       _dfoo202,
       _dfoo204,
       _dfoo206,
       _dfoo208,
       _dfoo210,
       _dfoo212,
       _dfoo214,
       _dfoo216,
       _dfoo31,
       _dfoo36,
       _dfoo638,
       _dfoo640,
       _dfoo642,
       _dfoo644,
       _dfoo646,
       _dfoo648,
       _dfoo650,
       _dfoo652,
       _dfoo654,
       _dfoo656,
       _dfoo658,
       _dfoo660,
       _dfoo662,
       _dfoo664,
       _dfoo666,
       _dfoo668,
       _dfoo670,
       _dfoo672,
       _dfoo674,
       _dfoo676,
       _dfoo678,
       _dfoo680,
       _dfoo682,
       _dfoo684,
       _dfoo686,
       _dfoo688,
       _dfoo690,
       _dfoo692,
       _dfoo694,
       _dfoo696,
       _dfoo698,
       _dfoo700,
       _dfoo702,
       _dfoo704,
       _dfoo706,
       _dfoo708,
       _dfoo710,
       _dfoo712,
       _dfoo714,
       _dfoo716,
       _dfoo718,
       _dfoo720,
       _dfoo722,
       _dfoo724,
       _dfoo726,
       _dfoo728,
       _dfoo730,
       _dfoo732,
       _dfoo734,
       _dfoo736,
       _dfoo738,
       _dfoo740,
       _dfoo742,
       _dfoo744,
       _dfoo746,
       _dfoo748,
       _dfoo750,
       _dfoo752,
       _dfoo754,
       _dfoo756,
       _dfoo758,
       _dfoo760,
       _dfoo762,
       _dfoo764,
       _dfoo766,
       _dfoo768,
       _dfoo770,
       _dfoo772,
       _dfoo774,
       _dfoo776,
       _dfoo778,
       _dfoo780,
       _dfoo782,
       _dfoo784,
       _dfoo786,
       counter_108_EQ_maxround_969___d2122,
       encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_save_ke_ETC___d2166,
       encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_save_ke_ETC___d2182,
       encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_save_ke_ETC___d2200,
       encrypt_keyyy_BITS_159_TO_128_179_EQ_kg_save_k_ETC___d2180,
       encrypt_keyyy_BITS_159_TO_128_179_EQ_kg_save_k_ETC___d2198,
       encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_save_k_ETC___d2178,
       encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_save_k_ETC___d2190,
       encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_save_k_ETC___d2196,
       encrypt_keyyy_BITS_223_TO_192_193_EQ_kg_save_k_ETC___d2194,
       encrypt_keyyy_BITS_255_TO_224_191_EQ_kg_save_k_ETC___d2192,
       encrypt_keyyy_BITS_255_TO_224_191_EQ_kg_save_k_ETC___d2205,
       encrypt_keyyy_BITS_31_TO_0_173_EQ_kg_save_key1_ETC___d2188,
       encrypt_keyyy_BITS_31_TO_0_173_EQ_kg_save_key3_ETC___d2174,
       encrypt_keyyy_BITS_31_TO_0_173_EQ_kg_save_key3_ETC___d2206,
       encrypt_keyyy_BITS_63_TO_32_170_EQ_kg_save_key_ETC___d2171,
       encrypt_keyyy_BITS_63_TO_32_170_EQ_kg_save_key_ETC___d2186,
       encrypt_keyyy_BITS_63_TO_32_170_EQ_kg_save_key_ETC___d2204,
       encrypt_keyyy_BITS_95_TO_64_167_EQ_kg_save_key_ETC___d2168,
       encrypt_keyyy_BITS_95_TO_64_167_EQ_kg_save_key_ETC___d2184,
       encrypt_keyyy_BITS_95_TO_64_167_EQ_kg_save_key_ETC___d2202,
       kg_key_saved_164_AND_NOT_encrypt_keyyy_BITS_12_ETC___d2256,
       kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d182,
       kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d229,
       kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d192,
       kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d239,
       kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d193,
       kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d240,
       kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d194,
       kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d241,
       kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d195,
       kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d242,
       kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d196,
       kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d243,
       kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d183,
       kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d230,
       kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d184,
       kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d231,
       kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d185,
       kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d232,
       kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d186,
       kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d233,
       kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d187,
       kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d234,
       kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d188,
       kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d235,
       kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d189,
       kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d236,
       kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d190,
       kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d237,
       kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d191,
       kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d238,
       kg_round_number_8_EQ_kg_maxrounds_9___d104,
       kg_round_number_8_PLUS_1_41_EQ_0_97_AND_kg_rou_ETC___d198,
       kg_round_number_8_PLUS_1_41_EQ_0_97_AND_kg_rou_ETC___d244,
       kg_round_number_8_PLUS_1_41_EQ_10_17_AND_kg_ro_ETC___d218,
       kg_round_number_8_PLUS_1_41_EQ_10_17_AND_kg_ro_ETC___d254,
       kg_round_number_8_PLUS_1_41_EQ_11_19_AND_kg_ro_ETC___d220,
       kg_round_number_8_PLUS_1_41_EQ_11_19_AND_kg_ro_ETC___d255,
       kg_round_number_8_PLUS_1_41_EQ_12_21_AND_kg_ro_ETC___d222,
       kg_round_number_8_PLUS_1_41_EQ_12_21_AND_kg_ro_ETC___d256,
       kg_round_number_8_PLUS_1_41_EQ_13_23_AND_kg_ro_ETC___d224,
       kg_round_number_8_PLUS_1_41_EQ_13_23_AND_kg_ro_ETC___d257,
       kg_round_number_8_PLUS_1_41_EQ_14_25_AND_kg_ro_ETC___d226,
       kg_round_number_8_PLUS_1_41_EQ_14_25_AND_kg_ro_ETC___d258,
       kg_round_number_8_PLUS_1_41_EQ_1_99_AND_kg_rou_ETC___d200,
       kg_round_number_8_PLUS_1_41_EQ_1_99_AND_kg_rou_ETC___d245,
       kg_round_number_8_PLUS_1_41_EQ_2_01_AND_kg_rou_ETC___d202,
       kg_round_number_8_PLUS_1_41_EQ_2_01_AND_kg_rou_ETC___d246,
       kg_round_number_8_PLUS_1_41_EQ_3_03_AND_kg_rou_ETC___d204,
       kg_round_number_8_PLUS_1_41_EQ_3_03_AND_kg_rou_ETC___d247,
       kg_round_number_8_PLUS_1_41_EQ_4_05_AND_kg_rou_ETC___d206,
       kg_round_number_8_PLUS_1_41_EQ_4_05_AND_kg_rou_ETC___d248,
       kg_round_number_8_PLUS_1_41_EQ_5_07_AND_kg_rou_ETC___d208,
       kg_round_number_8_PLUS_1_41_EQ_5_07_AND_kg_rou_ETC___d249,
       kg_round_number_8_PLUS_1_41_EQ_6_09_AND_kg_rou_ETC___d210,
       kg_round_number_8_PLUS_1_41_EQ_6_09_AND_kg_rou_ETC___d250,
       kg_round_number_8_PLUS_1_41_EQ_7_11_AND_kg_rou_ETC___d212,
       kg_round_number_8_PLUS_1_41_EQ_7_11_AND_kg_rou_ETC___d251,
       kg_round_number_8_PLUS_1_41_EQ_8_13_AND_kg_rou_ETC___d214,
       kg_round_number_8_PLUS_1_41_EQ_8_13_AND_kg_rou_ETC___d252,
       kg_round_number_8_PLUS_1_41_EQ_9_15_AND_kg_rou_ETC___d216,
       kg_round_number_8_PLUS_1_41_EQ_9_15_AND_kg_rou_ETC___d253,
       kg_round_number_8_ULE_kg_maxrounds_9_00_AND_kg_ETC___d114,
       kg_round_number_8_ULE_kg_maxrounds_9___d100,
       x__h29420,
       x__h29422,
       x__h29424,
       x__h29650,
       x__h29652,
       x__h29654,
       x__h29765,
       x__h29767,
       x__h29769,
       x__h29880,
       x__h29882,
       x__h29884,
       x__h29886,
       x__h29888,
       x__h30038,
       x__h30040,
       x__h30042,
       x__h30044,
       x__h30046,
       x__h30196,
       x__h30198,
       x__h30200,
       x__h30311,
       x__h30313,
       x__h30315,
       x__h30317,
       x__h30319,
       x__h30469,
       x__h30471,
       x__h30473,
       x__h30731,
       x__h30733,
       x__h30735,
       x__h30922,
       x__h30924,
       x__h30926,
       x__h31037,
       x__h31039,
       x__h31041,
       x__h31152,
       x__h31154,
       x__h31156,
       x__h31158,
       x__h31160,
       x__h31309,
       x__h31311,
       x__h31313,
       x__h31315,
       x__h31317,
       x__h31466,
       x__h31468,
       x__h31470,
       x__h31581,
       x__h31583,
       x__h31585,
       x__h31587,
       x__h31589,
       x__h31738,
       x__h31740,
       x__h31742,
       x__h32002,
       x__h32004,
       x__h32006,
       x__h32193,
       x__h32195,
       x__h32197,
       x__h32308,
       x__h32310,
       x__h32312,
       x__h32423,
       x__h32425,
       x__h32427,
       x__h32429,
       x__h32431,
       x__h32580,
       x__h32582,
       x__h32584,
       x__h32586,
       x__h32588,
       x__h32737,
       x__h32739,
       x__h32741,
       x__h32852,
       x__h32854,
       x__h32856,
       x__h32858,
       x__h32860,
       x__h33009,
       x__h33011,
       x__h33013,
       x__h33273,
       x__h33275,
       x__h33277,
       x__h33465,
       x__h33467,
       x__h33469,
       x__h33581,
       x__h33583,
       x__h33585,
       x__h33697,
       x__h33699,
       x__h33701,
       x__h33703,
       x__h33705,
       x__h33856,
       x__h33858,
       x__h33860,
       x__h33862,
       x__h33864,
       x__h34015,
       x__h34017,
       x__h34019,
       x__h34131,
       x__h34133,
       x__h34135,
       x__h34137,
       x__h34139,
       x__h34290,
       x__h34292,
       x__h34294,
       x__h34725,
       x__h34727,
       x__h34729,
       x__h34954,
       x__h34956,
       x__h34958,
       x__h35069,
       x__h35071,
       x__h35073,
       x__h35184,
       x__h35186,
       x__h35188,
       x__h35190,
       x__h35192,
       x__h35342,
       x__h35344,
       x__h35346,
       x__h35348,
       x__h35350,
       x__h35500,
       x__h35502,
       x__h35504,
       x__h35615,
       x__h35617,
       x__h35619,
       x__h35621,
       x__h35623,
       x__h35773,
       x__h35775,
       x__h35777,
       x__h36035,
       x__h36037,
       x__h36039,
       x__h36226,
       x__h36228,
       x__h36230,
       x__h36341,
       x__h36343,
       x__h36345,
       x__h36456,
       x__h36458,
       x__h36460,
       x__h36462,
       x__h36464,
       x__h36613,
       x__h36615,
       x__h36617,
       x__h36619,
       x__h36621,
       x__h36770,
       x__h36772,
       x__h36774,
       x__h36885,
       x__h36887,
       x__h36889,
       x__h36891,
       x__h36893,
       x__h37042,
       x__h37044,
       x__h37046,
       x__h37306,
       x__h37308,
       x__h37310,
       x__h37497,
       x__h37499,
       x__h37501,
       x__h37612,
       x__h37614,
       x__h37616,
       x__h37727,
       x__h37729,
       x__h37731,
       x__h37733,
       x__h37735,
       x__h37884,
       x__h37886,
       x__h37888,
       x__h37890,
       x__h37892,
       x__h38041,
       x__h38043,
       x__h38045,
       x__h38156,
       x__h38158,
       x__h38160,
       x__h38162,
       x__h38164,
       x__h38313,
       x__h38315,
       x__h38317,
       x__h38577,
       x__h38579,
       x__h38581,
       x__h38769,
       x__h38771,
       x__h38773,
       x__h38885,
       x__h38887,
       x__h38889,
       x__h39001,
       x__h39003,
       x__h39005,
       x__h39007,
       x__h39009,
       x__h39160,
       x__h39162,
       x__h39164,
       x__h39166,
       x__h39168,
       x__h39319,
       x__h39321,
       x__h39323,
       x__h39435,
       x__h39437,
       x__h39439,
       x__h39441,
       x__h39443,
       x__h39594,
       x__h39596,
       x__h39598,
       x__h40028,
       x__h40030,
       x__h40032,
       x__h40257,
       x__h40259,
       x__h40261,
       x__h40372,
       x__h40374,
       x__h40376,
       x__h40487,
       x__h40489,
       x__h40491,
       x__h40493,
       x__h40495,
       x__h40645,
       x__h40647,
       x__h40649,
       x__h40651,
       x__h40653,
       x__h40803,
       x__h40805,
       x__h40807,
       x__h40918,
       x__h40920,
       x__h40922,
       x__h40924,
       x__h40926,
       x__h41076,
       x__h41078,
       x__h41080,
       x__h41338,
       x__h41340,
       x__h41342,
       x__h41529,
       x__h41531,
       x__h41533,
       x__h41644,
       x__h41646,
       x__h41648,
       x__h41759,
       x__h41761,
       x__h41763,
       x__h41765,
       x__h41767,
       x__h41916,
       x__h41918,
       x__h41920,
       x__h41922,
       x__h41924,
       x__h42073,
       x__h42075,
       x__h42077,
       x__h42188,
       x__h42190,
       x__h42192,
       x__h42194,
       x__h42196,
       x__h42345,
       x__h42347,
       x__h42349,
       x__h42609,
       x__h42611,
       x__h42613,
       x__h42800,
       x__h42802,
       x__h42804,
       x__h42915,
       x__h42917,
       x__h42919,
       x__h43030,
       x__h43032,
       x__h43034,
       x__h43036,
       x__h43038,
       x__h43187,
       x__h43189,
       x__h43191,
       x__h43193,
       x__h43195,
       x__h43344,
       x__h43346,
       x__h43348,
       x__h43459,
       x__h43461,
       x__h43463,
       x__h43465,
       x__h43467,
       x__h43616,
       x__h43618,
       x__h43620,
       x__h43880,
       x__h43882,
       x__h43884,
       x__h44072,
       x__h44074,
       x__h44076,
       x__h44188,
       x__h44190,
       x__h44192,
       x__h44304,
       x__h44306,
       x__h44308,
       x__h44310,
       x__h44312,
       x__h44463,
       x__h44465,
       x__h44467,
       x__h44469,
       x__h44471,
       x__h44622,
       x__h44624,
       x__h44626,
       x__h44738,
       x__h44740,
       x__h44742,
       x__h44744,
       x__h44746,
       x__h44897,
       x__h44899,
       x__h44901,
       x__h45331,
       x__h45333,
       x__h45335,
       x__h45560,
       x__h45562,
       x__h45564,
       x__h45675,
       x__h45677,
       x__h45679,
       x__h45790,
       x__h45792,
       x__h45794,
       x__h45796,
       x__h45798,
       x__h45948,
       x__h45950,
       x__h45952,
       x__h45954,
       x__h45956,
       x__h46106,
       x__h46108,
       x__h46110,
       x__h46221,
       x__h46223,
       x__h46225,
       x__h46227,
       x__h46229,
       x__h46379,
       x__h46381,
       x__h46383,
       x__h46641,
       x__h46643,
       x__h46645,
       x__h46832,
       x__h46834,
       x__h46836,
       x__h46947,
       x__h46949,
       x__h46951,
       x__h47062,
       x__h47064,
       x__h47066,
       x__h47068,
       x__h47070,
       x__h47219,
       x__h47221,
       x__h47223,
       x__h47225,
       x__h47227,
       x__h47376,
       x__h47378,
       x__h47380,
       x__h47491,
       x__h47493,
       x__h47495,
       x__h47497,
       x__h47499,
       x__h47648,
       x__h47650,
       x__h47652,
       x__h47912,
       x__h47914,
       x__h47916,
       x__h48103,
       x__h48105,
       x__h48107,
       x__h48218,
       x__h48220,
       x__h48222,
       x__h48333,
       x__h48335,
       x__h48337,
       x__h48339,
       x__h48341,
       x__h48490,
       x__h48492,
       x__h48494,
       x__h48496,
       x__h48498,
       x__h48647,
       x__h48649,
       x__h48651,
       x__h48762,
       x__h48764,
       x__h48766,
       x__h48768,
       x__h48770,
       x__h48919,
       x__h48921,
       x__h48923,
       x__h49183,
       x__h49185,
       x__h49187,
       x__h49375,
       x__h49377,
       x__h49379,
       x__h49491,
       x__h49493,
       x__h49495,
       x__h49607,
       x__h49609,
       x__h49611,
       x__h49613,
       x__h49615,
       x__h49766,
       x__h49768,
       x__h49770,
       x__h49772,
       x__h49774,
       x__h49925,
       x__h49927,
       x__h49929,
       x__h50041,
       x__h50043,
       x__h50045,
       x__h50047,
       x__h50049,
       x__h50200,
       x__h50202,
       x__h50204;

  // action method encrypt
  assign RDY_encrypt =
	     kg_rg_state == 3'd0 && rg_state == 3'd0 && dr_rg_state == 4'd0 ;

  // actionvalue method ret
  assign ret = ciphertext ;
  assign RDY_ret = rg_state == 3'd2 ;

  // value method outp_ready


  // submodule kg_rcongen
  mkRconRom kg_rcongen(.CLK(CLK),
		       .RST_N(RST_N),
		       .read_addr(kg_rcongen$read_addr),
		       .read(kg_rcongen$read));

  // submodule sboxes_0
  mkSbox2 sboxes_0(.CLK(CLK),
		   .getbyte_byte_in(sboxes_0$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_0$getbyte_decrypt_),
		   .EN_getbyte(sboxes_0$EN_getbyte),
		   .getbyte(sboxes_0$getbyte));

  // submodule sboxes_1
  mkSbox2 sboxes_1(.CLK(CLK),
		   .getbyte_byte_in(sboxes_1$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_1$getbyte_decrypt_),
		   .EN_getbyte(sboxes_1$EN_getbyte),
		   .getbyte(sboxes_1$getbyte));

  // submodule sboxes_10
  mkSbox2 sboxes_10(.CLK(CLK),
		    .getbyte_byte_in(sboxes_10$getbyte_byte_in),
		    .getbyte_decrypt_(sboxes_10$getbyte_decrypt_),
		    .EN_getbyte(sboxes_10$EN_getbyte),
		    .getbyte(sboxes_10$getbyte));

  // submodule sboxes_11
  mkSbox2 sboxes_11(.CLK(CLK),
		    .getbyte_byte_in(sboxes_11$getbyte_byte_in),
		    .getbyte_decrypt_(sboxes_11$getbyte_decrypt_),
		    .EN_getbyte(sboxes_11$EN_getbyte),
		    .getbyte(sboxes_11$getbyte));

  // submodule sboxes_12
  mkSbox2 sboxes_12(.CLK(CLK),
		    .getbyte_byte_in(sboxes_12$getbyte_byte_in),
		    .getbyte_decrypt_(sboxes_12$getbyte_decrypt_),
		    .EN_getbyte(sboxes_12$EN_getbyte),
		    .getbyte(sboxes_12$getbyte));

  // submodule sboxes_13
  mkSbox2 sboxes_13(.CLK(CLK),
		    .getbyte_byte_in(sboxes_13$getbyte_byte_in),
		    .getbyte_decrypt_(sboxes_13$getbyte_decrypt_),
		    .EN_getbyte(sboxes_13$EN_getbyte),
		    .getbyte(sboxes_13$getbyte));

  // submodule sboxes_14
  mkSbox2 sboxes_14(.CLK(CLK),
		    .getbyte_byte_in(sboxes_14$getbyte_byte_in),
		    .getbyte_decrypt_(sboxes_14$getbyte_decrypt_),
		    .EN_getbyte(sboxes_14$EN_getbyte),
		    .getbyte(sboxes_14$getbyte));

  // submodule sboxes_15
  mkSbox2 sboxes_15(.CLK(CLK),
		    .getbyte_byte_in(sboxes_15$getbyte_byte_in),
		    .getbyte_decrypt_(sboxes_15$getbyte_decrypt_),
		    .EN_getbyte(sboxes_15$EN_getbyte),
		    .getbyte(sboxes_15$getbyte));

  // submodule sboxes_2
  mkSbox2 sboxes_2(.CLK(CLK),
		   .getbyte_byte_in(sboxes_2$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_2$getbyte_decrypt_),
		   .EN_getbyte(sboxes_2$EN_getbyte),
		   .getbyte(sboxes_2$getbyte));

  // submodule sboxes_3
  mkSbox2 sboxes_3(.CLK(CLK),
		   .getbyte_byte_in(sboxes_3$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_3$getbyte_decrypt_),
		   .EN_getbyte(sboxes_3$EN_getbyte),
		   .getbyte(sboxes_3$getbyte));

  // submodule sboxes_4
  mkSbox2 sboxes_4(.CLK(CLK),
		   .getbyte_byte_in(sboxes_4$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_4$getbyte_decrypt_),
		   .EN_getbyte(sboxes_4$EN_getbyte),
		   .getbyte(sboxes_4$getbyte));

  // submodule sboxes_5
  mkSbox2 sboxes_5(.CLK(CLK),
		   .getbyte_byte_in(sboxes_5$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_5$getbyte_decrypt_),
		   .EN_getbyte(sboxes_5$EN_getbyte),
		   .getbyte(sboxes_5$getbyte));

  // submodule sboxes_6
  mkSbox2 sboxes_6(.CLK(CLK),
		   .getbyte_byte_in(sboxes_6$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_6$getbyte_decrypt_),
		   .EN_getbyte(sboxes_6$EN_getbyte),
		   .getbyte(sboxes_6$getbyte));

  // submodule sboxes_7
  mkSbox2 sboxes_7(.CLK(CLK),
		   .getbyte_byte_in(sboxes_7$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_7$getbyte_decrypt_),
		   .EN_getbyte(sboxes_7$EN_getbyte),
		   .getbyte(sboxes_7$getbyte));

  // submodule sboxes_8
  mkSbox2 sboxes_8(.CLK(CLK),
		   .getbyte_byte_in(sboxes_8$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_8$getbyte_decrypt_),
		   .EN_getbyte(sboxes_8$EN_getbyte),
		   .getbyte(sboxes_8$getbyte));

  // submodule sboxes_9
  mkSbox2 sboxes_9(.CLK(CLK),
		   .getbyte_byte_in(sboxes_9$getbyte_byte_in),
		   .getbyte_decrypt_(sboxes_9$getbyte_decrypt_),
		   .EN_getbyte(sboxes_9$EN_getbyte),
		   .getbyte(sboxes_9$getbyte));

  // rule RL_done_encoding_decrypt
  assign WILL_FIRE_RL_done_encoding_decrypt =
	     dr_rg_state == 4'd0 && rg_state == 3'd1 && dr_round_done &&
	     decrypt ;

  // rule RL_initial_xor
  assign WILL_FIRE_RL_initial_xor =
	     dr_rg_state == 4'd0 && rg_state == 3'd3 && kg_rg_state != 3'd3 &&
	     kg_rg_state != 3'd4 &&
	     kg_rg_state != 3'd2 &&
	     kg_rg_state != 3'd1 ;

  // rule RL_done_encoding
  assign WILL_FIRE_RL_done_encoding =
	     dr_rg_state == 4'd0 && rg_state == 3'd1 && dr_round_done &&
	     !decrypt &&
	     kg_rg_state != 3'd3 &&
	     kg_rg_state != 3'd4 &&
	     kg_rg_state != 3'd2 &&
	     kg_rg_state != 3'd1 ;

  // rule RL_dr_sub
  assign WILL_FIRE_RL_dr_sub = dr_rg_state == 4'd2 && !dr_decrypt ;

  // rule RL_dr_rowColShift
  assign WILL_FIRE_RL_dr_rowColShift = dr_rg_state == 4'd3 && !dr_decrypt ;

  // rule RL_dr_addKeyDecrypt
  assign WILL_FIRE_RL_dr_addKeyDecrypt = dr_rg_state == 4'd7 && dr_decrypt ;

  // rule RL_decrypt_key
  assign WILL_FIRE_RL_decrypt_key =
	     rg_state == 3'd4 &&
	     SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970 ;

  // rule RL_encode
  assign WILL_FIRE_RL_encode =
	     rg_state == 3'd1 && !dr_round_done &&
	     SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109 ;

  // rule RL_dr_mixColsDecrypt
  assign WILL_FIRE_RL_dr_mixColsDecrypt =
	     dr_rg_state == 4'd8 && dr_decrypt && kg_rg_state != 3'd3 &&
	     kg_rg_state != 3'd4 &&
	     kg_rg_state != 3'd2 &&
	     kg_rg_state != 3'd1 ;

  // inputs to muxes for submodule ports
  assign MUX__unnamed_$write_1__PSEL_1 =
	     WILL_FIRE_RL_done_encoding_decrypt ||
	     WILL_FIRE_RL_done_encoding ;
  assign MUX__unnamed_$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     counter_108_EQ_maxround_969___d2122 ;
  assign MUX_counter$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_col__0$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_col__0$write_1__SEL_2 = EN_encrypt && !encrypt_decrypttt ;
  assign MUX_dr_col__1$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_col__10$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_col__11$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_col__12$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_col__13$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_col__14$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_col__15$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_col__2$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_col__3$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_col__4$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_col__5$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_col__6$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_col__7$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_col__8$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_col__9$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_counter$write_1__SEL_3 =
	     WILL_FIRE_RL_dr_sub || dr_rg_state == 4'd6 ;
  assign MUX_dr_decrypt$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_last_round$write_1__SEL_1 =
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_last_round$write_1__SEL_2 =
	     WILL_FIRE_RL_done_encoding_decrypt &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_rg_state$write_1__SEL_1 =
	     WILL_FIRE_RL_dr_sub && dr_counter == 8'd0 ;
  assign MUX_dr_rg_state$write_1__SEL_2 =
	     dr_rg_state == 4'd6 && dr_counter == 8'd0 ;
  assign MUX_dr_rg_state$write_1__SEL_7 =
	     WILL_FIRE_RL_dr_addKeyDecrypt || WILL_FIRE_RL_dr_rowColShift ;
  assign MUX_dr_round_done$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     !counter_108_EQ_maxround_969___d2122 ;
  assign MUX_dr_sboxes_out_0$write_1__SEL_1 =
	     WILL_FIRE_RL_initial_xor && !decrypt ;
  assign MUX_kg_aes256_subcol4$write_1__SEL_1 =
	     kg_rg_state == 3'd2 && kg_counter == 4'd3 &&
	     kg_key_length == 2'd2 ;
  assign MUX_kg_counter$write_1__SEL_1 =
	     kg_rg_state == 3'd4 || kg_rg_state == 3'd2 ;
  assign MUX_kg_counter$write_1__SEL_2 =
	     kg_rg_state == 3'd3 || kg_rg_state == 3'd1 ;
  assign MUX_kg_key_saved$write_1__SEL_1 =
	     kg_rg_state == 3'd3 &&
	     (kg_key_length == 2'd2 &&
	      kg_round_number_8_EQ_kg_maxrounds_9___d104 ||
	      !kg_round_number_8_ULE_kg_maxrounds_9___d100) ;
  assign MUX_kg_prev_key0$write_1__SEL_1 =
	     kg_rg_state == 3'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 ;
  assign MUX_kg_prev_key0$write_1__SEL_2 =
	     EN_encrypt &&
	     (encrypt_keyylenn == 2'd0 || encrypt_keyylenn == 2'd1 ||
	      encrypt_keyylenn == 2'd2) ;
  assign MUX_kg_rci$write_1__SEL_1 =
	     kg_rg_state == 3'd2 && kg_counter == 4'd3 ;
  assign MUX_kg_rg_state$write_1__SEL_2 =
	     kg_rg_state == 3'd4 && kg_counter == 4'd7 ;
  assign MUX_kg_rg_state$write_1__SEL_3 =
	     kg_rg_state == 3'd3 &&
	     (kg_key_length == 2'd0 || kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2 ||
	      !kg_round_number_8_ULE_kg_maxrounds_9___d100) ;
  assign MUX_kg_rot_prev_key$write_1__SEL_1 =
	     kg_rg_state == 3'd1 &&
	     (kg_key_length == 2'd0 || kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2) ;
  assign MUX_kg_rot_prev_key$write_1__SEL_2 =
	     kg_rg_state == 3'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9_00_AND_kg_ETC___d114 ;
  assign MUX_kg_round_key_done_0$write_1__SEL_1 =
	     EN_encrypt &&
	     NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255 ;
  assign MUX_kg_round_key_done_1$write_1__SEL_1 =
	     kg_rg_state == 3'd1 && kg_key_length == 2'd2 ;
  assign MUX_kg_round_toggle_192$write_1__SEL_1 =
	     kg_rg_state == 3'd1 && kg_key_length == 2'd1 ;
  assign MUX_kg_save_key0_0$write_1__SEL_1 = kg_rg_state == 3'd3 && _dfoo786 ;
  assign MUX_kg_save_key0_1$write_1__SEL_1 =
	     kg_rg_state == 3'd1 &&
	     (kg_key_length == 2'd1 || kg_key_length == 2'd2) ;
  assign MUX_kg_save_key1_0$write_1__SEL_1 = kg_rg_state == 3'd3 && _dfoo756 ;
  assign MUX_kg_save_key2_0$write_1__SEL_1 = kg_rg_state == 3'd3 && _dfoo726 ;
  assign MUX_kg_save_key3_0$write_1__SEL_1 = kg_rg_state == 3'd3 && _dfoo696 ;
  assign MUX_kg_sbox_out$write_1__SEL_4 = kg_rg_state == 3'd4 && _dfoo31 ;
  assign MUX_rg_state$write_1__SEL_1 =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     counter_108_EQ_maxround_969___d2122 ;
  assign MUX_sboxes_0$getbyte_1__SEL_6 = kg_rg_state == 3'd2 && _dfoo15 ;
  assign MUX_sboxes_0$getbyte_1__SEL_7 = kg_rg_state == 3'd4 && _dfoo31 ;
  assign MUX_col0$write_1__VAL_2 =
	     encrypt_decrypttt ? encrypt_plaintexttt[127:96] : x__h87451 ;
  assign MUX_col1$write_1__VAL_2 =
	     encrypt_decrypttt ? encrypt_plaintexttt[95:64] : x__h87607 ;
  assign MUX_col2$write_1__VAL_2 =
	     encrypt_decrypttt ? encrypt_plaintexttt[63:32] : x__h87534 ;
  assign MUX_col3$write_1__VAL_2 =
	     encrypt_decrypttt ? encrypt_plaintexttt[31:0] : x__h87680 ;
  assign MUX_counter$write_1__VAL_1 = counter + 4'd1 ;
  assign MUX_dr_col__0$write_1__VAL_3 =
	     dr_last_round ? dr_col__0 : spliced_bits__h61175 ;
  assign MUX_dr_col__0$write_1__VAL_4 =
	     decrypt ? col_in3__h67042[7:0] : col3[7:0] ;
  assign MUX_dr_col__1$write_1__VAL_3 =
	     dr_last_round ? dr_col__1 : spliced_bits__h61203 ;
  assign MUX_dr_col__1$write_1__VAL_4 =
	     decrypt ? col_in3__h67042[15:8] : col3[15:8] ;
  assign MUX_dr_col__10$write_1__VAL_3 =
	     dr_last_round ? dr_col__10 : spliced_bits__h56337 ;
  assign MUX_dr_col__10$write_1__VAL_4 =
	     decrypt ? col_in1__h67040[23:16] : col1[23:16] ;
  assign MUX_dr_col__11$write_1__VAL_3 =
	     dr_last_round ? dr_col__11 : spliced_bits__h56365 ;
  assign MUX_dr_col__11$write_1__VAL_4 =
	     decrypt ? col_in1__h67040[31:24] : col1[31:24] ;
  assign MUX_dr_col__12$write_1__VAL_3 =
	     dr_last_round ? dr_col__12 : spliced_bits__h53819 ;
  assign MUX_dr_col__12$write_1__VAL_4 =
	     decrypt ? col_in0__h67039[7:0] : col0[7:0] ;
  assign MUX_dr_col__13$write_1__VAL_3 =
	     dr_last_round ? dr_col__13 : spliced_bits__h53847 ;
  assign MUX_dr_col__13$write_1__VAL_4 =
	     decrypt ? col_in0__h67039[15:8] : col0[15:8] ;
  assign MUX_dr_col__14$write_1__VAL_3 =
	     dr_last_round ? dr_col__14 : spliced_bits__h53875 ;
  assign MUX_dr_col__14$write_1__VAL_4 =
	     decrypt ? col_in0__h67039[23:16] : col0[23:16] ;
  assign MUX_dr_col__15$write_1__VAL_3 =
	     dr_last_round ? dr_col__15 : spliced_bits__h53903 ;
  assign MUX_dr_col__15$write_1__VAL_4 =
	     decrypt ? col_in0__h67039[31:24] : col0[31:24] ;
  assign MUX_dr_col__2$write_1__VAL_3 =
	     dr_last_round ? dr_col__2 : spliced_bits__h61231 ;
  assign MUX_dr_col__2$write_1__VAL_4 =
	     decrypt ? col_in3__h67042[23:16] : col3[23:16] ;
  assign MUX_dr_col__3$write_1__VAL_3 =
	     dr_last_round ? dr_col__3 : spliced_bits__h61259 ;
  assign MUX_dr_col__3$write_1__VAL_4 =
	     decrypt ? col_in3__h67042[31:24] : col3[31:24] ;
  assign MUX_dr_col__4$write_1__VAL_3 =
	     dr_last_round ? dr_col__4 : spliced_bits__h58728 ;
  assign MUX_dr_col__4$write_1__VAL_4 =
	     decrypt ? col_in2__h67041[7:0] : col2[7:0] ;
  assign MUX_dr_col__5$write_1__VAL_3 =
	     dr_last_round ? dr_col__5 : spliced_bits__h58756 ;
  assign MUX_dr_col__5$write_1__VAL_4 =
	     decrypt ? col_in2__h67041[15:8] : col2[15:8] ;
  assign MUX_dr_col__6$write_1__VAL_3 =
	     dr_last_round ? dr_col__6 : spliced_bits__h58784 ;
  assign MUX_dr_col__6$write_1__VAL_4 =
	     decrypt ? col_in2__h67041[23:16] : col2[23:16] ;
  assign MUX_dr_col__7$write_1__VAL_3 =
	     dr_last_round ? dr_col__7 : spliced_bits__h58812 ;
  assign MUX_dr_col__7$write_1__VAL_4 =
	     decrypt ? col_in2__h67041[31:24] : col2[31:24] ;
  assign MUX_dr_col__8$write_1__VAL_3 =
	     dr_last_round ? dr_col__8 : spliced_bits__h56281 ;
  assign MUX_dr_col__8$write_1__VAL_4 =
	     decrypt ? col_in1__h67040[7:0] : col1[7:0] ;
  assign MUX_dr_col__9$write_1__VAL_3 =
	     dr_last_round ? dr_col__9 : spliced_bits__h56309 ;
  assign MUX_dr_col__9$write_1__VAL_4 =
	     decrypt ? col_in1__h67040[15:8] : col1[15:8] ;
  assign MUX_dr_colout0$write_1__VAL_1 = x__h51910 ^ key[127:96] ;
  assign MUX_dr_colout0$write_1__VAL_2 =
	     dr_last_round ? x__h50356 : x__h29135 ;
  assign MUX_dr_colout1$write_1__VAL_1 = x__h51975 ^ key[95:64] ;
  assign MUX_dr_colout1$write_1__VAL_2 =
	     dr_last_round ? x__h50433 : x__h34440 ;
  assign MUX_dr_colout2$write_1__VAL_1 = x__h52042 ^ key[63:32] ;
  assign MUX_dr_colout2$write_1__VAL_2 =
	     dr_last_round ? x__h50500 : x__h39743 ;
  assign MUX_dr_colout3$write_1__VAL_1 = x__h52109 ^ key[31:0] ;
  assign MUX_dr_colout3$write_1__VAL_2 =
	     dr_last_round ? x__h50567 : x__h45046 ;
  assign MUX_dr_counter$write_1__VAL_3 = dr_counter + 8'd1 ;
  assign MUX_dr_last_round$write_1__VAL_1 = counter == y__h73875 ;
  assign MUX_dr_rg_state$write_1__VAL_6 = decrypt ? 4'd8 : 4'd2 ;
  assign MUX_key$write_1__VAL_2 =
	     { SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988,
	       SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005,
	       SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022,
	       SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039 } ;
  assign MUX_key$write_1__VAL_3 =
	     { SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113,
	       SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114,
	       SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115,
	       SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116 } ;
  always@(kg_counter or x__h12353 or x__h11775 or x__h11965 or x__h12159)
  begin
    case (kg_counter)
      4'd4: MUX_kg_aes256_subcol4$write_1__VAL_2 = x__h11775;
      4'd5: MUX_kg_aes256_subcol4$write_1__VAL_2 = x__h11965;
      4'd6: MUX_kg_aes256_subcol4$write_1__VAL_2 = x__h12159;
      default: MUX_kg_aes256_subcol4$write_1__VAL_2 = x__h12353;
    endcase
  end
  assign MUX_kg_counter$write_1__VAL_1 = kg_counter + 4'd1 ;
  always@(encrypt_keyylenn or encrypt_keyyy)
  begin
    case (encrypt_keyylenn)
      2'd0: MUX_kg_prev_key0$write_1__VAL_2 = encrypt_keyyy[127:96];
      2'd1: MUX_kg_prev_key0$write_1__VAL_2 = encrypt_keyyy[191:160];
      default: MUX_kg_prev_key0$write_1__VAL_2 = encrypt_keyyy[255:224];
    endcase
  end
  always@(encrypt_keyylenn or encrypt_keyyy)
  begin
    case (encrypt_keyylenn)
      2'd0: MUX_kg_prev_key1$write_1__VAL_2 = encrypt_keyyy[95:64];
      2'd1: MUX_kg_prev_key1$write_1__VAL_2 = encrypt_keyyy[159:128];
      default: MUX_kg_prev_key1$write_1__VAL_2 = encrypt_keyyy[223:192];
    endcase
  end
  always@(encrypt_keyylenn or encrypt_keyyy)
  begin
    case (encrypt_keyylenn)
      2'd0: MUX_kg_prev_key2$write_1__VAL_2 = encrypt_keyyy[63:32];
      2'd1: MUX_kg_prev_key2$write_1__VAL_2 = encrypt_keyyy[127:96];
      default: MUX_kg_prev_key2$write_1__VAL_2 = encrypt_keyyy[191:160];
    endcase
  end
  always@(encrypt_keyylenn or encrypt_keyyy)
  begin
    case (encrypt_keyylenn)
      2'd0: MUX_kg_prev_key3$write_1__VAL_2 = encrypt_keyyy[31:0];
      2'd1: MUX_kg_prev_key3$write_1__VAL_2 = encrypt_keyyy[95:64];
      default: MUX_kg_prev_key3$write_1__VAL_2 = encrypt_keyyy[159:128];
    endcase
  end
  assign MUX_kg_prev_key4$write_1__VAL_2 =
	     (encrypt_keyylenn == 2'd1) ?
	       encrypt_keyyy[63:32] :
	       encrypt_keyyy[127:96] ;
  assign MUX_kg_prev_key5$write_1__VAL_2 =
	     (encrypt_keyylenn == 2'd1) ?
	       encrypt_keyyy[31:0] :
	       encrypt_keyyy[95:64] ;
  assign MUX_kg_rci$write_1__VAL_1 = kg_rci + 4'd1 ;
  assign MUX_kg_rg_state$write_1__VAL_1 =
	     (kg_key_length == 2'd2) ? 3'd4 : 3'd3 ;
  assign MUX_kg_rg_state$write_1__VAL_3 =
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 ?
	       CASE_kg_key_length_0_2_1_2_IF_kg_round_number__ETC__q1 :
	       3'd0 ;
  assign MUX_kg_rg_state$write_1__VAL_4 =
	     kg_key_saved ?
	       IF_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_save_ETC___d2211 :
	       3'd1 ;
  always@(kg_key_length or x__h10514 or x__h9845 or x__h10104)
  begin
    case (kg_key_length)
      2'd0: MUX_kg_rot_prev_key$write_1__VAL_1 = x__h9845;
      2'd1: MUX_kg_rot_prev_key$write_1__VAL_1 = x__h10104;
      default: MUX_kg_rot_prev_key$write_1__VAL_1 = x__h10514;
    endcase
  end
  always@(kg_key_length or x__h22385 or x__h14000 or x__h19400)
  begin
    case (kg_key_length)
      2'd0: MUX_kg_rot_prev_key$write_1__VAL_2 = x__h14000;
      2'd1: MUX_kg_rot_prev_key$write_1__VAL_2 = x__h19400;
      default: MUX_kg_rot_prev_key$write_1__VAL_2 = x__h22385;
    endcase
  end
  always@(kg_key_length or x__h22778 or x__h22457 or kg_round_toggle_192)
  begin
    case (kg_key_length)
      2'd0: MUX_kg_round_number$write_1__VAL_1 = x__h22457;
      2'd1:
	  MUX_kg_round_number$write_1__VAL_1 =
	      kg_round_toggle_192 ? x__h22457 : x__h22778;
      default: MUX_kg_round_number$write_1__VAL_1 = x__h22778;
    endcase
  end
  always@(encrypt_keyylenn)
  begin
    case (encrypt_keyylenn)
      2'd0, 2'd1: MUX_kg_round_number$write_1__VAL_2 = 5'b00001;
      default: MUX_kg_round_number$write_1__VAL_2 = 5'b00010;
    endcase
  end
  assign MUX_kg_save_key0_0$write_1__VAL_1 =
	     (kg_round_number == 5'd0 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key0__h12547 :
	       (kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d182 ?
		  key0__h12547 :
		  _dfoo517) ;
  assign MUX_kg_save_key0_1$write_1__VAL_2 =
	     (kg_round_number == 5'd1 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key0__h12547 :
	       (kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d183 ?
		  key0__h12547 :
		  _dfoo515) ;
  assign MUX_kg_save_key1_0$write_1__VAL_1 =
	     (kg_round_number == 5'd0 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key1__h12548 :
	       (kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d182 ?
		  key1__h12548 :
		  _dfoo487) ;
  assign MUX_kg_save_key1_1$write_1__VAL_2 =
	     (kg_round_number == 5'd1 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key1__h12548 :
	       (kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d183 ?
		  key1__h12548 :
		  _dfoo485) ;
  assign MUX_kg_save_key2_0$write_1__VAL_1 =
	     (kg_round_number == 5'd0 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key2__h12549 :
	       (kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d182 ?
		  key2__h12549 :
		  _dfoo427) ;
  assign MUX_kg_save_key2_1$write_1__VAL_2 =
	     (kg_round_number == 5'd1 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key2__h12549 :
	       (kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d183 ?
		  key2__h12549 :
		  _dfoo425) ;
  assign MUX_kg_save_key3_0$write_1__VAL_1 =
	     (kg_round_number == 5'd0 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key3__h12550 :
	       (kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d182 ?
		  key3__h12550 :
		  _dfoo397) ;
  assign MUX_kg_save_key3_1$write_1__VAL_2 =
	     (kg_round_number == 5'd1 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key3__h12550 :
	       (kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d183 ?
		  key3__h12550 :
		  _dfoo395) ;
  always@(kg_counter or sboxes_0$getbyte)
  begin
    case (kg_counter)
      4'd0, 4'd1: MUX_kg_sbox_out$write_1__VAL_3 = sboxes_0$getbyte;
      default: MUX_kg_sbox_out$write_1__VAL_3 = sboxes_0$getbyte;
    endcase
  end
  assign MUX_rg_state$write_1__VAL_2 = encrypt_decrypttt ? 3'd4 : 3'd3 ;
  always@(kg_key_length or kg_prev_key7 or kg_prev_key3 or kg_prev_key5)
  begin
    case (kg_key_length)
      2'd0: MUX_sboxes_0$getbyte_1__VAL_1 = kg_prev_key3[23:16];
      2'd1: MUX_sboxes_0$getbyte_1__VAL_1 = kg_prev_key5[23:16];
      default: MUX_sboxes_0$getbyte_1__VAL_1 = kg_prev_key7[23:16];
    endcase
  end
  always@(kg_key_length or key7__h12555 or key3__h12550 or key5__h12553)
  begin
    case (kg_key_length)
      2'd0: MUX_sboxes_0$getbyte_1__VAL_3 = key3__h12550[23:16];
      2'd1: MUX_sboxes_0$getbyte_1__VAL_3 = key5__h12553[23:16];
      default: MUX_sboxes_0$getbyte_1__VAL_3 = key7__h12555[23:16];
    endcase
  end
  always@(kg_counter or temp_col__h11429 or kg_rot_prev_key)
  begin
    case (kg_counter)
      4'd0: MUX_sboxes_0$getbyte_1__VAL_6 = kg_rot_prev_key[23:16];
      4'd1: MUX_sboxes_0$getbyte_1__VAL_6 = kg_rot_prev_key[15:8];
      4'd2: MUX_sboxes_0$getbyte_1__VAL_6 = kg_rot_prev_key[7:0];
      default: MUX_sboxes_0$getbyte_1__VAL_6 = temp_col__h11429[31:24];
    endcase
  end
  always@(kg_counter or kg_aes256_subcol4)
  begin
    case (kg_counter)
      4'd4: MUX_sboxes_0$getbyte_1__VAL_7 = kg_aes256_subcol4[23:16];
      4'd5: MUX_sboxes_0$getbyte_1__VAL_7 = kg_aes256_subcol4[15:8];
      default: MUX_sboxes_0$getbyte_1__VAL_7 = kg_aes256_subcol4[7:0];
    endcase
  end
  always@(kg_counter)
  begin
    case (kg_counter)
      4'd0, 4'd1: MUX_sboxes_0$getbyte_2__VAL_6 = 1'd0;
      default: MUX_sboxes_0$getbyte_2__VAL_6 = 1'd0;
    endcase
  end

  // register _unnamed_
  assign _unnamed_$D_IN = MUX__unnamed_$write_1__SEL_1 ;
  assign _unnamed_$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     counter_108_EQ_maxround_969___d2122 ||
	     EN_ret ;

  // register ciphertext
  assign ciphertext$D_IN =
	     { dr_colout0, dr_colout1, dr_colout2, dr_colout3 } ;
  assign ciphertext$EN =
	     MUX__unnamed_$write_1__PSEL_1 &&
	     counter_108_EQ_maxround_969___d2122 ;

  // register col0
  assign col0$D_IN =
	     WILL_FIRE_RL_initial_xor ?
	       col_in0__h67039 :
	       MUX_col0$write_1__VAL_2 ;
  assign col0$EN = WILL_FIRE_RL_initial_xor || EN_encrypt ;

  // register col1
  assign col1$D_IN =
	     WILL_FIRE_RL_initial_xor ?
	       col_in1__h67040 :
	       MUX_col1$write_1__VAL_2 ;
  assign col1$EN = WILL_FIRE_RL_initial_xor || EN_encrypt ;

  // register col2
  assign col2$D_IN =
	     WILL_FIRE_RL_initial_xor ?
	       col_in2__h67041 :
	       MUX_col2$write_1__VAL_2 ;
  assign col2$EN = WILL_FIRE_RL_initial_xor || EN_encrypt ;

  // register col3
  assign col3$D_IN =
	     WILL_FIRE_RL_initial_xor ?
	       col_in3__h67042 :
	       MUX_col3$write_1__VAL_2 ;
  assign col3$EN = WILL_FIRE_RL_initial_xor || EN_encrypt ;

  // register colout0
  assign colout0$D_IN = 32'h0 ;
  assign colout0$EN = 1'b0 ;

  // register colout1
  assign colout1$D_IN = 32'h0 ;
  assign colout1$EN = 1'b0 ;

  // register colout2
  assign colout2$D_IN = 32'h0 ;
  assign colout2$EN = 1'b0 ;

  // register colout3
  assign colout3$D_IN = 32'h0 ;
  assign colout3$EN = 1'b0 ;

  // register counter
  assign counter$D_IN =
	     MUX_counter$write_1__SEL_1 ? MUX_counter$write_1__VAL_1 : 4'd1 ;
  assign counter$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt ;

  // register decrypt
  assign decrypt$D_IN = encrypt_decrypttt ;
  assign decrypt$EN = EN_encrypt ;

  // register dr_c0_col_in
  assign dr_c0_col_in$D_IN = 32'h0 ;
  assign dr_c0_col_in$EN = 1'b0 ;

  // register dr_c1_col_in
  assign dr_c1_col_in$D_IN = 32'h0 ;
  assign dr_c1_col_in$EN = 1'b0 ;

  // register dr_c2_col_in
  assign dr_c2_col_in$D_IN = 32'h0 ;
  assign dr_c2_col_in$EN = 1'b0 ;

  // register dr_c3_col_in
  assign dr_c3_col_in$D_IN = 32'h0 ;
  assign dr_c3_col_in$EN = 1'b0 ;

  // register dr_col__0
  always@(MUX_dr_col__0$write_1__SEL_1 or
	  dr_colout3 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87680 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  MUX_dr_col__0$write_1__VAL_3 or
	  WILL_FIRE_RL_initial_xor or MUX_dr_col__0$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_col__0$write_1__SEL_1: dr_col__0$D_IN = dr_colout3[7:0];
      MUX_dr_col__0$write_1__SEL_2: dr_col__0$D_IN = x__h87680[7:0];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  dr_col__0$D_IN = MUX_dr_col__0$write_1__VAL_3;
      WILL_FIRE_RL_initial_xor: dr_col__0$D_IN = MUX_dr_col__0$write_1__VAL_4;
      default: dr_col__0$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign dr_col__0$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_col__1
  always@(MUX_dr_col__1$write_1__SEL_1 or
	  dr_colout3 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87680 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  MUX_dr_col__1$write_1__VAL_3 or
	  WILL_FIRE_RL_initial_xor or MUX_dr_col__1$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_col__1$write_1__SEL_1: dr_col__1$D_IN = dr_colout3[15:8];
      MUX_dr_col__0$write_1__SEL_2: dr_col__1$D_IN = x__h87680[15:8];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  dr_col__1$D_IN = MUX_dr_col__1$write_1__VAL_3;
      WILL_FIRE_RL_initial_xor: dr_col__1$D_IN = MUX_dr_col__1$write_1__VAL_4;
      default: dr_col__1$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign dr_col__1$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_col__10
  always@(MUX_dr_col__10$write_1__SEL_1 or
	  dr_colout1 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87607 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  MUX_dr_col__10$write_1__VAL_3 or
	  WILL_FIRE_RL_initial_xor or MUX_dr_col__10$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_col__10$write_1__SEL_1: dr_col__10$D_IN = dr_colout1[23:16];
      MUX_dr_col__0$write_1__SEL_2: dr_col__10$D_IN = x__h87607[23:16];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  dr_col__10$D_IN = MUX_dr_col__10$write_1__VAL_3;
      WILL_FIRE_RL_initial_xor:
	  dr_col__10$D_IN = MUX_dr_col__10$write_1__VAL_4;
      default: dr_col__10$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign dr_col__10$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_col__11
  always@(MUX_dr_col__11$write_1__SEL_1 or
	  dr_colout1 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87607 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  MUX_dr_col__11$write_1__VAL_3 or
	  WILL_FIRE_RL_initial_xor or MUX_dr_col__11$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_col__11$write_1__SEL_1: dr_col__11$D_IN = dr_colout1[31:24];
      MUX_dr_col__0$write_1__SEL_2: dr_col__11$D_IN = x__h87607[31:24];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  dr_col__11$D_IN = MUX_dr_col__11$write_1__VAL_3;
      WILL_FIRE_RL_initial_xor:
	  dr_col__11$D_IN = MUX_dr_col__11$write_1__VAL_4;
      default: dr_col__11$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign dr_col__11$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_col__12
  always@(MUX_dr_col__12$write_1__SEL_1 or
	  dr_colout0 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87451 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  MUX_dr_col__12$write_1__VAL_3 or
	  WILL_FIRE_RL_initial_xor or MUX_dr_col__12$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_col__12$write_1__SEL_1: dr_col__12$D_IN = dr_colout0[7:0];
      MUX_dr_col__0$write_1__SEL_2: dr_col__12$D_IN = x__h87451[7:0];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  dr_col__12$D_IN = MUX_dr_col__12$write_1__VAL_3;
      WILL_FIRE_RL_initial_xor:
	  dr_col__12$D_IN = MUX_dr_col__12$write_1__VAL_4;
      default: dr_col__12$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign dr_col__12$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_col__13
  always@(MUX_dr_col__13$write_1__SEL_1 or
	  dr_colout0 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87451 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  MUX_dr_col__13$write_1__VAL_3 or
	  WILL_FIRE_RL_initial_xor or MUX_dr_col__13$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_col__13$write_1__SEL_1: dr_col__13$D_IN = dr_colout0[15:8];
      MUX_dr_col__0$write_1__SEL_2: dr_col__13$D_IN = x__h87451[15:8];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  dr_col__13$D_IN = MUX_dr_col__13$write_1__VAL_3;
      WILL_FIRE_RL_initial_xor:
	  dr_col__13$D_IN = MUX_dr_col__13$write_1__VAL_4;
      default: dr_col__13$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign dr_col__13$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_col__14
  always@(MUX_dr_col__14$write_1__SEL_1 or
	  dr_colout0 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87451 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  MUX_dr_col__14$write_1__VAL_3 or
	  WILL_FIRE_RL_initial_xor or MUX_dr_col__14$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_col__14$write_1__SEL_1: dr_col__14$D_IN = dr_colout0[23:16];
      MUX_dr_col__0$write_1__SEL_2: dr_col__14$D_IN = x__h87451[23:16];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  dr_col__14$D_IN = MUX_dr_col__14$write_1__VAL_3;
      WILL_FIRE_RL_initial_xor:
	  dr_col__14$D_IN = MUX_dr_col__14$write_1__VAL_4;
      default: dr_col__14$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign dr_col__14$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_col__15
  always@(MUX_dr_col__15$write_1__SEL_1 or
	  dr_colout0 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87451 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  MUX_dr_col__15$write_1__VAL_3 or
	  WILL_FIRE_RL_initial_xor or MUX_dr_col__15$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_col__15$write_1__SEL_1: dr_col__15$D_IN = dr_colout0[31:24];
      MUX_dr_col__0$write_1__SEL_2: dr_col__15$D_IN = x__h87451[31:24];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  dr_col__15$D_IN = MUX_dr_col__15$write_1__VAL_3;
      WILL_FIRE_RL_initial_xor:
	  dr_col__15$D_IN = MUX_dr_col__15$write_1__VAL_4;
      default: dr_col__15$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign dr_col__15$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_col__2
  always@(MUX_dr_col__2$write_1__SEL_1 or
	  dr_colout3 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87680 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  MUX_dr_col__2$write_1__VAL_3 or
	  WILL_FIRE_RL_initial_xor or MUX_dr_col__2$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_col__2$write_1__SEL_1: dr_col__2$D_IN = dr_colout3[23:16];
      MUX_dr_col__0$write_1__SEL_2: dr_col__2$D_IN = x__h87680[23:16];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  dr_col__2$D_IN = MUX_dr_col__2$write_1__VAL_3;
      WILL_FIRE_RL_initial_xor: dr_col__2$D_IN = MUX_dr_col__2$write_1__VAL_4;
      default: dr_col__2$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign dr_col__2$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_col__3
  always@(MUX_dr_col__3$write_1__SEL_1 or
	  dr_colout3 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87680 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  MUX_dr_col__3$write_1__VAL_3 or
	  WILL_FIRE_RL_initial_xor or MUX_dr_col__3$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_col__3$write_1__SEL_1: dr_col__3$D_IN = dr_colout3[31:24];
      MUX_dr_col__0$write_1__SEL_2: dr_col__3$D_IN = x__h87680[31:24];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  dr_col__3$D_IN = MUX_dr_col__3$write_1__VAL_3;
      WILL_FIRE_RL_initial_xor: dr_col__3$D_IN = MUX_dr_col__3$write_1__VAL_4;
      default: dr_col__3$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign dr_col__3$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_col__4
  always@(MUX_dr_col__4$write_1__SEL_1 or
	  dr_colout2 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87534 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  MUX_dr_col__4$write_1__VAL_3 or
	  WILL_FIRE_RL_initial_xor or MUX_dr_col__4$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_col__4$write_1__SEL_1: dr_col__4$D_IN = dr_colout2[7:0];
      MUX_dr_col__0$write_1__SEL_2: dr_col__4$D_IN = x__h87534[7:0];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  dr_col__4$D_IN = MUX_dr_col__4$write_1__VAL_3;
      WILL_FIRE_RL_initial_xor: dr_col__4$D_IN = MUX_dr_col__4$write_1__VAL_4;
      default: dr_col__4$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign dr_col__4$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_col__5
  always@(MUX_dr_col__5$write_1__SEL_1 or
	  dr_colout2 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87534 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  MUX_dr_col__5$write_1__VAL_3 or
	  WILL_FIRE_RL_initial_xor or MUX_dr_col__5$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_col__5$write_1__SEL_1: dr_col__5$D_IN = dr_colout2[15:8];
      MUX_dr_col__0$write_1__SEL_2: dr_col__5$D_IN = x__h87534[15:8];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  dr_col__5$D_IN = MUX_dr_col__5$write_1__VAL_3;
      WILL_FIRE_RL_initial_xor: dr_col__5$D_IN = MUX_dr_col__5$write_1__VAL_4;
      default: dr_col__5$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign dr_col__5$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_col__6
  always@(MUX_dr_col__6$write_1__SEL_1 or
	  dr_colout2 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87534 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  MUX_dr_col__6$write_1__VAL_3 or
	  WILL_FIRE_RL_initial_xor or MUX_dr_col__6$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_col__6$write_1__SEL_1: dr_col__6$D_IN = dr_colout2[23:16];
      MUX_dr_col__0$write_1__SEL_2: dr_col__6$D_IN = x__h87534[23:16];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  dr_col__6$D_IN = MUX_dr_col__6$write_1__VAL_3;
      WILL_FIRE_RL_initial_xor: dr_col__6$D_IN = MUX_dr_col__6$write_1__VAL_4;
      default: dr_col__6$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign dr_col__6$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_col__7
  always@(MUX_dr_col__7$write_1__SEL_1 or
	  dr_colout2 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87534 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  MUX_dr_col__7$write_1__VAL_3 or
	  WILL_FIRE_RL_initial_xor or MUX_dr_col__7$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_col__7$write_1__SEL_1: dr_col__7$D_IN = dr_colout2[31:24];
      MUX_dr_col__0$write_1__SEL_2: dr_col__7$D_IN = x__h87534[31:24];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  dr_col__7$D_IN = MUX_dr_col__7$write_1__VAL_3;
      WILL_FIRE_RL_initial_xor: dr_col__7$D_IN = MUX_dr_col__7$write_1__VAL_4;
      default: dr_col__7$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign dr_col__7$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_col__8
  always@(MUX_dr_col__8$write_1__SEL_1 or
	  dr_colout1 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87607 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  MUX_dr_col__8$write_1__VAL_3 or
	  WILL_FIRE_RL_initial_xor or MUX_dr_col__8$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_col__8$write_1__SEL_1: dr_col__8$D_IN = dr_colout1[7:0];
      MUX_dr_col__0$write_1__SEL_2: dr_col__8$D_IN = x__h87607[7:0];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  dr_col__8$D_IN = MUX_dr_col__8$write_1__VAL_3;
      WILL_FIRE_RL_initial_xor: dr_col__8$D_IN = MUX_dr_col__8$write_1__VAL_4;
      default: dr_col__8$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign dr_col__8$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_col__9
  always@(MUX_dr_col__9$write_1__SEL_1 or
	  dr_colout1 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87607 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  MUX_dr_col__9$write_1__VAL_3 or
	  WILL_FIRE_RL_initial_xor or MUX_dr_col__9$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_col__9$write_1__SEL_1: dr_col__9$D_IN = dr_colout1[15:8];
      MUX_dr_col__0$write_1__SEL_2: dr_col__9$D_IN = x__h87607[15:8];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  dr_col__9$D_IN = MUX_dr_col__9$write_1__VAL_3;
      WILL_FIRE_RL_initial_xor: dr_col__9$D_IN = MUX_dr_col__9$write_1__VAL_4;
      default: dr_col__9$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign dr_col__9$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_colout0
  assign dr_colout0$D_IN =
	     WILL_FIRE_RL_dr_addKeyDecrypt ?
	       MUX_dr_colout0$write_1__VAL_1 :
	       MUX_dr_colout0$write_1__VAL_2 ;
  assign dr_colout0$EN = MUX_dr_rg_state$write_1__SEL_7 ;

  // register dr_colout1
  assign dr_colout1$D_IN =
	     WILL_FIRE_RL_dr_addKeyDecrypt ?
	       MUX_dr_colout1$write_1__VAL_1 :
	       MUX_dr_colout1$write_1__VAL_2 ;
  assign dr_colout1$EN = MUX_dr_rg_state$write_1__SEL_7 ;

  // register dr_colout2
  assign dr_colout2$D_IN =
	     WILL_FIRE_RL_dr_addKeyDecrypt ?
	       MUX_dr_colout2$write_1__VAL_1 :
	       MUX_dr_colout2$write_1__VAL_2 ;
  assign dr_colout2$EN = MUX_dr_rg_state$write_1__SEL_7 ;

  // register dr_colout3
  assign dr_colout3$D_IN =
	     WILL_FIRE_RL_dr_addKeyDecrypt ?
	       MUX_dr_colout3$write_1__VAL_1 :
	       MUX_dr_colout3$write_1__VAL_2 ;
  assign dr_colout3$EN = MUX_dr_rg_state$write_1__SEL_7 ;

  // register dr_counter
  assign dr_counter$D_IN =
	     MUX_dr_counter$write_1__SEL_3 ?
	       MUX_dr_counter$write_1__VAL_3 :
	       8'd0 ;
  assign dr_counter$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_sub ||
	     dr_rg_state == 4'd6 ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_decrypt
  assign dr_decrypt$D_IN =
	     (MUX_dr_decrypt$write_1__SEL_1 || WILL_FIRE_RL_initial_xor) ?
	       decrypt :
	       encrypt_decrypttt ;
  assign dr_decrypt$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_last_round
  always@(WILL_FIRE_RL_initial_xor or
	  decrypt or
	  MUX_dr_last_round$write_1__SEL_1 or
	  MUX_dr_last_round$write_1__VAL_1 or
	  MUX_dr_last_round$write_1__SEL_2 or MUX_dr_col__0$write_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_initial_xor: dr_last_round$D_IN = decrypt;
      MUX_dr_last_round$write_1__SEL_1:
	  dr_last_round$D_IN = MUX_dr_last_round$write_1__VAL_1;
      MUX_dr_last_round$write_1__SEL_2 || MUX_dr_col__0$write_1__SEL_2:
	  dr_last_round$D_IN = 1'd0;
      default: dr_last_round$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign dr_last_round$EN =
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     WILL_FIRE_RL_done_encoding_decrypt &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_initial_xor ;

  // register dr_new_round
  assign dr_new_round$D_IN = 1'b0 ;
  assign dr_new_round$EN = 1'b0 ;

  // register dr_rg_state
  always@(WILL_FIRE_RL_initial_xor or
	  MUX_dr_rg_state$write_1__VAL_6 or
	  MUX_dr_rg_state$write_1__SEL_7 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  MUX_dr_rg_state$write_1__SEL_1 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  MUX_dr_rg_state$write_1__SEL_2 or MUX_dr_last_round$write_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_initial_xor:
	  dr_rg_state$D_IN = MUX_dr_rg_state$write_1__VAL_6;
      MUX_dr_rg_state$write_1__SEL_7: dr_rg_state$D_IN = 4'd0;
      MUX_dr_last_round$write_1__SEL_1 || MUX_dr_col__0$write_1__SEL_2:
	  dr_rg_state$D_IN = 4'd2;
      MUX_dr_rg_state$write_1__SEL_1: dr_rg_state$D_IN = 4'd3;
      WILL_FIRE_RL_dr_mixColsDecrypt: dr_rg_state$D_IN = 4'd6;
      MUX_dr_rg_state$write_1__SEL_2: dr_rg_state$D_IN = 4'd7;
      MUX_dr_last_round$write_1__SEL_2: dr_rg_state$D_IN = 4'd8;
      default: dr_rg_state$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign dr_rg_state$EN =
	     WILL_FIRE_RL_dr_sub && dr_counter == 8'd0 ||
	     dr_rg_state == 4'd6 && dr_counter == 8'd0 ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     WILL_FIRE_RL_done_encoding_decrypt &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_initial_xor ||
	     WILL_FIRE_RL_dr_addKeyDecrypt ||
	     WILL_FIRE_RL_dr_rowColShift ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // register dr_round_done
  assign dr_round_done$D_IN =
	     !MUX_dr_round_done$write_1__SEL_1 &&
	     !MUX_dr_col__0$write_1__SEL_2 &&
	     !WILL_FIRE_RL_initial_xor ;
  assign dr_round_done$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_initial_xor ||
	     WILL_FIRE_RL_dr_addKeyDecrypt ||
	     WILL_FIRE_RL_dr_rowColShift ;

  // register dr_sboxes_out_0
  assign dr_sboxes_out_0$D_IN = sboxes_0$getbyte ;
  assign dr_sboxes_out_0$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // register dr_sboxes_out_1
  assign dr_sboxes_out_1$D_IN = sboxes_1$getbyte ;
  assign dr_sboxes_out_1$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // register dr_sboxes_out_10
  assign dr_sboxes_out_10$D_IN = sboxes_10$getbyte ;
  assign dr_sboxes_out_10$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // register dr_sboxes_out_11
  assign dr_sboxes_out_11$D_IN = sboxes_11$getbyte ;
  assign dr_sboxes_out_11$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // register dr_sboxes_out_12
  assign dr_sboxes_out_12$D_IN = sboxes_12$getbyte ;
  assign dr_sboxes_out_12$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // register dr_sboxes_out_13
  assign dr_sboxes_out_13$D_IN = sboxes_13$getbyte ;
  assign dr_sboxes_out_13$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // register dr_sboxes_out_14
  assign dr_sboxes_out_14$D_IN = sboxes_14$getbyte ;
  assign dr_sboxes_out_14$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // register dr_sboxes_out_15
  assign dr_sboxes_out_15$D_IN = sboxes_15$getbyte ;
  assign dr_sboxes_out_15$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // register dr_sboxes_out_2
  assign dr_sboxes_out_2$D_IN = sboxes_2$getbyte ;
  assign dr_sboxes_out_2$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // register dr_sboxes_out_3
  assign dr_sboxes_out_3$D_IN = sboxes_3$getbyte ;
  assign dr_sboxes_out_3$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // register dr_sboxes_out_4
  assign dr_sboxes_out_4$D_IN = sboxes_4$getbyte ;
  assign dr_sboxes_out_4$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // register dr_sboxes_out_5
  assign dr_sboxes_out_5$D_IN = sboxes_5$getbyte ;
  assign dr_sboxes_out_5$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // register dr_sboxes_out_6
  assign dr_sboxes_out_6$D_IN = sboxes_6$getbyte ;
  assign dr_sboxes_out_6$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // register dr_sboxes_out_7
  assign dr_sboxes_out_7$D_IN = sboxes_7$getbyte ;
  assign dr_sboxes_out_7$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // register dr_sboxes_out_8
  assign dr_sboxes_out_8$D_IN = sboxes_8$getbyte ;
  assign dr_sboxes_out_8$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // register dr_sboxes_out_9
  assign dr_sboxes_out_9$D_IN = sboxes_9$getbyte ;
  assign dr_sboxes_out_9$EN =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // register dr_sub_col_0
  assign dr_sub_col_0$D_IN = dr_sboxes_out_0 ;
  assign dr_sub_col_0$EN =
	     MUX_dr_counter$write_1__SEL_3 && dr_counter == 8'd0 ;

  // register dr_sub_col_1
  assign dr_sub_col_1$D_IN = dr_sboxes_out_1 ;
  assign dr_sub_col_1$EN =
	     MUX_dr_counter$write_1__SEL_3 && dr_counter == 8'd0 ;

  // register dr_sub_col_10
  assign dr_sub_col_10$D_IN = dr_sboxes_out_10 ;
  assign dr_sub_col_10$EN =
	     MUX_dr_counter$write_1__SEL_3 && dr_counter == 8'd0 ;

  // register dr_sub_col_11
  assign dr_sub_col_11$D_IN = dr_sboxes_out_11 ;
  assign dr_sub_col_11$EN =
	     MUX_dr_counter$write_1__SEL_3 && dr_counter == 8'd0 ;

  // register dr_sub_col_12
  assign dr_sub_col_12$D_IN = dr_sboxes_out_12 ;
  assign dr_sub_col_12$EN =
	     MUX_dr_counter$write_1__SEL_3 && dr_counter == 8'd0 ;

  // register dr_sub_col_13
  assign dr_sub_col_13$D_IN = dr_sboxes_out_13 ;
  assign dr_sub_col_13$EN =
	     MUX_dr_counter$write_1__SEL_3 && dr_counter == 8'd0 ;

  // register dr_sub_col_14
  assign dr_sub_col_14$D_IN = dr_sboxes_out_14 ;
  assign dr_sub_col_14$EN =
	     MUX_dr_counter$write_1__SEL_3 && dr_counter == 8'd0 ;

  // register dr_sub_col_15
  assign dr_sub_col_15$D_IN = dr_sboxes_out_15 ;
  assign dr_sub_col_15$EN =
	     MUX_dr_counter$write_1__SEL_3 && dr_counter == 8'd0 ;

  // register dr_sub_col_2
  assign dr_sub_col_2$D_IN = dr_sboxes_out_2 ;
  assign dr_sub_col_2$EN =
	     MUX_dr_counter$write_1__SEL_3 && dr_counter == 8'd0 ;

  // register dr_sub_col_3
  assign dr_sub_col_3$D_IN = dr_sboxes_out_3 ;
  assign dr_sub_col_3$EN =
	     MUX_dr_counter$write_1__SEL_3 && dr_counter == 8'd0 ;

  // register dr_sub_col_4
  assign dr_sub_col_4$D_IN = dr_sboxes_out_4 ;
  assign dr_sub_col_4$EN =
	     MUX_dr_counter$write_1__SEL_3 && dr_counter == 8'd0 ;

  // register dr_sub_col_5
  assign dr_sub_col_5$D_IN = dr_sboxes_out_5 ;
  assign dr_sub_col_5$EN =
	     MUX_dr_counter$write_1__SEL_3 && dr_counter == 8'd0 ;

  // register dr_sub_col_6
  assign dr_sub_col_6$D_IN = dr_sboxes_out_6 ;
  assign dr_sub_col_6$EN =
	     MUX_dr_counter$write_1__SEL_3 && dr_counter == 8'd0 ;

  // register dr_sub_col_7
  assign dr_sub_col_7$D_IN = dr_sboxes_out_7 ;
  assign dr_sub_col_7$EN =
	     MUX_dr_counter$write_1__SEL_3 && dr_counter == 8'd0 ;

  // register dr_sub_col_8
  assign dr_sub_col_8$D_IN = dr_sboxes_out_8 ;
  assign dr_sub_col_8$EN =
	     MUX_dr_counter$write_1__SEL_3 && dr_counter == 8'd0 ;

  // register dr_sub_col_9
  assign dr_sub_col_9$D_IN = dr_sboxes_out_9 ;
  assign dr_sub_col_9$EN =
	     MUX_dr_counter$write_1__SEL_3 && dr_counter == 8'd0 ;

  // register key
  always@(EN_encrypt or
	  v__h84222 or
	  WILL_FIRE_RL_decrypt_key or
	  MUX_key$write_1__VAL_2 or
	  WILL_FIRE_RL_encode or MUX_key$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      EN_encrypt: key$D_IN = v__h84222;
      WILL_FIRE_RL_decrypt_key: key$D_IN = MUX_key$write_1__VAL_2;
      WILL_FIRE_RL_encode: key$D_IN = MUX_key$write_1__VAL_3;
      default: key$D_IN =
		   128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign key$EN =
	     EN_encrypt || WILL_FIRE_RL_decrypt_key || WILL_FIRE_RL_encode ;

  // register kg_aes256_subcol4
  assign kg_aes256_subcol4$D_IN =
	     MUX_kg_aes256_subcol4$write_1__SEL_1 ?
	       temp_col__h11429 :
	       MUX_kg_aes256_subcol4$write_1__VAL_2 ;
  assign kg_aes256_subcol4$EN =
	     kg_rg_state == 3'd2 && kg_counter == 4'd3 &&
	     kg_key_length == 2'd2 ||
	     kg_rg_state == 3'd4 && _dfoo36 ;

  // register kg_counter
  assign kg_counter$D_IN =
	     MUX_kg_counter$write_1__SEL_1 ?
	       MUX_kg_counter$write_1__VAL_1 :
	       4'd0 ;
  assign kg_counter$EN =
	     kg_rg_state == 3'd4 || kg_rg_state == 3'd2 ||
	     kg_rg_state == 3'd3 ||
	     kg_rg_state == 3'd1 ;

  // register kg_key_length
  assign kg_key_length$D_IN = encrypt_keyylenn ;
  assign kg_key_length$EN = EN_encrypt ;

  // register kg_key_saved
  assign kg_key_saved$D_IN = MUX_kg_key_saved$write_1__SEL_1 ;
  assign kg_key_saved$EN =
	     MUX_kg_key_saved$write_1__SEL_1 ||
	     EN_encrypt &&
	     kg_key_saved_164_AND_NOT_encrypt_keyyy_BITS_12_ETC___d2256 ;

  // register kg_last_col_sub_rot
  always@(kg_counter or x__h11305 or x__h10660 or x__h10875 or x__h11090)
  begin
    case (kg_counter)
      4'd0: kg_last_col_sub_rot$D_IN = x__h10660;
      4'd1: kg_last_col_sub_rot$D_IN = x__h10875;
      4'd2: kg_last_col_sub_rot$D_IN = x__h11090;
      default: kg_last_col_sub_rot$D_IN = x__h11305;
    endcase
  end
  assign kg_last_col_sub_rot$EN =
	     kg_rg_state == 3'd2 &&
	     (kg_counter == 4'd0 || kg_counter == 4'd1 ||
	      kg_counter == 4'd2 ||
	      kg_counter == 4'd3) ;

  // register kg_maxrounds
  always@(encrypt_keyylenn)
  begin
    case (encrypt_keyylenn)
      2'd0: kg_maxrounds$D_IN = 5'd10;
      2'd1: kg_maxrounds$D_IN = 5'd12;
      default: kg_maxrounds$D_IN = 5'd14;
    endcase
  end
  assign kg_maxrounds$EN = MUX_kg_prev_key0$write_1__SEL_2 ;

  // register kg_prev_key0
  assign kg_prev_key0$D_IN =
	     MUX_kg_prev_key0$write_1__SEL_1 ?
	       key0__h12547 :
	       MUX_kg_prev_key0$write_1__VAL_2 ;
  assign kg_prev_key0$EN =
	     kg_rg_state == 3'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 ||
	     EN_encrypt &&
	     (encrypt_keyylenn == 2'd0 || encrypt_keyylenn == 2'd1 ||
	      encrypt_keyylenn == 2'd2) ;

  // register kg_prev_key1
  assign kg_prev_key1$D_IN =
	     MUX_kg_prev_key0$write_1__SEL_1 ?
	       key1__h12548 :
	       MUX_kg_prev_key1$write_1__VAL_2 ;
  assign kg_prev_key1$EN =
	     kg_rg_state == 3'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 ||
	     EN_encrypt &&
	     (encrypt_keyylenn == 2'd0 || encrypt_keyylenn == 2'd1 ||
	      encrypt_keyylenn == 2'd2) ;

  // register kg_prev_key2
  assign kg_prev_key2$D_IN =
	     MUX_kg_prev_key0$write_1__SEL_1 ?
	       key2__h12549 :
	       MUX_kg_prev_key2$write_1__VAL_2 ;
  assign kg_prev_key2$EN =
	     kg_rg_state == 3'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 ||
	     EN_encrypt &&
	     (encrypt_keyylenn == 2'd0 || encrypt_keyylenn == 2'd1 ||
	      encrypt_keyylenn == 2'd2) ;

  // register kg_prev_key3
  assign kg_prev_key3$D_IN =
	     MUX_kg_prev_key0$write_1__SEL_1 ?
	       key3__h12550 :
	       MUX_kg_prev_key3$write_1__VAL_2 ;
  assign kg_prev_key3$EN =
	     kg_rg_state == 3'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 ||
	     EN_encrypt &&
	     (encrypt_keyylenn == 2'd0 || encrypt_keyylenn == 2'd1 ||
	      encrypt_keyylenn == 2'd2) ;

  // register kg_prev_key4
  assign kg_prev_key4$D_IN =
	     MUX_kg_prev_key0$write_1__SEL_1 ?
	       _theResult____h12552 :
	       MUX_kg_prev_key4$write_1__VAL_2 ;
  assign kg_prev_key4$EN =
	     kg_rg_state == 3'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 ||
	     EN_encrypt &&
	     (encrypt_keyylenn == 2'd1 || encrypt_keyylenn == 2'd2) ;

  // register kg_prev_key5
  assign kg_prev_key5$D_IN =
	     MUX_kg_prev_key0$write_1__SEL_1 ?
	       key5__h12553 :
	       MUX_kg_prev_key5$write_1__VAL_2 ;
  assign kg_prev_key5$EN =
	     kg_rg_state == 3'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 ||
	     EN_encrypt &&
	     (encrypt_keyylenn == 2'd1 || encrypt_keyylenn == 2'd2) ;

  // register kg_prev_key6
  assign kg_prev_key6$D_IN =
	     MUX_kg_prev_key0$write_1__SEL_1 ?
	       key6__h12554 :
	       encrypt_keyyy[63:32] ;
  assign kg_prev_key6$EN =
	     kg_rg_state == 3'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 ||
	     EN_encrypt && encrypt_keyylenn == 2'd2 ;

  // register kg_prev_key7
  assign kg_prev_key7$D_IN =
	     MUX_kg_prev_key0$write_1__SEL_1 ?
	       key7__h12555 :
	       encrypt_keyyy[31:0] ;
  assign kg_prev_key7$EN =
	     kg_rg_state == 3'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 ||
	     EN_encrypt && encrypt_keyylenn == 2'd2 ;

  // register kg_rci
  assign kg_rci$D_IN =
	     MUX_kg_rci$write_1__SEL_1 ? MUX_kg_rci$write_1__VAL_1 : 4'd0 ;
  assign kg_rci$EN = kg_rg_state == 3'd2 && kg_counter == 4'd3 || EN_encrypt ;

  // register kg_rcon
  assign kg_rcon$D_IN = { kg_rcongen$read, 24'b0 } ;
  assign kg_rcon$EN = MUX_kg_counter$write_1__SEL_2 ;

  // register kg_rg_state
  always@(MUX_kg_rci$write_1__SEL_1 or
	  MUX_kg_rg_state$write_1__VAL_1 or
	  MUX_kg_rg_state$write_1__SEL_2 or
	  MUX_kg_rg_state$write_1__SEL_3 or
	  MUX_kg_rg_state$write_1__VAL_3 or
	  EN_encrypt or MUX_kg_rg_state$write_1__VAL_4 or kg_rg_state)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_kg_rci$write_1__SEL_1:
	  kg_rg_state$D_IN = MUX_kg_rg_state$write_1__VAL_1;
      MUX_kg_rg_state$write_1__SEL_2: kg_rg_state$D_IN = 3'd3;
      MUX_kg_rg_state$write_1__SEL_3:
	  kg_rg_state$D_IN = MUX_kg_rg_state$write_1__VAL_3;
      EN_encrypt: kg_rg_state$D_IN = MUX_kg_rg_state$write_1__VAL_4;
      kg_rg_state == 3'd1: kg_rg_state$D_IN = 3'd2;
      default: kg_rg_state$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign kg_rg_state$EN =
	     kg_rg_state == 3'd2 && kg_counter == 4'd3 ||
	     kg_rg_state == 3'd4 && kg_counter == 4'd7 ||
	     kg_rg_state == 3'd3 &&
	     (kg_key_length == 2'd0 || kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2 ||
	      !kg_round_number_8_ULE_kg_maxrounds_9___d100) ||
	     EN_encrypt ||
	     kg_rg_state == 3'd1 ;

  // register kg_rot_prev_key
  assign kg_rot_prev_key$D_IN =
	     MUX_kg_rot_prev_key$write_1__SEL_1 ?
	       MUX_kg_rot_prev_key$write_1__VAL_1 :
	       MUX_kg_rot_prev_key$write_1__VAL_2 ;
  assign kg_rot_prev_key$EN =
	     kg_rg_state == 3'd1 &&
	     (kg_key_length == 2'd0 || kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2) ||
	     kg_rg_state == 3'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9_00_AND_kg_ETC___d114 ;

  // register kg_round_key_done_0
  assign kg_round_key_done_0$D_IN = !MUX_kg_round_key_done_0$write_1__SEL_1 ;
  assign kg_round_key_done_0$EN =
	     EN_encrypt &&
	     NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255 ||
	     kg_rg_state == 3'd3 && _dfoo666 ||
	     kg_rg_state == 3'd1 ;

  // register kg_round_key_done_1
  assign kg_round_key_done_1$D_IN = !MUX_kg_round_key_done_0$write_1__SEL_1 ;
  assign kg_round_key_done_1$EN =
	     kg_rg_state == 3'd1 && kg_key_length == 2'd2 ||
	     EN_encrypt &&
	     NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255 ||
	     kg_rg_state == 3'd3 && _dfoo664 ;

  // register kg_round_key_done_10
  assign kg_round_key_done_10$D_IN = !MUX_kg_round_key_done_0$write_1__SEL_1 ;
  assign kg_round_key_done_10$EN =
	     EN_encrypt &&
	     NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255 ||
	     kg_rg_state == 3'd3 && _dfoo646 ;

  // register kg_round_key_done_11
  assign kg_round_key_done_11$D_IN = !MUX_kg_round_key_done_0$write_1__SEL_1 ;
  assign kg_round_key_done_11$EN =
	     EN_encrypt &&
	     NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255 ||
	     kg_rg_state == 3'd3 && _dfoo644 ;

  // register kg_round_key_done_12
  assign kg_round_key_done_12$D_IN = !MUX_kg_round_key_done_0$write_1__SEL_1 ;
  assign kg_round_key_done_12$EN =
	     EN_encrypt &&
	     NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255 ||
	     kg_rg_state == 3'd3 && _dfoo642 ;

  // register kg_round_key_done_13
  assign kg_round_key_done_13$D_IN = !MUX_kg_round_key_done_0$write_1__SEL_1 ;
  assign kg_round_key_done_13$EN =
	     EN_encrypt &&
	     NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255 ||
	     kg_rg_state == 3'd3 && _dfoo640 ;

  // register kg_round_key_done_14
  assign kg_round_key_done_14$D_IN = !MUX_kg_round_key_done_0$write_1__SEL_1 ;
  assign kg_round_key_done_14$EN =
	     EN_encrypt &&
	     NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255 ||
	     kg_rg_state == 3'd3 && _dfoo638 ;

  // register kg_round_key_done_2
  assign kg_round_key_done_2$D_IN = !MUX_kg_round_key_done_0$write_1__SEL_1 ;
  assign kg_round_key_done_2$EN =
	     EN_encrypt &&
	     NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255 ||
	     kg_rg_state == 3'd3 && _dfoo662 ;

  // register kg_round_key_done_3
  assign kg_round_key_done_3$D_IN = !MUX_kg_round_key_done_0$write_1__SEL_1 ;
  assign kg_round_key_done_3$EN =
	     EN_encrypt &&
	     NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255 ||
	     kg_rg_state == 3'd3 && _dfoo660 ;

  // register kg_round_key_done_4
  assign kg_round_key_done_4$D_IN = !MUX_kg_round_key_done_0$write_1__SEL_1 ;
  assign kg_round_key_done_4$EN =
	     EN_encrypt &&
	     NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255 ||
	     kg_rg_state == 3'd3 && _dfoo658 ;

  // register kg_round_key_done_5
  assign kg_round_key_done_5$D_IN = !MUX_kg_round_key_done_0$write_1__SEL_1 ;
  assign kg_round_key_done_5$EN =
	     EN_encrypt &&
	     NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255 ||
	     kg_rg_state == 3'd3 && _dfoo656 ;

  // register kg_round_key_done_6
  assign kg_round_key_done_6$D_IN = !MUX_kg_round_key_done_0$write_1__SEL_1 ;
  assign kg_round_key_done_6$EN =
	     EN_encrypt &&
	     NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255 ||
	     kg_rg_state == 3'd3 && _dfoo654 ;

  // register kg_round_key_done_7
  assign kg_round_key_done_7$D_IN = !MUX_kg_round_key_done_0$write_1__SEL_1 ;
  assign kg_round_key_done_7$EN =
	     EN_encrypt &&
	     NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255 ||
	     kg_rg_state == 3'd3 && _dfoo652 ;

  // register kg_round_key_done_8
  assign kg_round_key_done_8$D_IN = !MUX_kg_round_key_done_0$write_1__SEL_1 ;
  assign kg_round_key_done_8$EN =
	     EN_encrypt &&
	     NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255 ||
	     kg_rg_state == 3'd3 && _dfoo650 ;

  // register kg_round_key_done_9
  assign kg_round_key_done_9$D_IN = !MUX_kg_round_key_done_0$write_1__SEL_1 ;
  assign kg_round_key_done_9$EN =
	     EN_encrypt &&
	     NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255 ||
	     kg_rg_state == 3'd3 && _dfoo648 ;

  // register kg_round_number
  assign kg_round_number$D_IN =
	     MUX_kg_rot_prev_key$write_1__SEL_2 ?
	       MUX_kg_round_number$write_1__VAL_1 :
	       MUX_kg_round_number$write_1__VAL_2 ;
  assign kg_round_number$EN =
	     kg_rg_state == 3'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9_00_AND_kg_ETC___d114 ||
	     EN_encrypt &&
	     (encrypt_keyylenn == 2'd0 || encrypt_keyylenn == 2'd1 ||
	      encrypt_keyylenn == 2'd2) ;

  // register kg_round_toggle_192
  assign kg_round_toggle_192$D_IN =
	     !MUX_kg_round_toggle_192$write_1__SEL_1 && !kg_round_toggle_192 ;
  assign kg_round_toggle_192$EN =
	     kg_rg_state == 3'd1 && kg_key_length == 2'd1 ||
	     kg_rg_state == 3'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 ;

  // register kg_save_key0_0
  assign kg_save_key0_0$D_IN =
	     MUX_kg_save_key0_0$write_1__SEL_1 ?
	       MUX_kg_save_key0_0$write_1__VAL_1 :
	       kg_prev_key0 ;
  assign kg_save_key0_0$EN =
	     kg_rg_state == 3'd3 && _dfoo786 || kg_rg_state == 3'd1 ;

  // register kg_save_key0_1
  assign kg_save_key0_1$D_IN =
	     MUX_kg_save_key0_1$write_1__SEL_1 ?
	       kg_prev_key4 :
	       MUX_kg_save_key0_1$write_1__VAL_2 ;
  assign kg_save_key0_1$EN =
	     kg_rg_state == 3'd1 &&
	     (kg_key_length == 2'd1 || kg_key_length == 2'd2) ||
	     kg_rg_state == 3'd3 && _dfoo784 ;

  // register kg_save_key0_10
  assign kg_save_key0_10$D_IN =
	     (kg_round_number == 5'd10 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key0__h12547 :
	       (kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d192 ?
		  key0__h12547 :
		  _dfoo497) ;
  assign kg_save_key0_10$EN = kg_rg_state == 3'd3 && _dfoo766 ;

  // register kg_save_key0_11
  assign kg_save_key0_11$D_IN =
	     (kg_round_number == 5'd11 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key0__h12547 :
	       (kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d193 ?
		  key0__h12547 :
		  _dfoo495) ;
  assign kg_save_key0_11$EN = kg_rg_state == 3'd3 && _dfoo764 ;

  // register kg_save_key0_12
  assign kg_save_key0_12$D_IN =
	     (kg_round_number == 5'd12 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key0__h12547 :
	       (kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d194 ?
		  key0__h12547 :
		  _dfoo493) ;
  assign kg_save_key0_12$EN = kg_rg_state == 3'd3 && _dfoo762 ;

  // register kg_save_key0_13
  assign kg_save_key0_13$D_IN =
	     (kg_round_number == 5'd13 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key0__h12547 :
	       (kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d195 ?
		  key0__h12547 :
		  _dfoo491) ;
  assign kg_save_key0_13$EN = kg_rg_state == 3'd3 && _dfoo760 ;

  // register kg_save_key0_14
  assign kg_save_key0_14$D_IN =
	     (kg_round_number == 5'd14 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key0__h12547 :
	       (kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d196 ?
		  key0__h12547 :
		  _dfoo489) ;
  assign kg_save_key0_14$EN = kg_rg_state == 3'd3 && _dfoo758 ;

  // register kg_save_key0_2
  assign kg_save_key0_2$D_IN =
	     (kg_round_number == 5'd2 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key0__h12547 :
	       (kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d184 ?
		  key0__h12547 :
		  _dfoo513) ;
  assign kg_save_key0_2$EN = kg_rg_state == 3'd3 && _dfoo782 ;

  // register kg_save_key0_3
  assign kg_save_key0_3$D_IN =
	     (kg_round_number == 5'd3 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key0__h12547 :
	       (kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d185 ?
		  key0__h12547 :
		  _dfoo511) ;
  assign kg_save_key0_3$EN = kg_rg_state == 3'd3 && _dfoo780 ;

  // register kg_save_key0_4
  assign kg_save_key0_4$D_IN =
	     (kg_round_number == 5'd4 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key0__h12547 :
	       (kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d186 ?
		  key0__h12547 :
		  _dfoo509) ;
  assign kg_save_key0_4$EN = kg_rg_state == 3'd3 && _dfoo778 ;

  // register kg_save_key0_5
  assign kg_save_key0_5$D_IN =
	     (kg_round_number == 5'd5 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key0__h12547 :
	       (kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d187 ?
		  key0__h12547 :
		  _dfoo507) ;
  assign kg_save_key0_5$EN = kg_rg_state == 3'd3 && _dfoo776 ;

  // register kg_save_key0_6
  assign kg_save_key0_6$D_IN =
	     (kg_round_number == 5'd6 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key0__h12547 :
	       (kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d188 ?
		  key0__h12547 :
		  _dfoo505) ;
  assign kg_save_key0_6$EN = kg_rg_state == 3'd3 && _dfoo774 ;

  // register kg_save_key0_7
  assign kg_save_key0_7$D_IN =
	     (kg_round_number == 5'd7 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key0__h12547 :
	       (kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d189 ?
		  key0__h12547 :
		  _dfoo503) ;
  assign kg_save_key0_7$EN = kg_rg_state == 3'd3 && _dfoo772 ;

  // register kg_save_key0_8
  assign kg_save_key0_8$D_IN =
	     (kg_round_number == 5'd8 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key0__h12547 :
	       (kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d190 ?
		  key0__h12547 :
		  _dfoo501) ;
  assign kg_save_key0_8$EN = kg_rg_state == 3'd3 && _dfoo770 ;

  // register kg_save_key0_9
  assign kg_save_key0_9$D_IN =
	     (kg_round_number == 5'd9 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key0__h12547 :
	       (kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d191 ?
		  key0__h12547 :
		  _dfoo499) ;
  assign kg_save_key0_9$EN = kg_rg_state == 3'd3 && _dfoo768 ;

  // register kg_save_key1_0
  assign kg_save_key1_0$D_IN =
	     MUX_kg_save_key1_0$write_1__SEL_1 ?
	       MUX_kg_save_key1_0$write_1__VAL_1 :
	       kg_prev_key1 ;
  assign kg_save_key1_0$EN =
	     kg_rg_state == 3'd3 && _dfoo756 || kg_rg_state == 3'd1 ;

  // register kg_save_key1_1
  assign kg_save_key1_1$D_IN =
	     MUX_kg_save_key0_1$write_1__SEL_1 ?
	       kg_prev_key5 :
	       MUX_kg_save_key1_1$write_1__VAL_2 ;
  assign kg_save_key1_1$EN =
	     kg_rg_state == 3'd1 &&
	     (kg_key_length == 2'd1 || kg_key_length == 2'd2) ||
	     kg_rg_state == 3'd3 && _dfoo754 ;

  // register kg_save_key1_10
  assign kg_save_key1_10$D_IN =
	     (kg_round_number == 5'd10 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key1__h12548 :
	       (kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d192 ?
		  key1__h12548 :
		  _dfoo467) ;
  assign kg_save_key1_10$EN = kg_rg_state == 3'd3 && _dfoo736 ;

  // register kg_save_key1_11
  assign kg_save_key1_11$D_IN =
	     (kg_round_number == 5'd11 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key1__h12548 :
	       (kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d193 ?
		  key1__h12548 :
		  _dfoo465) ;
  assign kg_save_key1_11$EN = kg_rg_state == 3'd3 && _dfoo734 ;

  // register kg_save_key1_12
  assign kg_save_key1_12$D_IN =
	     (kg_round_number == 5'd12 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key1__h12548 :
	       (kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d194 ?
		  key1__h12548 :
		  _dfoo463) ;
  assign kg_save_key1_12$EN = kg_rg_state == 3'd3 && _dfoo732 ;

  // register kg_save_key1_13
  assign kg_save_key1_13$D_IN =
	     (kg_round_number == 5'd13 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key1__h12548 :
	       (kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d195 ?
		  key1__h12548 :
		  _dfoo461) ;
  assign kg_save_key1_13$EN = kg_rg_state == 3'd3 && _dfoo730 ;

  // register kg_save_key1_14
  assign kg_save_key1_14$D_IN =
	     (kg_round_number == 5'd14 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key1__h12548 :
	       (kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d196 ?
		  key1__h12548 :
		  _dfoo459) ;
  assign kg_save_key1_14$EN = kg_rg_state == 3'd3 && _dfoo728 ;

  // register kg_save_key1_2
  assign kg_save_key1_2$D_IN =
	     (kg_round_number == 5'd2 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key1__h12548 :
	       (kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d184 ?
		  key1__h12548 :
		  _dfoo483) ;
  assign kg_save_key1_2$EN = kg_rg_state == 3'd3 && _dfoo752 ;

  // register kg_save_key1_3
  assign kg_save_key1_3$D_IN =
	     (kg_round_number == 5'd3 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key1__h12548 :
	       (kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d185 ?
		  key1__h12548 :
		  _dfoo481) ;
  assign kg_save_key1_3$EN = kg_rg_state == 3'd3 && _dfoo750 ;

  // register kg_save_key1_4
  assign kg_save_key1_4$D_IN =
	     (kg_round_number == 5'd4 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key1__h12548 :
	       (kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d186 ?
		  key1__h12548 :
		  _dfoo479) ;
  assign kg_save_key1_4$EN = kg_rg_state == 3'd3 && _dfoo748 ;

  // register kg_save_key1_5
  assign kg_save_key1_5$D_IN =
	     (kg_round_number == 5'd5 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key1__h12548 :
	       (kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d187 ?
		  key1__h12548 :
		  _dfoo477) ;
  assign kg_save_key1_5$EN = kg_rg_state == 3'd3 && _dfoo746 ;

  // register kg_save_key1_6
  assign kg_save_key1_6$D_IN =
	     (kg_round_number == 5'd6 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key1__h12548 :
	       (kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d188 ?
		  key1__h12548 :
		  _dfoo475) ;
  assign kg_save_key1_6$EN = kg_rg_state == 3'd3 && _dfoo744 ;

  // register kg_save_key1_7
  assign kg_save_key1_7$D_IN =
	     (kg_round_number == 5'd7 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key1__h12548 :
	       (kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d189 ?
		  key1__h12548 :
		  _dfoo473) ;
  assign kg_save_key1_7$EN = kg_rg_state == 3'd3 && _dfoo742 ;

  // register kg_save_key1_8
  assign kg_save_key1_8$D_IN =
	     (kg_round_number == 5'd8 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key1__h12548 :
	       (kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d190 ?
		  key1__h12548 :
		  _dfoo471) ;
  assign kg_save_key1_8$EN = kg_rg_state == 3'd3 && _dfoo740 ;

  // register kg_save_key1_9
  assign kg_save_key1_9$D_IN =
	     (kg_round_number == 5'd9 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key1__h12548 :
	       (kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d191 ?
		  key1__h12548 :
		  _dfoo469) ;
  assign kg_save_key1_9$EN = kg_rg_state == 3'd3 && _dfoo738 ;

  // register kg_save_key2_0
  assign kg_save_key2_0$D_IN =
	     MUX_kg_save_key2_0$write_1__SEL_1 ?
	       MUX_kg_save_key2_0$write_1__VAL_1 :
	       kg_prev_key2 ;
  assign kg_save_key2_0$EN =
	     kg_rg_state == 3'd3 && _dfoo726 || kg_rg_state == 3'd1 ;

  // register kg_save_key2_1
  assign kg_save_key2_1$D_IN =
	     MUX_kg_round_key_done_1$write_1__SEL_1 ?
	       kg_prev_key6 :
	       MUX_kg_save_key2_1$write_1__VAL_2 ;
  assign kg_save_key2_1$EN =
	     kg_rg_state == 3'd1 && kg_key_length == 2'd2 ||
	     kg_rg_state == 3'd3 && _dfoo724 ;

  // register kg_save_key2_10
  assign kg_save_key2_10$D_IN =
	     (kg_round_number == 5'd10 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key2__h12549 :
	       (kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d192 ?
		  key2__h12549 :
		  _dfoo407) ;
  assign kg_save_key2_10$EN = kg_rg_state == 3'd3 && _dfoo706 ;

  // register kg_save_key2_11
  assign kg_save_key2_11$D_IN =
	     (kg_round_number == 5'd11 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key2__h12549 :
	       (kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d193 ?
		  key2__h12549 :
		  _dfoo405) ;
  assign kg_save_key2_11$EN = kg_rg_state == 3'd3 && _dfoo704 ;

  // register kg_save_key2_12
  assign kg_save_key2_12$D_IN =
	     (kg_round_number == 5'd12 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key2__h12549 :
	       (kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d194 ?
		  key2__h12549 :
		  _dfoo403) ;
  assign kg_save_key2_12$EN = kg_rg_state == 3'd3 && _dfoo702 ;

  // register kg_save_key2_13
  assign kg_save_key2_13$D_IN =
	     (kg_round_number == 5'd13 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key2__h12549 :
	       (kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d195 ?
		  key2__h12549 :
		  _dfoo401) ;
  assign kg_save_key2_13$EN = kg_rg_state == 3'd3 && _dfoo700 ;

  // register kg_save_key2_14
  assign kg_save_key2_14$D_IN =
	     (kg_round_number == 5'd14 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key2__h12549 :
	       (kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d196 ?
		  key2__h12549 :
		  _dfoo399) ;
  assign kg_save_key2_14$EN = kg_rg_state == 3'd3 && _dfoo698 ;

  // register kg_save_key2_2
  assign kg_save_key2_2$D_IN =
	     (kg_round_number == 5'd2 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key2__h12549 :
	       (kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d184 ?
		  key2__h12549 :
		  _dfoo423) ;
  assign kg_save_key2_2$EN = kg_rg_state == 3'd3 && _dfoo722 ;

  // register kg_save_key2_3
  assign kg_save_key2_3$D_IN =
	     (kg_round_number == 5'd3 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key2__h12549 :
	       (kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d185 ?
		  key2__h12549 :
		  _dfoo421) ;
  assign kg_save_key2_3$EN = kg_rg_state == 3'd3 && _dfoo720 ;

  // register kg_save_key2_4
  assign kg_save_key2_4$D_IN =
	     (kg_round_number == 5'd4 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key2__h12549 :
	       (kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d186 ?
		  key2__h12549 :
		  _dfoo419) ;
  assign kg_save_key2_4$EN = kg_rg_state == 3'd3 && _dfoo718 ;

  // register kg_save_key2_5
  assign kg_save_key2_5$D_IN =
	     (kg_round_number == 5'd5 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key2__h12549 :
	       (kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d187 ?
		  key2__h12549 :
		  _dfoo417) ;
  assign kg_save_key2_5$EN = kg_rg_state == 3'd3 && _dfoo716 ;

  // register kg_save_key2_6
  assign kg_save_key2_6$D_IN =
	     (kg_round_number == 5'd6 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key2__h12549 :
	       (kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d188 ?
		  key2__h12549 :
		  _dfoo415) ;
  assign kg_save_key2_6$EN = kg_rg_state == 3'd3 && _dfoo714 ;

  // register kg_save_key2_7
  assign kg_save_key2_7$D_IN =
	     (kg_round_number == 5'd7 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key2__h12549 :
	       (kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d189 ?
		  key2__h12549 :
		  _dfoo413) ;
  assign kg_save_key2_7$EN = kg_rg_state == 3'd3 && _dfoo712 ;

  // register kg_save_key2_8
  assign kg_save_key2_8$D_IN =
	     (kg_round_number == 5'd8 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key2__h12549 :
	       (kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d190 ?
		  key2__h12549 :
		  _dfoo411) ;
  assign kg_save_key2_8$EN = kg_rg_state == 3'd3 && _dfoo710 ;

  // register kg_save_key2_9
  assign kg_save_key2_9$D_IN =
	     (kg_round_number == 5'd9 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key2__h12549 :
	       (kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d191 ?
		  key2__h12549 :
		  _dfoo409) ;
  assign kg_save_key2_9$EN = kg_rg_state == 3'd3 && _dfoo708 ;

  // register kg_save_key3_0
  assign kg_save_key3_0$D_IN =
	     MUX_kg_save_key3_0$write_1__SEL_1 ?
	       MUX_kg_save_key3_0$write_1__VAL_1 :
	       kg_prev_key3 ;
  assign kg_save_key3_0$EN =
	     kg_rg_state == 3'd3 && _dfoo696 || kg_rg_state == 3'd1 ;

  // register kg_save_key3_1
  assign kg_save_key3_1$D_IN =
	     MUX_kg_round_key_done_1$write_1__SEL_1 ?
	       kg_prev_key7 :
	       MUX_kg_save_key3_1$write_1__VAL_2 ;
  assign kg_save_key3_1$EN =
	     kg_rg_state == 3'd1 && kg_key_length == 2'd2 ||
	     kg_rg_state == 3'd3 && _dfoo694 ;

  // register kg_save_key3_10
  assign kg_save_key3_10$D_IN =
	     (kg_round_number == 5'd10 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key3__h12550 :
	       (kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d192 ?
		  key3__h12550 :
		  _dfoo377) ;
  assign kg_save_key3_10$EN = kg_rg_state == 3'd3 && _dfoo676 ;

  // register kg_save_key3_11
  assign kg_save_key3_11$D_IN =
	     (kg_round_number == 5'd11 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key3__h12550 :
	       (kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d193 ?
		  key3__h12550 :
		  _dfoo375) ;
  assign kg_save_key3_11$EN = kg_rg_state == 3'd3 && _dfoo674 ;

  // register kg_save_key3_12
  assign kg_save_key3_12$D_IN =
	     (kg_round_number == 5'd12 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key3__h12550 :
	       (kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d194 ?
		  key3__h12550 :
		  _dfoo373) ;
  assign kg_save_key3_12$EN = kg_rg_state == 3'd3 && _dfoo672 ;

  // register kg_save_key3_13
  assign kg_save_key3_13$D_IN =
	     (kg_round_number == 5'd13 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key3__h12550 :
	       (kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d195 ?
		  key3__h12550 :
		  _dfoo371) ;
  assign kg_save_key3_13$EN = kg_rg_state == 3'd3 && _dfoo670 ;

  // register kg_save_key3_14
  assign kg_save_key3_14$D_IN =
	     (kg_round_number == 5'd14 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key3__h12550 :
	       (kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d196 ?
		  key3__h12550 :
		  _dfoo369) ;
  assign kg_save_key3_14$EN = kg_rg_state == 3'd3 && _dfoo668 ;

  // register kg_save_key3_2
  assign kg_save_key3_2$D_IN =
	     (kg_round_number == 5'd2 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key3__h12550 :
	       (kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d184 ?
		  key3__h12550 :
		  _dfoo393) ;
  assign kg_save_key3_2$EN = kg_rg_state == 3'd3 && _dfoo692 ;

  // register kg_save_key3_3
  assign kg_save_key3_3$D_IN =
	     (kg_round_number == 5'd3 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key3__h12550 :
	       (kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d185 ?
		  key3__h12550 :
		  _dfoo391) ;
  assign kg_save_key3_3$EN = kg_rg_state == 3'd3 && _dfoo690 ;

  // register kg_save_key3_4
  assign kg_save_key3_4$D_IN =
	     (kg_round_number == 5'd4 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key3__h12550 :
	       (kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d186 ?
		  key3__h12550 :
		  _dfoo389) ;
  assign kg_save_key3_4$EN = kg_rg_state == 3'd3 && _dfoo688 ;

  // register kg_save_key3_5
  assign kg_save_key3_5$D_IN =
	     (kg_round_number == 5'd5 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key3__h12550 :
	       (kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d187 ?
		  key3__h12550 :
		  _dfoo387) ;
  assign kg_save_key3_5$EN = kg_rg_state == 3'd3 && _dfoo686 ;

  // register kg_save_key3_6
  assign kg_save_key3_6$D_IN =
	     (kg_round_number == 5'd6 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key3__h12550 :
	       (kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d188 ?
		  key3__h12550 :
		  _dfoo385) ;
  assign kg_save_key3_6$EN = kg_rg_state == 3'd3 && _dfoo684 ;

  // register kg_save_key3_7
  assign kg_save_key3_7$D_IN =
	     (kg_round_number == 5'd7 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key3__h12550 :
	       (kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d189 ?
		  key3__h12550 :
		  _dfoo383) ;
  assign kg_save_key3_7$EN = kg_rg_state == 3'd3 && _dfoo682 ;

  // register kg_save_key3_8
  assign kg_save_key3_8$D_IN =
	     (kg_round_number == 5'd8 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key3__h12550 :
	       (kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d190 ?
		  key3__h12550 :
		  _dfoo381) ;
  assign kg_save_key3_8$EN = kg_rg_state == 3'd3 && _dfoo680 ;

  // register kg_save_key3_9
  assign kg_save_key3_9$D_IN =
	     (kg_round_number == 5'd9 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd0) ?
	       key3__h12550 :
	       (kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d191 ?
		  key3__h12550 :
		  _dfoo379) ;
  assign kg_save_key3_9$EN = kg_rg_state == 3'd3 && _dfoo678 ;

  // register kg_sbox_out
  assign kg_sbox_out$D_IN =
	     (MUX_kg_rot_prev_key$write_1__SEL_1 ||
	      MUX_kg_rot_prev_key$write_1__SEL_2 ||
	      MUX_kg_sbox_out$write_1__SEL_4) ?
	       sboxes_0$getbyte :
	       MUX_kg_sbox_out$write_1__VAL_3 ;
  assign kg_sbox_out$EN =
	     kg_rg_state == 3'd1 &&
	     (kg_key_length == 2'd0 || kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2) ||
	     kg_rg_state == 3'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9_00_AND_kg_ETC___d114 ||
	     kg_rg_state == 3'd2 && _dfoo15 ||
	     kg_rg_state == 3'd4 && _dfoo31 ;

  // register maxround
  always@(encrypt_keyylenn)
  begin
    case (encrypt_keyylenn)
      2'd0: maxround$D_IN = 4'd10;
      2'd1: maxround$D_IN = 4'd12;
      default: maxround$D_IN = 4'd14;
    endcase
  end
  assign maxround$EN = MUX_kg_prev_key0$write_1__SEL_2 ;

  // register new_round
  assign new_round$D_IN = 1'b0 ;
  assign new_round$EN = 1'b0 ;

  // register plaintext
  assign plaintext$D_IN = encrypt_plaintexttt ;
  assign plaintext$EN = EN_encrypt ;

  // register rg_state
  always@(MUX_rg_state$write_1__SEL_1 or
	  EN_encrypt or
	  MUX_rg_state$write_1__VAL_2 or
	  EN_ret or WILL_FIRE_RL_initial_xor or WILL_FIRE_RL_decrypt_key)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_state$write_1__SEL_1: rg_state$D_IN = 3'd2;
      EN_encrypt: rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      EN_ret: rg_state$D_IN = 3'd0;
      WILL_FIRE_RL_initial_xor: rg_state$D_IN = 3'd1;
      WILL_FIRE_RL_decrypt_key: rg_state$D_IN = 3'd3;
      default: rg_state$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     (WILL_FIRE_RL_done_encoding_decrypt ||
	      WILL_FIRE_RL_done_encoding) &&
	     counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt ||
	     EN_ret ||
	     WILL_FIRE_RL_initial_xor ||
	     WILL_FIRE_RL_decrypt_key ;

  // submodule kg_rcongen
  assign kg_rcongen$read_addr = kg_rci ;

  // submodule sboxes_0
  always@(MUX_kg_rot_prev_key$write_1__SEL_1 or
	  MUX_sboxes_0$getbyte_1__VAL_1 or
	  MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  col3 or
	  MUX_kg_rot_prev_key$write_1__SEL_2 or
	  MUX_sboxes_0$getbyte_1__VAL_3 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  dr_colout3 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87680 or
	  MUX_sboxes_0$getbyte_1__SEL_6 or
	  MUX_sboxes_0$getbyte_1__VAL_6 or
	  MUX_sboxes_0$getbyte_1__SEL_7 or
	  MUX_sboxes_0$getbyte_1__VAL_7 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or MUX_dr_col__0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_kg_rot_prev_key$write_1__SEL_1:
	  sboxes_0$getbyte_byte_in = MUX_sboxes_0$getbyte_1__VAL_1;
      MUX_dr_sboxes_out_0$write_1__SEL_1:
	  sboxes_0$getbyte_byte_in = col3[7:0];
      MUX_kg_rot_prev_key$write_1__SEL_2:
	  sboxes_0$getbyte_byte_in = MUX_sboxes_0$getbyte_1__VAL_3;
      MUX_dr_last_round$write_1__SEL_1:
	  sboxes_0$getbyte_byte_in = dr_colout3[7:0];
      MUX_dr_col__0$write_1__SEL_2: sboxes_0$getbyte_byte_in = x__h87680[7:0];
      MUX_sboxes_0$getbyte_1__SEL_6:
	  sboxes_0$getbyte_byte_in = MUX_sboxes_0$getbyte_1__VAL_6;
      MUX_sboxes_0$getbyte_1__SEL_7:
	  sboxes_0$getbyte_byte_in = MUX_sboxes_0$getbyte_1__VAL_7;
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  sboxes_0$getbyte_byte_in = MUX_dr_col__0$write_1__VAL_3;
      default: sboxes_0$getbyte_byte_in =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  decrypt or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  dr_decrypt or
	  MUX_dr_col__0$write_1__SEL_2 or
	  encrypt_decrypttt or
	  MUX_sboxes_0$getbyte_1__SEL_6 or
	  MUX_sboxes_0$getbyte_2__VAL_6 or
	  MUX_kg_rot_prev_key$write_1__SEL_1 or
	  MUX_kg_rot_prev_key$write_1__SEL_2 or MUX_sboxes_0$getbyte_1__SEL_7)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1 || MUX_dr_last_round$write_1__SEL_1:
	  sboxes_0$getbyte_decrypt_ = decrypt;
      WILL_FIRE_RL_dr_mixColsDecrypt: sboxes_0$getbyte_decrypt_ = dr_decrypt;
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_0$getbyte_decrypt_ = encrypt_decrypttt;
      MUX_sboxes_0$getbyte_1__SEL_6:
	  sboxes_0$getbyte_decrypt_ = MUX_sboxes_0$getbyte_2__VAL_6;
      MUX_kg_rot_prev_key$write_1__SEL_1 ||
      MUX_kg_rot_prev_key$write_1__SEL_2 ||
      MUX_sboxes_0$getbyte_1__SEL_7:
	  sboxes_0$getbyte_decrypt_ = 1'd0;
      default: sboxes_0$getbyte_decrypt_ = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign sboxes_0$EN_getbyte =
	     kg_rg_state == 3'd1 &&
	     (kg_key_length == 2'd0 || kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2) ||
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     kg_rg_state == 3'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9_00_AND_kg_ETC___d114 ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     kg_rg_state == 3'd2 && _dfoo15 ||
	     kg_rg_state == 3'd4 && _dfoo31 ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // submodule sboxes_1
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  col3 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  dr_colout3 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87680 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or MUX_dr_col__1$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1:
	  sboxes_1$getbyte_byte_in = col3[15:8];
      MUX_dr_last_round$write_1__SEL_1:
	  sboxes_1$getbyte_byte_in = dr_colout3[15:8];
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_1$getbyte_byte_in = x__h87680[15:8];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  sboxes_1$getbyte_byte_in = MUX_dr_col__1$write_1__VAL_3;
      default: sboxes_1$getbyte_byte_in =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  decrypt or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  dr_decrypt or MUX_dr_col__0$write_1__SEL_2 or encrypt_decrypttt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1 || MUX_dr_last_round$write_1__SEL_1:
	  sboxes_1$getbyte_decrypt_ = decrypt;
      WILL_FIRE_RL_dr_mixColsDecrypt: sboxes_1$getbyte_decrypt_ = dr_decrypt;
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_1$getbyte_decrypt_ = encrypt_decrypttt;
      default: sboxes_1$getbyte_decrypt_ = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign sboxes_1$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // submodule sboxes_10
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  col1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  dr_colout1 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87607 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or MUX_dr_col__10$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1:
	  sboxes_10$getbyte_byte_in = col1[23:16];
      MUX_dr_last_round$write_1__SEL_1:
	  sboxes_10$getbyte_byte_in = dr_colout1[23:16];
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_10$getbyte_byte_in = x__h87607[23:16];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  sboxes_10$getbyte_byte_in = MUX_dr_col__10$write_1__VAL_3;
      default: sboxes_10$getbyte_byte_in =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  decrypt or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  dr_decrypt or MUX_dr_col__0$write_1__SEL_2 or encrypt_decrypttt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1 || MUX_dr_last_round$write_1__SEL_1:
	  sboxes_10$getbyte_decrypt_ = decrypt;
      WILL_FIRE_RL_dr_mixColsDecrypt: sboxes_10$getbyte_decrypt_ = dr_decrypt;
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_10$getbyte_decrypt_ = encrypt_decrypttt;
      default: sboxes_10$getbyte_decrypt_ = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign sboxes_10$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // submodule sboxes_11
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  col1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  dr_colout1 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87607 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or MUX_dr_col__11$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1:
	  sboxes_11$getbyte_byte_in = col1[31:24];
      MUX_dr_last_round$write_1__SEL_1:
	  sboxes_11$getbyte_byte_in = dr_colout1[31:24];
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_11$getbyte_byte_in = x__h87607[31:24];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  sboxes_11$getbyte_byte_in = MUX_dr_col__11$write_1__VAL_3;
      default: sboxes_11$getbyte_byte_in =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  decrypt or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  dr_decrypt or MUX_dr_col__0$write_1__SEL_2 or encrypt_decrypttt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1 || MUX_dr_last_round$write_1__SEL_1:
	  sboxes_11$getbyte_decrypt_ = decrypt;
      WILL_FIRE_RL_dr_mixColsDecrypt: sboxes_11$getbyte_decrypt_ = dr_decrypt;
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_11$getbyte_decrypt_ = encrypt_decrypttt;
      default: sboxes_11$getbyte_decrypt_ = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign sboxes_11$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // submodule sboxes_12
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  col0 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  dr_colout0 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87451 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or MUX_dr_col__12$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1:
	  sboxes_12$getbyte_byte_in = col0[7:0];
      MUX_dr_last_round$write_1__SEL_1:
	  sboxes_12$getbyte_byte_in = dr_colout0[7:0];
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_12$getbyte_byte_in = x__h87451[7:0];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  sboxes_12$getbyte_byte_in = MUX_dr_col__12$write_1__VAL_3;
      default: sboxes_12$getbyte_byte_in =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  decrypt or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  dr_decrypt or MUX_dr_col__0$write_1__SEL_2 or encrypt_decrypttt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1 || MUX_dr_last_round$write_1__SEL_1:
	  sboxes_12$getbyte_decrypt_ = decrypt;
      WILL_FIRE_RL_dr_mixColsDecrypt: sboxes_12$getbyte_decrypt_ = dr_decrypt;
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_12$getbyte_decrypt_ = encrypt_decrypttt;
      default: sboxes_12$getbyte_decrypt_ = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign sboxes_12$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // submodule sboxes_13
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  col0 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  dr_colout0 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87451 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or MUX_dr_col__13$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1:
	  sboxes_13$getbyte_byte_in = col0[15:8];
      MUX_dr_last_round$write_1__SEL_1:
	  sboxes_13$getbyte_byte_in = dr_colout0[15:8];
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_13$getbyte_byte_in = x__h87451[15:8];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  sboxes_13$getbyte_byte_in = MUX_dr_col__13$write_1__VAL_3;
      default: sboxes_13$getbyte_byte_in =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  decrypt or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  dr_decrypt or MUX_dr_col__0$write_1__SEL_2 or encrypt_decrypttt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1 || MUX_dr_last_round$write_1__SEL_1:
	  sboxes_13$getbyte_decrypt_ = decrypt;
      WILL_FIRE_RL_dr_mixColsDecrypt: sboxes_13$getbyte_decrypt_ = dr_decrypt;
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_13$getbyte_decrypt_ = encrypt_decrypttt;
      default: sboxes_13$getbyte_decrypt_ = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign sboxes_13$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // submodule sboxes_14
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  col0 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  dr_colout0 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87451 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or MUX_dr_col__14$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1:
	  sboxes_14$getbyte_byte_in = col0[23:16];
      MUX_dr_last_round$write_1__SEL_1:
	  sboxes_14$getbyte_byte_in = dr_colout0[23:16];
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_14$getbyte_byte_in = x__h87451[23:16];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  sboxes_14$getbyte_byte_in = MUX_dr_col__14$write_1__VAL_3;
      default: sboxes_14$getbyte_byte_in =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  decrypt or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  dr_decrypt or MUX_dr_col__0$write_1__SEL_2 or encrypt_decrypttt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1 || MUX_dr_last_round$write_1__SEL_1:
	  sboxes_14$getbyte_decrypt_ = decrypt;
      WILL_FIRE_RL_dr_mixColsDecrypt: sboxes_14$getbyte_decrypt_ = dr_decrypt;
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_14$getbyte_decrypt_ = encrypt_decrypttt;
      default: sboxes_14$getbyte_decrypt_ = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign sboxes_14$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // submodule sboxes_15
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  col0 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  dr_colout0 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87451 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or MUX_dr_col__15$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1:
	  sboxes_15$getbyte_byte_in = col0[31:24];
      MUX_dr_last_round$write_1__SEL_1:
	  sboxes_15$getbyte_byte_in = dr_colout0[31:24];
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_15$getbyte_byte_in = x__h87451[31:24];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  sboxes_15$getbyte_byte_in = MUX_dr_col__15$write_1__VAL_3;
      default: sboxes_15$getbyte_byte_in =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  decrypt or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  dr_decrypt or MUX_dr_col__0$write_1__SEL_2 or encrypt_decrypttt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1 || MUX_dr_last_round$write_1__SEL_1:
	  sboxes_15$getbyte_decrypt_ = decrypt;
      WILL_FIRE_RL_dr_mixColsDecrypt: sboxes_15$getbyte_decrypt_ = dr_decrypt;
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_15$getbyte_decrypt_ = encrypt_decrypttt;
      default: sboxes_15$getbyte_decrypt_ = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign sboxes_15$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // submodule sboxes_2
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  col3 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  dr_colout3 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87680 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or MUX_dr_col__2$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1:
	  sboxes_2$getbyte_byte_in = col3[23:16];
      MUX_dr_last_round$write_1__SEL_1:
	  sboxes_2$getbyte_byte_in = dr_colout3[23:16];
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_2$getbyte_byte_in = x__h87680[23:16];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  sboxes_2$getbyte_byte_in = MUX_dr_col__2$write_1__VAL_3;
      default: sboxes_2$getbyte_byte_in =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  decrypt or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  dr_decrypt or MUX_dr_col__0$write_1__SEL_2 or encrypt_decrypttt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1 || MUX_dr_last_round$write_1__SEL_1:
	  sboxes_2$getbyte_decrypt_ = decrypt;
      WILL_FIRE_RL_dr_mixColsDecrypt: sboxes_2$getbyte_decrypt_ = dr_decrypt;
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_2$getbyte_decrypt_ = encrypt_decrypttt;
      default: sboxes_2$getbyte_decrypt_ = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign sboxes_2$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // submodule sboxes_3
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  col3 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  dr_colout3 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87680 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or MUX_dr_col__3$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1:
	  sboxes_3$getbyte_byte_in = col3[31:24];
      MUX_dr_last_round$write_1__SEL_1:
	  sboxes_3$getbyte_byte_in = dr_colout3[31:24];
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_3$getbyte_byte_in = x__h87680[31:24];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  sboxes_3$getbyte_byte_in = MUX_dr_col__3$write_1__VAL_3;
      default: sboxes_3$getbyte_byte_in =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  decrypt or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  dr_decrypt or MUX_dr_col__0$write_1__SEL_2 or encrypt_decrypttt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1 || MUX_dr_last_round$write_1__SEL_1:
	  sboxes_3$getbyte_decrypt_ = decrypt;
      WILL_FIRE_RL_dr_mixColsDecrypt: sboxes_3$getbyte_decrypt_ = dr_decrypt;
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_3$getbyte_decrypt_ = encrypt_decrypttt;
      default: sboxes_3$getbyte_decrypt_ = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign sboxes_3$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // submodule sboxes_4
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  col2 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  dr_colout2 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87534 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or MUX_dr_col__4$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1:
	  sboxes_4$getbyte_byte_in = col2[7:0];
      MUX_dr_last_round$write_1__SEL_1:
	  sboxes_4$getbyte_byte_in = dr_colout2[7:0];
      MUX_dr_col__0$write_1__SEL_2: sboxes_4$getbyte_byte_in = x__h87534[7:0];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  sboxes_4$getbyte_byte_in = MUX_dr_col__4$write_1__VAL_3;
      default: sboxes_4$getbyte_byte_in =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  decrypt or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  dr_decrypt or MUX_dr_col__0$write_1__SEL_2 or encrypt_decrypttt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1 || MUX_dr_last_round$write_1__SEL_1:
	  sboxes_4$getbyte_decrypt_ = decrypt;
      WILL_FIRE_RL_dr_mixColsDecrypt: sboxes_4$getbyte_decrypt_ = dr_decrypt;
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_4$getbyte_decrypt_ = encrypt_decrypttt;
      default: sboxes_4$getbyte_decrypt_ = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign sboxes_4$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // submodule sboxes_5
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  col2 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  dr_colout2 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87534 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or MUX_dr_col__5$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1:
	  sboxes_5$getbyte_byte_in = col2[15:8];
      MUX_dr_last_round$write_1__SEL_1:
	  sboxes_5$getbyte_byte_in = dr_colout2[15:8];
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_5$getbyte_byte_in = x__h87534[15:8];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  sboxes_5$getbyte_byte_in = MUX_dr_col__5$write_1__VAL_3;
      default: sboxes_5$getbyte_byte_in =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  decrypt or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  dr_decrypt or MUX_dr_col__0$write_1__SEL_2 or encrypt_decrypttt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1 || MUX_dr_last_round$write_1__SEL_1:
	  sboxes_5$getbyte_decrypt_ = decrypt;
      WILL_FIRE_RL_dr_mixColsDecrypt: sboxes_5$getbyte_decrypt_ = dr_decrypt;
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_5$getbyte_decrypt_ = encrypt_decrypttt;
      default: sboxes_5$getbyte_decrypt_ = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign sboxes_5$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // submodule sboxes_6
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  col2 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  dr_colout2 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87534 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or MUX_dr_col__6$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1:
	  sboxes_6$getbyte_byte_in = col2[23:16];
      MUX_dr_last_round$write_1__SEL_1:
	  sboxes_6$getbyte_byte_in = dr_colout2[23:16];
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_6$getbyte_byte_in = x__h87534[23:16];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  sboxes_6$getbyte_byte_in = MUX_dr_col__6$write_1__VAL_3;
      default: sboxes_6$getbyte_byte_in =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  decrypt or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  dr_decrypt or MUX_dr_col__0$write_1__SEL_2 or encrypt_decrypttt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1 || MUX_dr_last_round$write_1__SEL_1:
	  sboxes_6$getbyte_decrypt_ = decrypt;
      WILL_FIRE_RL_dr_mixColsDecrypt: sboxes_6$getbyte_decrypt_ = dr_decrypt;
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_6$getbyte_decrypt_ = encrypt_decrypttt;
      default: sboxes_6$getbyte_decrypt_ = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign sboxes_6$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // submodule sboxes_7
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  col2 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  dr_colout2 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87534 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or MUX_dr_col__7$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1:
	  sboxes_7$getbyte_byte_in = col2[31:24];
      MUX_dr_last_round$write_1__SEL_1:
	  sboxes_7$getbyte_byte_in = dr_colout2[31:24];
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_7$getbyte_byte_in = x__h87534[31:24];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  sboxes_7$getbyte_byte_in = MUX_dr_col__7$write_1__VAL_3;
      default: sboxes_7$getbyte_byte_in =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  decrypt or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  dr_decrypt or MUX_dr_col__0$write_1__SEL_2 or encrypt_decrypttt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1 || MUX_dr_last_round$write_1__SEL_1:
	  sboxes_7$getbyte_decrypt_ = decrypt;
      WILL_FIRE_RL_dr_mixColsDecrypt: sboxes_7$getbyte_decrypt_ = dr_decrypt;
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_7$getbyte_decrypt_ = encrypt_decrypttt;
      default: sboxes_7$getbyte_decrypt_ = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign sboxes_7$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // submodule sboxes_8
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  col1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  dr_colout1 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87607 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or MUX_dr_col__8$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1:
	  sboxes_8$getbyte_byte_in = col1[7:0];
      MUX_dr_last_round$write_1__SEL_1:
	  sboxes_8$getbyte_byte_in = dr_colout1[7:0];
      MUX_dr_col__0$write_1__SEL_2: sboxes_8$getbyte_byte_in = x__h87607[7:0];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  sboxes_8$getbyte_byte_in = MUX_dr_col__8$write_1__VAL_3;
      default: sboxes_8$getbyte_byte_in =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  decrypt or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  dr_decrypt or MUX_dr_col__0$write_1__SEL_2 or encrypt_decrypttt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1 || MUX_dr_last_round$write_1__SEL_1:
	  sboxes_8$getbyte_decrypt_ = decrypt;
      WILL_FIRE_RL_dr_mixColsDecrypt: sboxes_8$getbyte_decrypt_ = dr_decrypt;
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_8$getbyte_decrypt_ = encrypt_decrypttt;
      default: sboxes_8$getbyte_decrypt_ = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign sboxes_8$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // submodule sboxes_9
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  col1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  dr_colout1 or
	  MUX_dr_col__0$write_1__SEL_2 or
	  x__h87607 or
	  WILL_FIRE_RL_dr_mixColsDecrypt or MUX_dr_col__9$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1:
	  sboxes_9$getbyte_byte_in = col1[15:8];
      MUX_dr_last_round$write_1__SEL_1:
	  sboxes_9$getbyte_byte_in = dr_colout1[15:8];
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_9$getbyte_byte_in = x__h87607[15:8];
      WILL_FIRE_RL_dr_mixColsDecrypt:
	  sboxes_9$getbyte_byte_in = MUX_dr_col__9$write_1__VAL_3;
      default: sboxes_9$getbyte_byte_in =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_dr_sboxes_out_0$write_1__SEL_1 or
	  MUX_dr_last_round$write_1__SEL_1 or
	  decrypt or
	  WILL_FIRE_RL_dr_mixColsDecrypt or
	  dr_decrypt or MUX_dr_col__0$write_1__SEL_2 or encrypt_decrypttt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dr_sboxes_out_0$write_1__SEL_1 || MUX_dr_last_round$write_1__SEL_1:
	  sboxes_9$getbyte_decrypt_ = decrypt;
      WILL_FIRE_RL_dr_mixColsDecrypt: sboxes_9$getbyte_decrypt_ = dr_decrypt;
      MUX_dr_col__0$write_1__SEL_2:
	  sboxes_9$getbyte_decrypt_ = encrypt_decrypttt;
      default: sboxes_9$getbyte_decrypt_ = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign sboxes_9$EN_getbyte =
	     WILL_FIRE_RL_initial_xor && !decrypt ||
	     WILL_FIRE_RL_done_encoding &&
	     !counter_108_EQ_maxround_969___d2122 ||
	     EN_encrypt && !encrypt_decrypttt ||
	     WILL_FIRE_RL_dr_mixColsDecrypt ;

  // remaining internal signals
  assign IF_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_save_ETC___d2211 =
	     (encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_save_ke_ETC___d2166 &&
	      encrypt_keyyy_BITS_95_TO_64_167_EQ_kg_save_key_ETC___d2168 &&
	      encrypt_keyyy_BITS_63_TO_32_170_EQ_kg_save_key_ETC___d2171 &&
	      encrypt_keyyy_BITS_31_TO_0_173_EQ_kg_save_key3_ETC___d2174 &&
	      encrypt_keyylenn == 2'd0 ||
	      encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_save_k_ETC___d2190 ||
	      encrypt_keyyy_BITS_255_TO_224_191_EQ_kg_save_k_ETC___d2205 &&
	      encrypt_keyyy_BITS_31_TO_0_173_EQ_kg_save_key3_ETC___d2206 &&
	      encrypt_keyylenn == 2'd2) ?
	       3'd0 :
	       3'd1 ;
  assign NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2219 =
	     !encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_save_ke_ETC___d2166 ||
	     !encrypt_keyyy_BITS_95_TO_64_167_EQ_kg_save_key_ETC___d2168 ||
	     !encrypt_keyyy_BITS_63_TO_32_170_EQ_kg_save_key_ETC___d2171 ||
	     !encrypt_keyyy_BITS_31_TO_0_173_EQ_kg_save_key3_ETC___d2174 ;
  assign NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2255 =
	     (NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2219 ||
	      encrypt_keyylenn != 2'd0) &&
	     NOT_encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_sa_ETC___d2252 ||
	     !kg_key_saved ;
  assign NOT_encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_sa_ETC___d2234 =
	     !encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_save_k_ETC___d2178 ||
	     !encrypt_keyyy_BITS_159_TO_128_179_EQ_kg_save_k_ETC___d2180 ||
	     !encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_save_ke_ETC___d2182 ||
	     !encrypt_keyyy_BITS_95_TO_64_167_EQ_kg_save_key_ETC___d2184 ||
	     !encrypt_keyyy_BITS_63_TO_32_170_EQ_kg_save_key_ETC___d2186 ||
	     !encrypt_keyyy_BITS_31_TO_0_173_EQ_kg_save_key1_ETC___d2188 ||
	     encrypt_keyylenn != 2'd1 ;
  assign NOT_encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_sa_ETC___d2252 =
	     NOT_encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_sa_ETC___d2234 &&
	     (NOT_encrypt_keyyy_BITS_255_TO_224_191_EQ_kg_sa_ETC___d2247 ||
	      !encrypt_keyyy_BITS_31_TO_0_173_EQ_kg_save_key3_ETC___d2206 ||
	      encrypt_keyylenn != 2'd2) ;
  assign NOT_encrypt_keyyy_BITS_255_TO_224_191_EQ_kg_sa_ETC___d2247 =
	     !encrypt_keyyy_BITS_255_TO_224_191_EQ_kg_save_k_ETC___d2192 ||
	     !encrypt_keyyy_BITS_223_TO_192_193_EQ_kg_save_k_ETC___d2194 ||
	     !encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_save_k_ETC___d2196 ||
	     !encrypt_keyyy_BITS_159_TO_128_179_EQ_kg_save_k_ETC___d2198 ||
	     !encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_save_ke_ETC___d2200 ||
	     !encrypt_keyyy_BITS_95_TO_64_167_EQ_kg_save_key_ETC___d2202 ||
	     !encrypt_keyyy_BITS_63_TO_32_170_EQ_kg_save_key_ETC___d2204 ;
  assign _dfoo101 =
	     (kg_round_number == 5'd13 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key2__h12549 :
	       key6__h12554 ;
  assign _dfoo103 =
	     (kg_round_number == 5'd12 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key2__h12549 :
	       key6__h12554 ;
  assign _dfoo105 =
	     (kg_round_number == 5'd11 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key2__h12549 :
	       key6__h12554 ;
  assign _dfoo107 =
	     (kg_round_number == 5'd10 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key2__h12549 :
	       key6__h12554 ;
  assign _dfoo109 =
	     (kg_round_number == 5'd9 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key2__h12549 :
	       key6__h12554 ;
  assign _dfoo111 =
	     (kg_round_number == 5'd8 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key2__h12549 :
	       key6__h12554 ;
  assign _dfoo113 =
	     (kg_round_number == 5'd7 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key2__h12549 :
	       key6__h12554 ;
  assign _dfoo115 =
	     (kg_round_number == 5'd6 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key2__h12549 :
	       key6__h12554 ;
  assign _dfoo117 =
	     (kg_round_number == 5'd5 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key2__h12549 :
	       key6__h12554 ;
  assign _dfoo119 =
	     (kg_round_number == 5'd4 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key2__h12549 :
	       key6__h12554 ;
  assign _dfoo121 =
	     (kg_round_number == 5'd3 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key2__h12549 :
	       key6__h12554 ;
  assign _dfoo123 =
	     (kg_round_number == 5'd2 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key2__h12549 :
	       key6__h12554 ;
  assign _dfoo125 =
	     (kg_round_number == 5'd1 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key2__h12549 :
	       key6__h12554 ;
  assign _dfoo127 =
	     (kg_round_number == 5'd0 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key2__h12549 :
	       key6__h12554 ;
  assign _dfoo129 =
	     (kg_round_number == 5'd14 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key1__h12548 :
	       key5__h12553 ;
  assign _dfoo131 =
	     (kg_round_number == 5'd13 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key1__h12548 :
	       key5__h12553 ;
  assign _dfoo133 =
	     (kg_round_number == 5'd12 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key1__h12548 :
	       key5__h12553 ;
  assign _dfoo135 =
	     (kg_round_number == 5'd11 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key1__h12548 :
	       key5__h12553 ;
  assign _dfoo137 =
	     (kg_round_number == 5'd10 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key1__h12548 :
	       key5__h12553 ;
  assign _dfoo139 =
	     (kg_round_number == 5'd9 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key1__h12548 :
	       key5__h12553 ;
  assign _dfoo141 =
	     (kg_round_number == 5'd8 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key1__h12548 :
	       key5__h12553 ;
  assign _dfoo143 =
	     (kg_round_number == 5'd7 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key1__h12548 :
	       key5__h12553 ;
  assign _dfoo145 =
	     (kg_round_number == 5'd6 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key1__h12548 :
	       key5__h12553 ;
  assign _dfoo147 =
	     (kg_round_number == 5'd5 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key1__h12548 :
	       key5__h12553 ;
  assign _dfoo149 =
	     (kg_round_number == 5'd4 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key1__h12548 :
	       key5__h12553 ;
  assign _dfoo15 =
	     kg_counter == 4'd0 || kg_counter == 4'd1 || kg_counter == 4'd2 ||
	     kg_counter == 4'd3 && kg_key_length == 2'd2 ;
  assign _dfoo151 =
	     (kg_round_number == 5'd3 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key1__h12548 :
	       key5__h12553 ;
  assign _dfoo153 =
	     (kg_round_number == 5'd2 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key1__h12548 :
	       key5__h12553 ;
  assign _dfoo155 =
	     (kg_round_number == 5'd1 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key1__h12548 :
	       key5__h12553 ;
  assign _dfoo157 =
	     (kg_round_number == 5'd0 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key1__h12548 :
	       key5__h12553 ;
  assign _dfoo159 =
	     (kg_round_number == 5'd14 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key0__h12547 :
	       _theResult____h12552 ;
  assign _dfoo161 =
	     (kg_round_number == 5'd13 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key0__h12547 :
	       _theResult____h12552 ;
  assign _dfoo163 =
	     (kg_round_number == 5'd12 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key0__h12547 :
	       _theResult____h12552 ;
  assign _dfoo165 =
	     (kg_round_number == 5'd11 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key0__h12547 :
	       _theResult____h12552 ;
  assign _dfoo167 =
	     (kg_round_number == 5'd10 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key0__h12547 :
	       _theResult____h12552 ;
  assign _dfoo169 =
	     (kg_round_number == 5'd9 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key0__h12547 :
	       _theResult____h12552 ;
  assign _dfoo171 =
	     (kg_round_number == 5'd8 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key0__h12547 :
	       _theResult____h12552 ;
  assign _dfoo173 =
	     (kg_round_number == 5'd7 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key0__h12547 :
	       _theResult____h12552 ;
  assign _dfoo175 =
	     (kg_round_number == 5'd6 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key0__h12547 :
	       _theResult____h12552 ;
  assign _dfoo177 =
	     (kg_round_number == 5'd5 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key0__h12547 :
	       _theResult____h12552 ;
  assign _dfoo179 =
	     (kg_round_number == 5'd4 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key0__h12547 :
	       _theResult____h12552 ;
  assign _dfoo181 =
	     (kg_round_number == 5'd3 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key0__h12547 :
	       _theResult____h12552 ;
  assign _dfoo183 =
	     (kg_round_number == 5'd2 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key0__h12547 :
	       _theResult____h12552 ;
  assign _dfoo185 =
	     (kg_round_number == 5'd1 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key0__h12547 :
	       _theResult____h12552 ;
  assign _dfoo187 =
	     (kg_round_number == 5'd0 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key0__h12547 :
	       _theResult____h12552 ;
  assign _dfoo188 =
	     kg_round_number_8_PLUS_1_41_EQ_14_25_AND_kg_ro_ETC___d258 ||
	     kg_round_number == 5'd14 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 ||
	     x__h22457 == 5'd14 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_8_EQ_kg_maxrounds_9___d104 ;
  assign _dfoo190 =
	     kg_round_number_8_PLUS_1_41_EQ_13_23_AND_kg_ro_ETC___d257 ||
	     kg_round_number == 5'd13 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 ||
	     x__h22457 == 5'd13 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_8_EQ_kg_maxrounds_9___d104 ;
  assign _dfoo192 =
	     kg_round_number_8_PLUS_1_41_EQ_12_21_AND_kg_ro_ETC___d256 ||
	     kg_round_number == 5'd12 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 ||
	     x__h22457 == 5'd12 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_8_EQ_kg_maxrounds_9___d104 ;
  assign _dfoo194 =
	     kg_round_number_8_PLUS_1_41_EQ_11_19_AND_kg_ro_ETC___d255 ||
	     kg_round_number == 5'd11 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 ||
	     x__h22457 == 5'd11 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_8_EQ_kg_maxrounds_9___d104 ;
  assign _dfoo196 =
	     kg_round_number_8_PLUS_1_41_EQ_10_17_AND_kg_ro_ETC___d254 ||
	     kg_round_number == 5'd10 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 ||
	     x__h22457 == 5'd10 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_8_EQ_kg_maxrounds_9___d104 ;
  assign _dfoo198 =
	     kg_round_number_8_PLUS_1_41_EQ_9_15_AND_kg_rou_ETC___d253 ||
	     kg_round_number == 5'd9 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 ||
	     x__h22457 == 5'd9 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_8_EQ_kg_maxrounds_9___d104 ;
  assign _dfoo200 =
	     kg_round_number_8_PLUS_1_41_EQ_8_13_AND_kg_rou_ETC___d252 ||
	     kg_round_number == 5'd8 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 ||
	     x__h22457 == 5'd8 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_8_EQ_kg_maxrounds_9___d104 ;
  assign _dfoo202 =
	     kg_round_number_8_PLUS_1_41_EQ_7_11_AND_kg_rou_ETC___d251 ||
	     kg_round_number == 5'd7 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 ||
	     x__h22457 == 5'd7 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_8_EQ_kg_maxrounds_9___d104 ;
  assign _dfoo204 =
	     kg_round_number_8_PLUS_1_41_EQ_6_09_AND_kg_rou_ETC___d250 ||
	     kg_round_number == 5'd6 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 ||
	     x__h22457 == 5'd6 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_8_EQ_kg_maxrounds_9___d104 ;
  assign _dfoo206 =
	     kg_round_number_8_PLUS_1_41_EQ_5_07_AND_kg_rou_ETC___d249 ||
	     kg_round_number == 5'd5 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 ||
	     x__h22457 == 5'd5 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_8_EQ_kg_maxrounds_9___d104 ;
  assign _dfoo208 =
	     kg_round_number_8_PLUS_1_41_EQ_4_05_AND_kg_rou_ETC___d248 ||
	     kg_round_number == 5'd4 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 ||
	     x__h22457 == 5'd4 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_8_EQ_kg_maxrounds_9___d104 ;
  assign _dfoo210 =
	     kg_round_number_8_PLUS_1_41_EQ_3_03_AND_kg_rou_ETC___d247 ||
	     kg_round_number == 5'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 ||
	     x__h22457 == 5'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_8_EQ_kg_maxrounds_9___d104 ;
  assign _dfoo212 =
	     kg_round_number_8_PLUS_1_41_EQ_2_01_AND_kg_rou_ETC___d246 ||
	     kg_round_number == 5'd2 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 ||
	     x__h22457 == 5'd2 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_8_EQ_kg_maxrounds_9___d104 ;
  assign _dfoo214 =
	     kg_round_number_8_PLUS_1_41_EQ_1_99_AND_kg_rou_ETC___d245 ||
	     kg_round_number == 5'd1 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 ||
	     x__h22457 == 5'd1 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_8_EQ_kg_maxrounds_9___d104 ;
  assign _dfoo216 =
	     kg_round_number_8_PLUS_1_41_EQ_0_97_AND_kg_rou_ETC___d244 ||
	     kg_round_number == 5'd0 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 ||
	     x__h22457 == 5'd0 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd2 &&
	     !kg_round_number_8_EQ_kg_maxrounds_9___d104 ;
  assign _dfoo31 =
	     kg_counter == 4'd4 || kg_counter == 4'd5 || kg_counter == 4'd6 ;
  assign _dfoo36 =
	     kg_counter == 4'd4 || kg_counter == 4'd5 || kg_counter == 4'd6 ||
	     kg_counter == 4'd7 ;
  assign _dfoo369 =
	     kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d243 ?
	       key1__h12548 :
	       (kg_round_number_8_PLUS_1_41_EQ_14_25_AND_kg_ro_ETC___d258 ?
		  key5__h12553 :
		  _dfoo69) ;
  assign _dfoo371 =
	     kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d242 ?
	       key1__h12548 :
	       (kg_round_number_8_PLUS_1_41_EQ_13_23_AND_kg_ro_ETC___d257 ?
		  key5__h12553 :
		  _dfoo71) ;
  assign _dfoo373 =
	     kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d241 ?
	       key1__h12548 :
	       (kg_round_number_8_PLUS_1_41_EQ_12_21_AND_kg_ro_ETC___d256 ?
		  key5__h12553 :
		  _dfoo73) ;
  assign _dfoo375 =
	     kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d240 ?
	       key1__h12548 :
	       (kg_round_number_8_PLUS_1_41_EQ_11_19_AND_kg_ro_ETC___d255 ?
		  key5__h12553 :
		  _dfoo75) ;
  assign _dfoo377 =
	     kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d239 ?
	       key1__h12548 :
	       (kg_round_number_8_PLUS_1_41_EQ_10_17_AND_kg_ro_ETC___d254 ?
		  key5__h12553 :
		  _dfoo77) ;
  assign _dfoo379 =
	     kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d238 ?
	       key1__h12548 :
	       (kg_round_number_8_PLUS_1_41_EQ_9_15_AND_kg_rou_ETC___d253 ?
		  key5__h12553 :
		  _dfoo79) ;
  assign _dfoo381 =
	     kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d237 ?
	       key1__h12548 :
	       (kg_round_number_8_PLUS_1_41_EQ_8_13_AND_kg_rou_ETC___d252 ?
		  key5__h12553 :
		  _dfoo81) ;
  assign _dfoo383 =
	     kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d236 ?
	       key1__h12548 :
	       (kg_round_number_8_PLUS_1_41_EQ_7_11_AND_kg_rou_ETC___d251 ?
		  key5__h12553 :
		  _dfoo83) ;
  assign _dfoo385 =
	     kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d235 ?
	       key1__h12548 :
	       (kg_round_number_8_PLUS_1_41_EQ_6_09_AND_kg_rou_ETC___d250 ?
		  key5__h12553 :
		  _dfoo85) ;
  assign _dfoo387 =
	     kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d234 ?
	       key1__h12548 :
	       (kg_round_number_8_PLUS_1_41_EQ_5_07_AND_kg_rou_ETC___d249 ?
		  key5__h12553 :
		  _dfoo87) ;
  assign _dfoo389 =
	     kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d233 ?
	       key1__h12548 :
	       (kg_round_number_8_PLUS_1_41_EQ_4_05_AND_kg_rou_ETC___d248 ?
		  key5__h12553 :
		  _dfoo89) ;
  assign _dfoo391 =
	     kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d232 ?
	       key1__h12548 :
	       (kg_round_number_8_PLUS_1_41_EQ_3_03_AND_kg_rou_ETC___d247 ?
		  key5__h12553 :
		  _dfoo91) ;
  assign _dfoo393 =
	     kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d231 ?
	       key1__h12548 :
	       (kg_round_number_8_PLUS_1_41_EQ_2_01_AND_kg_rou_ETC___d246 ?
		  key5__h12553 :
		  _dfoo93) ;
  assign _dfoo395 =
	     kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d230 ?
	       key1__h12548 :
	       (kg_round_number_8_PLUS_1_41_EQ_1_99_AND_kg_rou_ETC___d245 ?
		  key5__h12553 :
		  _dfoo95) ;
  assign _dfoo397 =
	     kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d229 ?
	       key1__h12548 :
	       (kg_round_number_8_PLUS_1_41_EQ_0_97_AND_kg_rou_ETC___d244 ?
		  key5__h12553 :
		  _dfoo97) ;
  assign _dfoo399 =
	     kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d243 ?
	       key0__h12547 :
	       (kg_round_number_8_PLUS_1_41_EQ_14_25_AND_kg_ro_ETC___d258 ?
		  _theResult____h12552 :
		  _dfoo99) ;
  assign _dfoo401 =
	     kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d242 ?
	       key0__h12547 :
	       (kg_round_number_8_PLUS_1_41_EQ_13_23_AND_kg_ro_ETC___d257 ?
		  _theResult____h12552 :
		  _dfoo101) ;
  assign _dfoo403 =
	     kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d241 ?
	       key0__h12547 :
	       (kg_round_number_8_PLUS_1_41_EQ_12_21_AND_kg_ro_ETC___d256 ?
		  _theResult____h12552 :
		  _dfoo103) ;
  assign _dfoo405 =
	     kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d240 ?
	       key0__h12547 :
	       (kg_round_number_8_PLUS_1_41_EQ_11_19_AND_kg_ro_ETC___d255 ?
		  _theResult____h12552 :
		  _dfoo105) ;
  assign _dfoo407 =
	     kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d239 ?
	       key0__h12547 :
	       (kg_round_number_8_PLUS_1_41_EQ_10_17_AND_kg_ro_ETC___d254 ?
		  _theResult____h12552 :
		  _dfoo107) ;
  assign _dfoo409 =
	     kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d238 ?
	       key0__h12547 :
	       (kg_round_number_8_PLUS_1_41_EQ_9_15_AND_kg_rou_ETC___d253 ?
		  _theResult____h12552 :
		  _dfoo109) ;
  assign _dfoo411 =
	     kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d237 ?
	       key0__h12547 :
	       (kg_round_number_8_PLUS_1_41_EQ_8_13_AND_kg_rou_ETC___d252 ?
		  _theResult____h12552 :
		  _dfoo111) ;
  assign _dfoo413 =
	     kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d236 ?
	       key0__h12547 :
	       (kg_round_number_8_PLUS_1_41_EQ_7_11_AND_kg_rou_ETC___d251 ?
		  _theResult____h12552 :
		  _dfoo113) ;
  assign _dfoo415 =
	     kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d235 ?
	       key0__h12547 :
	       (kg_round_number_8_PLUS_1_41_EQ_6_09_AND_kg_rou_ETC___d250 ?
		  _theResult____h12552 :
		  _dfoo115) ;
  assign _dfoo417 =
	     kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d234 ?
	       key0__h12547 :
	       (kg_round_number_8_PLUS_1_41_EQ_5_07_AND_kg_rou_ETC___d249 ?
		  _theResult____h12552 :
		  _dfoo117) ;
  assign _dfoo419 =
	     kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d233 ?
	       key0__h12547 :
	       (kg_round_number_8_PLUS_1_41_EQ_4_05_AND_kg_rou_ETC___d248 ?
		  _theResult____h12552 :
		  _dfoo119) ;
  assign _dfoo421 =
	     kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d232 ?
	       key0__h12547 :
	       (kg_round_number_8_PLUS_1_41_EQ_3_03_AND_kg_rou_ETC___d247 ?
		  _theResult____h12552 :
		  _dfoo121) ;
  assign _dfoo423 =
	     kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d231 ?
	       key0__h12547 :
	       (kg_round_number_8_PLUS_1_41_EQ_2_01_AND_kg_rou_ETC___d246 ?
		  _theResult____h12552 :
		  _dfoo123) ;
  assign _dfoo425 =
	     kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d230 ?
	       key0__h12547 :
	       (kg_round_number_8_PLUS_1_41_EQ_1_99_AND_kg_rou_ETC___d245 ?
		  _theResult____h12552 :
		  _dfoo125) ;
  assign _dfoo427 =
	     kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d229 ?
	       key0__h12547 :
	       (kg_round_number_8_PLUS_1_41_EQ_0_97_AND_kg_rou_ETC___d244 ?
		  _theResult____h12552 :
		  _dfoo127) ;
  assign _dfoo459 =
	     kg_round_number_8_PLUS_1_41_EQ_14_25_AND_kg_ro_ETC___d226 ?
	       key5__h12553 :
	       (kg_round_number_8_PLUS_1_41_EQ_14_25_AND_kg_ro_ETC___d258 ?
		  key3__h12550 :
		  _dfoo129) ;
  assign _dfoo461 =
	     kg_round_number_8_PLUS_1_41_EQ_13_23_AND_kg_ro_ETC___d224 ?
	       key5__h12553 :
	       (kg_round_number_8_PLUS_1_41_EQ_13_23_AND_kg_ro_ETC___d257 ?
		  key3__h12550 :
		  _dfoo131) ;
  assign _dfoo463 =
	     kg_round_number_8_PLUS_1_41_EQ_12_21_AND_kg_ro_ETC___d222 ?
	       key5__h12553 :
	       (kg_round_number_8_PLUS_1_41_EQ_12_21_AND_kg_ro_ETC___d256 ?
		  key3__h12550 :
		  _dfoo133) ;
  assign _dfoo465 =
	     kg_round_number_8_PLUS_1_41_EQ_11_19_AND_kg_ro_ETC___d220 ?
	       key5__h12553 :
	       (kg_round_number_8_PLUS_1_41_EQ_11_19_AND_kg_ro_ETC___d255 ?
		  key3__h12550 :
		  _dfoo135) ;
  assign _dfoo467 =
	     kg_round_number_8_PLUS_1_41_EQ_10_17_AND_kg_ro_ETC___d218 ?
	       key5__h12553 :
	       (kg_round_number_8_PLUS_1_41_EQ_10_17_AND_kg_ro_ETC___d254 ?
		  key3__h12550 :
		  _dfoo137) ;
  assign _dfoo469 =
	     kg_round_number_8_PLUS_1_41_EQ_9_15_AND_kg_rou_ETC___d216 ?
	       key5__h12553 :
	       (kg_round_number_8_PLUS_1_41_EQ_9_15_AND_kg_rou_ETC___d253 ?
		  key3__h12550 :
		  _dfoo139) ;
  assign _dfoo471 =
	     kg_round_number_8_PLUS_1_41_EQ_8_13_AND_kg_rou_ETC___d214 ?
	       key5__h12553 :
	       (kg_round_number_8_PLUS_1_41_EQ_8_13_AND_kg_rou_ETC___d252 ?
		  key3__h12550 :
		  _dfoo141) ;
  assign _dfoo473 =
	     kg_round_number_8_PLUS_1_41_EQ_7_11_AND_kg_rou_ETC___d212 ?
	       key5__h12553 :
	       (kg_round_number_8_PLUS_1_41_EQ_7_11_AND_kg_rou_ETC___d251 ?
		  key3__h12550 :
		  _dfoo143) ;
  assign _dfoo475 =
	     kg_round_number_8_PLUS_1_41_EQ_6_09_AND_kg_rou_ETC___d210 ?
	       key5__h12553 :
	       (kg_round_number_8_PLUS_1_41_EQ_6_09_AND_kg_rou_ETC___d250 ?
		  key3__h12550 :
		  _dfoo145) ;
  assign _dfoo477 =
	     kg_round_number_8_PLUS_1_41_EQ_5_07_AND_kg_rou_ETC___d208 ?
	       key5__h12553 :
	       (kg_round_number_8_PLUS_1_41_EQ_5_07_AND_kg_rou_ETC___d249 ?
		  key3__h12550 :
		  _dfoo147) ;
  assign _dfoo479 =
	     kg_round_number_8_PLUS_1_41_EQ_4_05_AND_kg_rou_ETC___d206 ?
	       key5__h12553 :
	       (kg_round_number_8_PLUS_1_41_EQ_4_05_AND_kg_rou_ETC___d248 ?
		  key3__h12550 :
		  _dfoo149) ;
  assign _dfoo481 =
	     kg_round_number_8_PLUS_1_41_EQ_3_03_AND_kg_rou_ETC___d204 ?
	       key5__h12553 :
	       (kg_round_number_8_PLUS_1_41_EQ_3_03_AND_kg_rou_ETC___d247 ?
		  key3__h12550 :
		  _dfoo151) ;
  assign _dfoo483 =
	     kg_round_number_8_PLUS_1_41_EQ_2_01_AND_kg_rou_ETC___d202 ?
	       key5__h12553 :
	       (kg_round_number_8_PLUS_1_41_EQ_2_01_AND_kg_rou_ETC___d246 ?
		  key3__h12550 :
		  _dfoo153) ;
  assign _dfoo485 =
	     kg_round_number_8_PLUS_1_41_EQ_1_99_AND_kg_rou_ETC___d200 ?
	       key5__h12553 :
	       (kg_round_number_8_PLUS_1_41_EQ_1_99_AND_kg_rou_ETC___d245 ?
		  key3__h12550 :
		  _dfoo155) ;
  assign _dfoo487 =
	     kg_round_number_8_PLUS_1_41_EQ_0_97_AND_kg_rou_ETC___d198 ?
	       key5__h12553 :
	       (kg_round_number_8_PLUS_1_41_EQ_0_97_AND_kg_rou_ETC___d244 ?
		  key3__h12550 :
		  _dfoo157) ;
  assign _dfoo489 =
	     kg_round_number_8_PLUS_1_41_EQ_14_25_AND_kg_ro_ETC___d226 ?
	       _theResult____h12552 :
	       (kg_round_number_8_PLUS_1_41_EQ_14_25_AND_kg_ro_ETC___d258 ?
		  key2__h12549 :
		  _dfoo159) ;
  assign _dfoo491 =
	     kg_round_number_8_PLUS_1_41_EQ_13_23_AND_kg_ro_ETC___d224 ?
	       _theResult____h12552 :
	       (kg_round_number_8_PLUS_1_41_EQ_13_23_AND_kg_ro_ETC___d257 ?
		  key2__h12549 :
		  _dfoo161) ;
  assign _dfoo493 =
	     kg_round_number_8_PLUS_1_41_EQ_12_21_AND_kg_ro_ETC___d222 ?
	       _theResult____h12552 :
	       (kg_round_number_8_PLUS_1_41_EQ_12_21_AND_kg_ro_ETC___d256 ?
		  key2__h12549 :
		  _dfoo163) ;
  assign _dfoo495 =
	     kg_round_number_8_PLUS_1_41_EQ_11_19_AND_kg_ro_ETC___d220 ?
	       _theResult____h12552 :
	       (kg_round_number_8_PLUS_1_41_EQ_11_19_AND_kg_ro_ETC___d255 ?
		  key2__h12549 :
		  _dfoo165) ;
  assign _dfoo497 =
	     kg_round_number_8_PLUS_1_41_EQ_10_17_AND_kg_ro_ETC___d218 ?
	       _theResult____h12552 :
	       (kg_round_number_8_PLUS_1_41_EQ_10_17_AND_kg_ro_ETC___d254 ?
		  key2__h12549 :
		  _dfoo167) ;
  assign _dfoo499 =
	     kg_round_number_8_PLUS_1_41_EQ_9_15_AND_kg_rou_ETC___d216 ?
	       _theResult____h12552 :
	       (kg_round_number_8_PLUS_1_41_EQ_9_15_AND_kg_rou_ETC___d253 ?
		  key2__h12549 :
		  _dfoo169) ;
  assign _dfoo501 =
	     kg_round_number_8_PLUS_1_41_EQ_8_13_AND_kg_rou_ETC___d214 ?
	       _theResult____h12552 :
	       (kg_round_number_8_PLUS_1_41_EQ_8_13_AND_kg_rou_ETC___d252 ?
		  key2__h12549 :
		  _dfoo171) ;
  assign _dfoo503 =
	     kg_round_number_8_PLUS_1_41_EQ_7_11_AND_kg_rou_ETC___d212 ?
	       _theResult____h12552 :
	       (kg_round_number_8_PLUS_1_41_EQ_7_11_AND_kg_rou_ETC___d251 ?
		  key2__h12549 :
		  _dfoo173) ;
  assign _dfoo505 =
	     kg_round_number_8_PLUS_1_41_EQ_6_09_AND_kg_rou_ETC___d210 ?
	       _theResult____h12552 :
	       (kg_round_number_8_PLUS_1_41_EQ_6_09_AND_kg_rou_ETC___d250 ?
		  key2__h12549 :
		  _dfoo175) ;
  assign _dfoo507 =
	     kg_round_number_8_PLUS_1_41_EQ_5_07_AND_kg_rou_ETC___d208 ?
	       _theResult____h12552 :
	       (kg_round_number_8_PLUS_1_41_EQ_5_07_AND_kg_rou_ETC___d249 ?
		  key2__h12549 :
		  _dfoo177) ;
  assign _dfoo509 =
	     kg_round_number_8_PLUS_1_41_EQ_4_05_AND_kg_rou_ETC___d206 ?
	       _theResult____h12552 :
	       (kg_round_number_8_PLUS_1_41_EQ_4_05_AND_kg_rou_ETC___d248 ?
		  key2__h12549 :
		  _dfoo179) ;
  assign _dfoo511 =
	     kg_round_number_8_PLUS_1_41_EQ_3_03_AND_kg_rou_ETC___d204 ?
	       _theResult____h12552 :
	       (kg_round_number_8_PLUS_1_41_EQ_3_03_AND_kg_rou_ETC___d247 ?
		  key2__h12549 :
		  _dfoo181) ;
  assign _dfoo513 =
	     kg_round_number_8_PLUS_1_41_EQ_2_01_AND_kg_rou_ETC___d202 ?
	       _theResult____h12552 :
	       (kg_round_number_8_PLUS_1_41_EQ_2_01_AND_kg_rou_ETC___d246 ?
		  key2__h12549 :
		  _dfoo183) ;
  assign _dfoo515 =
	     kg_round_number_8_PLUS_1_41_EQ_1_99_AND_kg_rou_ETC___d200 ?
	       _theResult____h12552 :
	       (kg_round_number_8_PLUS_1_41_EQ_1_99_AND_kg_rou_ETC___d245 ?
		  key2__h12549 :
		  _dfoo185) ;
  assign _dfoo517 =
	     kg_round_number_8_PLUS_1_41_EQ_0_97_AND_kg_rou_ETC___d198 ?
	       _theResult____h12552 :
	       (kg_round_number_8_PLUS_1_41_EQ_0_97_AND_kg_rou_ETC___d244 ?
		  key2__h12549 :
		  _dfoo187) ;
  assign _dfoo638 =
	     kg_round_number == 5'd14 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d196 ||
	     kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d243 ||
	     _dfoo188 ;
  assign _dfoo640 =
	     kg_round_number == 5'd13 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d195 ||
	     kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d242 ||
	     _dfoo190 ;
  assign _dfoo642 =
	     kg_round_number == 5'd12 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d194 ||
	     kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d241 ||
	     _dfoo192 ;
  assign _dfoo644 =
	     kg_round_number == 5'd11 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d193 ||
	     kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d240 ||
	     _dfoo194 ;
  assign _dfoo646 =
	     kg_round_number == 5'd10 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d192 ||
	     kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d239 ||
	     _dfoo196 ;
  assign _dfoo648 =
	     kg_round_number == 5'd9 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d191 ||
	     kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d238 ||
	     _dfoo198 ;
  assign _dfoo650 =
	     kg_round_number == 5'd8 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d190 ||
	     kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d237 ||
	     _dfoo200 ;
  assign _dfoo652 =
	     kg_round_number == 5'd7 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d189 ||
	     kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d236 ||
	     _dfoo202 ;
  assign _dfoo654 =
	     kg_round_number == 5'd6 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d188 ||
	     kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d235 ||
	     _dfoo204 ;
  assign _dfoo656 =
	     kg_round_number == 5'd5 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d187 ||
	     kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d234 ||
	     _dfoo206 ;
  assign _dfoo658 =
	     kg_round_number == 5'd4 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d186 ||
	     kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d233 ||
	     _dfoo208 ;
  assign _dfoo660 =
	     kg_round_number == 5'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d185 ||
	     kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d232 ||
	     _dfoo210 ;
  assign _dfoo662 =
	     kg_round_number == 5'd2 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d184 ||
	     kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d231 ||
	     _dfoo212 ;
  assign _dfoo664 =
	     kg_round_number == 5'd1 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d183 ||
	     kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d230 ||
	     _dfoo214 ;
  assign _dfoo666 =
	     kg_round_number == 5'd0 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d182 ||
	     kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d229 ||
	     _dfoo216 ;
  assign _dfoo668 =
	     kg_round_number == 5'd14 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d196 ||
	     kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d243 ||
	     _dfoo188 ;
  assign _dfoo670 =
	     kg_round_number == 5'd13 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d195 ||
	     kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d242 ||
	     _dfoo190 ;
  assign _dfoo672 =
	     kg_round_number == 5'd12 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d194 ||
	     kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d241 ||
	     _dfoo192 ;
  assign _dfoo674 =
	     kg_round_number == 5'd11 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d193 ||
	     kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d240 ||
	     _dfoo194 ;
  assign _dfoo676 =
	     kg_round_number == 5'd10 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d192 ||
	     kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d239 ||
	     _dfoo196 ;
  assign _dfoo678 =
	     kg_round_number == 5'd9 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d191 ||
	     kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d238 ||
	     _dfoo198 ;
  assign _dfoo680 =
	     kg_round_number == 5'd8 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d190 ||
	     kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d237 ||
	     _dfoo200 ;
  assign _dfoo682 =
	     kg_round_number == 5'd7 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d189 ||
	     kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d236 ||
	     _dfoo202 ;
  assign _dfoo684 =
	     kg_round_number == 5'd6 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d188 ||
	     kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d235 ||
	     _dfoo204 ;
  assign _dfoo686 =
	     kg_round_number == 5'd5 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d187 ||
	     kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d234 ||
	     _dfoo206 ;
  assign _dfoo688 =
	     kg_round_number == 5'd4 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d186 ||
	     kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d233 ||
	     _dfoo208 ;
  assign _dfoo69 =
	     (kg_round_number == 5'd14 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key3__h12550 :
	       key7__h12555 ;
  assign _dfoo690 =
	     kg_round_number == 5'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d185 ||
	     kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d232 ||
	     _dfoo210 ;
  assign _dfoo692 =
	     kg_round_number == 5'd2 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d184 ||
	     kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d231 ||
	     _dfoo212 ;
  assign _dfoo694 =
	     kg_round_number == 5'd1 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d183 ||
	     kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d230 ||
	     _dfoo214 ;
  assign _dfoo696 =
	     kg_round_number == 5'd0 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d182 ||
	     kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d229 ||
	     _dfoo216 ;
  assign _dfoo698 =
	     kg_round_number == 5'd14 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d196 ||
	     kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d243 ||
	     _dfoo188 ;
  assign _dfoo700 =
	     kg_round_number == 5'd13 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d195 ||
	     kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d242 ||
	     _dfoo190 ;
  assign _dfoo702 =
	     kg_round_number == 5'd12 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d194 ||
	     kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d241 ||
	     _dfoo192 ;
  assign _dfoo704 =
	     kg_round_number == 5'd11 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d193 ||
	     kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d240 ||
	     _dfoo194 ;
  assign _dfoo706 =
	     kg_round_number == 5'd10 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d192 ||
	     kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d239 ||
	     _dfoo196 ;
  assign _dfoo708 =
	     kg_round_number == 5'd9 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d191 ||
	     kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d238 ||
	     _dfoo198 ;
  assign _dfoo71 =
	     (kg_round_number == 5'd13 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key3__h12550 :
	       key7__h12555 ;
  assign _dfoo710 =
	     kg_round_number == 5'd8 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d190 ||
	     kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d237 ||
	     _dfoo200 ;
  assign _dfoo712 =
	     kg_round_number == 5'd7 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d189 ||
	     kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d236 ||
	     _dfoo202 ;
  assign _dfoo714 =
	     kg_round_number == 5'd6 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d188 ||
	     kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d235 ||
	     _dfoo204 ;
  assign _dfoo716 =
	     kg_round_number == 5'd5 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d187 ||
	     kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d234 ||
	     _dfoo206 ;
  assign _dfoo718 =
	     kg_round_number == 5'd4 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d186 ||
	     kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d233 ||
	     _dfoo208 ;
  assign _dfoo720 =
	     kg_round_number == 5'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d185 ||
	     kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d232 ||
	     _dfoo210 ;
  assign _dfoo722 =
	     kg_round_number == 5'd2 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d184 ||
	     kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d231 ||
	     _dfoo212 ;
  assign _dfoo724 =
	     kg_round_number == 5'd1 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d183 ||
	     kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d230 ||
	     _dfoo214 ;
  assign _dfoo726 =
	     kg_round_number == 5'd0 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d182 ||
	     kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d229 ||
	     _dfoo216 ;
  assign _dfoo728 =
	     kg_round_number == 5'd14 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d196 ||
	     kg_round_number_8_PLUS_1_41_EQ_14_25_AND_kg_ro_ETC___d226 ||
	     _dfoo188 ;
  assign _dfoo73 =
	     (kg_round_number == 5'd12 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key3__h12550 :
	       key7__h12555 ;
  assign _dfoo730 =
	     kg_round_number == 5'd13 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d195 ||
	     kg_round_number_8_PLUS_1_41_EQ_13_23_AND_kg_ro_ETC___d224 ||
	     _dfoo190 ;
  assign _dfoo732 =
	     kg_round_number == 5'd12 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d194 ||
	     kg_round_number_8_PLUS_1_41_EQ_12_21_AND_kg_ro_ETC___d222 ||
	     _dfoo192 ;
  assign _dfoo734 =
	     kg_round_number == 5'd11 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d193 ||
	     kg_round_number_8_PLUS_1_41_EQ_11_19_AND_kg_ro_ETC___d220 ||
	     _dfoo194 ;
  assign _dfoo736 =
	     kg_round_number == 5'd10 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d192 ||
	     kg_round_number_8_PLUS_1_41_EQ_10_17_AND_kg_ro_ETC___d218 ||
	     _dfoo196 ;
  assign _dfoo738 =
	     kg_round_number == 5'd9 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d191 ||
	     kg_round_number_8_PLUS_1_41_EQ_9_15_AND_kg_rou_ETC___d216 ||
	     _dfoo198 ;
  assign _dfoo740 =
	     kg_round_number == 5'd8 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d190 ||
	     kg_round_number_8_PLUS_1_41_EQ_8_13_AND_kg_rou_ETC___d214 ||
	     _dfoo200 ;
  assign _dfoo742 =
	     kg_round_number == 5'd7 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d189 ||
	     kg_round_number_8_PLUS_1_41_EQ_7_11_AND_kg_rou_ETC___d212 ||
	     _dfoo202 ;
  assign _dfoo744 =
	     kg_round_number == 5'd6 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d188 ||
	     kg_round_number_8_PLUS_1_41_EQ_6_09_AND_kg_rou_ETC___d210 ||
	     _dfoo204 ;
  assign _dfoo746 =
	     kg_round_number == 5'd5 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d187 ||
	     kg_round_number_8_PLUS_1_41_EQ_5_07_AND_kg_rou_ETC___d208 ||
	     _dfoo206 ;
  assign _dfoo748 =
	     kg_round_number == 5'd4 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d186 ||
	     kg_round_number_8_PLUS_1_41_EQ_4_05_AND_kg_rou_ETC___d206 ||
	     _dfoo208 ;
  assign _dfoo75 =
	     (kg_round_number == 5'd11 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key3__h12550 :
	       key7__h12555 ;
  assign _dfoo750 =
	     kg_round_number == 5'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d185 ||
	     kg_round_number_8_PLUS_1_41_EQ_3_03_AND_kg_rou_ETC___d204 ||
	     _dfoo210 ;
  assign _dfoo752 =
	     kg_round_number == 5'd2 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d184 ||
	     kg_round_number_8_PLUS_1_41_EQ_2_01_AND_kg_rou_ETC___d202 ||
	     _dfoo212 ;
  assign _dfoo754 =
	     kg_round_number == 5'd1 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d183 ||
	     kg_round_number_8_PLUS_1_41_EQ_1_99_AND_kg_rou_ETC___d200 ||
	     _dfoo214 ;
  assign _dfoo756 =
	     kg_round_number == 5'd0 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d182 ||
	     kg_round_number_8_PLUS_1_41_EQ_0_97_AND_kg_rou_ETC___d198 ||
	     _dfoo216 ;
  assign _dfoo758 =
	     kg_round_number == 5'd14 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d196 ||
	     kg_round_number_8_PLUS_1_41_EQ_14_25_AND_kg_ro_ETC___d226 ||
	     _dfoo188 ;
  assign _dfoo760 =
	     kg_round_number == 5'd13 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d195 ||
	     kg_round_number_8_PLUS_1_41_EQ_13_23_AND_kg_ro_ETC___d224 ||
	     _dfoo190 ;
  assign _dfoo762 =
	     kg_round_number == 5'd12 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d194 ||
	     kg_round_number_8_PLUS_1_41_EQ_12_21_AND_kg_ro_ETC___d222 ||
	     _dfoo192 ;
  assign _dfoo764 =
	     kg_round_number == 5'd11 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d193 ||
	     kg_round_number_8_PLUS_1_41_EQ_11_19_AND_kg_ro_ETC___d220 ||
	     _dfoo194 ;
  assign _dfoo766 =
	     kg_round_number == 5'd10 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d192 ||
	     kg_round_number_8_PLUS_1_41_EQ_10_17_AND_kg_ro_ETC___d218 ||
	     _dfoo196 ;
  assign _dfoo768 =
	     kg_round_number == 5'd9 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d191 ||
	     kg_round_number_8_PLUS_1_41_EQ_9_15_AND_kg_rou_ETC___d216 ||
	     _dfoo198 ;
  assign _dfoo77 =
	     (kg_round_number == 5'd10 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key3__h12550 :
	       key7__h12555 ;
  assign _dfoo770 =
	     kg_round_number == 5'd8 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d190 ||
	     kg_round_number_8_PLUS_1_41_EQ_8_13_AND_kg_rou_ETC___d214 ||
	     _dfoo200 ;
  assign _dfoo772 =
	     kg_round_number == 5'd7 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d189 ||
	     kg_round_number_8_PLUS_1_41_EQ_7_11_AND_kg_rou_ETC___d212 ||
	     _dfoo202 ;
  assign _dfoo774 =
	     kg_round_number == 5'd6 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d188 ||
	     kg_round_number_8_PLUS_1_41_EQ_6_09_AND_kg_rou_ETC___d210 ||
	     _dfoo204 ;
  assign _dfoo776 =
	     kg_round_number == 5'd5 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d187 ||
	     kg_round_number_8_PLUS_1_41_EQ_5_07_AND_kg_rou_ETC___d208 ||
	     _dfoo206 ;
  assign _dfoo778 =
	     kg_round_number == 5'd4 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d186 ||
	     kg_round_number_8_PLUS_1_41_EQ_4_05_AND_kg_rou_ETC___d206 ||
	     _dfoo208 ;
  assign _dfoo780 =
	     kg_round_number == 5'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d185 ||
	     kg_round_number_8_PLUS_1_41_EQ_3_03_AND_kg_rou_ETC___d204 ||
	     _dfoo210 ;
  assign _dfoo782 =
	     kg_round_number == 5'd2 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d184 ||
	     kg_round_number_8_PLUS_1_41_EQ_2_01_AND_kg_rou_ETC___d202 ||
	     _dfoo212 ;
  assign _dfoo784 =
	     kg_round_number == 5'd1 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d183 ||
	     kg_round_number_8_PLUS_1_41_EQ_1_99_AND_kg_rou_ETC___d200 ||
	     _dfoo214 ;
  assign _dfoo786 =
	     kg_round_number == 5'd0 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd0 ||
	     kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d182 ||
	     kg_round_number_8_PLUS_1_41_EQ_0_97_AND_kg_rou_ETC___d198 ||
	     _dfoo216 ;
  assign _dfoo79 =
	     (kg_round_number == 5'd9 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key3__h12550 :
	       key7__h12555 ;
  assign _dfoo81 =
	     (kg_round_number == 5'd8 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key3__h12550 :
	       key7__h12555 ;
  assign _dfoo83 =
	     (kg_round_number == 5'd7 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key3__h12550 :
	       key7__h12555 ;
  assign _dfoo85 =
	     (kg_round_number == 5'd6 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key3__h12550 :
	       key7__h12555 ;
  assign _dfoo87 =
	     (kg_round_number == 5'd5 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key3__h12550 :
	       key7__h12555 ;
  assign _dfoo89 =
	     (kg_round_number == 5'd4 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key3__h12550 :
	       key7__h12555 ;
  assign _dfoo91 =
	     (kg_round_number == 5'd3 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key3__h12550 :
	       key7__h12555 ;
  assign _dfoo93 =
	     (kg_round_number == 5'd2 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key3__h12550 :
	       key7__h12555 ;
  assign _dfoo95 =
	     (kg_round_number == 5'd1 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key3__h12550 :
	       key7__h12555 ;
  assign _dfoo97 =
	     (kg_round_number == 5'd0 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key3__h12550 :
	       key7__h12555 ;
  assign _dfoo99 =
	     (kg_round_number == 5'd14 &&
	      kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	      kg_key_length == 2'd2) ?
	       key2__h12549 :
	       key6__h12554 ;
  assign _theResult____h12552 =
	     (kg_key_length == 2'd2) ? key4___1__h16066 : key4__h12551 ;
  assign col_in0__h67039 = col0 ^ key[127:96] ;
  assign col_in1__h67040 = col1 ^ key[95:64] ;
  assign col_in2__h67041 = col2 ^ key[63:32] ;
  assign col_in3__h67042 = col3 ^ key[31:0] ;
  assign counter_108_EQ_maxround_969___d2122 = counter == maxround ;
  assign dr_sub_col_0_21_BIT_2_79_XOR_dr_sub_col_0_21_B_ETC___d525 =
	     { x__h33856 ^ dr_sub_col_5[3],
	       x__h34015 ^ dr_sub_col_5[2],
	       x__h34131 ^ dr_sub_col_5[1],
	       x__h34290 ^ dr_sub_col_5[0] } ;
  assign dr_sub_col_10_19_BIT_2_65_XOR_dr_sub_col_10_19_ETC___d440 =
	     { x__h31309 ^ dr_sub_col_15[3],
	       x__h31466 ^ dr_sub_col_15[2],
	       x__h31581 ^ dr_sub_col_15[1],
	       x__h31738 ^ dr_sub_col_15[0] } ;
  assign dr_sub_col_11_31_BIT_2_75_XOR_dr_sub_col_11_31_ETC___d610 =
	     { x__h35342 ^ dr_sub_col_12[3],
	       x__h35500 ^ dr_sub_col_12[2],
	       x__h35615 ^ dr_sub_col_12[1],
	       x__h35773 ^ dr_sub_col_12[0] } ;
  assign dr_sub_col_12_34_BIT_2_91_XOR_dr_sub_col_12_34_ETC___d737 =
	     { x__h39160 ^ dr_sub_col_1[3],
	       x__h39319 ^ dr_sub_col_1[2],
	       x__h39435 ^ dr_sub_col_1[1],
	       x__h39594 ^ dr_sub_col_1[0] } ;
  assign dr_sub_col_13_45_BIT_2_01_XOR_dr_sub_col_13_45_ETC___d907 =
	     { x__h43187 ^ dr_sub_col_2[3],
	       x__h43344 ^ dr_sub_col_2[2],
	       x__h43459 ^ dr_sub_col_2[1],
	       x__h43616 ^ dr_sub_col_2[0] } ;
  assign dr_sub_col_14_56_BIT_2_001_XOR_dr_sub_col_14_5_ETC___d1076 =
	     { x__h47219 ^ dr_sub_col_3[3],
	       x__h47376 ^ dr_sub_col_3[2],
	       x__h47491 ^ dr_sub_col_3[1],
	       x__h47648 ^ dr_sub_col_3[0] } ;
  assign dr_sub_col_15_18_BIT_2_63_XOR_dr_sub_col_15_18_ETC___d398 =
	     { x__h30038 ^ dr_sub_col_0[3],
	       x__h30196 ^ dr_sub_col_0[2],
	       x__h30311 ^ dr_sub_col_0[1],
	       x__h30469 ^ dr_sub_col_0[0] } ;
  assign dr_sub_col_1_33_BIT_2_89_XOR_dr_sub_col_1_33_B_ETC___d695 =
	     { x__h37884 ^ dr_sub_col_6[3],
	       x__h38041 ^ dr_sub_col_6[2],
	       x__h38156 ^ dr_sub_col_6[1],
	       x__h38313 ^ dr_sub_col_6[0] } ;
  assign dr_sub_col_2_44_BIT_2_89_XOR_dr_sub_col_2_44_B_ETC___d864 =
	     { x__h41916 ^ dr_sub_col_7[3],
	       x__h42073 ^ dr_sub_col_7[2],
	       x__h42188 ^ dr_sub_col_7[1],
	       x__h42345 ^ dr_sub_col_7[0] } ;
  assign dr_sub_col_3_55_BIT_2_99_XOR_dr_sub_col_3_55_B_ETC___d1034 =
	     { x__h45948 ^ dr_sub_col_4[3],
	       x__h46106 ^ dr_sub_col_4[2],
	       x__h46221 ^ dr_sub_col_4[1],
	       x__h46379 ^ dr_sub_col_4[0] } ;
  assign dr_sub_col_4_58_BIT_2_015_XOR_dr_sub_col_4_58__ETC___d1161 =
	     { x__h49766 ^ dr_sub_col_9[3],
	       x__h49925 ^ dr_sub_col_9[2],
	       x__h50041 ^ dr_sub_col_9[1],
	       x__h50200 ^ dr_sub_col_9[0] } ;
  assign dr_sub_col_5_20_BIT_2_77_XOR_dr_sub_col_5_20_B_ETC___d483 =
	     { x__h32580 ^ dr_sub_col_10[3],
	       x__h32737 ^ dr_sub_col_10[2],
	       x__h32852 ^ dr_sub_col_10[1],
	       x__h33009 ^ dr_sub_col_10[0] } ;
  assign dr_sub_col_6_32_BIT_2_77_XOR_dr_sub_col_6_32_B_ETC___d652 =
	     { x__h36613 ^ dr_sub_col_11[3],
	       x__h36770 ^ dr_sub_col_11[2],
	       x__h36885 ^ dr_sub_col_11[1],
	       x__h37042 ^ dr_sub_col_11[0] } ;
  assign dr_sub_col_7_43_BIT_2_87_XOR_dr_sub_col_7_43_B_ETC___d822 =
	     { x__h40645 ^ dr_sub_col_8[3],
	       x__h40803 ^ dr_sub_col_8[2],
	       x__h40918 ^ dr_sub_col_8[1],
	       x__h41076 ^ dr_sub_col_8[0] } ;
  assign dr_sub_col_8_46_BIT_2_03_XOR_dr_sub_col_8_46_B_ETC___d949 =
	     { x__h44463 ^ dr_sub_col_13[3],
	       x__h44622 ^ dr_sub_col_13[2],
	       x__h44738 ^ dr_sub_col_13[1],
	       x__h44897 ^ dr_sub_col_13[0] } ;
  assign dr_sub_col_9_57_BIT_2_013_XOR_dr_sub_col_9_57__ETC___d1119 =
	     { x__h48490 ^ dr_sub_col_14[3],
	       x__h48647 ^ dr_sub_col_14[2],
	       x__h48762 ^ dr_sub_col_14[1],
	       x__h48919 ^ dr_sub_col_14[0] } ;
  assign eight__h54389 =
	     four__h54889[7] ?
	       { four__h54889[6:4],
		 ~four__h54889[3:2],
		 four__h54889[1],
		 ~four__h54889[0],
		 1'd1 } :
	       { four__h54889[6:0], 1'd0 } ;
  assign eight__h54510 =
	     four__h54509[7] ?
	       { four__h54509[6:4],
		 ~four__h54509[3:2],
		 four__h54509[1],
		 ~four__h54509[0],
		 1'd1 } :
	       { four__h54509[6:0], 1'd0 } ;
  assign eight__h54630 =
	     four__h55131[7] ?
	       { four__h55131[6:4],
		 ~four__h55131[3:2],
		 four__h55131[1],
		 ~four__h55131[0],
		 1'd1 } :
	       { four__h55131[6:0], 1'd0 } ;
  assign eight__h55811 =
	     four__h55295[7] ?
	       { four__h55295[6:4],
		 ~four__h55295[3:2],
		 four__h55295[1],
		 ~four__h55295[0],
		 1'd1 } :
	       { four__h55295[6:0], 1'd0 } ;
  assign eight__h56836 =
	     four__h57336[7] ?
	       { four__h57336[6:4],
		 ~four__h57336[3:2],
		 four__h57336[1],
		 ~four__h57336[0],
		 1'd1 } :
	       { four__h57336[6:0], 1'd0 } ;
  assign eight__h56957 =
	     four__h56956[7] ?
	       { four__h56956[6:4],
		 ~four__h56956[3:2],
		 four__h56956[1],
		 ~four__h56956[0],
		 1'd1 } :
	       { four__h56956[6:0], 1'd0 } ;
  assign eight__h57077 =
	     four__h57578[7] ?
	       { four__h57578[6:4],
		 ~four__h57578[3:2],
		 four__h57578[1],
		 ~four__h57578[0],
		 1'd1 } :
	       { four__h57578[6:0], 1'd0 } ;
  assign eight__h58258 =
	     four__h57742[7] ?
	       { four__h57742[6:4],
		 ~four__h57742[3:2],
		 four__h57742[1],
		 ~four__h57742[0],
		 1'd1 } :
	       { four__h57742[6:0], 1'd0 } ;
  assign eight__h59283 =
	     four__h59783[7] ?
	       { four__h59783[6:4],
		 ~four__h59783[3:2],
		 four__h59783[1],
		 ~four__h59783[0],
		 1'd1 } :
	       { four__h59783[6:0], 1'd0 } ;
  assign eight__h59404 =
	     four__h59403[7] ?
	       { four__h59403[6:4],
		 ~four__h59403[3:2],
		 four__h59403[1],
		 ~four__h59403[0],
		 1'd1 } :
	       { four__h59403[6:0], 1'd0 } ;
  assign eight__h59524 =
	     four__h60025[7] ?
	       { four__h60025[6:4],
		 ~four__h60025[3:2],
		 four__h60025[1],
		 ~four__h60025[0],
		 1'd1 } :
	       { four__h60025[6:0], 1'd0 } ;
  assign eight__h60705 =
	     four__h60189[7] ?
	       { four__h60189[6:4],
		 ~four__h60189[3:2],
		 four__h60189[1],
		 ~four__h60189[0],
		 1'd1 } :
	       { four__h60189[6:0], 1'd0 } ;
  assign eight__h61729 =
	     four__h62229[7] ?
	       { four__h62229[6:4],
		 ~four__h62229[3:2],
		 four__h62229[1],
		 ~four__h62229[0],
		 1'd1 } :
	       { four__h62229[6:0], 1'd0 } ;
  assign eight__h61850 =
	     four__h61849[7] ?
	       { four__h61849[6:4],
		 ~four__h61849[3:2],
		 four__h61849[1],
		 ~four__h61849[0],
		 1'd1 } :
	       { four__h61849[6:0], 1'd0 } ;
  assign eight__h61970 =
	     four__h62471[7] ?
	       { four__h62471[6:4],
		 ~four__h62471[3:2],
		 four__h62471[1],
		 ~four__h62471[0],
		 1'd1 } :
	       { four__h62471[6:0], 1'd0 } ;
  assign eight__h63151 =
	     four__h62635[7] ?
	       { four__h62635[6:4],
		 ~four__h62635[3:2],
		 four__h62635[1],
		 ~four__h62635[0],
		 1'd1 } :
	       { four__h62635[6:0], 1'd0 } ;
  assign encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_save_ke_ETC___d2166 =
	     encrypt_keyyy[127:96] == kg_save_key0_0 ;
  assign encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_save_ke_ETC___d2182 =
	     encrypt_keyyy[127:96] == kg_save_key2_0 ;
  assign encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_save_ke_ETC___d2200 =
	     encrypt_keyyy[127:96] == kg_save_key0_1 ;
  assign encrypt_keyyy_BITS_159_TO_128_179_EQ_kg_save_k_ETC___d2180 =
	     encrypt_keyyy[159:128] == kg_save_key1_0 ;
  assign encrypt_keyyy_BITS_159_TO_128_179_EQ_kg_save_k_ETC___d2198 =
	     encrypt_keyyy[159:128] == kg_save_key3_0 ;
  assign encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_save_k_ETC___d2178 =
	     encrypt_keyyy[191:160] == kg_save_key0_0 ;
  assign encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_save_k_ETC___d2190 =
	     encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_save_k_ETC___d2178 &&
	     encrypt_keyyy_BITS_159_TO_128_179_EQ_kg_save_k_ETC___d2180 &&
	     encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_save_ke_ETC___d2182 &&
	     encrypt_keyyy_BITS_95_TO_64_167_EQ_kg_save_key_ETC___d2184 &&
	     encrypt_keyyy_BITS_63_TO_32_170_EQ_kg_save_key_ETC___d2186 &&
	     encrypt_keyyy_BITS_31_TO_0_173_EQ_kg_save_key1_ETC___d2188 &&
	     encrypt_keyylenn == 2'd1 ;
  assign encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_save_k_ETC___d2196 =
	     encrypt_keyyy[191:160] == kg_save_key2_0 ;
  assign encrypt_keyyy_BITS_223_TO_192_193_EQ_kg_save_k_ETC___d2194 =
	     encrypt_keyyy[223:192] == kg_save_key1_0 ;
  assign encrypt_keyyy_BITS_255_TO_224_191_EQ_kg_save_k_ETC___d2192 =
	     encrypt_keyyy[255:224] == kg_save_key0_0 ;
  assign encrypt_keyyy_BITS_255_TO_224_191_EQ_kg_save_k_ETC___d2205 =
	     encrypt_keyyy_BITS_255_TO_224_191_EQ_kg_save_k_ETC___d2192 &&
	     encrypt_keyyy_BITS_223_TO_192_193_EQ_kg_save_k_ETC___d2194 &&
	     encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_save_k_ETC___d2196 &&
	     encrypt_keyyy_BITS_159_TO_128_179_EQ_kg_save_k_ETC___d2198 &&
	     encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_save_ke_ETC___d2200 &&
	     encrypt_keyyy_BITS_95_TO_64_167_EQ_kg_save_key_ETC___d2202 &&
	     encrypt_keyyy_BITS_63_TO_32_170_EQ_kg_save_key_ETC___d2204 ;
  assign encrypt_keyyy_BITS_31_TO_0_173_EQ_kg_save_key1_ETC___d2188 =
	     encrypt_keyyy[31:0] == kg_save_key1_1 ;
  assign encrypt_keyyy_BITS_31_TO_0_173_EQ_kg_save_key3_ETC___d2174 =
	     encrypt_keyyy[31:0] == kg_save_key3_0 ;
  assign encrypt_keyyy_BITS_31_TO_0_173_EQ_kg_save_key3_ETC___d2206 =
	     encrypt_keyyy[31:0] == kg_save_key3_1 ;
  assign encrypt_keyyy_BITS_63_TO_32_170_EQ_kg_save_key_ETC___d2171 =
	     encrypt_keyyy[63:32] == kg_save_key2_0 ;
  assign encrypt_keyyy_BITS_63_TO_32_170_EQ_kg_save_key_ETC___d2186 =
	     encrypt_keyyy[63:32] == kg_save_key0_1 ;
  assign encrypt_keyyy_BITS_63_TO_32_170_EQ_kg_save_key_ETC___d2204 =
	     encrypt_keyyy[63:32] == kg_save_key2_1 ;
  assign encrypt_keyyy_BITS_95_TO_64_167_EQ_kg_save_key_ETC___d2168 =
	     encrypt_keyyy[95:64] == kg_save_key1_0 ;
  assign encrypt_keyyy_BITS_95_TO_64_167_EQ_kg_save_key_ETC___d2184 =
	     encrypt_keyyy[95:64] == kg_save_key3_0 ;
  assign encrypt_keyyy_BITS_95_TO_64_167_EQ_kg_save_key_ETC___d2202 =
	     encrypt_keyyy[95:64] == kg_save_key1_1 ;
  assign four__h54509 =
	     two__h55009[7] ?
	       { two__h55009[6:4],
		 ~two__h55009[3:2],
		 two__h55009[1],
		 ~two__h55009[0],
		 1'd1 } :
	       { two__h55009[6:0], 1'd0 } ;
  assign four__h54889 =
	     two__h54387[7] ?
	       { two__h54387[6:4],
		 ~two__h54387[3:2],
		 two__h54387[1],
		 ~two__h54387[0],
		 1'd1 } :
	       { two__h54387[6:0], 1'd0 } ;
  assign four__h55131 =
	     two__h55645[7] ?
	       { two__h55645[6:4],
		 ~two__h55645[3:2],
		 two__h55645[1],
		 ~two__h55645[0],
		 1'd1 } :
	       { two__h55645[6:0], 1'd0 } ;
  assign four__h55295 =
	     two__h55809[7] ?
	       { two__h55809[6:4],
		 ~two__h55809[3:2],
		 two__h55809[1],
		 ~two__h55809[0],
		 1'd1 } :
	       { two__h55809[6:0], 1'd0 } ;
  assign four__h56956 =
	     two__h57456[7] ?
	       { two__h57456[6:4],
		 ~two__h57456[3:2],
		 two__h57456[1],
		 ~two__h57456[0],
		 1'd1 } :
	       { two__h57456[6:0], 1'd0 } ;
  assign four__h57336 =
	     two__h56834[7] ?
	       { two__h56834[6:4],
		 ~two__h56834[3:2],
		 two__h56834[1],
		 ~two__h56834[0],
		 1'd1 } :
	       { two__h56834[6:0], 1'd0 } ;
  assign four__h57578 =
	     two__h58092[7] ?
	       { two__h58092[6:4],
		 ~two__h58092[3:2],
		 two__h58092[1],
		 ~two__h58092[0],
		 1'd1 } :
	       { two__h58092[6:0], 1'd0 } ;
  assign four__h57742 =
	     two__h58256[7] ?
	       { two__h58256[6:4],
		 ~two__h58256[3:2],
		 two__h58256[1],
		 ~two__h58256[0],
		 1'd1 } :
	       { two__h58256[6:0], 1'd0 } ;
  assign four__h59403 =
	     two__h59903[7] ?
	       { two__h59903[6:4],
		 ~two__h59903[3:2],
		 two__h59903[1],
		 ~two__h59903[0],
		 1'd1 } :
	       { two__h59903[6:0], 1'd0 } ;
  assign four__h59783 =
	     two__h59281[7] ?
	       { two__h59281[6:4],
		 ~two__h59281[3:2],
		 two__h59281[1],
		 ~two__h59281[0],
		 1'd1 } :
	       { two__h59281[6:0], 1'd0 } ;
  assign four__h60025 =
	     two__h60539[7] ?
	       { two__h60539[6:4],
		 ~two__h60539[3:2],
		 two__h60539[1],
		 ~two__h60539[0],
		 1'd1 } :
	       { two__h60539[6:0], 1'd0 } ;
  assign four__h60189 =
	     two__h60703[7] ?
	       { two__h60703[6:4],
		 ~two__h60703[3:2],
		 two__h60703[1],
		 ~two__h60703[0],
		 1'd1 } :
	       { two__h60703[6:0], 1'd0 } ;
  assign four__h61849 =
	     two__h62349[7] ?
	       { two__h62349[6:4],
		 ~two__h62349[3:2],
		 two__h62349[1],
		 ~two__h62349[0],
		 1'd1 } :
	       { two__h62349[6:0], 1'd0 } ;
  assign four__h62229 =
	     two__h61727[7] ?
	       { two__h61727[6:4],
		 ~two__h61727[3:2],
		 two__h61727[1],
		 ~two__h61727[0],
		 1'd1 } :
	       { two__h61727[6:0], 1'd0 } ;
  assign four__h62471 =
	     two__h62985[7] ?
	       { two__h62985[6:4],
		 ~two__h62985[3:2],
		 two__h62985[1],
		 ~two__h62985[0],
		 1'd1 } :
	       { two__h62985[6:0], 1'd0 } ;
  assign four__h62635 =
	     two__h63149[7] ?
	       { two__h63149[6:4],
		 ~two__h63149[3:2],
		 two__h63149[1],
		 ~two__h63149[0],
		 1'd1 } :
	       { two__h63149[6:0], 1'd0 } ;
  assign getKeynum___1__h73730 = maxround - counter ;
  assign key0__h12547 = kg_prev_key0 ^ kg_last_col_sub_rot ;
  assign key1__h12548 = kg_prev_key1 ^ key0__h12547 ;
  assign key2__h12549 = kg_prev_key2 ^ key1__h12548 ;
  assign key3__h12550 = kg_prev_key3 ^ key2__h12549 ;
  assign key4___1__h16066 = kg_prev_key4 ^ kg_aes256_subcol4 ;
  assign key4__h12551 = kg_prev_key4 ^ key3__h12550 ;
  assign key5__h12553 = kg_prev_key5 ^ _theResult____h12552 ;
  assign key6__h12554 = kg_prev_key6 ^ key5__h12553 ;
  assign key7__h12555 = kg_prev_key7 ^ key6__h12554 ;
  assign kg_key_saved_164_AND_NOT_encrypt_keyyy_BITS_12_ETC___d2256 =
	     kg_key_saved &&
	     (NOT_encrypt_keyyy_BITS_127_TO_96_165_EQ_kg_sav_ETC___d2219 ||
	      encrypt_keyylenn != 2'd0) &&
	     NOT_encrypt_keyyy_BITS_191_TO_160_177_EQ_kg_sa_ETC___d2252 ;
  assign kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d182 =
	     kg_round_number == 5'd0 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_0_47_AND_kg_round_number__ETC___d229 =
	     kg_round_number == 5'd0 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d192 =
	     kg_round_number == 5'd10 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_10_68_AND_kg_round_number_ETC___d239 =
	     kg_round_number == 5'd10 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d193 =
	     kg_round_number == 5'd11 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_11_70_AND_kg_round_number_ETC___d240 =
	     kg_round_number == 5'd11 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d194 =
	     kg_round_number == 5'd12 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_12_72_AND_kg_round_number_ETC___d241 =
	     kg_round_number == 5'd12 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d195 =
	     kg_round_number == 5'd13 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_13_74_AND_kg_round_number_ETC___d242 =
	     kg_round_number == 5'd13 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d196 =
	     kg_round_number == 5'd14 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_14_76_AND_kg_round_number_ETC___d243 =
	     kg_round_number == 5'd14 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d183 =
	     kg_round_number == 5'd1 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_1_50_AND_kg_round_number__ETC___d230 =
	     kg_round_number == 5'd1 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d184 =
	     kg_round_number == 5'd2 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_2_52_AND_kg_round_number__ETC___d231 =
	     kg_round_number == 5'd2 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d185 =
	     kg_round_number == 5'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_3_54_AND_kg_round_number__ETC___d232 =
	     kg_round_number == 5'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d186 =
	     kg_round_number == 5'd4 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_4_56_AND_kg_round_number__ETC___d233 =
	     kg_round_number == 5'd4 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d187 =
	     kg_round_number == 5'd5 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_5_58_AND_kg_round_number__ETC___d234 =
	     kg_round_number == 5'd5 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d188 =
	     kg_round_number == 5'd6 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_6_60_AND_kg_round_number__ETC___d235 =
	     kg_round_number == 5'd6 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d189 =
	     kg_round_number == 5'd7 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_7_62_AND_kg_round_number__ETC___d236 =
	     kg_round_number == 5'd7 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d190 =
	     kg_round_number == 5'd8 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_8_64_AND_kg_round_number__ETC___d237 =
	     kg_round_number == 5'd8 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d191 =
	     kg_round_number == 5'd9 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_9_66_AND_kg_round_number__ETC___d238 =
	     kg_round_number == 5'd9 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_EQ_kg_maxrounds_9___d104 =
	     kg_round_number == kg_maxrounds ;
  assign kg_round_number_8_PLUS_1_41_EQ_0_97_AND_kg_rou_ETC___d198 =
	     x__h22457 == 5'd0 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_0_97_AND_kg_rou_ETC___d244 =
	     x__h22457 == 5'd0 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_10_17_AND_kg_ro_ETC___d218 =
	     x__h22457 == 5'd10 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_10_17_AND_kg_ro_ETC___d254 =
	     x__h22457 == 5'd10 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_11_19_AND_kg_ro_ETC___d220 =
	     x__h22457 == 5'd11 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_11_19_AND_kg_ro_ETC___d255 =
	     x__h22457 == 5'd11 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_12_21_AND_kg_ro_ETC___d222 =
	     x__h22457 == 5'd12 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_12_21_AND_kg_ro_ETC___d256 =
	     x__h22457 == 5'd12 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_13_23_AND_kg_ro_ETC___d224 =
	     x__h22457 == 5'd13 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_13_23_AND_kg_ro_ETC___d257 =
	     x__h22457 == 5'd13 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_14_25_AND_kg_ro_ETC___d226 =
	     x__h22457 == 5'd14 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_14_25_AND_kg_ro_ETC___d258 =
	     x__h22457 == 5'd14 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_1_99_AND_kg_rou_ETC___d200 =
	     x__h22457 == 5'd1 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_1_99_AND_kg_rou_ETC___d245 =
	     x__h22457 == 5'd1 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_2_01_AND_kg_rou_ETC___d202 =
	     x__h22457 == 5'd2 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_2_01_AND_kg_rou_ETC___d246 =
	     x__h22457 == 5'd2 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_3_03_AND_kg_rou_ETC___d204 =
	     x__h22457 == 5'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_3_03_AND_kg_rou_ETC___d247 =
	     x__h22457 == 5'd3 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_4_05_AND_kg_rou_ETC___d206 =
	     x__h22457 == 5'd4 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_4_05_AND_kg_rou_ETC___d248 =
	     x__h22457 == 5'd4 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_5_07_AND_kg_rou_ETC___d208 =
	     x__h22457 == 5'd5 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_5_07_AND_kg_rou_ETC___d249 =
	     x__h22457 == 5'd5 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_6_09_AND_kg_rou_ETC___d210 =
	     x__h22457 == 5'd6 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_6_09_AND_kg_rou_ETC___d250 =
	     x__h22457 == 5'd6 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_7_11_AND_kg_rou_ETC___d212 =
	     x__h22457 == 5'd7 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_7_11_AND_kg_rou_ETC___d251 =
	     x__h22457 == 5'd7 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_8_13_AND_kg_rou_ETC___d214 =
	     x__h22457 == 5'd8 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_8_13_AND_kg_rou_ETC___d252 =
	     x__h22457 == 5'd8 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_9_15_AND_kg_rou_ETC___d216 =
	     x__h22457 == 5'd9 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     kg_round_toggle_192 ;
  assign kg_round_number_8_PLUS_1_41_EQ_9_15_AND_kg_rou_ETC___d253 =
	     x__h22457 == 5'd9 &&
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     kg_key_length == 2'd1 &&
	     !kg_round_toggle_192 ;
  assign kg_round_number_8_ULE_kg_maxrounds_9_00_AND_kg_ETC___d114 =
	     kg_round_number_8_ULE_kg_maxrounds_9___d100 &&
	     (kg_key_length == 2'd0 || kg_key_length == 2'd1 ||
	      kg_key_length == 2'd2 &&
	      !kg_round_number_8_EQ_kg_maxrounds_9___d104) ;
  assign kg_round_number_8_ULE_kg_maxrounds_9___d100 =
	     kg_round_number <= kg_maxrounds ;
  assign roundnumber__h73726 = decrypt ? getKeynum___1__h73730 : counter ;
  assign spliced_bits__h10680 = kg_sbox_out ^ kg_rcon[31:24] ;
  assign spliced_bits__h10895 = kg_sbox_out ^ kg_rcon[23:16] ;
  assign spliced_bits__h11110 = kg_sbox_out ^ kg_rcon[15:8] ;
  assign spliced_bits__h11325 = kg_sbox_out ^ kg_rcon[7:0] ;
  assign spliced_bits__h29158 =
	     { x__h33273 ^ dr_sub_col_5[7],
	       x__h33465 ^ dr_sub_col_5[6],
	       x__h33581 ^ dr_sub_col_5[5],
	       x__h33697 ^ dr_sub_col_5[4],
	       dr_sub_col_0_21_BIT_2_79_XOR_dr_sub_col_0_21_B_ETC___d525 } ;
  assign spliced_bits__h29186 =
	     { x__h32002 ^ dr_sub_col_10[7],
	       x__h32193 ^ dr_sub_col_10[6],
	       x__h32308 ^ dr_sub_col_10[5],
	       x__h32423 ^ dr_sub_col_10[4],
	       dr_sub_col_5_20_BIT_2_77_XOR_dr_sub_col_5_20_B_ETC___d483 } ;
  assign spliced_bits__h29214 =
	     { x__h30731 ^ dr_sub_col_15[7],
	       x__h30922 ^ dr_sub_col_15[6],
	       x__h31037 ^ dr_sub_col_15[5],
	       x__h31152 ^ dr_sub_col_15[4],
	       dr_sub_col_10_19_BIT_2_65_XOR_dr_sub_col_10_19_ETC___d440 } ;
  assign spliced_bits__h29242 =
	     { x__h29420 ^ dr_sub_col_0[7],
	       x__h29650 ^ dr_sub_col_0[6],
	       x__h29765 ^ dr_sub_col_0[5],
	       x__h29880 ^ dr_sub_col_0[4],
	       dr_sub_col_15_18_BIT_2_63_XOR_dr_sub_col_15_18_ETC___d398 } ;
  assign spliced_bits__h34463 =
	     { x__h38577 ^ dr_sub_col_1[7],
	       x__h38769 ^ dr_sub_col_1[6],
	       x__h38885 ^ dr_sub_col_1[5],
	       x__h39001 ^ dr_sub_col_1[4],
	       dr_sub_col_12_34_BIT_2_91_XOR_dr_sub_col_12_34_ETC___d737 } ;
  assign spliced_bits__h34491 =
	     { x__h37306 ^ dr_sub_col_6[7],
	       x__h37497 ^ dr_sub_col_6[6],
	       x__h37612 ^ dr_sub_col_6[5],
	       x__h37727 ^ dr_sub_col_6[4],
	       dr_sub_col_1_33_BIT_2_89_XOR_dr_sub_col_1_33_B_ETC___d695 } ;
  assign spliced_bits__h34519 =
	     { x__h36035 ^ dr_sub_col_11[7],
	       x__h36226 ^ dr_sub_col_11[6],
	       x__h36341 ^ dr_sub_col_11[5],
	       x__h36456 ^ dr_sub_col_11[4],
	       dr_sub_col_6_32_BIT_2_77_XOR_dr_sub_col_6_32_B_ETC___d652 } ;
  assign spliced_bits__h34547 =
	     { x__h34725 ^ dr_sub_col_12[7],
	       x__h34954 ^ dr_sub_col_12[6],
	       x__h35069 ^ dr_sub_col_12[5],
	       x__h35184 ^ dr_sub_col_12[4],
	       dr_sub_col_11_31_BIT_2_75_XOR_dr_sub_col_11_31_ETC___d610 } ;
  assign spliced_bits__h39766 =
	     { x__h43880 ^ dr_sub_col_13[7],
	       x__h44072 ^ dr_sub_col_13[6],
	       x__h44188 ^ dr_sub_col_13[5],
	       x__h44304 ^ dr_sub_col_13[4],
	       dr_sub_col_8_46_BIT_2_03_XOR_dr_sub_col_8_46_B_ETC___d949 } ;
  assign spliced_bits__h39794 =
	     { x__h42609 ^ dr_sub_col_2[7],
	       x__h42800 ^ dr_sub_col_2[6],
	       x__h42915 ^ dr_sub_col_2[5],
	       x__h43030 ^ dr_sub_col_2[4],
	       dr_sub_col_13_45_BIT_2_01_XOR_dr_sub_col_13_45_ETC___d907 } ;
  assign spliced_bits__h39822 =
	     { x__h41338 ^ dr_sub_col_7[7],
	       x__h41529 ^ dr_sub_col_7[6],
	       x__h41644 ^ dr_sub_col_7[5],
	       x__h41759 ^ dr_sub_col_7[4],
	       dr_sub_col_2_44_BIT_2_89_XOR_dr_sub_col_2_44_B_ETC___d864 } ;
  assign spliced_bits__h39850 =
	     { x__h40028 ^ dr_sub_col_8[7],
	       x__h40257 ^ dr_sub_col_8[6],
	       x__h40372 ^ dr_sub_col_8[5],
	       x__h40487 ^ dr_sub_col_8[4],
	       dr_sub_col_7_43_BIT_2_87_XOR_dr_sub_col_7_43_B_ETC___d822 } ;
  assign spliced_bits__h45069 =
	     { x__h49183 ^ dr_sub_col_9[7],
	       x__h49375 ^ dr_sub_col_9[6],
	       x__h49491 ^ dr_sub_col_9[5],
	       x__h49607 ^ dr_sub_col_9[4],
	       dr_sub_col_4_58_BIT_2_015_XOR_dr_sub_col_4_58__ETC___d1161 } ;
  assign spliced_bits__h45097 =
	     { x__h47912 ^ dr_sub_col_14[7],
	       x__h48103 ^ dr_sub_col_14[6],
	       x__h48218 ^ dr_sub_col_14[5],
	       x__h48333 ^ dr_sub_col_14[4],
	       dr_sub_col_9_57_BIT_2_013_XOR_dr_sub_col_9_57__ETC___d1119 } ;
  assign spliced_bits__h45125 =
	     { x__h46641 ^ dr_sub_col_3[7],
	       x__h46832 ^ dr_sub_col_3[6],
	       x__h46947 ^ dr_sub_col_3[5],
	       x__h47062 ^ dr_sub_col_3[4],
	       dr_sub_col_14_56_BIT_2_001_XOR_dr_sub_col_14_5_ETC___d1076 } ;
  assign spliced_bits__h45153 =
	     { x__h45331 ^ dr_sub_col_4[7],
	       x__h45560 ^ dr_sub_col_4[6],
	       x__h45675 ^ dr_sub_col_4[5],
	       x__h45790 ^ dr_sub_col_4[4],
	       dr_sub_col_3_55_BIT_2_99_XOR_dr_sub_col_3_55_B_ETC___d1034 } ;
  assign spliced_bits__h53819 = x__h55792 ^ y__h55793 ;
  assign spliced_bits__h53847 = x__h55277 ^ y__h55278 ;
  assign spliced_bits__h53875 = x__h54762 ^ y__h54763 ;
  assign spliced_bits__h53903 = x__h53964 ^ y__h53965 ;
  assign spliced_bits__h56281 = x__h58239 ^ y__h58240 ;
  assign spliced_bits__h56309 = x__h57724 ^ y__h57725 ;
  assign spliced_bits__h56337 = x__h57209 ^ y__h57210 ;
  assign spliced_bits__h56365 = x__h56426 ^ y__h56427 ;
  assign spliced_bits__h58728 = x__h60686 ^ y__h60687 ;
  assign spliced_bits__h58756 = x__h60171 ^ y__h60172 ;
  assign spliced_bits__h58784 = x__h59656 ^ y__h59657 ;
  assign spliced_bits__h58812 = x__h58873 ^ y__h58874 ;
  assign spliced_bits__h61175 = x__h63132 ^ y__h63133 ;
  assign spliced_bits__h61203 = x__h62617 ^ y__h62618 ;
  assign spliced_bits__h61231 = x__h62102 ^ y__h62103 ;
  assign spliced_bits__h61259 = x__h61320 ^ y__h61321 ;
  assign temp_col__h11429 = x__h11473 ^ x__h11305 ;
  assign two__h54387 =
	     dr_col__14[7] ?
	       { dr_col__14[6:4],
		 ~dr_col__14[3:2],
		 dr_col__14[1],
		 ~dr_col__14[0],
		 1'd1 } :
	       { dr_col__14[6:0], 1'd0 } ;
  assign two__h55009 =
	     dr_col__13[7] ?
	       { dr_col__13[6:4],
		 ~dr_col__13[3:2],
		 dr_col__13[1],
		 ~dr_col__13[0],
		 1'd1 } :
	       { dr_col__13[6:0], 1'd0 } ;
  assign two__h55645 =
	     dr_col__12[7] ?
	       { dr_col__12[6:4],
		 ~dr_col__12[3:2],
		 dr_col__12[1],
		 ~dr_col__12[0],
		 1'd1 } :
	       { dr_col__12[6:0], 1'd0 } ;
  assign two__h55809 =
	     dr_col__15[7] ?
	       { dr_col__15[6:4],
		 ~dr_col__15[3:2],
		 dr_col__15[1],
		 ~dr_col__15[0],
		 1'd1 } :
	       { dr_col__15[6:0], 1'd0 } ;
  assign two__h56834 =
	     dr_col__10[7] ?
	       { dr_col__10[6:4],
		 ~dr_col__10[3:2],
		 dr_col__10[1],
		 ~dr_col__10[0],
		 1'd1 } :
	       { dr_col__10[6:0], 1'd0 } ;
  assign two__h57456 =
	     dr_col__9[7] ?
	       { dr_col__9[6:4],
		 ~dr_col__9[3:2],
		 dr_col__9[1],
		 ~dr_col__9[0],
		 1'd1 } :
	       { dr_col__9[6:0], 1'd0 } ;
  assign two__h58092 =
	     dr_col__8[7] ?
	       { dr_col__8[6:4],
		 ~dr_col__8[3:2],
		 dr_col__8[1],
		 ~dr_col__8[0],
		 1'd1 } :
	       { dr_col__8[6:0], 1'd0 } ;
  assign two__h58256 =
	     dr_col__11[7] ?
	       { dr_col__11[6:4],
		 ~dr_col__11[3:2],
		 dr_col__11[1],
		 ~dr_col__11[0],
		 1'd1 } :
	       { dr_col__11[6:0], 1'd0 } ;
  assign two__h59281 =
	     dr_col__6[7] ?
	       { dr_col__6[6:4],
		 ~dr_col__6[3:2],
		 dr_col__6[1],
		 ~dr_col__6[0],
		 1'd1 } :
	       { dr_col__6[6:0], 1'd0 } ;
  assign two__h59903 =
	     dr_col__5[7] ?
	       { dr_col__5[6:4],
		 ~dr_col__5[3:2],
		 dr_col__5[1],
		 ~dr_col__5[0],
		 1'd1 } :
	       { dr_col__5[6:0], 1'd0 } ;
  assign two__h60539 =
	     dr_col__4[7] ?
	       { dr_col__4[6:4],
		 ~dr_col__4[3:2],
		 dr_col__4[1],
		 ~dr_col__4[0],
		 1'd1 } :
	       { dr_col__4[6:0], 1'd0 } ;
  assign two__h60703 =
	     dr_col__7[7] ?
	       { dr_col__7[6:4],
		 ~dr_col__7[3:2],
		 dr_col__7[1],
		 ~dr_col__7[0],
		 1'd1 } :
	       { dr_col__7[6:0], 1'd0 } ;
  assign two__h61727 =
	     dr_col__2[7] ?
	       { dr_col__2[6:4],
		 ~dr_col__2[3:2],
		 dr_col__2[1],
		 ~dr_col__2[0],
		 1'd1 } :
	       { dr_col__2[6:0], 1'd0 } ;
  assign two__h62349 =
	     dr_col__1[7] ?
	       { dr_col__1[6:4],
		 ~dr_col__1[3:2],
		 dr_col__1[1],
		 ~dr_col__1[0],
		 1'd1 } :
	       { dr_col__1[6:0], 1'd0 } ;
  assign two__h62985 =
	     dr_col__0[7] ?
	       { dr_col__0[6:4],
		 ~dr_col__0[3:2],
		 dr_col__0[1],
		 ~dr_col__0[0],
		 1'd1 } :
	       { dr_col__0[6:0], 1'd0 } ;
  assign two__h63149 =
	     dr_col__3[7] ?
	       { dr_col__3[6:4],
		 ~dr_col__3[3:2],
		 dr_col__3[1],
		 ~dr_col__3[0],
		 1'd1 } :
	       { dr_col__3[6:0], 1'd0 } ;
  assign x__h10104 = { kg_prev_key5[23:0], kg_prev_key5[31:24] } ;
  assign x__h10514 = { kg_prev_key7[23:0], kg_prev_key7[31:24] } ;
  assign x__h10660 = { spliced_bits__h10680, kg_last_col_sub_rot[23:0] } ;
  assign x__h10875 =
	     { kg_last_col_sub_rot[31:24],
	       spliced_bits__h10895,
	       kg_last_col_sub_rot[15:0] } ;
  assign x__h11090 =
	     { kg_last_col_sub_rot[31:16],
	       spliced_bits__h11110,
	       kg_last_col_sub_rot[7:0] } ;
  assign x__h11305 = { kg_last_col_sub_rot[31:8], spliced_bits__h11325 } ;
  assign x__h11473 = x__h11474 ^ kg_prev_key3 ;
  assign x__h11474 = x__h11476 ^ kg_prev_key2 ;
  assign x__h11476 = kg_prev_key0 ^ kg_prev_key1 ;
  assign x__h11775 = { kg_sbox_out, kg_aes256_subcol4[23:0] } ;
  assign x__h11965 =
	     { kg_aes256_subcol4[31:24],
	       kg_sbox_out,
	       kg_aes256_subcol4[15:0] } ;
  assign x__h12159 =
	     { kg_aes256_subcol4[31:16],
	       kg_sbox_out,
	       kg_aes256_subcol4[7:0] } ;
  assign x__h12353 = { kg_aes256_subcol4[31:8], kg_sbox_out } ;
  assign x__h14000 = { key3__h12550[23:0], key3__h12550[31:24] } ;
  assign x__h19400 = { key5__h12553[23:0], key5__h12553[31:24] } ;
  assign x__h22385 = { key7__h12555[23:0], key7__h12555[31:24] } ;
  assign x__h22457 = kg_round_number + 5'd1 ;
  assign x__h22778 = kg_round_number + 5'd2 ;
  assign x__h29135 =
	     { spliced_bits__h29242,
	       spliced_bits__h29214,
	       spliced_bits__h29186,
	       spliced_bits__h29158 } ^
	     key[127:96] ;
  assign x__h29420 = x__h29422 ^ dr_sub_col_5[7] ;
  assign x__h29422 = x__h29424 ^ dr_sub_col_10[7] ;
  assign x__h29424 = dr_sub_col_15[6] ^ dr_sub_col_10[6] ;
  assign x__h29650 = x__h29652 ^ dr_sub_col_5[6] ;
  assign x__h29652 = x__h29654 ^ dr_sub_col_10[6] ;
  assign x__h29654 = dr_sub_col_15[5] ^ dr_sub_col_10[5] ;
  assign x__h29765 = x__h29767 ^ dr_sub_col_5[5] ;
  assign x__h29767 = x__h29769 ^ dr_sub_col_10[5] ;
  assign x__h29769 = dr_sub_col_15[4] ^ dr_sub_col_10[4] ;
  assign x__h29880 = x__h29882 ^ dr_sub_col_5[4] ;
  assign x__h29882 = x__h29884 ^ dr_sub_col_10[7] ;
  assign x__h29884 = x__h29886 ^ dr_sub_col_10[4] ;
  assign x__h29886 = x__h29888 ^ dr_sub_col_10[3] ;
  assign x__h29888 = dr_sub_col_15[3] ^ dr_sub_col_15[7] ;
  assign x__h30038 = x__h30040 ^ dr_sub_col_5[3] ;
  assign x__h30040 = x__h30042 ^ dr_sub_col_10[7] ;
  assign x__h30042 = x__h30044 ^ dr_sub_col_10[3] ;
  assign x__h30044 = x__h30046 ^ dr_sub_col_10[2] ;
  assign x__h30046 = dr_sub_col_15[2] ^ dr_sub_col_15[7] ;
  assign x__h30196 = x__h30198 ^ dr_sub_col_5[2] ;
  assign x__h30198 = x__h30200 ^ dr_sub_col_10[2] ;
  assign x__h30200 = dr_sub_col_15[1] ^ dr_sub_col_10[1] ;
  assign x__h30311 = x__h30313 ^ dr_sub_col_5[1] ;
  assign x__h30313 = x__h30315 ^ dr_sub_col_10[7] ;
  assign x__h30315 = x__h30317 ^ dr_sub_col_10[1] ;
  assign x__h30317 = x__h30319 ^ dr_sub_col_10[0] ;
  assign x__h30319 = dr_sub_col_15[0] ^ dr_sub_col_15[7] ;
  assign x__h30469 = x__h30471 ^ dr_sub_col_5[0] ;
  assign x__h30471 = x__h30473 ^ dr_sub_col_10[0] ;
  assign x__h30473 = dr_sub_col_15[7] ^ dr_sub_col_10[7] ;
  assign x__h30731 = x__h30733 ^ dr_sub_col_0[7] ;
  assign x__h30733 = x__h30735 ^ dr_sub_col_5[7] ;
  assign x__h30735 = dr_sub_col_10[6] ^ dr_sub_col_5[6] ;
  assign x__h30922 = x__h30924 ^ dr_sub_col_0[6] ;
  assign x__h30924 = x__h30926 ^ dr_sub_col_5[6] ;
  assign x__h30926 = dr_sub_col_10[5] ^ dr_sub_col_5[5] ;
  assign x__h31037 = x__h31039 ^ dr_sub_col_0[5] ;
  assign x__h31039 = x__h31041 ^ dr_sub_col_5[5] ;
  assign x__h31041 = dr_sub_col_10[4] ^ dr_sub_col_5[4] ;
  assign x__h31152 = x__h31154 ^ dr_sub_col_0[4] ;
  assign x__h31154 = x__h31156 ^ dr_sub_col_5[7] ;
  assign x__h31156 = x__h31158 ^ dr_sub_col_5[4] ;
  assign x__h31158 = x__h31160 ^ dr_sub_col_5[3] ;
  assign x__h31160 = dr_sub_col_10[3] ^ dr_sub_col_10[7] ;
  assign x__h31309 = x__h31311 ^ dr_sub_col_0[3] ;
  assign x__h31311 = x__h31313 ^ dr_sub_col_5[7] ;
  assign x__h31313 = x__h31315 ^ dr_sub_col_5[3] ;
  assign x__h31315 = x__h31317 ^ dr_sub_col_5[2] ;
  assign x__h31317 = dr_sub_col_10[2] ^ dr_sub_col_10[7] ;
  assign x__h31466 = x__h31468 ^ dr_sub_col_0[2] ;
  assign x__h31468 = x__h31470 ^ dr_sub_col_5[2] ;
  assign x__h31470 = dr_sub_col_10[1] ^ dr_sub_col_5[1] ;
  assign x__h31581 = x__h31583 ^ dr_sub_col_0[1] ;
  assign x__h31583 = x__h31585 ^ dr_sub_col_5[7] ;
  assign x__h31585 = x__h31587 ^ dr_sub_col_5[1] ;
  assign x__h31587 = x__h31589 ^ dr_sub_col_5[0] ;
  assign x__h31589 = dr_sub_col_10[0] ^ dr_sub_col_10[7] ;
  assign x__h31738 = x__h31740 ^ dr_sub_col_0[0] ;
  assign x__h31740 = x__h31742 ^ dr_sub_col_5[0] ;
  assign x__h31742 = dr_sub_col_10[7] ^ dr_sub_col_5[7] ;
  assign x__h32002 = x__h32004 ^ dr_sub_col_15[7] ;
  assign x__h32004 = x__h32006 ^ dr_sub_col_0[7] ;
  assign x__h32006 = dr_sub_col_5[6] ^ dr_sub_col_0[6] ;
  assign x__h32193 = x__h32195 ^ dr_sub_col_15[6] ;
  assign x__h32195 = x__h32197 ^ dr_sub_col_0[6] ;
  assign x__h32197 = dr_sub_col_5[5] ^ dr_sub_col_0[5] ;
  assign x__h32308 = x__h32310 ^ dr_sub_col_15[5] ;
  assign x__h32310 = x__h32312 ^ dr_sub_col_0[5] ;
  assign x__h32312 = dr_sub_col_5[4] ^ dr_sub_col_0[4] ;
  assign x__h32423 = x__h32425 ^ dr_sub_col_15[4] ;
  assign x__h32425 = x__h32427 ^ dr_sub_col_0[7] ;
  assign x__h32427 = x__h32429 ^ dr_sub_col_0[4] ;
  assign x__h32429 = x__h32431 ^ dr_sub_col_0[3] ;
  assign x__h32431 = dr_sub_col_5[3] ^ dr_sub_col_5[7] ;
  assign x__h32580 = x__h32582 ^ dr_sub_col_15[3] ;
  assign x__h32582 = x__h32584 ^ dr_sub_col_0[7] ;
  assign x__h32584 = x__h32586 ^ dr_sub_col_0[3] ;
  assign x__h32586 = x__h32588 ^ dr_sub_col_0[2] ;
  assign x__h32588 = dr_sub_col_5[2] ^ dr_sub_col_5[7] ;
  assign x__h32737 = x__h32739 ^ dr_sub_col_15[2] ;
  assign x__h32739 = x__h32741 ^ dr_sub_col_0[2] ;
  assign x__h32741 = dr_sub_col_5[1] ^ dr_sub_col_0[1] ;
  assign x__h32852 = x__h32854 ^ dr_sub_col_15[1] ;
  assign x__h32854 = x__h32856 ^ dr_sub_col_0[7] ;
  assign x__h32856 = x__h32858 ^ dr_sub_col_0[1] ;
  assign x__h32858 = x__h32860 ^ dr_sub_col_0[0] ;
  assign x__h32860 = dr_sub_col_5[0] ^ dr_sub_col_5[7] ;
  assign x__h33009 = x__h33011 ^ dr_sub_col_15[0] ;
  assign x__h33011 = x__h33013 ^ dr_sub_col_0[0] ;
  assign x__h33013 = dr_sub_col_5[7] ^ dr_sub_col_0[7] ;
  assign x__h33273 = x__h33275 ^ dr_sub_col_10[7] ;
  assign x__h33275 = x__h33277 ^ dr_sub_col_15[7] ;
  assign x__h33277 = dr_sub_col_0[6] ^ dr_sub_col_15[6] ;
  assign x__h33465 = x__h33467 ^ dr_sub_col_10[6] ;
  assign x__h33467 = x__h33469 ^ dr_sub_col_15[6] ;
  assign x__h33469 = dr_sub_col_0[5] ^ dr_sub_col_15[5] ;
  assign x__h33581 = x__h33583 ^ dr_sub_col_10[5] ;
  assign x__h33583 = x__h33585 ^ dr_sub_col_15[5] ;
  assign x__h33585 = dr_sub_col_0[4] ^ dr_sub_col_15[4] ;
  assign x__h33697 = x__h33699 ^ dr_sub_col_10[4] ;
  assign x__h33699 = x__h33701 ^ dr_sub_col_15[7] ;
  assign x__h33701 = x__h33703 ^ dr_sub_col_15[4] ;
  assign x__h33703 = x__h33705 ^ dr_sub_col_15[3] ;
  assign x__h33705 = dr_sub_col_0[3] ^ dr_sub_col_0[7] ;
  assign x__h33856 = x__h33858 ^ dr_sub_col_10[3] ;
  assign x__h33858 = x__h33860 ^ dr_sub_col_15[7] ;
  assign x__h33860 = x__h33862 ^ dr_sub_col_15[3] ;
  assign x__h33862 = x__h33864 ^ dr_sub_col_15[2] ;
  assign x__h33864 = dr_sub_col_0[2] ^ dr_sub_col_0[7] ;
  assign x__h34015 = x__h34017 ^ dr_sub_col_10[2] ;
  assign x__h34017 = x__h34019 ^ dr_sub_col_15[2] ;
  assign x__h34019 = dr_sub_col_0[1] ^ dr_sub_col_15[1] ;
  assign x__h34131 = x__h34133 ^ dr_sub_col_10[1] ;
  assign x__h34133 = x__h34135 ^ dr_sub_col_15[7] ;
  assign x__h34135 = x__h34137 ^ dr_sub_col_15[1] ;
  assign x__h34137 = x__h34139 ^ dr_sub_col_15[0] ;
  assign x__h34139 = dr_sub_col_0[0] ^ dr_sub_col_0[7] ;
  assign x__h34290 = x__h34292 ^ dr_sub_col_10[0] ;
  assign x__h34292 = x__h34294 ^ dr_sub_col_15[0] ;
  assign x__h34294 = dr_sub_col_0[7] ^ dr_sub_col_15[7] ;
  assign x__h34440 =
	     { spliced_bits__h34547,
	       spliced_bits__h34519,
	       spliced_bits__h34491,
	       spliced_bits__h34463 } ^
	     key[95:64] ;
  assign x__h34725 = x__h34727 ^ dr_sub_col_1[7] ;
  assign x__h34727 = x__h34729 ^ dr_sub_col_6[7] ;
  assign x__h34729 = dr_sub_col_11[6] ^ dr_sub_col_6[6] ;
  assign x__h34954 = x__h34956 ^ dr_sub_col_1[6] ;
  assign x__h34956 = x__h34958 ^ dr_sub_col_6[6] ;
  assign x__h34958 = dr_sub_col_11[5] ^ dr_sub_col_6[5] ;
  assign x__h35069 = x__h35071 ^ dr_sub_col_1[5] ;
  assign x__h35071 = x__h35073 ^ dr_sub_col_6[5] ;
  assign x__h35073 = dr_sub_col_11[4] ^ dr_sub_col_6[4] ;
  assign x__h35184 = x__h35186 ^ dr_sub_col_1[4] ;
  assign x__h35186 = x__h35188 ^ dr_sub_col_6[7] ;
  assign x__h35188 = x__h35190 ^ dr_sub_col_6[4] ;
  assign x__h35190 = x__h35192 ^ dr_sub_col_6[3] ;
  assign x__h35192 = dr_sub_col_11[3] ^ dr_sub_col_11[7] ;
  assign x__h35342 = x__h35344 ^ dr_sub_col_1[3] ;
  assign x__h35344 = x__h35346 ^ dr_sub_col_6[7] ;
  assign x__h35346 = x__h35348 ^ dr_sub_col_6[3] ;
  assign x__h35348 = x__h35350 ^ dr_sub_col_6[2] ;
  assign x__h35350 = dr_sub_col_11[2] ^ dr_sub_col_11[7] ;
  assign x__h35500 = x__h35502 ^ dr_sub_col_1[2] ;
  assign x__h35502 = x__h35504 ^ dr_sub_col_6[2] ;
  assign x__h35504 = dr_sub_col_11[1] ^ dr_sub_col_6[1] ;
  assign x__h35615 = x__h35617 ^ dr_sub_col_1[1] ;
  assign x__h35617 = x__h35619 ^ dr_sub_col_6[7] ;
  assign x__h35619 = x__h35621 ^ dr_sub_col_6[1] ;
  assign x__h35621 = x__h35623 ^ dr_sub_col_6[0] ;
  assign x__h35623 = dr_sub_col_11[0] ^ dr_sub_col_11[7] ;
  assign x__h35773 = x__h35775 ^ dr_sub_col_1[0] ;
  assign x__h35775 = x__h35777 ^ dr_sub_col_6[0] ;
  assign x__h35777 = dr_sub_col_11[7] ^ dr_sub_col_6[7] ;
  assign x__h36035 = x__h36037 ^ dr_sub_col_12[7] ;
  assign x__h36037 = x__h36039 ^ dr_sub_col_1[7] ;
  assign x__h36039 = dr_sub_col_6[6] ^ dr_sub_col_1[6] ;
  assign x__h36226 = x__h36228 ^ dr_sub_col_12[6] ;
  assign x__h36228 = x__h36230 ^ dr_sub_col_1[6] ;
  assign x__h36230 = dr_sub_col_6[5] ^ dr_sub_col_1[5] ;
  assign x__h36341 = x__h36343 ^ dr_sub_col_12[5] ;
  assign x__h36343 = x__h36345 ^ dr_sub_col_1[5] ;
  assign x__h36345 = dr_sub_col_6[4] ^ dr_sub_col_1[4] ;
  assign x__h36456 = x__h36458 ^ dr_sub_col_12[4] ;
  assign x__h36458 = x__h36460 ^ dr_sub_col_1[7] ;
  assign x__h36460 = x__h36462 ^ dr_sub_col_1[4] ;
  assign x__h36462 = x__h36464 ^ dr_sub_col_1[3] ;
  assign x__h36464 = dr_sub_col_6[3] ^ dr_sub_col_6[7] ;
  assign x__h36613 = x__h36615 ^ dr_sub_col_12[3] ;
  assign x__h36615 = x__h36617 ^ dr_sub_col_1[7] ;
  assign x__h36617 = x__h36619 ^ dr_sub_col_1[3] ;
  assign x__h36619 = x__h36621 ^ dr_sub_col_1[2] ;
  assign x__h36621 = dr_sub_col_6[2] ^ dr_sub_col_6[7] ;
  assign x__h36770 = x__h36772 ^ dr_sub_col_12[2] ;
  assign x__h36772 = x__h36774 ^ dr_sub_col_1[2] ;
  assign x__h36774 = dr_sub_col_6[1] ^ dr_sub_col_1[1] ;
  assign x__h36885 = x__h36887 ^ dr_sub_col_12[1] ;
  assign x__h36887 = x__h36889 ^ dr_sub_col_1[7] ;
  assign x__h36889 = x__h36891 ^ dr_sub_col_1[1] ;
  assign x__h36891 = x__h36893 ^ dr_sub_col_1[0] ;
  assign x__h36893 = dr_sub_col_6[0] ^ dr_sub_col_6[7] ;
  assign x__h37042 = x__h37044 ^ dr_sub_col_12[0] ;
  assign x__h37044 = x__h37046 ^ dr_sub_col_1[0] ;
  assign x__h37046 = dr_sub_col_6[7] ^ dr_sub_col_1[7] ;
  assign x__h37306 = x__h37308 ^ dr_sub_col_11[7] ;
  assign x__h37308 = x__h37310 ^ dr_sub_col_12[7] ;
  assign x__h37310 = dr_sub_col_1[6] ^ dr_sub_col_12[6] ;
  assign x__h37497 = x__h37499 ^ dr_sub_col_11[6] ;
  assign x__h37499 = x__h37501 ^ dr_sub_col_12[6] ;
  assign x__h37501 = dr_sub_col_1[5] ^ dr_sub_col_12[5] ;
  assign x__h37612 = x__h37614 ^ dr_sub_col_11[5] ;
  assign x__h37614 = x__h37616 ^ dr_sub_col_12[5] ;
  assign x__h37616 = dr_sub_col_1[4] ^ dr_sub_col_12[4] ;
  assign x__h37727 = x__h37729 ^ dr_sub_col_11[4] ;
  assign x__h37729 = x__h37731 ^ dr_sub_col_12[7] ;
  assign x__h37731 = x__h37733 ^ dr_sub_col_12[4] ;
  assign x__h37733 = x__h37735 ^ dr_sub_col_12[3] ;
  assign x__h37735 = dr_sub_col_1[3] ^ dr_sub_col_1[7] ;
  assign x__h37884 = x__h37886 ^ dr_sub_col_11[3] ;
  assign x__h37886 = x__h37888 ^ dr_sub_col_12[7] ;
  assign x__h37888 = x__h37890 ^ dr_sub_col_12[3] ;
  assign x__h37890 = x__h37892 ^ dr_sub_col_12[2] ;
  assign x__h37892 = dr_sub_col_1[2] ^ dr_sub_col_1[7] ;
  assign x__h38041 = x__h38043 ^ dr_sub_col_11[2] ;
  assign x__h38043 = x__h38045 ^ dr_sub_col_12[2] ;
  assign x__h38045 = dr_sub_col_1[1] ^ dr_sub_col_12[1] ;
  assign x__h38156 = x__h38158 ^ dr_sub_col_11[1] ;
  assign x__h38158 = x__h38160 ^ dr_sub_col_12[7] ;
  assign x__h38160 = x__h38162 ^ dr_sub_col_12[1] ;
  assign x__h38162 = x__h38164 ^ dr_sub_col_12[0] ;
  assign x__h38164 = dr_sub_col_1[0] ^ dr_sub_col_1[7] ;
  assign x__h38313 = x__h38315 ^ dr_sub_col_11[0] ;
  assign x__h38315 = x__h38317 ^ dr_sub_col_12[0] ;
  assign x__h38317 = dr_sub_col_1[7] ^ dr_sub_col_12[7] ;
  assign x__h38577 = x__h38579 ^ dr_sub_col_6[7] ;
  assign x__h38579 = x__h38581 ^ dr_sub_col_11[7] ;
  assign x__h38581 = dr_sub_col_12[6] ^ dr_sub_col_11[6] ;
  assign x__h38769 = x__h38771 ^ dr_sub_col_6[6] ;
  assign x__h38771 = x__h38773 ^ dr_sub_col_11[6] ;
  assign x__h38773 = dr_sub_col_12[5] ^ dr_sub_col_11[5] ;
  assign x__h38885 = x__h38887 ^ dr_sub_col_6[5] ;
  assign x__h38887 = x__h38889 ^ dr_sub_col_11[5] ;
  assign x__h38889 = dr_sub_col_12[4] ^ dr_sub_col_11[4] ;
  assign x__h39001 = x__h39003 ^ dr_sub_col_6[4] ;
  assign x__h39003 = x__h39005 ^ dr_sub_col_11[7] ;
  assign x__h39005 = x__h39007 ^ dr_sub_col_11[4] ;
  assign x__h39007 = x__h39009 ^ dr_sub_col_11[3] ;
  assign x__h39009 = dr_sub_col_12[3] ^ dr_sub_col_12[7] ;
  assign x__h39160 = x__h39162 ^ dr_sub_col_6[3] ;
  assign x__h39162 = x__h39164 ^ dr_sub_col_11[7] ;
  assign x__h39164 = x__h39166 ^ dr_sub_col_11[3] ;
  assign x__h39166 = x__h39168 ^ dr_sub_col_11[2] ;
  assign x__h39168 = dr_sub_col_12[2] ^ dr_sub_col_12[7] ;
  assign x__h39319 = x__h39321 ^ dr_sub_col_6[2] ;
  assign x__h39321 = x__h39323 ^ dr_sub_col_11[2] ;
  assign x__h39323 = dr_sub_col_12[1] ^ dr_sub_col_11[1] ;
  assign x__h39435 = x__h39437 ^ dr_sub_col_6[1] ;
  assign x__h39437 = x__h39439 ^ dr_sub_col_11[7] ;
  assign x__h39439 = x__h39441 ^ dr_sub_col_11[1] ;
  assign x__h39441 = x__h39443 ^ dr_sub_col_11[0] ;
  assign x__h39443 = dr_sub_col_12[0] ^ dr_sub_col_12[7] ;
  assign x__h39594 = x__h39596 ^ dr_sub_col_6[0] ;
  assign x__h39596 = x__h39598 ^ dr_sub_col_11[0] ;
  assign x__h39598 = dr_sub_col_12[7] ^ dr_sub_col_11[7] ;
  assign x__h39743 =
	     { spliced_bits__h39850,
	       spliced_bits__h39822,
	       spliced_bits__h39794,
	       spliced_bits__h39766 } ^
	     key[63:32] ;
  assign x__h40028 = x__h40030 ^ dr_sub_col_13[7] ;
  assign x__h40030 = x__h40032 ^ dr_sub_col_2[7] ;
  assign x__h40032 = dr_sub_col_7[6] ^ dr_sub_col_2[6] ;
  assign x__h40257 = x__h40259 ^ dr_sub_col_13[6] ;
  assign x__h40259 = x__h40261 ^ dr_sub_col_2[6] ;
  assign x__h40261 = dr_sub_col_7[5] ^ dr_sub_col_2[5] ;
  assign x__h40372 = x__h40374 ^ dr_sub_col_13[5] ;
  assign x__h40374 = x__h40376 ^ dr_sub_col_2[5] ;
  assign x__h40376 = dr_sub_col_7[4] ^ dr_sub_col_2[4] ;
  assign x__h40487 = x__h40489 ^ dr_sub_col_13[4] ;
  assign x__h40489 = x__h40491 ^ dr_sub_col_2[7] ;
  assign x__h40491 = x__h40493 ^ dr_sub_col_2[4] ;
  assign x__h40493 = x__h40495 ^ dr_sub_col_2[3] ;
  assign x__h40495 = dr_sub_col_7[3] ^ dr_sub_col_7[7] ;
  assign x__h40645 = x__h40647 ^ dr_sub_col_13[3] ;
  assign x__h40647 = x__h40649 ^ dr_sub_col_2[7] ;
  assign x__h40649 = x__h40651 ^ dr_sub_col_2[3] ;
  assign x__h40651 = x__h40653 ^ dr_sub_col_2[2] ;
  assign x__h40653 = dr_sub_col_7[2] ^ dr_sub_col_7[7] ;
  assign x__h40803 = x__h40805 ^ dr_sub_col_13[2] ;
  assign x__h40805 = x__h40807 ^ dr_sub_col_2[2] ;
  assign x__h40807 = dr_sub_col_7[1] ^ dr_sub_col_2[1] ;
  assign x__h40918 = x__h40920 ^ dr_sub_col_13[1] ;
  assign x__h40920 = x__h40922 ^ dr_sub_col_2[7] ;
  assign x__h40922 = x__h40924 ^ dr_sub_col_2[1] ;
  assign x__h40924 = x__h40926 ^ dr_sub_col_2[0] ;
  assign x__h40926 = dr_sub_col_7[0] ^ dr_sub_col_7[7] ;
  assign x__h41076 = x__h41078 ^ dr_sub_col_13[0] ;
  assign x__h41078 = x__h41080 ^ dr_sub_col_2[0] ;
  assign x__h41080 = dr_sub_col_7[7] ^ dr_sub_col_2[7] ;
  assign x__h41338 = x__h41340 ^ dr_sub_col_8[7] ;
  assign x__h41340 = x__h41342 ^ dr_sub_col_13[7] ;
  assign x__h41342 = dr_sub_col_2[6] ^ dr_sub_col_13[6] ;
  assign x__h41529 = x__h41531 ^ dr_sub_col_8[6] ;
  assign x__h41531 = x__h41533 ^ dr_sub_col_13[6] ;
  assign x__h41533 = dr_sub_col_2[5] ^ dr_sub_col_13[5] ;
  assign x__h41644 = x__h41646 ^ dr_sub_col_8[5] ;
  assign x__h41646 = x__h41648 ^ dr_sub_col_13[5] ;
  assign x__h41648 = dr_sub_col_2[4] ^ dr_sub_col_13[4] ;
  assign x__h41759 = x__h41761 ^ dr_sub_col_8[4] ;
  assign x__h41761 = x__h41763 ^ dr_sub_col_13[7] ;
  assign x__h41763 = x__h41765 ^ dr_sub_col_13[4] ;
  assign x__h41765 = x__h41767 ^ dr_sub_col_13[3] ;
  assign x__h41767 = dr_sub_col_2[3] ^ dr_sub_col_2[7] ;
  assign x__h41916 = x__h41918 ^ dr_sub_col_8[3] ;
  assign x__h41918 = x__h41920 ^ dr_sub_col_13[7] ;
  assign x__h41920 = x__h41922 ^ dr_sub_col_13[3] ;
  assign x__h41922 = x__h41924 ^ dr_sub_col_13[2] ;
  assign x__h41924 = dr_sub_col_2[2] ^ dr_sub_col_2[7] ;
  assign x__h42073 = x__h42075 ^ dr_sub_col_8[2] ;
  assign x__h42075 = x__h42077 ^ dr_sub_col_13[2] ;
  assign x__h42077 = dr_sub_col_2[1] ^ dr_sub_col_13[1] ;
  assign x__h42188 = x__h42190 ^ dr_sub_col_8[1] ;
  assign x__h42190 = x__h42192 ^ dr_sub_col_13[7] ;
  assign x__h42192 = x__h42194 ^ dr_sub_col_13[1] ;
  assign x__h42194 = x__h42196 ^ dr_sub_col_13[0] ;
  assign x__h42196 = dr_sub_col_2[0] ^ dr_sub_col_2[7] ;
  assign x__h42345 = x__h42347 ^ dr_sub_col_8[0] ;
  assign x__h42347 = x__h42349 ^ dr_sub_col_13[0] ;
  assign x__h42349 = dr_sub_col_2[7] ^ dr_sub_col_13[7] ;
  assign x__h42609 = x__h42611 ^ dr_sub_col_7[7] ;
  assign x__h42611 = x__h42613 ^ dr_sub_col_8[7] ;
  assign x__h42613 = dr_sub_col_13[6] ^ dr_sub_col_8[6] ;
  assign x__h42800 = x__h42802 ^ dr_sub_col_7[6] ;
  assign x__h42802 = x__h42804 ^ dr_sub_col_8[6] ;
  assign x__h42804 = dr_sub_col_13[5] ^ dr_sub_col_8[5] ;
  assign x__h42915 = x__h42917 ^ dr_sub_col_7[5] ;
  assign x__h42917 = x__h42919 ^ dr_sub_col_8[5] ;
  assign x__h42919 = dr_sub_col_13[4] ^ dr_sub_col_8[4] ;
  assign x__h43030 = x__h43032 ^ dr_sub_col_7[4] ;
  assign x__h43032 = x__h43034 ^ dr_sub_col_8[7] ;
  assign x__h43034 = x__h43036 ^ dr_sub_col_8[4] ;
  assign x__h43036 = x__h43038 ^ dr_sub_col_8[3] ;
  assign x__h43038 = dr_sub_col_13[3] ^ dr_sub_col_13[7] ;
  assign x__h43187 = x__h43189 ^ dr_sub_col_7[3] ;
  assign x__h43189 = x__h43191 ^ dr_sub_col_8[7] ;
  assign x__h43191 = x__h43193 ^ dr_sub_col_8[3] ;
  assign x__h43193 = x__h43195 ^ dr_sub_col_8[2] ;
  assign x__h43195 = dr_sub_col_13[2] ^ dr_sub_col_13[7] ;
  assign x__h43344 = x__h43346 ^ dr_sub_col_7[2] ;
  assign x__h43346 = x__h43348 ^ dr_sub_col_8[2] ;
  assign x__h43348 = dr_sub_col_13[1] ^ dr_sub_col_8[1] ;
  assign x__h43459 = x__h43461 ^ dr_sub_col_7[1] ;
  assign x__h43461 = x__h43463 ^ dr_sub_col_8[7] ;
  assign x__h43463 = x__h43465 ^ dr_sub_col_8[1] ;
  assign x__h43465 = x__h43467 ^ dr_sub_col_8[0] ;
  assign x__h43467 = dr_sub_col_13[0] ^ dr_sub_col_13[7] ;
  assign x__h43616 = x__h43618 ^ dr_sub_col_7[0] ;
  assign x__h43618 = x__h43620 ^ dr_sub_col_8[0] ;
  assign x__h43620 = dr_sub_col_13[7] ^ dr_sub_col_8[7] ;
  assign x__h43880 = x__h43882 ^ dr_sub_col_2[7] ;
  assign x__h43882 = x__h43884 ^ dr_sub_col_7[7] ;
  assign x__h43884 = dr_sub_col_8[6] ^ dr_sub_col_7[6] ;
  assign x__h44072 = x__h44074 ^ dr_sub_col_2[6] ;
  assign x__h44074 = x__h44076 ^ dr_sub_col_7[6] ;
  assign x__h44076 = dr_sub_col_8[5] ^ dr_sub_col_7[5] ;
  assign x__h44188 = x__h44190 ^ dr_sub_col_2[5] ;
  assign x__h44190 = x__h44192 ^ dr_sub_col_7[5] ;
  assign x__h44192 = dr_sub_col_8[4] ^ dr_sub_col_7[4] ;
  assign x__h44304 = x__h44306 ^ dr_sub_col_2[4] ;
  assign x__h44306 = x__h44308 ^ dr_sub_col_7[7] ;
  assign x__h44308 = x__h44310 ^ dr_sub_col_7[4] ;
  assign x__h44310 = x__h44312 ^ dr_sub_col_7[3] ;
  assign x__h44312 = dr_sub_col_8[3] ^ dr_sub_col_8[7] ;
  assign x__h44463 = x__h44465 ^ dr_sub_col_2[3] ;
  assign x__h44465 = x__h44467 ^ dr_sub_col_7[7] ;
  assign x__h44467 = x__h44469 ^ dr_sub_col_7[3] ;
  assign x__h44469 = x__h44471 ^ dr_sub_col_7[2] ;
  assign x__h44471 = dr_sub_col_8[2] ^ dr_sub_col_8[7] ;
  assign x__h44622 = x__h44624 ^ dr_sub_col_2[2] ;
  assign x__h44624 = x__h44626 ^ dr_sub_col_7[2] ;
  assign x__h44626 = dr_sub_col_8[1] ^ dr_sub_col_7[1] ;
  assign x__h44738 = x__h44740 ^ dr_sub_col_2[1] ;
  assign x__h44740 = x__h44742 ^ dr_sub_col_7[7] ;
  assign x__h44742 = x__h44744 ^ dr_sub_col_7[1] ;
  assign x__h44744 = x__h44746 ^ dr_sub_col_7[0] ;
  assign x__h44746 = dr_sub_col_8[0] ^ dr_sub_col_8[7] ;
  assign x__h44897 = x__h44899 ^ dr_sub_col_2[0] ;
  assign x__h44899 = x__h44901 ^ dr_sub_col_7[0] ;
  assign x__h44901 = dr_sub_col_8[7] ^ dr_sub_col_7[7] ;
  assign x__h45046 =
	     { spliced_bits__h45153,
	       spliced_bits__h45125,
	       spliced_bits__h45097,
	       spliced_bits__h45069 } ^
	     key[31:0] ;
  assign x__h45331 = x__h45333 ^ dr_sub_col_9[7] ;
  assign x__h45333 = x__h45335 ^ dr_sub_col_14[7] ;
  assign x__h45335 = dr_sub_col_3[6] ^ dr_sub_col_14[6] ;
  assign x__h45560 = x__h45562 ^ dr_sub_col_9[6] ;
  assign x__h45562 = x__h45564 ^ dr_sub_col_14[6] ;
  assign x__h45564 = dr_sub_col_3[5] ^ dr_sub_col_14[5] ;
  assign x__h45675 = x__h45677 ^ dr_sub_col_9[5] ;
  assign x__h45677 = x__h45679 ^ dr_sub_col_14[5] ;
  assign x__h45679 = dr_sub_col_3[4] ^ dr_sub_col_14[4] ;
  assign x__h45790 = x__h45792 ^ dr_sub_col_9[4] ;
  assign x__h45792 = x__h45794 ^ dr_sub_col_14[7] ;
  assign x__h45794 = x__h45796 ^ dr_sub_col_14[4] ;
  assign x__h45796 = x__h45798 ^ dr_sub_col_14[3] ;
  assign x__h45798 = dr_sub_col_3[3] ^ dr_sub_col_3[7] ;
  assign x__h45948 = x__h45950 ^ dr_sub_col_9[3] ;
  assign x__h45950 = x__h45952 ^ dr_sub_col_14[7] ;
  assign x__h45952 = x__h45954 ^ dr_sub_col_14[3] ;
  assign x__h45954 = x__h45956 ^ dr_sub_col_14[2] ;
  assign x__h45956 = dr_sub_col_3[2] ^ dr_sub_col_3[7] ;
  assign x__h46106 = x__h46108 ^ dr_sub_col_9[2] ;
  assign x__h46108 = x__h46110 ^ dr_sub_col_14[2] ;
  assign x__h46110 = dr_sub_col_3[1] ^ dr_sub_col_14[1] ;
  assign x__h46221 = x__h46223 ^ dr_sub_col_9[1] ;
  assign x__h46223 = x__h46225 ^ dr_sub_col_14[7] ;
  assign x__h46225 = x__h46227 ^ dr_sub_col_14[1] ;
  assign x__h46227 = x__h46229 ^ dr_sub_col_14[0] ;
  assign x__h46229 = dr_sub_col_3[0] ^ dr_sub_col_3[7] ;
  assign x__h46379 = x__h46381 ^ dr_sub_col_9[0] ;
  assign x__h46381 = x__h46383 ^ dr_sub_col_14[0] ;
  assign x__h46383 = dr_sub_col_3[7] ^ dr_sub_col_14[7] ;
  assign x__h46641 = x__h46643 ^ dr_sub_col_4[7] ;
  assign x__h46643 = x__h46645 ^ dr_sub_col_9[7] ;
  assign x__h46645 = dr_sub_col_14[6] ^ dr_sub_col_9[6] ;
  assign x__h46832 = x__h46834 ^ dr_sub_col_4[6] ;
  assign x__h46834 = x__h46836 ^ dr_sub_col_9[6] ;
  assign x__h46836 = dr_sub_col_14[5] ^ dr_sub_col_9[5] ;
  assign x__h46947 = x__h46949 ^ dr_sub_col_4[5] ;
  assign x__h46949 = x__h46951 ^ dr_sub_col_9[5] ;
  assign x__h46951 = dr_sub_col_14[4] ^ dr_sub_col_9[4] ;
  assign x__h47062 = x__h47064 ^ dr_sub_col_4[4] ;
  assign x__h47064 = x__h47066 ^ dr_sub_col_9[7] ;
  assign x__h47066 = x__h47068 ^ dr_sub_col_9[4] ;
  assign x__h47068 = x__h47070 ^ dr_sub_col_9[3] ;
  assign x__h47070 = dr_sub_col_14[3] ^ dr_sub_col_14[7] ;
  assign x__h47219 = x__h47221 ^ dr_sub_col_4[3] ;
  assign x__h47221 = x__h47223 ^ dr_sub_col_9[7] ;
  assign x__h47223 = x__h47225 ^ dr_sub_col_9[3] ;
  assign x__h47225 = x__h47227 ^ dr_sub_col_9[2] ;
  assign x__h47227 = dr_sub_col_14[2] ^ dr_sub_col_14[7] ;
  assign x__h47376 = x__h47378 ^ dr_sub_col_4[2] ;
  assign x__h47378 = x__h47380 ^ dr_sub_col_9[2] ;
  assign x__h47380 = dr_sub_col_14[1] ^ dr_sub_col_9[1] ;
  assign x__h47491 = x__h47493 ^ dr_sub_col_4[1] ;
  assign x__h47493 = x__h47495 ^ dr_sub_col_9[7] ;
  assign x__h47495 = x__h47497 ^ dr_sub_col_9[1] ;
  assign x__h47497 = x__h47499 ^ dr_sub_col_9[0] ;
  assign x__h47499 = dr_sub_col_14[0] ^ dr_sub_col_14[7] ;
  assign x__h47648 = x__h47650 ^ dr_sub_col_4[0] ;
  assign x__h47650 = x__h47652 ^ dr_sub_col_9[0] ;
  assign x__h47652 = dr_sub_col_14[7] ^ dr_sub_col_9[7] ;
  assign x__h47912 = x__h47914 ^ dr_sub_col_3[7] ;
  assign x__h47914 = x__h47916 ^ dr_sub_col_4[7] ;
  assign x__h47916 = dr_sub_col_9[6] ^ dr_sub_col_4[6] ;
  assign x__h48103 = x__h48105 ^ dr_sub_col_3[6] ;
  assign x__h48105 = x__h48107 ^ dr_sub_col_4[6] ;
  assign x__h48107 = dr_sub_col_9[5] ^ dr_sub_col_4[5] ;
  assign x__h48218 = x__h48220 ^ dr_sub_col_3[5] ;
  assign x__h48220 = x__h48222 ^ dr_sub_col_4[5] ;
  assign x__h48222 = dr_sub_col_9[4] ^ dr_sub_col_4[4] ;
  assign x__h48333 = x__h48335 ^ dr_sub_col_3[4] ;
  assign x__h48335 = x__h48337 ^ dr_sub_col_4[7] ;
  assign x__h48337 = x__h48339 ^ dr_sub_col_4[4] ;
  assign x__h48339 = x__h48341 ^ dr_sub_col_4[3] ;
  assign x__h48341 = dr_sub_col_9[3] ^ dr_sub_col_9[7] ;
  assign x__h48490 = x__h48492 ^ dr_sub_col_3[3] ;
  assign x__h48492 = x__h48494 ^ dr_sub_col_4[7] ;
  assign x__h48494 = x__h48496 ^ dr_sub_col_4[3] ;
  assign x__h48496 = x__h48498 ^ dr_sub_col_4[2] ;
  assign x__h48498 = dr_sub_col_9[2] ^ dr_sub_col_9[7] ;
  assign x__h48647 = x__h48649 ^ dr_sub_col_3[2] ;
  assign x__h48649 = x__h48651 ^ dr_sub_col_4[2] ;
  assign x__h48651 = dr_sub_col_9[1] ^ dr_sub_col_4[1] ;
  assign x__h48762 = x__h48764 ^ dr_sub_col_3[1] ;
  assign x__h48764 = x__h48766 ^ dr_sub_col_4[7] ;
  assign x__h48766 = x__h48768 ^ dr_sub_col_4[1] ;
  assign x__h48768 = x__h48770 ^ dr_sub_col_4[0] ;
  assign x__h48770 = dr_sub_col_9[0] ^ dr_sub_col_9[7] ;
  assign x__h48919 = x__h48921 ^ dr_sub_col_3[0] ;
  assign x__h48921 = x__h48923 ^ dr_sub_col_4[0] ;
  assign x__h48923 = dr_sub_col_9[7] ^ dr_sub_col_4[7] ;
  assign x__h49183 = x__h49185 ^ dr_sub_col_14[7] ;
  assign x__h49185 = x__h49187 ^ dr_sub_col_3[7] ;
  assign x__h49187 = dr_sub_col_4[6] ^ dr_sub_col_3[6] ;
  assign x__h49375 = x__h49377 ^ dr_sub_col_14[6] ;
  assign x__h49377 = x__h49379 ^ dr_sub_col_3[6] ;
  assign x__h49379 = dr_sub_col_4[5] ^ dr_sub_col_3[5] ;
  assign x__h49491 = x__h49493 ^ dr_sub_col_14[5] ;
  assign x__h49493 = x__h49495 ^ dr_sub_col_3[5] ;
  assign x__h49495 = dr_sub_col_4[4] ^ dr_sub_col_3[4] ;
  assign x__h49607 = x__h49609 ^ dr_sub_col_14[4] ;
  assign x__h49609 = x__h49611 ^ dr_sub_col_3[7] ;
  assign x__h49611 = x__h49613 ^ dr_sub_col_3[4] ;
  assign x__h49613 = x__h49615 ^ dr_sub_col_3[3] ;
  assign x__h49615 = dr_sub_col_4[3] ^ dr_sub_col_4[7] ;
  assign x__h49766 = x__h49768 ^ dr_sub_col_14[3] ;
  assign x__h49768 = x__h49770 ^ dr_sub_col_3[7] ;
  assign x__h49770 = x__h49772 ^ dr_sub_col_3[3] ;
  assign x__h49772 = x__h49774 ^ dr_sub_col_3[2] ;
  assign x__h49774 = dr_sub_col_4[2] ^ dr_sub_col_4[7] ;
  assign x__h49925 = x__h49927 ^ dr_sub_col_14[2] ;
  assign x__h49927 = x__h49929 ^ dr_sub_col_3[2] ;
  assign x__h49929 = dr_sub_col_4[1] ^ dr_sub_col_3[1] ;
  assign x__h50041 = x__h50043 ^ dr_sub_col_14[1] ;
  assign x__h50043 = x__h50045 ^ dr_sub_col_3[7] ;
  assign x__h50045 = x__h50047 ^ dr_sub_col_3[1] ;
  assign x__h50047 = x__h50049 ^ dr_sub_col_3[0] ;
  assign x__h50049 = dr_sub_col_4[0] ^ dr_sub_col_4[7] ;
  assign x__h50200 = x__h50202 ^ dr_sub_col_14[0] ;
  assign x__h50202 = x__h50204 ^ dr_sub_col_3[0] ;
  assign x__h50204 = dr_sub_col_4[7] ^ dr_sub_col_3[7] ;
  assign x__h50356 = x__h50385 ^ key[127:96] ;
  assign x__h50385 =
	     { dr_sub_col_15, dr_sub_col_10, dr_sub_col_5, dr_sub_col_0 } ;
  assign x__h50433 = x__h50452 ^ key[95:64] ;
  assign x__h50452 =
	     { dr_sub_col_11, dr_sub_col_6, dr_sub_col_1, dr_sub_col_12 } ;
  assign x__h50500 = x__h50519 ^ key[63:32] ;
  assign x__h50519 =
	     { dr_sub_col_7, dr_sub_col_2, dr_sub_col_13, dr_sub_col_8 } ;
  assign x__h50567 = x__h50586 ^ key[31:0] ;
  assign x__h50586 =
	     { dr_sub_col_3, dr_sub_col_14, dr_sub_col_9, dr_sub_col_4 } ;
  assign x__h51910 =
	     { dr_sub_col_15, dr_sub_col_2, dr_sub_col_5, dr_sub_col_8 } ;
  assign x__h51975 =
	     { dr_sub_col_11, dr_sub_col_14, dr_sub_col_1, dr_sub_col_4 } ;
  assign x__h52042 =
	     { dr_sub_col_7, dr_sub_col_10, dr_sub_col_13, dr_sub_col_0 } ;
  assign x__h52109 =
	     { dr_sub_col_3, dr_sub_col_6, dr_sub_col_9, dr_sub_col_12 } ;
  assign x__h53964 = x__h53966 ^ y__h53967 ;
  assign x__h53966 = x__h53968 ^ y__h53969 ;
  assign x__h53968 = x__h55307 ^ two__h55809 ;
  assign x__h54400 = eight__h54389 ^ two__h54387 ;
  assign x__h54521 = eight__h54510 ^ four__h54509 ;
  assign x__h54762 = x__h54764 ^ y__h54765 ;
  assign x__h54764 = x__h54766 ^ y__h54767 ;
  assign x__h54766 = eight__h55811 ^ dr_col__15 ;
  assign x__h54901 = eight__h54389 ^ four__h54889 ;
  assign x__h55022 = eight__h54510 ^ two__h55009 ;
  assign x__h55143 = eight__h54630 ^ four__h55131 ;
  assign x__h55277 = x__h55279 ^ y__h55280 ;
  assign x__h55279 = x__h55281 ^ y__h55282 ;
  assign x__h55281 = x__h55307 ^ dr_col__15 ;
  assign x__h55307 = eight__h55811 ^ four__h55295 ;
  assign x__h55658 = eight__h54630 ^ two__h55645 ;
  assign x__h55792 = x__h55794 ^ y__h55795 ;
  assign x__h55794 = x__h55796 ^ y__h55797 ;
  assign x__h55796 = x__h55822 ^ dr_col__15 ;
  assign x__h55822 = eight__h55811 ^ two__h55809 ;
  assign x__h56426 = x__h56428 ^ y__h56429 ;
  assign x__h56428 = x__h56430 ^ y__h56431 ;
  assign x__h56430 = x__h57754 ^ two__h58256 ;
  assign x__h56847 = eight__h56836 ^ two__h56834 ;
  assign x__h56968 = eight__h56957 ^ four__h56956 ;
  assign x__h57209 = x__h57211 ^ y__h57212 ;
  assign x__h57211 = x__h57213 ^ y__h57214 ;
  assign x__h57213 = eight__h58258 ^ dr_col__11 ;
  assign x__h57348 = eight__h56836 ^ four__h57336 ;
  assign x__h57469 = eight__h56957 ^ two__h57456 ;
  assign x__h57590 = eight__h57077 ^ four__h57578 ;
  assign x__h57724 = x__h57726 ^ y__h57727 ;
  assign x__h57726 = x__h57728 ^ y__h57729 ;
  assign x__h57728 = x__h57754 ^ dr_col__11 ;
  assign x__h57754 = eight__h58258 ^ four__h57742 ;
  assign x__h58105 = eight__h57077 ^ two__h58092 ;
  assign x__h58239 = x__h58241 ^ y__h58242 ;
  assign x__h58241 = x__h58243 ^ y__h58244 ;
  assign x__h58243 = x__h58269 ^ dr_col__11 ;
  assign x__h58269 = eight__h58258 ^ two__h58256 ;
  assign x__h58873 = x__h58875 ^ y__h58876 ;
  assign x__h58875 = x__h58877 ^ y__h58878 ;
  assign x__h58877 = x__h60201 ^ two__h60703 ;
  assign x__h59294 = eight__h59283 ^ two__h59281 ;
  assign x__h59415 = eight__h59404 ^ four__h59403 ;
  assign x__h59656 = x__h59658 ^ y__h59659 ;
  assign x__h59658 = x__h59660 ^ y__h59661 ;
  assign x__h59660 = eight__h60705 ^ dr_col__7 ;
  assign x__h59795 = eight__h59283 ^ four__h59783 ;
  assign x__h59916 = eight__h59404 ^ two__h59903 ;
  assign x__h60037 = eight__h59524 ^ four__h60025 ;
  assign x__h60171 = x__h60173 ^ y__h60174 ;
  assign x__h60173 = x__h60175 ^ y__h60176 ;
  assign x__h60175 = x__h60201 ^ dr_col__7 ;
  assign x__h60201 = eight__h60705 ^ four__h60189 ;
  assign x__h60552 = eight__h59524 ^ two__h60539 ;
  assign x__h60686 = x__h60688 ^ y__h60689 ;
  assign x__h60688 = x__h60690 ^ y__h60691 ;
  assign x__h60690 = x__h60716 ^ dr_col__7 ;
  assign x__h60716 = eight__h60705 ^ two__h60703 ;
  assign x__h61320 = x__h61322 ^ y__h61323 ;
  assign x__h61322 = x__h61324 ^ y__h61325 ;
  assign x__h61324 = x__h62647 ^ two__h63149 ;
  assign x__h61740 = eight__h61729 ^ two__h61727 ;
  assign x__h61861 = eight__h61850 ^ four__h61849 ;
  assign x__h62102 = x__h62104 ^ y__h62105 ;
  assign x__h62104 = x__h62106 ^ y__h62107 ;
  assign x__h62106 = eight__h63151 ^ dr_col__3 ;
  assign x__h62241 = eight__h61729 ^ four__h62229 ;
  assign x__h62362 = eight__h61850 ^ two__h62349 ;
  assign x__h62483 = eight__h61970 ^ four__h62471 ;
  assign x__h62617 = x__h62619 ^ y__h62620 ;
  assign x__h62619 = x__h62621 ^ y__h62622 ;
  assign x__h62621 = x__h62647 ^ dr_col__3 ;
  assign x__h62647 = eight__h63151 ^ four__h62635 ;
  assign x__h62998 = eight__h61970 ^ two__h62985 ;
  assign x__h63132 = x__h63134 ^ y__h63135 ;
  assign x__h63134 = x__h63136 ^ y__h63137 ;
  assign x__h63136 = x__h63162 ^ dr_col__3 ;
  assign x__h63162 = eight__h63151 ^ two__h63149 ;
  assign x__h87451 = encrypt_plaintexttt[127:96] ^ v__h84222[127:96] ;
  assign x__h87534 = encrypt_plaintexttt[63:32] ^ v__h84222[63:32] ;
  assign x__h87607 = encrypt_plaintexttt[95:64] ^ v__h84222[95:64] ;
  assign x__h87680 = encrypt_plaintexttt[31:0] ^ v__h84222[31:0] ;
  assign x__h9845 = { kg_prev_key3[23:0], kg_prev_key3[31:24] } ;
  assign y__h53965 = eight__h54630 ^ dr_col__12 ;
  assign y__h53967 = x__h54521 ^ dr_col__13 ;
  assign y__h53969 = x__h54400 ^ dr_col__14 ;
  assign y__h54763 = x__h55143 ^ dr_col__12 ;
  assign y__h54765 = x__h55022 ^ dr_col__13 ;
  assign y__h54767 = x__h54901 ^ two__h54387 ;
  assign y__h55278 = x__h55658 ^ dr_col__12 ;
  assign y__h55280 = x__h54521 ^ two__h55009 ;
  assign y__h55282 = eight__h54389 ^ dr_col__14 ;
  assign y__h55793 = x__h55143 ^ two__h55645 ;
  assign y__h55795 = eight__h54510 ^ dr_col__13 ;
  assign y__h55797 = x__h54901 ^ dr_col__14 ;
  assign y__h56427 = eight__h57077 ^ dr_col__8 ;
  assign y__h56429 = x__h56968 ^ dr_col__9 ;
  assign y__h56431 = x__h56847 ^ dr_col__10 ;
  assign y__h57210 = x__h57590 ^ dr_col__8 ;
  assign y__h57212 = x__h57469 ^ dr_col__9 ;
  assign y__h57214 = x__h57348 ^ two__h56834 ;
  assign y__h57725 = x__h58105 ^ dr_col__8 ;
  assign y__h57727 = x__h56968 ^ two__h57456 ;
  assign y__h57729 = eight__h56836 ^ dr_col__10 ;
  assign y__h58240 = x__h57590 ^ two__h58092 ;
  assign y__h58242 = eight__h56957 ^ dr_col__9 ;
  assign y__h58244 = x__h57348 ^ dr_col__10 ;
  assign y__h58874 = eight__h59524 ^ dr_col__4 ;
  assign y__h58876 = x__h59415 ^ dr_col__5 ;
  assign y__h58878 = x__h59294 ^ dr_col__6 ;
  assign y__h59657 = x__h60037 ^ dr_col__4 ;
  assign y__h59659 = x__h59916 ^ dr_col__5 ;
  assign y__h59661 = x__h59795 ^ two__h59281 ;
  assign y__h60172 = x__h60552 ^ dr_col__4 ;
  assign y__h60174 = x__h59415 ^ two__h59903 ;
  assign y__h60176 = eight__h59283 ^ dr_col__6 ;
  assign y__h60687 = x__h60037 ^ two__h60539 ;
  assign y__h60689 = eight__h59404 ^ dr_col__5 ;
  assign y__h60691 = x__h59795 ^ dr_col__6 ;
  assign y__h61321 = eight__h61970 ^ dr_col__0 ;
  assign y__h61323 = x__h61861 ^ dr_col__1 ;
  assign y__h61325 = x__h61740 ^ dr_col__2 ;
  assign y__h62103 = x__h62483 ^ dr_col__0 ;
  assign y__h62105 = x__h62362 ^ dr_col__1 ;
  assign y__h62107 = x__h62241 ^ two__h61727 ;
  assign y__h62618 = x__h62998 ^ dr_col__0 ;
  assign y__h62620 = x__h61861 ^ two__h62349 ;
  assign y__h62622 = eight__h61729 ^ dr_col__2 ;
  assign y__h63133 = x__h62483 ^ two__h62985 ;
  assign y__h63135 = eight__h61850 ^ dr_col__1 ;
  assign y__h63137 = x__h62241 ^ dr_col__2 ;
  assign y__h73875 = maxround - 4'd1 ;
  always@(encrypt_keyylenn or encrypt_keyyy)
  begin
    case (encrypt_keyylenn)
      2'd0, 2'd3: v__h84222 = encrypt_keyyy[127:0];
      2'd1: v__h84222 = encrypt_keyyy[191:64];
      2'd2: v__h84222 = encrypt_keyyy[255:128];
    endcase
  end
  always@(roundnumber__h73726 or
	  kg_save_key2_0 or
	  kg_save_key2_1 or
	  kg_save_key2_2 or
	  kg_save_key2_3 or
	  kg_save_key2_4 or
	  kg_save_key2_5 or
	  kg_save_key2_6 or
	  kg_save_key2_7 or
	  kg_save_key2_8 or
	  kg_save_key2_9 or
	  kg_save_key2_10 or
	  kg_save_key2_11 or
	  kg_save_key2_12 or kg_save_key2_13 or kg_save_key2_14)
  begin
    case (roundnumber__h73726)
      4'd0:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115 =
	      kg_save_key2_0;
      4'd1:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115 =
	      kg_save_key2_1;
      4'd2:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115 =
	      kg_save_key2_2;
      4'd3:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115 =
	      kg_save_key2_3;
      4'd4:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115 =
	      kg_save_key2_4;
      4'd5:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115 =
	      kg_save_key2_5;
      4'd6:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115 =
	      kg_save_key2_6;
      4'd7:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115 =
	      kg_save_key2_7;
      4'd8:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115 =
	      kg_save_key2_8;
      4'd9:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115 =
	      kg_save_key2_9;
      4'd10:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115 =
	      kg_save_key2_10;
      4'd11:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115 =
	      kg_save_key2_11;
      4'd12:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115 =
	      kg_save_key2_12;
      4'd13:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115 =
	      kg_save_key2_13;
      4'd14:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115 =
	      kg_save_key2_14;
      4'd15:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2115 =
	      32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(maxround or
	  kg_save_key2_0 or
	  kg_save_key2_1 or
	  kg_save_key2_2 or
	  kg_save_key2_3 or
	  kg_save_key2_4 or
	  kg_save_key2_5 or
	  kg_save_key2_6 or
	  kg_save_key2_7 or
	  kg_save_key2_8 or
	  kg_save_key2_9 or
	  kg_save_key2_10 or
	  kg_save_key2_11 or
	  kg_save_key2_12 or kg_save_key2_13 or kg_save_key2_14)
  begin
    case (maxround)
      4'd0:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022 =
	      kg_save_key2_0;
      4'd1:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022 =
	      kg_save_key2_1;
      4'd2:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022 =
	      kg_save_key2_2;
      4'd3:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022 =
	      kg_save_key2_3;
      4'd4:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022 =
	      kg_save_key2_4;
      4'd5:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022 =
	      kg_save_key2_5;
      4'd6:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022 =
	      kg_save_key2_6;
      4'd7:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022 =
	      kg_save_key2_7;
      4'd8:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022 =
	      kg_save_key2_8;
      4'd9:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022 =
	      kg_save_key2_9;
      4'd10:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022 =
	      kg_save_key2_10;
      4'd11:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022 =
	      kg_save_key2_11;
      4'd12:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022 =
	      kg_save_key2_12;
      4'd13:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022 =
	      kg_save_key2_13;
      4'd14:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022 =
	      kg_save_key2_14;
      4'd15:
	  SEL_ARR_kg_save_key2_0_006_kg_save_key2_1_007__ETC___d2022 =
	      32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(roundnumber__h73726 or
	  kg_save_key0_0 or
	  kg_save_key0_1 or
	  kg_save_key0_2 or
	  kg_save_key0_3 or
	  kg_save_key0_4 or
	  kg_save_key0_5 or
	  kg_save_key0_6 or
	  kg_save_key0_7 or
	  kg_save_key0_8 or
	  kg_save_key0_9 or
	  kg_save_key0_10 or
	  kg_save_key0_11 or
	  kg_save_key0_12 or kg_save_key0_13 or kg_save_key0_14)
  begin
    case (roundnumber__h73726)
      4'd0:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113 =
	      kg_save_key0_0;
      4'd1:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113 =
	      kg_save_key0_1;
      4'd2:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113 =
	      kg_save_key0_2;
      4'd3:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113 =
	      kg_save_key0_3;
      4'd4:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113 =
	      kg_save_key0_4;
      4'd5:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113 =
	      kg_save_key0_5;
      4'd6:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113 =
	      kg_save_key0_6;
      4'd7:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113 =
	      kg_save_key0_7;
      4'd8:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113 =
	      kg_save_key0_8;
      4'd9:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113 =
	      kg_save_key0_9;
      4'd10:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113 =
	      kg_save_key0_10;
      4'd11:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113 =
	      kg_save_key0_11;
      4'd12:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113 =
	      kg_save_key0_12;
      4'd13:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113 =
	      kg_save_key0_13;
      4'd14:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113 =
	      kg_save_key0_14;
      4'd15:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d2113 =
	      32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(maxround or
	  kg_save_key0_0 or
	  kg_save_key0_1 or
	  kg_save_key0_2 or
	  kg_save_key0_3 or
	  kg_save_key0_4 or
	  kg_save_key0_5 or
	  kg_save_key0_6 or
	  kg_save_key0_7 or
	  kg_save_key0_8 or
	  kg_save_key0_9 or
	  kg_save_key0_10 or
	  kg_save_key0_11 or
	  kg_save_key0_12 or kg_save_key0_13 or kg_save_key0_14)
  begin
    case (maxround)
      4'd0:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988 =
	      kg_save_key0_0;
      4'd1:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988 =
	      kg_save_key0_1;
      4'd2:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988 =
	      kg_save_key0_2;
      4'd3:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988 =
	      kg_save_key0_3;
      4'd4:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988 =
	      kg_save_key0_4;
      4'd5:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988 =
	      kg_save_key0_5;
      4'd6:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988 =
	      kg_save_key0_6;
      4'd7:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988 =
	      kg_save_key0_7;
      4'd8:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988 =
	      kg_save_key0_8;
      4'd9:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988 =
	      kg_save_key0_9;
      4'd10:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988 =
	      kg_save_key0_10;
      4'd11:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988 =
	      kg_save_key0_11;
      4'd12:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988 =
	      kg_save_key0_12;
      4'd13:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988 =
	      kg_save_key0_13;
      4'd14:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988 =
	      kg_save_key0_14;
      4'd15:
	  SEL_ARR_kg_save_key0_0_972_kg_save_key0_1_973__ETC___d1988 =
	      32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(maxround or
	  kg_save_key1_0 or
	  kg_save_key1_1 or
	  kg_save_key1_2 or
	  kg_save_key1_3 or
	  kg_save_key1_4 or
	  kg_save_key1_5 or
	  kg_save_key1_6 or
	  kg_save_key1_7 or
	  kg_save_key1_8 or
	  kg_save_key1_9 or
	  kg_save_key1_10 or
	  kg_save_key1_11 or
	  kg_save_key1_12 or kg_save_key1_13 or kg_save_key1_14)
  begin
    case (maxround)
      4'd0:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005 =
	      kg_save_key1_0;
      4'd1:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005 =
	      kg_save_key1_1;
      4'd2:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005 =
	      kg_save_key1_2;
      4'd3:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005 =
	      kg_save_key1_3;
      4'd4:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005 =
	      kg_save_key1_4;
      4'd5:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005 =
	      kg_save_key1_5;
      4'd6:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005 =
	      kg_save_key1_6;
      4'd7:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005 =
	      kg_save_key1_7;
      4'd8:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005 =
	      kg_save_key1_8;
      4'd9:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005 =
	      kg_save_key1_9;
      4'd10:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005 =
	      kg_save_key1_10;
      4'd11:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005 =
	      kg_save_key1_11;
      4'd12:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005 =
	      kg_save_key1_12;
      4'd13:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005 =
	      kg_save_key1_13;
      4'd14:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005 =
	      kg_save_key1_14;
      4'd15:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2005 =
	      32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(roundnumber__h73726 or
	  kg_save_key1_0 or
	  kg_save_key1_1 or
	  kg_save_key1_2 or
	  kg_save_key1_3 or
	  kg_save_key1_4 or
	  kg_save_key1_5 or
	  kg_save_key1_6 or
	  kg_save_key1_7 or
	  kg_save_key1_8 or
	  kg_save_key1_9 or
	  kg_save_key1_10 or
	  kg_save_key1_11 or
	  kg_save_key1_12 or kg_save_key1_13 or kg_save_key1_14)
  begin
    case (roundnumber__h73726)
      4'd0:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114 =
	      kg_save_key1_0;
      4'd1:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114 =
	      kg_save_key1_1;
      4'd2:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114 =
	      kg_save_key1_2;
      4'd3:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114 =
	      kg_save_key1_3;
      4'd4:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114 =
	      kg_save_key1_4;
      4'd5:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114 =
	      kg_save_key1_5;
      4'd6:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114 =
	      kg_save_key1_6;
      4'd7:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114 =
	      kg_save_key1_7;
      4'd8:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114 =
	      kg_save_key1_8;
      4'd9:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114 =
	      kg_save_key1_9;
      4'd10:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114 =
	      kg_save_key1_10;
      4'd11:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114 =
	      kg_save_key1_11;
      4'd12:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114 =
	      kg_save_key1_12;
      4'd13:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114 =
	      kg_save_key1_13;
      4'd14:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114 =
	      kg_save_key1_14;
      4'd15:
	  SEL_ARR_kg_save_key1_0_989_kg_save_key1_1_990__ETC___d2114 =
	      32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(maxround or
	  kg_save_key3_0 or
	  kg_save_key3_1 or
	  kg_save_key3_2 or
	  kg_save_key3_3 or
	  kg_save_key3_4 or
	  kg_save_key3_5 or
	  kg_save_key3_6 or
	  kg_save_key3_7 or
	  kg_save_key3_8 or
	  kg_save_key3_9 or
	  kg_save_key3_10 or
	  kg_save_key3_11 or
	  kg_save_key3_12 or kg_save_key3_13 or kg_save_key3_14)
  begin
    case (maxround)
      4'd0:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039 =
	      kg_save_key3_0;
      4'd1:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039 =
	      kg_save_key3_1;
      4'd2:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039 =
	      kg_save_key3_2;
      4'd3:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039 =
	      kg_save_key3_3;
      4'd4:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039 =
	      kg_save_key3_4;
      4'd5:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039 =
	      kg_save_key3_5;
      4'd6:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039 =
	      kg_save_key3_6;
      4'd7:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039 =
	      kg_save_key3_7;
      4'd8:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039 =
	      kg_save_key3_8;
      4'd9:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039 =
	      kg_save_key3_9;
      4'd10:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039 =
	      kg_save_key3_10;
      4'd11:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039 =
	      kg_save_key3_11;
      4'd12:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039 =
	      kg_save_key3_12;
      4'd13:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039 =
	      kg_save_key3_13;
      4'd14:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039 =
	      kg_save_key3_14;
      4'd15:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2039 =
	      32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(roundnumber__h73726 or
	  kg_save_key3_0 or
	  kg_save_key3_1 or
	  kg_save_key3_2 or
	  kg_save_key3_3 or
	  kg_save_key3_4 or
	  kg_save_key3_5 or
	  kg_save_key3_6 or
	  kg_save_key3_7 or
	  kg_save_key3_8 or
	  kg_save_key3_9 or
	  kg_save_key3_10 or
	  kg_save_key3_11 or
	  kg_save_key3_12 or kg_save_key3_13 or kg_save_key3_14)
  begin
    case (roundnumber__h73726)
      4'd0:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116 =
	      kg_save_key3_0;
      4'd1:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116 =
	      kg_save_key3_1;
      4'd2:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116 =
	      kg_save_key3_2;
      4'd3:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116 =
	      kg_save_key3_3;
      4'd4:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116 =
	      kg_save_key3_4;
      4'd5:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116 =
	      kg_save_key3_5;
      4'd6:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116 =
	      kg_save_key3_6;
      4'd7:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116 =
	      kg_save_key3_7;
      4'd8:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116 =
	      kg_save_key3_8;
      4'd9:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116 =
	      kg_save_key3_9;
      4'd10:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116 =
	      kg_save_key3_10;
      4'd11:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116 =
	      kg_save_key3_11;
      4'd12:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116 =
	      kg_save_key3_12;
      4'd13:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116 =
	      kg_save_key3_13;
      4'd14:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116 =
	      kg_save_key3_14;
      4'd15:
	  SEL_ARR_kg_save_key3_0_023_kg_save_key3_1_024__ETC___d2116 =
	      32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(counter or
	  kg_round_key_done_0 or
	  kg_round_key_done_1 or
	  kg_round_key_done_2 or
	  kg_round_key_done_3 or
	  kg_round_key_done_4 or
	  kg_round_key_done_5 or
	  kg_round_key_done_6 or
	  kg_round_key_done_7 or
	  kg_round_key_done_8 or
	  kg_round_key_done_9 or
	  kg_round_key_done_10 or
	  kg_round_key_done_11 or
	  kg_round_key_done_12 or
	  kg_round_key_done_13 or kg_round_key_done_14)
  begin
    case (counter)
      4'd0:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109 =
	      kg_round_key_done_0;
      4'd1:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109 =
	      kg_round_key_done_1;
      4'd2:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109 =
	      kg_round_key_done_2;
      4'd3:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109 =
	      kg_round_key_done_3;
      4'd4:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109 =
	      kg_round_key_done_4;
      4'd5:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109 =
	      kg_round_key_done_5;
      4'd6:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109 =
	      kg_round_key_done_6;
      4'd7:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109 =
	      kg_round_key_done_7;
      4'd8:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109 =
	      kg_round_key_done_8;
      4'd9:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109 =
	      kg_round_key_done_9;
      4'd10:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109 =
	      kg_round_key_done_10;
      4'd11:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109 =
	      kg_round_key_done_11;
      4'd12:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109 =
	      kg_round_key_done_12;
      4'd13:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109 =
	      kg_round_key_done_13;
      4'd14:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109 =
	      kg_round_key_done_14;
      4'd15:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d2109 =
	      1'b0 /* unspecified value */ ;
    endcase
  end
  always@(maxround or
	  kg_round_key_done_0 or
	  kg_round_key_done_1 or
	  kg_round_key_done_2 or
	  kg_round_key_done_3 or
	  kg_round_key_done_4 or
	  kg_round_key_done_5 or
	  kg_round_key_done_6 or
	  kg_round_key_done_7 or
	  kg_round_key_done_8 or
	  kg_round_key_done_9 or
	  kg_round_key_done_10 or
	  kg_round_key_done_11 or
	  kg_round_key_done_12 or
	  kg_round_key_done_13 or kg_round_key_done_14)
  begin
    case (maxround)
      4'd0:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970 =
	      kg_round_key_done_0;
      4'd1:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970 =
	      kg_round_key_done_1;
      4'd2:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970 =
	      kg_round_key_done_2;
      4'd3:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970 =
	      kg_round_key_done_3;
      4'd4:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970 =
	      kg_round_key_done_4;
      4'd5:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970 =
	      kg_round_key_done_5;
      4'd6:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970 =
	      kg_round_key_done_6;
      4'd7:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970 =
	      kg_round_key_done_7;
      4'd8:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970 =
	      kg_round_key_done_8;
      4'd9:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970 =
	      kg_round_key_done_9;
      4'd10:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970 =
	      kg_round_key_done_10;
      4'd11:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970 =
	      kg_round_key_done_11;
      4'd12:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970 =
	      kg_round_key_done_12;
      4'd13:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970 =
	      kg_round_key_done_13;
      4'd14:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970 =
	      kg_round_key_done_14;
      4'd15:
	  SEL_ARR_kg_round_key_done_0_953_kg_round_key_d_ETC___d1970 =
	      1'b0 /* unspecified value */ ;
    endcase
  end
  always@(kg_key_length or kg_round_number_8_EQ_kg_maxrounds_9___d104)
  begin
    case (kg_key_length)
      2'd0, 2'd1:
	  CASE_kg_key_length_0_2_1_2_IF_kg_round_number__ETC__q1 = 3'd2;
      default: CASE_kg_key_length_0_2_1_2_IF_kg_round_number__ETC__q1 =
		   kg_round_number_8_EQ_kg_maxrounds_9___d104 ? 3'd0 : 3'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        _unnamed_ <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ciphertext <= `BSV_ASSIGNMENT_DELAY 128'd128;
	col0 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	col1 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	col2 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	col3 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	colout0 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	colout1 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	colout2 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	colout3 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	counter <= `BSV_ASSIGNMENT_DELAY 4'd4;
	decrypt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dr_c0_col_in <= `BSV_ASSIGNMENT_DELAY 32'd32;
	dr_c1_col_in <= `BSV_ASSIGNMENT_DELAY 32'd32;
	dr_c2_col_in <= `BSV_ASSIGNMENT_DELAY 32'd32;
	dr_c3_col_in <= `BSV_ASSIGNMENT_DELAY 32'd32;
	dr_col__0 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__1 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__10 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__11 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__12 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__13 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__14 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__15 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__2 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__3 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__4 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__5 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__6 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__7 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__8 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_col__9 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_colout0 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	dr_colout1 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	dr_colout2 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	dr_colout3 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	dr_counter <= `BSV_ASSIGNMENT_DELAY 8'd8;
	dr_decrypt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dr_last_round <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dr_new_round <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dr_rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dr_round_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dr_sboxes_out_0 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_1 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_10 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_11 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_12 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_13 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_14 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_15 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_2 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_3 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_4 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_5 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_6 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_7 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_8 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sboxes_out_9 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_0 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_1 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_10 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_11 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_12 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_13 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_14 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_15 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_2 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_3 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_4 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_5 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_6 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_7 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_8 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	dr_sub_col_9 <= `BSV_ASSIGNMENT_DELAY 8'd32;
	key <= `BSV_ASSIGNMENT_DELAY 128'd128;
	kg_aes256_subcol4 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_counter <= `BSV_ASSIGNMENT_DELAY 4'd8;
	kg_key_length <= `BSV_ASSIGNMENT_DELAY 2'd0;
	kg_key_saved <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_last_col_sub_rot <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_maxrounds <= `BSV_ASSIGNMENT_DELAY 5'd10;
	kg_prev_key0 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_prev_key1 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_prev_key2 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_prev_key3 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_prev_key4 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_prev_key5 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_prev_key6 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_prev_key7 <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_rci <= `BSV_ASSIGNMENT_DELAY 4'd0;
	kg_rcon <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_rg_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	kg_rot_prev_key <= `BSV_ASSIGNMENT_DELAY 32'd32;
	kg_round_key_done_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_10 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_11 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_12 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_13 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_14 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_8 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_key_done_9 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_round_number <= `BSV_ASSIGNMENT_DELAY 5'd4;
	kg_round_toggle_192 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	kg_sbox_out <= `BSV_ASSIGNMENT_DELAY 8'd8;
	maxround <= `BSV_ASSIGNMENT_DELAY 4'd10;
	new_round <= `BSV_ASSIGNMENT_DELAY 1'd0;
	plaintext <= `BSV_ASSIGNMENT_DELAY 128'd128;
	rg_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (_unnamed_$EN) _unnamed_ <= `BSV_ASSIGNMENT_DELAY _unnamed_$D_IN;
	if (ciphertext$EN)
	  ciphertext <= `BSV_ASSIGNMENT_DELAY ciphertext$D_IN;
	if (col0$EN) col0 <= `BSV_ASSIGNMENT_DELAY col0$D_IN;
	if (col1$EN) col1 <= `BSV_ASSIGNMENT_DELAY col1$D_IN;
	if (col2$EN) col2 <= `BSV_ASSIGNMENT_DELAY col2$D_IN;
	if (col3$EN) col3 <= `BSV_ASSIGNMENT_DELAY col3$D_IN;
	if (colout0$EN) colout0 <= `BSV_ASSIGNMENT_DELAY colout0$D_IN;
	if (colout1$EN) colout1 <= `BSV_ASSIGNMENT_DELAY colout1$D_IN;
	if (colout2$EN) colout2 <= `BSV_ASSIGNMENT_DELAY colout2$D_IN;
	if (colout3$EN) colout3 <= `BSV_ASSIGNMENT_DELAY colout3$D_IN;
	if (counter$EN) counter <= `BSV_ASSIGNMENT_DELAY counter$D_IN;
	if (decrypt$EN) decrypt <= `BSV_ASSIGNMENT_DELAY decrypt$D_IN;
	if (dr_c0_col_in$EN)
	  dr_c0_col_in <= `BSV_ASSIGNMENT_DELAY dr_c0_col_in$D_IN;
	if (dr_c1_col_in$EN)
	  dr_c1_col_in <= `BSV_ASSIGNMENT_DELAY dr_c1_col_in$D_IN;
	if (dr_c2_col_in$EN)
	  dr_c2_col_in <= `BSV_ASSIGNMENT_DELAY dr_c2_col_in$D_IN;
	if (dr_c3_col_in$EN)
	  dr_c3_col_in <= `BSV_ASSIGNMENT_DELAY dr_c3_col_in$D_IN;
	if (dr_col__0$EN) dr_col__0 <= `BSV_ASSIGNMENT_DELAY dr_col__0$D_IN;
	if (dr_col__1$EN) dr_col__1 <= `BSV_ASSIGNMENT_DELAY dr_col__1$D_IN;
	if (dr_col__10$EN)
	  dr_col__10 <= `BSV_ASSIGNMENT_DELAY dr_col__10$D_IN;
	if (dr_col__11$EN)
	  dr_col__11 <= `BSV_ASSIGNMENT_DELAY dr_col__11$D_IN;
	if (dr_col__12$EN)
	  dr_col__12 <= `BSV_ASSIGNMENT_DELAY dr_col__12$D_IN;
	if (dr_col__13$EN)
	  dr_col__13 <= `BSV_ASSIGNMENT_DELAY dr_col__13$D_IN;
	if (dr_col__14$EN)
	  dr_col__14 <= `BSV_ASSIGNMENT_DELAY dr_col__14$D_IN;
	if (dr_col__15$EN)
	  dr_col__15 <= `BSV_ASSIGNMENT_DELAY dr_col__15$D_IN;
	if (dr_col__2$EN) dr_col__2 <= `BSV_ASSIGNMENT_DELAY dr_col__2$D_IN;
	if (dr_col__3$EN) dr_col__3 <= `BSV_ASSIGNMENT_DELAY dr_col__3$D_IN;
	if (dr_col__4$EN) dr_col__4 <= `BSV_ASSIGNMENT_DELAY dr_col__4$D_IN;
	if (dr_col__5$EN) dr_col__5 <= `BSV_ASSIGNMENT_DELAY dr_col__5$D_IN;
	if (dr_col__6$EN) dr_col__6 <= `BSV_ASSIGNMENT_DELAY dr_col__6$D_IN;
	if (dr_col__7$EN) dr_col__7 <= `BSV_ASSIGNMENT_DELAY dr_col__7$D_IN;
	if (dr_col__8$EN) dr_col__8 <= `BSV_ASSIGNMENT_DELAY dr_col__8$D_IN;
	if (dr_col__9$EN) dr_col__9 <= `BSV_ASSIGNMENT_DELAY dr_col__9$D_IN;
	if (dr_colout0$EN)
	  dr_colout0 <= `BSV_ASSIGNMENT_DELAY dr_colout0$D_IN;
	if (dr_colout1$EN)
	  dr_colout1 <= `BSV_ASSIGNMENT_DELAY dr_colout1$D_IN;
	if (dr_colout2$EN)
	  dr_colout2 <= `BSV_ASSIGNMENT_DELAY dr_colout2$D_IN;
	if (dr_colout3$EN)
	  dr_colout3 <= `BSV_ASSIGNMENT_DELAY dr_colout3$D_IN;
	if (dr_counter$EN)
	  dr_counter <= `BSV_ASSIGNMENT_DELAY dr_counter$D_IN;
	if (dr_decrypt$EN)
	  dr_decrypt <= `BSV_ASSIGNMENT_DELAY dr_decrypt$D_IN;
	if (dr_last_round$EN)
	  dr_last_round <= `BSV_ASSIGNMENT_DELAY dr_last_round$D_IN;
	if (dr_new_round$EN)
	  dr_new_round <= `BSV_ASSIGNMENT_DELAY dr_new_round$D_IN;
	if (dr_rg_state$EN)
	  dr_rg_state <= `BSV_ASSIGNMENT_DELAY dr_rg_state$D_IN;
	if (dr_round_done$EN)
	  dr_round_done <= `BSV_ASSIGNMENT_DELAY dr_round_done$D_IN;
	if (dr_sboxes_out_0$EN)
	  dr_sboxes_out_0 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_0$D_IN;
	if (dr_sboxes_out_1$EN)
	  dr_sboxes_out_1 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_1$D_IN;
	if (dr_sboxes_out_10$EN)
	  dr_sboxes_out_10 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_10$D_IN;
	if (dr_sboxes_out_11$EN)
	  dr_sboxes_out_11 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_11$D_IN;
	if (dr_sboxes_out_12$EN)
	  dr_sboxes_out_12 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_12$D_IN;
	if (dr_sboxes_out_13$EN)
	  dr_sboxes_out_13 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_13$D_IN;
	if (dr_sboxes_out_14$EN)
	  dr_sboxes_out_14 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_14$D_IN;
	if (dr_sboxes_out_15$EN)
	  dr_sboxes_out_15 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_15$D_IN;
	if (dr_sboxes_out_2$EN)
	  dr_sboxes_out_2 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_2$D_IN;
	if (dr_sboxes_out_3$EN)
	  dr_sboxes_out_3 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_3$D_IN;
	if (dr_sboxes_out_4$EN)
	  dr_sboxes_out_4 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_4$D_IN;
	if (dr_sboxes_out_5$EN)
	  dr_sboxes_out_5 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_5$D_IN;
	if (dr_sboxes_out_6$EN)
	  dr_sboxes_out_6 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_6$D_IN;
	if (dr_sboxes_out_7$EN)
	  dr_sboxes_out_7 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_7$D_IN;
	if (dr_sboxes_out_8$EN)
	  dr_sboxes_out_8 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_8$D_IN;
	if (dr_sboxes_out_9$EN)
	  dr_sboxes_out_9 <= `BSV_ASSIGNMENT_DELAY dr_sboxes_out_9$D_IN;
	if (dr_sub_col_0$EN)
	  dr_sub_col_0 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_0$D_IN;
	if (dr_sub_col_1$EN)
	  dr_sub_col_1 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_1$D_IN;
	if (dr_sub_col_10$EN)
	  dr_sub_col_10 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_10$D_IN;
	if (dr_sub_col_11$EN)
	  dr_sub_col_11 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_11$D_IN;
	if (dr_sub_col_12$EN)
	  dr_sub_col_12 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_12$D_IN;
	if (dr_sub_col_13$EN)
	  dr_sub_col_13 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_13$D_IN;
	if (dr_sub_col_14$EN)
	  dr_sub_col_14 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_14$D_IN;
	if (dr_sub_col_15$EN)
	  dr_sub_col_15 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_15$D_IN;
	if (dr_sub_col_2$EN)
	  dr_sub_col_2 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_2$D_IN;
	if (dr_sub_col_3$EN)
	  dr_sub_col_3 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_3$D_IN;
	if (dr_sub_col_4$EN)
	  dr_sub_col_4 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_4$D_IN;
	if (dr_sub_col_5$EN)
	  dr_sub_col_5 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_5$D_IN;
	if (dr_sub_col_6$EN)
	  dr_sub_col_6 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_6$D_IN;
	if (dr_sub_col_7$EN)
	  dr_sub_col_7 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_7$D_IN;
	if (dr_sub_col_8$EN)
	  dr_sub_col_8 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_8$D_IN;
	if (dr_sub_col_9$EN)
	  dr_sub_col_9 <= `BSV_ASSIGNMENT_DELAY dr_sub_col_9$D_IN;
	if (key$EN) key <= `BSV_ASSIGNMENT_DELAY key$D_IN;
	if (kg_aes256_subcol4$EN)
	  kg_aes256_subcol4 <= `BSV_ASSIGNMENT_DELAY kg_aes256_subcol4$D_IN;
	if (kg_counter$EN)
	  kg_counter <= `BSV_ASSIGNMENT_DELAY kg_counter$D_IN;
	if (kg_key_length$EN)
	  kg_key_length <= `BSV_ASSIGNMENT_DELAY kg_key_length$D_IN;
	if (kg_key_saved$EN)
	  kg_key_saved <= `BSV_ASSIGNMENT_DELAY kg_key_saved$D_IN;
	if (kg_last_col_sub_rot$EN)
	  kg_last_col_sub_rot <= `BSV_ASSIGNMENT_DELAY
	      kg_last_col_sub_rot$D_IN;
	if (kg_maxrounds$EN)
	  kg_maxrounds <= `BSV_ASSIGNMENT_DELAY kg_maxrounds$D_IN;
	if (kg_prev_key0$EN)
	  kg_prev_key0 <= `BSV_ASSIGNMENT_DELAY kg_prev_key0$D_IN;
	if (kg_prev_key1$EN)
	  kg_prev_key1 <= `BSV_ASSIGNMENT_DELAY kg_prev_key1$D_IN;
	if (kg_prev_key2$EN)
	  kg_prev_key2 <= `BSV_ASSIGNMENT_DELAY kg_prev_key2$D_IN;
	if (kg_prev_key3$EN)
	  kg_prev_key3 <= `BSV_ASSIGNMENT_DELAY kg_prev_key3$D_IN;
	if (kg_prev_key4$EN)
	  kg_prev_key4 <= `BSV_ASSIGNMENT_DELAY kg_prev_key4$D_IN;
	if (kg_prev_key5$EN)
	  kg_prev_key5 <= `BSV_ASSIGNMENT_DELAY kg_prev_key5$D_IN;
	if (kg_prev_key6$EN)
	  kg_prev_key6 <= `BSV_ASSIGNMENT_DELAY kg_prev_key6$D_IN;
	if (kg_prev_key7$EN)
	  kg_prev_key7 <= `BSV_ASSIGNMENT_DELAY kg_prev_key7$D_IN;
	if (kg_rci$EN) kg_rci <= `BSV_ASSIGNMENT_DELAY kg_rci$D_IN;
	if (kg_rcon$EN) kg_rcon <= `BSV_ASSIGNMENT_DELAY kg_rcon$D_IN;
	if (kg_rg_state$EN)
	  kg_rg_state <= `BSV_ASSIGNMENT_DELAY kg_rg_state$D_IN;
	if (kg_rot_prev_key$EN)
	  kg_rot_prev_key <= `BSV_ASSIGNMENT_DELAY kg_rot_prev_key$D_IN;
	if (kg_round_key_done_0$EN)
	  kg_round_key_done_0 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_0$D_IN;
	if (kg_round_key_done_1$EN)
	  kg_round_key_done_1 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_1$D_IN;
	if (kg_round_key_done_10$EN)
	  kg_round_key_done_10 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_10$D_IN;
	if (kg_round_key_done_11$EN)
	  kg_round_key_done_11 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_11$D_IN;
	if (kg_round_key_done_12$EN)
	  kg_round_key_done_12 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_12$D_IN;
	if (kg_round_key_done_13$EN)
	  kg_round_key_done_13 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_13$D_IN;
	if (kg_round_key_done_14$EN)
	  kg_round_key_done_14 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_14$D_IN;
	if (kg_round_key_done_2$EN)
	  kg_round_key_done_2 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_2$D_IN;
	if (kg_round_key_done_3$EN)
	  kg_round_key_done_3 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_3$D_IN;
	if (kg_round_key_done_4$EN)
	  kg_round_key_done_4 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_4$D_IN;
	if (kg_round_key_done_5$EN)
	  kg_round_key_done_5 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_5$D_IN;
	if (kg_round_key_done_6$EN)
	  kg_round_key_done_6 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_6$D_IN;
	if (kg_round_key_done_7$EN)
	  kg_round_key_done_7 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_7$D_IN;
	if (kg_round_key_done_8$EN)
	  kg_round_key_done_8 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_8$D_IN;
	if (kg_round_key_done_9$EN)
	  kg_round_key_done_9 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_key_done_9$D_IN;
	if (kg_round_number$EN)
	  kg_round_number <= `BSV_ASSIGNMENT_DELAY kg_round_number$D_IN;
	if (kg_round_toggle_192$EN)
	  kg_round_toggle_192 <= `BSV_ASSIGNMENT_DELAY
	      kg_round_toggle_192$D_IN;
	if (kg_sbox_out$EN)
	  kg_sbox_out <= `BSV_ASSIGNMENT_DELAY kg_sbox_out$D_IN;
	if (maxround$EN) maxround <= `BSV_ASSIGNMENT_DELAY maxround$D_IN;
	if (new_round$EN) new_round <= `BSV_ASSIGNMENT_DELAY new_round$D_IN;
	if (plaintext$EN) plaintext <= `BSV_ASSIGNMENT_DELAY plaintext$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (kg_save_key0_0$EN)
      kg_save_key0_0 <= `BSV_ASSIGNMENT_DELAY kg_save_key0_0$D_IN;
    if (kg_save_key0_1$EN)
      kg_save_key0_1 <= `BSV_ASSIGNMENT_DELAY kg_save_key0_1$D_IN;
    if (kg_save_key0_10$EN)
      kg_save_key0_10 <= `BSV_ASSIGNMENT_DELAY kg_save_key0_10$D_IN;
    if (kg_save_key0_11$EN)
      kg_save_key0_11 <= `BSV_ASSIGNMENT_DELAY kg_save_key0_11$D_IN;
    if (kg_save_key0_12$EN)
      kg_save_key0_12 <= `BSV_ASSIGNMENT_DELAY kg_save_key0_12$D_IN;
    if (kg_save_key0_13$EN)
      kg_save_key0_13 <= `BSV_ASSIGNMENT_DELAY kg_save_key0_13$D_IN;
    if (kg_save_key0_14$EN)
      kg_save_key0_14 <= `BSV_ASSIGNMENT_DELAY kg_save_key0_14$D_IN;
    if (kg_save_key0_2$EN)
      kg_save_key0_2 <= `BSV_ASSIGNMENT_DELAY kg_save_key0_2$D_IN;
    if (kg_save_key0_3$EN)
      kg_save_key0_3 <= `BSV_ASSIGNMENT_DELAY kg_save_key0_3$D_IN;
    if (kg_save_key0_4$EN)
      kg_save_key0_4 <= `BSV_ASSIGNMENT_DELAY kg_save_key0_4$D_IN;
    if (kg_save_key0_5$EN)
      kg_save_key0_5 <= `BSV_ASSIGNMENT_DELAY kg_save_key0_5$D_IN;
    if (kg_save_key0_6$EN)
      kg_save_key0_6 <= `BSV_ASSIGNMENT_DELAY kg_save_key0_6$D_IN;
    if (kg_save_key0_7$EN)
      kg_save_key0_7 <= `BSV_ASSIGNMENT_DELAY kg_save_key0_7$D_IN;
    if (kg_save_key0_8$EN)
      kg_save_key0_8 <= `BSV_ASSIGNMENT_DELAY kg_save_key0_8$D_IN;
    if (kg_save_key0_9$EN)
      kg_save_key0_9 <= `BSV_ASSIGNMENT_DELAY kg_save_key0_9$D_IN;
    if (kg_save_key1_0$EN)
      kg_save_key1_0 <= `BSV_ASSIGNMENT_DELAY kg_save_key1_0$D_IN;
    if (kg_save_key1_1$EN)
      kg_save_key1_1 <= `BSV_ASSIGNMENT_DELAY kg_save_key1_1$D_IN;
    if (kg_save_key1_10$EN)
      kg_save_key1_10 <= `BSV_ASSIGNMENT_DELAY kg_save_key1_10$D_IN;
    if (kg_save_key1_11$EN)
      kg_save_key1_11 <= `BSV_ASSIGNMENT_DELAY kg_save_key1_11$D_IN;
    if (kg_save_key1_12$EN)
      kg_save_key1_12 <= `BSV_ASSIGNMENT_DELAY kg_save_key1_12$D_IN;
    if (kg_save_key1_13$EN)
      kg_save_key1_13 <= `BSV_ASSIGNMENT_DELAY kg_save_key1_13$D_IN;
    if (kg_save_key1_14$EN)
      kg_save_key1_14 <= `BSV_ASSIGNMENT_DELAY kg_save_key1_14$D_IN;
    if (kg_save_key1_2$EN)
      kg_save_key1_2 <= `BSV_ASSIGNMENT_DELAY kg_save_key1_2$D_IN;
    if (kg_save_key1_3$EN)
      kg_save_key1_3 <= `BSV_ASSIGNMENT_DELAY kg_save_key1_3$D_IN;
    if (kg_save_key1_4$EN)
      kg_save_key1_4 <= `BSV_ASSIGNMENT_DELAY kg_save_key1_4$D_IN;
    if (kg_save_key1_5$EN)
      kg_save_key1_5 <= `BSV_ASSIGNMENT_DELAY kg_save_key1_5$D_IN;
    if (kg_save_key1_6$EN)
      kg_save_key1_6 <= `BSV_ASSIGNMENT_DELAY kg_save_key1_6$D_IN;
    if (kg_save_key1_7$EN)
      kg_save_key1_7 <= `BSV_ASSIGNMENT_DELAY kg_save_key1_7$D_IN;
    if (kg_save_key1_8$EN)
      kg_save_key1_8 <= `BSV_ASSIGNMENT_DELAY kg_save_key1_8$D_IN;
    if (kg_save_key1_9$EN)
      kg_save_key1_9 <= `BSV_ASSIGNMENT_DELAY kg_save_key1_9$D_IN;
    if (kg_save_key2_0$EN)
      kg_save_key2_0 <= `BSV_ASSIGNMENT_DELAY kg_save_key2_0$D_IN;
    if (kg_save_key2_1$EN)
      kg_save_key2_1 <= `BSV_ASSIGNMENT_DELAY kg_save_key2_1$D_IN;
    if (kg_save_key2_10$EN)
      kg_save_key2_10 <= `BSV_ASSIGNMENT_DELAY kg_save_key2_10$D_IN;
    if (kg_save_key2_11$EN)
      kg_save_key2_11 <= `BSV_ASSIGNMENT_DELAY kg_save_key2_11$D_IN;
    if (kg_save_key2_12$EN)
      kg_save_key2_12 <= `BSV_ASSIGNMENT_DELAY kg_save_key2_12$D_IN;
    if (kg_save_key2_13$EN)
      kg_save_key2_13 <= `BSV_ASSIGNMENT_DELAY kg_save_key2_13$D_IN;
    if (kg_save_key2_14$EN)
      kg_save_key2_14 <= `BSV_ASSIGNMENT_DELAY kg_save_key2_14$D_IN;
    if (kg_save_key2_2$EN)
      kg_save_key2_2 <= `BSV_ASSIGNMENT_DELAY kg_save_key2_2$D_IN;
    if (kg_save_key2_3$EN)
      kg_save_key2_3 <= `BSV_ASSIGNMENT_DELAY kg_save_key2_3$D_IN;
    if (kg_save_key2_4$EN)
      kg_save_key2_4 <= `BSV_ASSIGNMENT_DELAY kg_save_key2_4$D_IN;
    if (kg_save_key2_5$EN)
      kg_save_key2_5 <= `BSV_ASSIGNMENT_DELAY kg_save_key2_5$D_IN;
    if (kg_save_key2_6$EN)
      kg_save_key2_6 <= `BSV_ASSIGNMENT_DELAY kg_save_key2_6$D_IN;
    if (kg_save_key2_7$EN)
      kg_save_key2_7 <= `BSV_ASSIGNMENT_DELAY kg_save_key2_7$D_IN;
    if (kg_save_key2_8$EN)
      kg_save_key2_8 <= `BSV_ASSIGNMENT_DELAY kg_save_key2_8$D_IN;
    if (kg_save_key2_9$EN)
      kg_save_key2_9 <= `BSV_ASSIGNMENT_DELAY kg_save_key2_9$D_IN;
    if (kg_save_key3_0$EN)
      kg_save_key3_0 <= `BSV_ASSIGNMENT_DELAY kg_save_key3_0$D_IN;
    if (kg_save_key3_1$EN)
      kg_save_key3_1 <= `BSV_ASSIGNMENT_DELAY kg_save_key3_1$D_IN;
    if (kg_save_key3_10$EN)
      kg_save_key3_10 <= `BSV_ASSIGNMENT_DELAY kg_save_key3_10$D_IN;
    if (kg_save_key3_11$EN)
      kg_save_key3_11 <= `BSV_ASSIGNMENT_DELAY kg_save_key3_11$D_IN;
    if (kg_save_key3_12$EN)
      kg_save_key3_12 <= `BSV_ASSIGNMENT_DELAY kg_save_key3_12$D_IN;
    if (kg_save_key3_13$EN)
      kg_save_key3_13 <= `BSV_ASSIGNMENT_DELAY kg_save_key3_13$D_IN;
    if (kg_save_key3_14$EN)
      kg_save_key3_14 <= `BSV_ASSIGNMENT_DELAY kg_save_key3_14$D_IN;
    if (kg_save_key3_2$EN)
      kg_save_key3_2 <= `BSV_ASSIGNMENT_DELAY kg_save_key3_2$D_IN;
    if (kg_save_key3_3$EN)
      kg_save_key3_3 <= `BSV_ASSIGNMENT_DELAY kg_save_key3_3$D_IN;
    if (kg_save_key3_4$EN)
      kg_save_key3_4 <= `BSV_ASSIGNMENT_DELAY kg_save_key3_4$D_IN;
    if (kg_save_key3_5$EN)
      kg_save_key3_5 <= `BSV_ASSIGNMENT_DELAY kg_save_key3_5$D_IN;
    if (kg_save_key3_6$EN)
      kg_save_key3_6 <= `BSV_ASSIGNMENT_DELAY kg_save_key3_6$D_IN;
    if (kg_save_key3_7$EN)
      kg_save_key3_7 <= `BSV_ASSIGNMENT_DELAY kg_save_key3_7$D_IN;
    if (kg_save_key3_8$EN)
      kg_save_key3_8 <= `BSV_ASSIGNMENT_DELAY kg_save_key3_8$D_IN;
    if (kg_save_key3_9$EN)
      kg_save_key3_9 <= `BSV_ASSIGNMENT_DELAY kg_save_key3_9$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    _unnamed_ = 1'h0;
    ciphertext = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    col0 = 32'hAAAAAAAA;
    col1 = 32'hAAAAAAAA;
    col2 = 32'hAAAAAAAA;
    col3 = 32'hAAAAAAAA;
    colout0 = 32'hAAAAAAAA;
    colout1 = 32'hAAAAAAAA;
    colout2 = 32'hAAAAAAAA;
    colout3 = 32'hAAAAAAAA;
    counter = 4'hA;
    decrypt = 1'h0;
    dr_c0_col_in = 32'hAAAAAAAA;
    dr_c1_col_in = 32'hAAAAAAAA;
    dr_c2_col_in = 32'hAAAAAAAA;
    dr_c3_col_in = 32'hAAAAAAAA;
    dr_col__0 = 8'hAA;
    dr_col__1 = 8'hAA;
    dr_col__10 = 8'hAA;
    dr_col__11 = 8'hAA;
    dr_col__12 = 8'hAA;
    dr_col__13 = 8'hAA;
    dr_col__14 = 8'hAA;
    dr_col__15 = 8'hAA;
    dr_col__2 = 8'hAA;
    dr_col__3 = 8'hAA;
    dr_col__4 = 8'hAA;
    dr_col__5 = 8'hAA;
    dr_col__6 = 8'hAA;
    dr_col__7 = 8'hAA;
    dr_col__8 = 8'hAA;
    dr_col__9 = 8'hAA;
    dr_colout0 = 32'hAAAAAAAA;
    dr_colout1 = 32'hAAAAAAAA;
    dr_colout2 = 32'hAAAAAAAA;
    dr_colout3 = 32'hAAAAAAAA;
    dr_counter = 8'hAA;
    dr_decrypt = 1'h0;
    dr_last_round = 1'h0;
    dr_new_round = 1'h0;
    dr_rg_state = 4'hA;
    dr_round_done = 1'h0;
    dr_sboxes_out_0 = 8'hAA;
    dr_sboxes_out_1 = 8'hAA;
    dr_sboxes_out_10 = 8'hAA;
    dr_sboxes_out_11 = 8'hAA;
    dr_sboxes_out_12 = 8'hAA;
    dr_sboxes_out_13 = 8'hAA;
    dr_sboxes_out_14 = 8'hAA;
    dr_sboxes_out_15 = 8'hAA;
    dr_sboxes_out_2 = 8'hAA;
    dr_sboxes_out_3 = 8'hAA;
    dr_sboxes_out_4 = 8'hAA;
    dr_sboxes_out_5 = 8'hAA;
    dr_sboxes_out_6 = 8'hAA;
    dr_sboxes_out_7 = 8'hAA;
    dr_sboxes_out_8 = 8'hAA;
    dr_sboxes_out_9 = 8'hAA;
    dr_sub_col_0 = 8'hAA;
    dr_sub_col_1 = 8'hAA;
    dr_sub_col_10 = 8'hAA;
    dr_sub_col_11 = 8'hAA;
    dr_sub_col_12 = 8'hAA;
    dr_sub_col_13 = 8'hAA;
    dr_sub_col_14 = 8'hAA;
    dr_sub_col_15 = 8'hAA;
    dr_sub_col_2 = 8'hAA;
    dr_sub_col_3 = 8'hAA;
    dr_sub_col_4 = 8'hAA;
    dr_sub_col_5 = 8'hAA;
    dr_sub_col_6 = 8'hAA;
    dr_sub_col_7 = 8'hAA;
    dr_sub_col_8 = 8'hAA;
    dr_sub_col_9 = 8'hAA;
    key = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    kg_aes256_subcol4 = 32'hAAAAAAAA;
    kg_counter = 4'hA;
    kg_key_length = 2'h2;
    kg_key_saved = 1'h0;
    kg_last_col_sub_rot = 32'hAAAAAAAA;
    kg_maxrounds = 5'h0A;
    kg_prev_key0 = 32'hAAAAAAAA;
    kg_prev_key1 = 32'hAAAAAAAA;
    kg_prev_key2 = 32'hAAAAAAAA;
    kg_prev_key3 = 32'hAAAAAAAA;
    kg_prev_key4 = 32'hAAAAAAAA;
    kg_prev_key5 = 32'hAAAAAAAA;
    kg_prev_key6 = 32'hAAAAAAAA;
    kg_prev_key7 = 32'hAAAAAAAA;
    kg_rci = 4'hA;
    kg_rcon = 32'hAAAAAAAA;
    kg_rg_state = 3'h2;
    kg_rot_prev_key = 32'hAAAAAAAA;
    kg_round_key_done_0 = 1'h0;
    kg_round_key_done_1 = 1'h0;
    kg_round_key_done_10 = 1'h0;
    kg_round_key_done_11 = 1'h0;
    kg_round_key_done_12 = 1'h0;
    kg_round_key_done_13 = 1'h0;
    kg_round_key_done_14 = 1'h0;
    kg_round_key_done_2 = 1'h0;
    kg_round_key_done_3 = 1'h0;
    kg_round_key_done_4 = 1'h0;
    kg_round_key_done_5 = 1'h0;
    kg_round_key_done_6 = 1'h0;
    kg_round_key_done_7 = 1'h0;
    kg_round_key_done_8 = 1'h0;
    kg_round_key_done_9 = 1'h0;
    kg_round_number = 5'h0A;
    kg_round_toggle_192 = 1'h0;
    kg_save_key0_0 = 32'hAAAAAAAA;
    kg_save_key0_1 = 32'hAAAAAAAA;
    kg_save_key0_10 = 32'hAAAAAAAA;
    kg_save_key0_11 = 32'hAAAAAAAA;
    kg_save_key0_12 = 32'hAAAAAAAA;
    kg_save_key0_13 = 32'hAAAAAAAA;
    kg_save_key0_14 = 32'hAAAAAAAA;
    kg_save_key0_2 = 32'hAAAAAAAA;
    kg_save_key0_3 = 32'hAAAAAAAA;
    kg_save_key0_4 = 32'hAAAAAAAA;
    kg_save_key0_5 = 32'hAAAAAAAA;
    kg_save_key0_6 = 32'hAAAAAAAA;
    kg_save_key0_7 = 32'hAAAAAAAA;
    kg_save_key0_8 = 32'hAAAAAAAA;
    kg_save_key0_9 = 32'hAAAAAAAA;
    kg_save_key1_0 = 32'hAAAAAAAA;
    kg_save_key1_1 = 32'hAAAAAAAA;
    kg_save_key1_10 = 32'hAAAAAAAA;
    kg_save_key1_11 = 32'hAAAAAAAA;
    kg_save_key1_12 = 32'hAAAAAAAA;
    kg_save_key1_13 = 32'hAAAAAAAA;
    kg_save_key1_14 = 32'hAAAAAAAA;
    kg_save_key1_2 = 32'hAAAAAAAA;
    kg_save_key1_3 = 32'hAAAAAAAA;
    kg_save_key1_4 = 32'hAAAAAAAA;
    kg_save_key1_5 = 32'hAAAAAAAA;
    kg_save_key1_6 = 32'hAAAAAAAA;
    kg_save_key1_7 = 32'hAAAAAAAA;
    kg_save_key1_8 = 32'hAAAAAAAA;
    kg_save_key1_9 = 32'hAAAAAAAA;
    kg_save_key2_0 = 32'hAAAAAAAA;
    kg_save_key2_1 = 32'hAAAAAAAA;
    kg_save_key2_10 = 32'hAAAAAAAA;
    kg_save_key2_11 = 32'hAAAAAAAA;
    kg_save_key2_12 = 32'hAAAAAAAA;
    kg_save_key2_13 = 32'hAAAAAAAA;
    kg_save_key2_14 = 32'hAAAAAAAA;
    kg_save_key2_2 = 32'hAAAAAAAA;
    kg_save_key2_3 = 32'hAAAAAAAA;
    kg_save_key2_4 = 32'hAAAAAAAA;
    kg_save_key2_5 = 32'hAAAAAAAA;
    kg_save_key2_6 = 32'hAAAAAAAA;
    kg_save_key2_7 = 32'hAAAAAAAA;
    kg_save_key2_8 = 32'hAAAAAAAA;
    kg_save_key2_9 = 32'hAAAAAAAA;
    kg_save_key3_0 = 32'hAAAAAAAA;
    kg_save_key3_1 = 32'hAAAAAAAA;
    kg_save_key3_10 = 32'hAAAAAAAA;
    kg_save_key3_11 = 32'hAAAAAAAA;
    kg_save_key3_12 = 32'hAAAAAAAA;
    kg_save_key3_13 = 32'hAAAAAAAA;
    kg_save_key3_14 = 32'hAAAAAAAA;
    kg_save_key3_2 = 32'hAAAAAAAA;
    kg_save_key3_3 = 32'hAAAAAAAA;
    kg_save_key3_4 = 32'hAAAAAAAA;
    kg_save_key3_5 = 32'hAAAAAAAA;
    kg_save_key3_6 = 32'hAAAAAAAA;
    kg_save_key3_7 = 32'hAAAAAAAA;
    kg_save_key3_8 = 32'hAAAAAAAA;
    kg_save_key3_9 = 32'hAAAAAAAA;
    kg_sbox_out = 8'hAA;
    maxround = 4'hA;
    new_round = 1'h0;
    plaintext = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_state = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkAES

